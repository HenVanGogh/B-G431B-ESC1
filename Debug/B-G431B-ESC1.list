
B-G431B-ESC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2a0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  0800e478  0800e478  0001e478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e784  0800e784  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800e784  0800e784  0001e784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e78c  0800e78c  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e78c  0800e78c  0001e78c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e790  0800e790  0001e790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800e794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000386c  200000ac  0800e840  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003918  0800e840  00023918  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026be4  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047b5  00000000  00000000  00046cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c28  00000000  00000000  0004b478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a40  00000000  00000000  0004d0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023c99  00000000  00000000  0004eae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021317  00000000  00000000  00072779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5c97  00000000  00000000  00093a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00179727  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d8c  00000000  00000000  0017977c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000ac 	.word	0x200000ac
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800e460 	.word	0x0800e460

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000b0 	.word	0x200000b0
 8000214:	0800e460 	.word	0x0800e460

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b96e 	b.w	8000ea8 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	4604      	mov	r4, r0
 8000bec:	468c      	mov	ip, r1
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f040 8083 	bne.w	8000cfa <__udivmoddi4+0x116>
 8000bf4:	428a      	cmp	r2, r1
 8000bf6:	4617      	mov	r7, r2
 8000bf8:	d947      	bls.n	8000c8a <__udivmoddi4+0xa6>
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	b142      	cbz	r2, 8000c12 <__udivmoddi4+0x2e>
 8000c00:	f1c2 0020 	rsb	r0, r2, #32
 8000c04:	fa24 f000 	lsr.w	r0, r4, r0
 8000c08:	4091      	lsls	r1, r2
 8000c0a:	4097      	lsls	r7, r2
 8000c0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000c10:	4094      	lsls	r4, r2
 8000c12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c16:	0c23      	lsrs	r3, r4, #16
 8000c18:	fbbc f6f8 	udiv	r6, ip, r8
 8000c1c:	fa1f fe87 	uxth.w	lr, r7
 8000c20:	fb08 c116 	mls	r1, r8, r6, ip
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb06 f10e 	mul.w	r1, r6, lr
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d909      	bls.n	8000c44 <__udivmoddi4+0x60>
 8000c30:	18fb      	adds	r3, r7, r3
 8000c32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c36:	f080 8119 	bcs.w	8000e6c <__udivmoddi4+0x288>
 8000c3a:	4299      	cmp	r1, r3
 8000c3c:	f240 8116 	bls.w	8000e6c <__udivmoddi4+0x288>
 8000c40:	3e02      	subs	r6, #2
 8000c42:	443b      	add	r3, r7
 8000c44:	1a5b      	subs	r3, r3, r1
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	45a6      	cmp	lr, r4
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x8c>
 8000c5c:	193c      	adds	r4, r7, r4
 8000c5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c62:	f080 8105 	bcs.w	8000e70 <__udivmoddi4+0x28c>
 8000c66:	45a6      	cmp	lr, r4
 8000c68:	f240 8102 	bls.w	8000e70 <__udivmoddi4+0x28c>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	443c      	add	r4, r7
 8000c70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c74:	eba4 040e 	sub.w	r4, r4, lr
 8000c78:	2600      	movs	r6, #0
 8000c7a:	b11d      	cbz	r5, 8000c84 <__udivmoddi4+0xa0>
 8000c7c:	40d4      	lsrs	r4, r2
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e9c5 4300 	strd	r4, r3, [r5]
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	b902      	cbnz	r2, 8000c8e <__udivmoddi4+0xaa>
 8000c8c:	deff      	udf	#255	; 0xff
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	2a00      	cmp	r2, #0
 8000c94:	d150      	bne.n	8000d38 <__udivmoddi4+0x154>
 8000c96:	1bcb      	subs	r3, r1, r7
 8000c98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c9c:	fa1f f887 	uxth.w	r8, r7
 8000ca0:	2601      	movs	r6, #1
 8000ca2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ca6:	0c21      	lsrs	r1, r4, #16
 8000ca8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb0:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	d907      	bls.n	8000cc8 <__udivmoddi4+0xe4>
 8000cb8:	1879      	adds	r1, r7, r1
 8000cba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0xe2>
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	f200 80e9 	bhi.w	8000e98 <__udivmoddi4+0x2b4>
 8000cc6:	4684      	mov	ip, r0
 8000cc8:	1ac9      	subs	r1, r1, r3
 8000cca:	b2a3      	uxth	r3, r4
 8000ccc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cd8:	fb08 f800 	mul.w	r8, r8, r0
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	d907      	bls.n	8000cf0 <__udivmoddi4+0x10c>
 8000ce0:	193c      	adds	r4, r7, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x10a>
 8000ce8:	45a0      	cmp	r8, r4
 8000cea:	f200 80d9 	bhi.w	8000ea0 <__udivmoddi4+0x2bc>
 8000cee:	4618      	mov	r0, r3
 8000cf0:	eba4 0408 	sub.w	r4, r4, r8
 8000cf4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf8:	e7bf      	b.n	8000c7a <__udivmoddi4+0x96>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d909      	bls.n	8000d12 <__udivmoddi4+0x12e>
 8000cfe:	2d00      	cmp	r5, #0
 8000d00:	f000 80b1 	beq.w	8000e66 <__udivmoddi4+0x282>
 8000d04:	2600      	movs	r6, #0
 8000d06:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	4631      	mov	r1, r6
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	fab3 f683 	clz	r6, r3
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d14a      	bne.n	8000db0 <__udivmoddi4+0x1cc>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d302      	bcc.n	8000d24 <__udivmoddi4+0x140>
 8000d1e:	4282      	cmp	r2, r0
 8000d20:	f200 80b8 	bhi.w	8000e94 <__udivmoddi4+0x2b0>
 8000d24:	1a84      	subs	r4, r0, r2
 8000d26:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2d00      	cmp	r5, #0
 8000d30:	d0a8      	beq.n	8000c84 <__udivmoddi4+0xa0>
 8000d32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0xa0>
 8000d38:	f1c2 0320 	rsb	r3, r2, #32
 8000d3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000d40:	4097      	lsls	r7, r2
 8000d42:	fa01 f002 	lsl.w	r0, r1, r2
 8000d46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4a:	40d9      	lsrs	r1, r3
 8000d4c:	4330      	orrs	r0, r6
 8000d4e:	0c03      	lsrs	r3, r0, #16
 8000d50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d54:	fa1f f887 	uxth.w	r8, r7
 8000d58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d60:	fb06 f108 	mul.w	r1, r6, r8
 8000d64:	4299      	cmp	r1, r3
 8000d66:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6a:	d909      	bls.n	8000d80 <__udivmoddi4+0x19c>
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d72:	f080 808d 	bcs.w	8000e90 <__udivmoddi4+0x2ac>
 8000d76:	4299      	cmp	r1, r3
 8000d78:	f240 808a 	bls.w	8000e90 <__udivmoddi4+0x2ac>
 8000d7c:	3e02      	subs	r6, #2
 8000d7e:	443b      	add	r3, r7
 8000d80:	1a5b      	subs	r3, r3, r1
 8000d82:	b281      	uxth	r1, r0
 8000d84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d90:	fb00 f308 	mul.w	r3, r0, r8
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0x1c4>
 8000d98:	1879      	adds	r1, r7, r1
 8000d9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d9e:	d273      	bcs.n	8000e88 <__udivmoddi4+0x2a4>
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d971      	bls.n	8000e88 <__udivmoddi4+0x2a4>
 8000da4:	3802      	subs	r0, #2
 8000da6:	4439      	add	r1, r7
 8000da8:	1acb      	subs	r3, r1, r3
 8000daa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dae:	e778      	b.n	8000ca2 <__udivmoddi4+0xbe>
 8000db0:	f1c6 0c20 	rsb	ip, r6, #32
 8000db4:	fa03 f406 	lsl.w	r4, r3, r6
 8000db8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dbc:	431c      	orrs	r4, r3
 8000dbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000dc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	0c3b      	lsrs	r3, r7, #16
 8000dd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dd6:	fa1f f884 	uxth.w	r8, r4
 8000dda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de2:	fb09 fa08 	mul.w	sl, r9, r8
 8000de6:	458a      	cmp	sl, r1
 8000de8:	fa02 f206 	lsl.w	r2, r2, r6
 8000dec:	fa00 f306 	lsl.w	r3, r0, r6
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x220>
 8000df2:	1861      	adds	r1, r4, r1
 8000df4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df8:	d248      	bcs.n	8000e8c <__udivmoddi4+0x2a8>
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	d946      	bls.n	8000e8c <__udivmoddi4+0x2a8>
 8000dfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000e02:	4421      	add	r1, r4
 8000e04:	eba1 010a 	sub.w	r1, r1, sl
 8000e08:	b2bf      	uxth	r7, r7
 8000e0a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e0e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e12:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e16:	fb00 f808 	mul.w	r8, r0, r8
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x24a>
 8000e1e:	19e7      	adds	r7, r4, r7
 8000e20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e24:	d22e      	bcs.n	8000e84 <__udivmoddi4+0x2a0>
 8000e26:	45b8      	cmp	r8, r7
 8000e28:	d92c      	bls.n	8000e84 <__udivmoddi4+0x2a0>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	4427      	add	r7, r4
 8000e2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e32:	eba7 0708 	sub.w	r7, r7, r8
 8000e36:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3a:	454f      	cmp	r7, r9
 8000e3c:	46c6      	mov	lr, r8
 8000e3e:	4649      	mov	r1, r9
 8000e40:	d31a      	bcc.n	8000e78 <__udivmoddi4+0x294>
 8000e42:	d017      	beq.n	8000e74 <__udivmoddi4+0x290>
 8000e44:	b15d      	cbz	r5, 8000e5e <__udivmoddi4+0x27a>
 8000e46:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4a:	eb67 0701 	sbc.w	r7, r7, r1
 8000e4e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e52:	40f2      	lsrs	r2, r6
 8000e54:	ea4c 0202 	orr.w	r2, ip, r2
 8000e58:	40f7      	lsrs	r7, r6
 8000e5a:	e9c5 2700 	strd	r2, r7, [r5]
 8000e5e:	2600      	movs	r6, #0
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	462e      	mov	r6, r5
 8000e68:	4628      	mov	r0, r5
 8000e6a:	e70b      	b.n	8000c84 <__udivmoddi4+0xa0>
 8000e6c:	4606      	mov	r6, r0
 8000e6e:	e6e9      	b.n	8000c44 <__udivmoddi4+0x60>
 8000e70:	4618      	mov	r0, r3
 8000e72:	e6fd      	b.n	8000c70 <__udivmoddi4+0x8c>
 8000e74:	4543      	cmp	r3, r8
 8000e76:	d2e5      	bcs.n	8000e44 <__udivmoddi4+0x260>
 8000e78:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e7c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e80:	3801      	subs	r0, #1
 8000e82:	e7df      	b.n	8000e44 <__udivmoddi4+0x260>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e7d2      	b.n	8000e2e <__udivmoddi4+0x24a>
 8000e88:	4660      	mov	r0, ip
 8000e8a:	e78d      	b.n	8000da8 <__udivmoddi4+0x1c4>
 8000e8c:	4681      	mov	r9, r0
 8000e8e:	e7b9      	b.n	8000e04 <__udivmoddi4+0x220>
 8000e90:	4666      	mov	r6, ip
 8000e92:	e775      	b.n	8000d80 <__udivmoddi4+0x19c>
 8000e94:	4630      	mov	r0, r6
 8000e96:	e74a      	b.n	8000d2e <__udivmoddi4+0x14a>
 8000e98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e9c:	4439      	add	r1, r7
 8000e9e:	e713      	b.n	8000cc8 <__udivmoddi4+0xe4>
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	443c      	add	r4, r7
 8000ea4:	e724      	b.n	8000cf0 <__udivmoddi4+0x10c>
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <factory_reset_eeprom_regs>:
#include <string.h>

uint8_t regs[REG_MAX];

void factory_reset_eeprom_regs()
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	regs[REG_MODEL_NUMBER_L] = LOW_BYTE(REG_MODEL_NUMBER_VALUE);
 8000eb0:	4b86      	ldr	r3, [pc, #536]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000eb2:	225c      	movs	r2, #92	; 0x5c
 8000eb4:	701a      	strb	r2, [r3, #0]
	regs[REG_MODEL_NUMBER_H] = HIGH_BYTE(REG_MODEL_NUMBER_VALUE);
 8000eb6:	4b85      	ldr	r3, [pc, #532]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	705a      	strb	r2, [r3, #1]
	regs[REG_VERSION] = REG_VERSION_VALUE;
 8000ebc:	4b83      	ldr	r3, [pc, #524]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	709a      	strb	r2, [r3, #2]
	regs[REG_ID] = REG_ID_VALUE;
 8000ec2:	4b82      	ldr	r3, [pc, #520]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	70da      	strb	r2, [r3, #3]
	regs[REG_BAUD_RATE] = REG_BAUD_RATE_VALUE;
 8000ec8:	4b80      	ldr	r3, [pc, #512]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000eca:	2203      	movs	r2, #3
 8000ecc:	711a      	strb	r2, [r3, #4]
	regs[REG_RETURN_DELAY] = REG_RETURN_DELAY_VALUE;
 8000ece:	4b7f      	ldr	r3, [pc, #508]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	715a      	strb	r2, [r3, #5]

	regs[REG_MIN_POSITION_DEG_L] = LOW_BYTE(REG_MIN_POSITION_DEG_VALUE);
 8000ed4:	4b7d      	ldr	r3, [pc, #500]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	741a      	strb	r2, [r3, #16]
	regs[REG_MIN_POSITION_DEG_H] = HIGH_BYTE(REG_MIN_POSITION_DEG_VALUE);
 8000eda:	4b7c      	ldr	r3, [pc, #496]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	745a      	strb	r2, [r3, #17]
	regs[REG_MAX_POSITION_DEG_L] = LOW_BYTE(REG_MAX_POSITION_DEG_VALUE);
 8000ee0:	4b7a      	ldr	r3, [pc, #488]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000ee2:	22e8      	movs	r2, #232	; 0xe8
 8000ee4:	749a      	strb	r2, [r3, #18]
	regs[REG_MAX_POSITION_DEG_H] = HIGH_BYTE(REG_MAX_POSITION_DEG_VALUE);
 8000ee6:	4b79      	ldr	r3, [pc, #484]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000ee8:	2203      	movs	r2, #3
 8000eea:	74da      	strb	r2, [r3, #19]
	regs[REG_MAX_VELOCITY_DPS_L] = LOW_BYTE(REG_MAX_VELOCITY_DPS_VALUE);
 8000eec:	4b77      	ldr	r3, [pc, #476]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000eee:	2210      	movs	r2, #16
 8000ef0:	751a      	strb	r2, [r3, #20]
	regs[REG_MAX_VELOCITY_DPS_H] = HIGH_BYTE(REG_MAX_VELOCITY_DPS_VALUE);
 8000ef2:	4b76      	ldr	r3, [pc, #472]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000ef4:	2227      	movs	r2, #39	; 0x27
 8000ef6:	755a      	strb	r2, [r3, #21]
	regs[REG_MAX_ACCELERATION_DPSS_L] = LOW_BYTE(REG_MAX_ACCELERATION_DPSS_VALUE);
 8000ef8:	4b74      	ldr	r3, [pc, #464]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	759a      	strb	r2, [r3, #22]
	regs[REG_MAX_ACCELERATION_DPSS_H] = HIGH_BYTE(REG_MAX_ACCELERATION_DPSS_VALUE);
 8000efe:	4b73      	ldr	r3, [pc, #460]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f00:	227d      	movs	r2, #125	; 0x7d
 8000f02:	75da      	strb	r2, [r3, #23]
	regs[REG_MAX_CURRENT_MA_L] = LOW_BYTE(REG_MAX_CURRENT_MA_VALUE);
 8000f04:	4b71      	ldr	r3, [pc, #452]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f06:	22ac      	movs	r2, #172	; 0xac
 8000f08:	761a      	strb	r2, [r3, #24]
	regs[REG_MAX_CURRENT_MA_H] = HIGH_BYTE(REG_MAX_CURRENT_MA_VALUE);
 8000f0a:	4b70      	ldr	r3, [pc, #448]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f0c:	220d      	movs	r2, #13
 8000f0e:	765a      	strb	r2, [r3, #25]
	regs[REG_TEMPERATURE_LIMIT] = REG_TEMPERATURE_LIMIT_VALUE;
 8000f10:	4b6e      	ldr	r3, [pc, #440]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f12:	223c      	movs	r2, #60	; 0x3c
 8000f14:	771a      	strb	r2, [r3, #28]
	regs[REG_LOW_VOLTAGE_LIMIT] = REG_LOW_VOLTAGE_LIMIT_VALUE;
 8000f16:	4b6d      	ldr	r3, [pc, #436]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f18:	2206      	movs	r2, #6
 8000f1a:	775a      	strb	r2, [r3, #29]
	regs[REG_HIGH_VOLTAGE_LIMIT] = REG_HIGH_VOLTAGE_LIMIT_VALUE;
 8000f1c:	4b6b      	ldr	r3, [pc, #428]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f1e:	221c      	movs	r2, #28
 8000f20:	779a      	strb	r2, [r3, #30]

	regs[REG_MOVING_THRESHOLD_DPS] = REG_MOVING_THRESHOLD_DPS_VALUE;
 8000f22:	4b6a      	ldr	r3, [pc, #424]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f24:	2205      	movs	r2, #5
 8000f26:	77da      	strb	r2, [r3, #31]
	regs[REG_STATUS_RETURN_LVL] = REG_STATUS_RETURN_LVL_VALUE;
 8000f28:	4b68      	ldr	r3, [pc, #416]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	f883 2020 	strb.w	r2, [r3, #32]
	regs[REG_ALARM_LED] = REG_ALARM_LED_VALUE;
 8000f30:	4b66      	ldr	r3, [pc, #408]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f32:	2224      	movs	r2, #36	; 0x24
 8000f34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	regs[REG_ALARM_SHUTDOWN] = REG_ALARM_SHUTDOWN_VALUE;
 8000f38:	4b64      	ldr	r3, [pc, #400]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f3a:	2224      	movs	r2, #36	; 0x24
 8000f3c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	regs[REG_ENCODER_BITS] = REG_ENCODER_BITS_VALUE;
 8000f40:	4b62      	ldr	r3, [pc, #392]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f42:	220e      	movs	r2, #14
 8000f44:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	regs[REG_MOTOR_POLE_PAIRS] = REG_MOTOR_POLE_PAIRS_VALUE;
 8000f48:	4b60      	ldr	r3, [pc, #384]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f4a:	220e      	movs	r2, #14
 8000f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	regs[REG_MOTOR_SYNCHRO_L] = LOW_BYTE(REG_MOTOR_SYNCHRO_VALUE);
 8000f50:	4b5e      	ldr	r3, [pc, #376]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f52:	2225      	movs	r2, #37	; 0x25
 8000f54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	regs[REG_MOTOR_SYNCHRO_H] = HIGH_BYTE(REG_MOTOR_SYNCHRO_VALUE);
 8000f58:	4b5c      	ldr	r3, [pc, #368]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	regs[REG_INV_PHASE_MOTOR] = REG_INV_PHASE_VALUE;
 8000f60:	4b5a      	ldr	r3, [pc, #360]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	regs[REG_PID_POSITION_KP_L] = LOW_BYTE(REG_PID_POSITION_KP_VALUE);
 8000f68:	4b58      	ldr	r3, [pc, #352]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f6a:	221e      	movs	r2, #30
 8000f6c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	regs[REG_PID_POSITION_KP_H] = HIGH_BYTE(REG_PID_POSITION_KP_VALUE);
 8000f70:	4b56      	ldr	r3, [pc, #344]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	regs[REG_PID_POSITION_KI_L] = LOW_BYTE(REG_PID_POSITION_KI_VALUE);
 8000f78:	4b54      	ldr	r3, [pc, #336]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	regs[REG_PID_POSITION_KI_H] = HIGH_BYTE(REG_PID_POSITION_KI_VALUE);
 8000f80:	4b52      	ldr	r3, [pc, #328]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	regs[REG_PID_POSITION_KD_L] = LOW_BYTE(REG_PID_POSITION_KD_VALUE);
 8000f88:	4b50      	ldr	r3, [pc, #320]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f8a:	2214      	movs	r2, #20
 8000f8c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	regs[REG_PID_POSITION_KD_H] = HIGH_BYTE(REG_PID_POSITION_KD_VALUE);
 8000f90:	4b4e      	ldr	r3, [pc, #312]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	regs[REG_PID_VELOCITY_KP_L] = LOW_BYTE(REG_PID_VELOCITY_KP_VALUE);
 8000f98:	4b4c      	ldr	r3, [pc, #304]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f9a:	2220      	movs	r2, #32
 8000f9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	regs[REG_PID_VELOCITY_KP_H] = HIGH_BYTE(REG_PID_VELOCITY_KP_VALUE);
 8000fa0:	4b4a      	ldr	r3, [pc, #296]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	regs[REG_PID_VELOCITY_KI_L] = LOW_BYTE(REG_PID_VELOCITY_KI_VALUE);
 8000fa8:	4b48      	ldr	r3, [pc, #288]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	regs[REG_PID_VELOCITY_KI_H] = HIGH_BYTE(REG_PID_VELOCITY_KI_VALUE);
 8000fb0:	4b46      	ldr	r3, [pc, #280]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	regs[REG_PID_VELOCITY_KD_L] = LOW_BYTE(REG_PID_VELOCITY_KD_VALUE);
 8000fb8:	4b44      	ldr	r3, [pc, #272]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000fba:	220a      	movs	r2, #10
 8000fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	regs[REG_PID_VELOCITY_KD_H] = HIGH_BYTE(REG_PID_VELOCITY_KD_VALUE);
 8000fc0:	4b42      	ldr	r3, [pc, #264]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	regs[REG_PID_VELOCITY_KFF_L] = LOW_BYTE(REG_PID_VELOCITY_KFF_VALUE);
 8000fc8:	4b40      	ldr	r3, [pc, #256]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000fca:	2264      	movs	r2, #100	; 0x64
 8000fcc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	regs[REG_PID_VELOCITY_KFF_H] = HIGH_BYTE(REG_PID_VELOCITY_KFF_VALUE);
 8000fd0:	4b3e      	ldr	r3, [pc, #248]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	regs[REG_PID_ACCELERATION_KFF_L] = LOW_BYTE(REG_PID_ACCELERATION_KFF_VALUE);
 8000fd8:	4b3c      	ldr	r3, [pc, #240]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	regs[REG_PID_ACCELERATION_KFF_H] = HIGH_BYTE(REG_PID_ACCELERATION_KFF_VALUE);
 8000fe0:	4b3a      	ldr	r3, [pc, #232]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	regs[REG_PID_FLUX_CURRENT_KP_L] = LOW_BYTE(REG_PID_FLUX_CURRENT_KP_VALUE);
 8000fe8:	4b38      	ldr	r3, [pc, #224]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000fea:	22b8      	movs	r2, #184	; 0xb8
 8000fec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	regs[REG_PID_FLUX_CURRENT_KP_H] = HIGH_BYTE(REG_PID_FLUX_CURRENT_KP_VALUE);
 8000ff0:	4b36      	ldr	r3, [pc, #216]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000ff2:	220b      	movs	r2, #11
 8000ff4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	regs[REG_PID_FLUX_CURRENT_KI_L] = LOW_BYTE(REG_PID_FLUX_CURRENT_KI_VALUE);
 8000ff8:	4b34      	ldr	r3, [pc, #208]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	regs[REG_PID_FLUX_CURRENT_KI_H] = HIGH_BYTE(REG_PID_FLUX_CURRENT_KI_VALUE);
 8001000:	4b32      	ldr	r3, [pc, #200]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8001002:	2200      	movs	r2, #0
 8001004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	regs[REG_PID_FLUX_CURRENT_KFF_L] = LOW_BYTE(REG_PID_FLUX_CURRENT_KFF_VALUE);
 8001008:	4b30      	ldr	r3, [pc, #192]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 800100a:	2200      	movs	r2, #0
 800100c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	regs[REG_PID_FLUX_CURRENT_KFF_H] = HIGH_BYTE(REG_PID_FLUX_CURRENT_KFF_VALUE);
 8001010:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8001012:	2200      	movs	r2, #0
 8001014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	regs[REG_PID_TORQUE_CURRENT_KP_L] = LOW_BYTE(REG_PID_TORQUE_CURRENT_KP_VALUE);
 8001018:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 800101a:	22b8      	movs	r2, #184	; 0xb8
 800101c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	regs[REG_PID_TORQUE_CURRENT_KP_H] = HIGH_BYTE(REG_PID_TORQUE_CURRENT_KP_VALUE);
 8001020:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8001022:	220b      	movs	r2, #11
 8001024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	regs[REG_PID_TORQUE_CURRENT_KI_L] = LOW_BYTE(REG_PID_TORQUE_CURRENT_KI_VALUE);
 8001028:	4b28      	ldr	r3, [pc, #160]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	regs[REG_PID_TORQUE_CURRENT_KI_H] = HIGH_BYTE(REG_PID_TORQUE_CURRENT_KI_VALUE);
 8001030:	4b26      	ldr	r3, [pc, #152]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	regs[REG_PID_TORQUE_CURRENT_KFF_L] = LOW_BYTE(REG_PID_TORQUE_CURRENT_KFF_VALUE);
 8001038:	4b24      	ldr	r3, [pc, #144]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	regs[REG_PID_TORQUE_CURRENT_KFF_H] = HIGH_BYTE(REG_PID_TORQUE_CURRENT_KFF_VALUE);
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	regs[REG_CAL_PHASE1_CURRENT_SENSE_MA_L] = LOW_BYTE(REG_CAL_PHASE1_CURRENT_SENSE_MA_VALUE);
 8001048:	4b20      	ldr	r3, [pc, #128]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 800104a:	2218      	movs	r2, #24
 800104c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	regs[REG_CAL_PHASE1_CURRENT_SENSE_MA_H] = HIGH_BYTE(REG_CAL_PHASE1_CURRENT_SENSE_MA_VALUE);
 8001050:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8001052:	2201      	movs	r2, #1
 8001054:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	regs[REG_CAL_PHASE1_CURRENT_SENSE_OFFSET_L] = LOW_BYTE(REG_CAL_PHASE1_CURRENT_SENSE_OFFSET_VALUE);
 8001058:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 800105a:	22a0      	movs	r2, #160	; 0xa0
 800105c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	regs[REG_CAL_PHASE1_CURRENT_SENSE_OFFSET_H] = HIGH_BYTE(REG_CAL_PHASE1_CURRENT_SENSE_OFFSET_VALUE);
 8001060:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8001062:	2209      	movs	r2, #9
 8001064:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	regs[REG_CAL_PHASE2_CURRENT_SENSE_MA_L] = LOW_BYTE(REG_CAL_PHASE2_CURRENT_SENSE_MA_VALUE);
 8001068:	4b18      	ldr	r3, [pc, #96]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 800106a:	2218      	movs	r2, #24
 800106c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	regs[REG_CAL_PHASE2_CURRENT_SENSE_MA_H] = HIGH_BYTE(REG_CAL_PHASE2_CURRENT_SENSE_MA_VALUE);
 8001070:	4b16      	ldr	r3, [pc, #88]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8001072:	2201      	movs	r2, #1
 8001074:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	regs[REG_CAL_PHASE2_CURRENT_SENSE_OFFSET_L] = LOW_BYTE(REG_CAL_PHASE2_CURRENT_SENSE_OFFSET_VALUE);
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 800107a:	22b2      	movs	r2, #178	; 0xb2
 800107c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	regs[REG_CAL_PHASE2_CURRENT_SENSE_OFFSET_H] = HIGH_BYTE(REG_CAL_PHASE2_CURRENT_SENSE_OFFSET_VALUE);
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8001082:	2209      	movs	r2, #9
 8001084:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	regs[REG_CAL_PHASE3_CURRENT_SENSE_MA_L] = LOW_BYTE(REG_CAL_PHASE3_CURRENT_SENSE_MA_VALUE);
 8001088:	4b10      	ldr	r3, [pc, #64]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 800108a:	2218      	movs	r2, #24
 800108c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	regs[REG_CAL_PHASE3_CURRENT_SENSE_MA_H] = HIGH_BYTE(REG_CAL_PHASE3_CURRENT_SENSE_MA_VALUE);
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8001092:	2201      	movs	r2, #1
 8001094:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	regs[REG_CAL_PHASE3_CURRENT_SENSE_OFFSET_L] = LOW_BYTE(REG_CAL_PHASE3_CURRENT_SENSE_OFFSET_VALUE);
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 800109a:	22b5      	movs	r2, #181	; 0xb5
 800109c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	regs[REG_CAL_PHASE3_CURRENT_SENSE_OFFSET_H] = HIGH_BYTE(REG_CAL_PHASE3_CURRENT_SENSE_OFFSET_VALUE);
 80010a0:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 80010a2:	2209      	movs	r2, #9
 80010a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	regs[REG_CAL_VOLTAGE_SENSOR_L] = LOW_BYTE(REG_CAL_VOLTAGE_SENSOR_VALUE);
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 80010aa:	22e8      	movs	r2, #232	; 0xe8
 80010ac:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	regs[REG_CAL_VOLTAGE_SENSOR_H] = HIGH_BYTE(REG_CAL_VOLTAGE_SENSOR_VALUE);
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 80010b2:	2203      	movs	r2, #3
 80010b4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	regs[REG_EWMA_ENCODER] = REG_EWMA_ENCODER_VALUE;
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 80010ba:	22ff      	movs	r2, #255	; 0xff
 80010bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	eeprom_store(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 80010c0:	2180      	movs	r1, #128	; 0x80
 80010c2:	4802      	ldr	r0, [pc, #8]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 80010c4:	f000 f854 	bl	8001170 <eeprom_store>
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000218 	.word	0x20000218

080010d0 <load_eeprom_regs>:


void load_eeprom_regs()
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	eeprom_restore(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 80010d4:	2180      	movs	r1, #128	; 0x80
 80010d6:	4802      	ldr	r0, [pc, #8]	; (80010e0 <load_eeprom_regs+0x10>)
 80010d8:	f000 f836 	bl	8001148 <eeprom_restore>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000218 	.word	0x20000218

080010e4 <store_eeprom_regs>:

void store_eeprom_regs()
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	eeprom_store(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 80010e8:	2180      	movs	r1, #128	; 0x80
 80010ea:	4802      	ldr	r0, [pc, #8]	; (80010f4 <store_eeprom_regs+0x10>)
 80010ec:	f000 f840 	bl	8001170 <eeprom_store>
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000218 	.word	0x20000218

080010f8 <reset_ram_regs>:

void reset_ram_regs()
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	memset(&regs[REG_TORQUE_ENABLE],0,REG_MAX-REG_TORQUE_ENABLE);
 80010fc:	2232      	movs	r2, #50	; 0x32
 80010fe:	2100      	movs	r1, #0
 8001100:	4806      	ldr	r0, [pc, #24]	; (800111c <reset_ram_regs+0x24>)
 8001102:	f00c fb15 	bl	800d730 <memset>
	regs[REG_CONTROL_MODE] = REG_CONTROL_MODE_TORQUE;		// REG_CONTROL_MODE_TORQUE
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <reset_ram_regs+0x28>)
 8001108:	2203      	movs	r2, #3
 800110a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	regs[REG_GOAL_CLOSED_LOOP] = 1;		// CLOSED LOOP
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <reset_ram_regs+0x28>)
 8001110:	2201      	movs	r2, #1
 8001112:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000298 	.word	0x20000298
 8001120:	20000218 	.word	0x20000218

08001124 <eeprom_empty>:
{
	return (uint8_t*)start_address;
}

bool eeprom_empty()
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
	return *(uint32_t*)(start_address)==0xFFFFFFFF;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <eeprom_empty+0x20>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001130:	bf0c      	ite	eq
 8001132:	2301      	moveq	r3, #1
 8001134:	2300      	movne	r3, #0
 8001136:	b2db      	uxtb	r3, r3
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	0801f800 	.word	0x0801f800

08001148 <eeprom_restore>:

HAL_StatusTypeDef eeprom_restore(uint8_t * regs, uint32_t size)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	memcpy(regs,(uint8_t const*)start_address,size);
 8001152:	4b05      	ldr	r3, [pc, #20]	; (8001168 <eeprom_restore+0x20>)
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	4619      	mov	r1, r3
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f00c fadb 	bl	800d714 <memcpy>
	return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	0801f800 	.word	0x0801f800
 800116c:	00000000 	.word	0x00000000

08001170 <eeprom_store>:

HAL_StatusTypeDef eeprom_store(uint8_t const * regs, uint32_t size)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	; 0x30
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 800117a:	f007 ff1f 	bl	8008fbc <HAL_FLASH_Unlock>
	// erase the last page of bank1 (STM32G43x : 1 bank, 64 pages, 2kB per page, 64-bit data)
	{
		FLASH_EraseInitTypeDef erase =
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	2301      	movs	r3, #1
 8001184:	61bb      	str	r3, [r7, #24]
 8001186:	233f      	movs	r3, #63	; 0x3f
 8001188:	61fb      	str	r3, [r7, #28]
 800118a:	2301      	movs	r3, #1
 800118c:	623b      	str	r3, [r7, #32]
				FLASH_TYPEERASE_PAGES,
				FLASH_BANK_1,
				page_nb,
				1
			};
		uint32_t page_error = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
		HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&erase, &page_error);
 8001192:	f107 0210 	add.w	r2, r7, #16
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f008 f805 	bl	80091ac <HAL_FLASHEx_Erase>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		if(result!=HAL_OK)
 80011a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d004      	beq.n	80011ba <eeprom_store+0x4a>
		{
			HAL_FLASH_Lock();
 80011b0:	f007 ff26 	bl	8009000 <HAL_FLASH_Lock>
			return result;
 80011b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80011b8:	e039      	b.n	800122e <eeprom_store+0xbe>
		}
	}
	// write the last page
	{
		uint64_t data = 0xDEADBEEF;
 80011ba:	a320      	add	r3, pc, #128	; (adr r3, 800123c <eeprom_store+0xcc>)
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	e9c7 2302 	strd	r2, r3, [r7, #8]
		for(uint32_t index=0; index<size;index+=sizeof(uint64_t)) // 64 bits
 80011c4:	2300      	movs	r3, #0
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011c8:	e02a      	b.n	8001220 <eeprom_store+0xb0>
		{
			memcpy(&data,regs+index,sizeof(uint64_t));
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ce:	18d1      	adds	r1, r2, r3
 80011d0:	f107 0308 	add.w	r3, r7, #8
 80011d4:	2208      	movs	r2, #8
 80011d6:	4618      	mov	r0, r3
 80011d8:	f00c fa9c 	bl	800d714 <memcpy>
			HAL_StatusTypeDef result = HAL_FLASH_Program(
 80011dc:	4a16      	ldr	r2, [pc, #88]	; (8001238 <eeprom_store+0xc8>)
 80011de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e0:	18d1      	adds	r1, r2, r3
 80011e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011e6:	2000      	movs	r0, #0
 80011e8:	f007 fe92 	bl	8008f10 <HAL_FLASH_Program>
 80011ec:	4603      	mov	r3, r0
 80011ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
					FLASH_TYPEPROGRAM_DOUBLEWORD,
					start_address+index,
					data
				);
			if(result!=HAL_OK)
 80011f2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00f      	beq.n	800121a <eeprom_store+0xaa>
			{
				uint32_t error = HAL_FLASH_GetError();
 80011fa:	f007 ff1b 	bl	8009034 <HAL_FLASH_GetError>
 80011fe:	6278      	str	r0, [r7, #36]	; 0x24
				if(error)
 8001200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001202:	2b00      	cmp	r3, #0
 8001204:	d004      	beq.n	8001210 <eeprom_store+0xa0>
				{
					HAL_FLASH_Lock();
 8001206:	f007 fefb 	bl	8009000 <HAL_FLASH_Lock>
					return error;
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	b2db      	uxtb	r3, r3
 800120e:	e00e      	b.n	800122e <eeprom_store+0xbe>
				}
				HAL_FLASH_Lock();
 8001210:	f007 fef6 	bl	8009000 <HAL_FLASH_Lock>
				return result;
 8001214:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001218:	e009      	b.n	800122e <eeprom_store+0xbe>
		for(uint32_t index=0; index<size;index+=sizeof(uint64_t)) // 64 bits
 800121a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121c:	3308      	adds	r3, #8
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	429a      	cmp	r2, r3
 8001226:	d3d0      	bcc.n	80011ca <eeprom_store+0x5a>
			}
		}
	}
	HAL_FLASH_Lock();
 8001228:	f007 feea 	bl	8009000 <HAL_FLASH_Lock>
	return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3730      	adds	r7, #48	; 0x30
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	0801f800 	.word	0x0801f800
 800123c:	deadbeef 	.word	0xdeadbeef
	...

08001248 <WRAP_TO_PI>:
#define TWO_TO_POW_31 2147483648.0f
#define Q31_TO_FLOAT(x) ( (float)(x)/(TWO_TO_POW_31))
#define FLOAT_TO_Q31(x) ( (int)( (float)(x)*(float)0x7FFFFFFF ) )

float WRAP_TO_PI(float angle_radians)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (angle_radians>=0)
 8001252:	edd7 7a01 	vldr	s15, [r7, #4]
 8001256:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800125a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125e:	db26      	blt.n	80012ae <WRAP_TO_PI+0x66>
        return fmodf(angle_radians+M_PI, 2.0f*M_PI)-M_PI;
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff f93d 	bl	80004e0 <__aeabi_f2d>
 8001266:	a328      	add	r3, pc, #160	; (adr r3, 8001308 <WRAP_TO_PI+0xc0>)
 8001268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126c:	f7fe ffda 	bl	8000224 <__adddf3>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4610      	mov	r0, r2
 8001276:	4619      	mov	r1, r3
 8001278:	f7ff fc4c 	bl	8000b14 <__aeabi_d2f>
 800127c:	4603      	mov	r3, r0
 800127e:	eddf 0a24 	vldr	s1, [pc, #144]	; 8001310 <WRAP_TO_PI+0xc8>
 8001282:	ee00 3a10 	vmov	s0, r3
 8001286:	f00c faad 	bl	800d7e4 <fmodf>
 800128a:	ee10 3a10 	vmov	r3, s0
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f926 	bl	80004e0 <__aeabi_f2d>
 8001294:	a31c      	add	r3, pc, #112	; (adr r3, 8001308 <WRAP_TO_PI+0xc0>)
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	f7fe ffc1 	bl	8000220 <__aeabi_dsub>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff fc35 	bl	8000b14 <__aeabi_d2f>
 80012aa:	4603      	mov	r3, r0
 80012ac:	e025      	b.n	80012fa <WRAP_TO_PI+0xb2>
    else
    	return fmodf(angle_radians-M_PI, 2.0f*M_PI)+M_PI;
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff f916 	bl	80004e0 <__aeabi_f2d>
 80012b4:	a314      	add	r3, pc, #80	; (adr r3, 8001308 <WRAP_TO_PI+0xc0>)
 80012b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ba:	f7fe ffb1 	bl	8000220 <__aeabi_dsub>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	f7ff fc25 	bl	8000b14 <__aeabi_d2f>
 80012ca:	4603      	mov	r3, r0
 80012cc:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001310 <WRAP_TO_PI+0xc8>
 80012d0:	ee00 3a10 	vmov	s0, r3
 80012d4:	f00c fa86 	bl	800d7e4 <fmodf>
 80012d8:	ee10 3a10 	vmov	r3, s0
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f8ff 	bl	80004e0 <__aeabi_f2d>
 80012e2:	a309      	add	r3, pc, #36	; (adr r3, 8001308 <WRAP_TO_PI+0xc0>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7fe ff9c 	bl	8000224 <__adddf3>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	f7ff fc0e 	bl	8000b14 <__aeabi_d2f>
 80012f8:	4603      	mov	r3, r0
 80012fa:	ee07 3a90 	vmov	s15, r3
}
 80012fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	54442d18 	.word	0x54442d18
 800130c:	400921fb 	.word	0x400921fb
 8001310:	40c90fdb 	.word	0x40c90fdb
 8001314:	00000000 	.word	0x00000000

08001318 <FLOAT_RADIANS_TO_Q31>:

int32_t FLOAT_RADIANS_TO_Q31(float angle_radians)  // Q31 have a scaled input with the range [-1 1] mapping to [-pi pi).
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	ed87 0a01 	vstr	s0, [r7, #4]
	return FLOAT_TO_Q31(WRAP_TO_PI(angle_radians)/M_PI);
 8001322:	ed97 0a01 	vldr	s0, [r7, #4]
 8001326:	f7ff ff8f 	bl	8001248 <WRAP_TO_PI>
 800132a:	ee10 3a10 	vmov	r3, s0
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f8d6 	bl	80004e0 <__aeabi_f2d>
 8001334:	a30d      	add	r3, pc, #52	; (adr r3, 800136c <FLOAT_RADIANS_TO_Q31+0x54>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	f7ff fa53 	bl	80007e4 <__aeabi_ddiv>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fbe5 	bl	8000b14 <__aeabi_d2f>
 800134a:	ee07 0a10 	vmov	s14, r0
 800134e:	eddf 7a06 	vldr	s15, [pc, #24]	; 8001368 <FLOAT_RADIANS_TO_Q31+0x50>
 8001352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001356:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800135a:	ee17 3a90 	vmov	r3, s15
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	4f000000 	.word	0x4f000000
 800136c:	54442d18 	.word	0x54442d18
 8001370:	400921fb 	.word	0x400921fb

08001374 <API_CORDIC_Processor_Init>:

extern CORDIC_HandleTypeDef hcordic;

HAL_StatusTypeDef API_CORDIC_Processor_Init()
{
 8001374:	b5b0      	push	{r4, r5, r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0
	CORDIC_ConfigTypeDef config = {
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <API_CORDIC_Processor_Init+0x2c>)
 800137c:	1d3c      	adds	r4, r7, #4
 800137e:	461d      	mov	r5, r3
 8001380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001384:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001388:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			CORDIC_OUTSIZE_32BITS, // q31
			CORDIC_NBWRITE_1, // ARG2 is 1 default
			CORDIC_NBREAD_2, // read cosine and sine
			CORDIC_PRECISION_6CYCLES // better than 10-3
	};
	return HAL_CORDIC_Configure(&hcordic, &config);
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	4619      	mov	r1, r3
 8001390:	4804      	ldr	r0, [pc, #16]	; (80013a4 <API_CORDIC_Processor_Init+0x30>)
 8001392:	f006 fb5d 	bl	8007a50 <HAL_CORDIC_Configure>
 8001396:	4603      	mov	r3, r0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3720      	adds	r7, #32
 800139c:	46bd      	mov	sp, r7
 800139e:	bdb0      	pop	{r4, r5, r7, pc}
 80013a0:	0800e478 	.word	0x0800e478
 80013a4:	20002e6c 	.word	0x20002e6c

080013a8 <API_CORDIC_Processor_Update>:

HAL_StatusTypeDef API_CORDIC_Processor_Update(float theta, float * c, float * s)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80013b2:	60b8      	str	r0, [r7, #8]
 80013b4:	6079      	str	r1, [r7, #4]
	static int32_t InBuff[1] = {0};
	static int32_t OutBuff[2] = {0,0};
	InBuff[0] = FLOAT_RADIANS_TO_Q31(theta);
 80013b6:	ed97 0a03 	vldr	s0, [r7, #12]
 80013ba:	f7ff ffad 	bl	8001318 <FLOAT_RADIANS_TO_Q31>
 80013be:	4603      	mov	r3, r0
 80013c0:	4a19      	ldr	r2, [pc, #100]	; (8001428 <API_CORDIC_Processor_Update+0x80>)
 80013c2:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef result = HAL_CORDIC_Calculate(&hcordic,InBuff,OutBuff,1,10);
 80013c4:	230a      	movs	r3, #10
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2301      	movs	r3, #1
 80013ca:	4a18      	ldr	r2, [pc, #96]	; (800142c <API_CORDIC_Processor_Update+0x84>)
 80013cc:	4916      	ldr	r1, [pc, #88]	; (8001428 <API_CORDIC_Processor_Update+0x80>)
 80013ce:	4818      	ldr	r0, [pc, #96]	; (8001430 <API_CORDIC_Processor_Update+0x88>)
 80013d0:	f006 fb7a 	bl	8007ac8 <HAL_CORDIC_Calculate>
 80013d4:	4603      	mov	r3, r0
 80013d6:	75fb      	strb	r3, [r7, #23]
	if(HAL_OK==result)
 80013d8:	7dfb      	ldrb	r3, [r7, #23]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d11f      	bne.n	800141e <API_CORDIC_Processor_Update+0x76>
	{
		if(c!=0)
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d00c      	beq.n	80013fe <API_CORDIC_Processor_Update+0x56>
			*c = Q31_TO_FLOAT(OutBuff[0]);
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <API_CORDIC_Processor_Update+0x84>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	ee07 3a90 	vmov	s15, r3
 80013ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f0:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001434 <API_CORDIC_Processor_Update+0x8c>
 80013f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	edc3 7a00 	vstr	s15, [r3]
		if(s!=0)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00c      	beq.n	800141e <API_CORDIC_Processor_Update+0x76>
			*s = Q31_TO_FLOAT(OutBuff[1]);
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <API_CORDIC_Processor_Update+0x84>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001410:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001434 <API_CORDIC_Processor_Update+0x8c>
 8001414:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	edc3 7a00 	vstr	s15, [r3]
	}
	return result;
 800141e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000144 	.word	0x20000144
 800142c:	20000148 	.word	0x20000148
 8001430:	20002e6c 	.word	0x20002e6c
 8001434:	4f000000 	.word	0x4f000000

08001438 <API_FOC_Init>:

// user API function
// this function reset state of FOC
// This function starts peripherals
void API_FOC_Init()
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	// Motor PWM init and BRAKE
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800143c:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <API_FOC_Init+0x8c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2200      	movs	r2, #0
 8001442:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001444:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <API_FOC_Init+0x8c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2200      	movs	r2, #0
 800144a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 800144c:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <API_FOC_Init+0x8c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2200      	movs	r2, #0
 8001452:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001454:	2100      	movs	r1, #0
 8001456:	481b      	ldr	r0, [pc, #108]	; (80014c4 <API_FOC_Init+0x8c>)
 8001458:	f009 fb5c 	bl	800ab14 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1) ;
 800145c:	2100      	movs	r1, #0
 800145e:	4819      	ldr	r0, [pc, #100]	; (80014c4 <API_FOC_Init+0x8c>)
 8001460:	f00a fd82 	bl	800bf68 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001464:	2104      	movs	r1, #4
 8001466:	4817      	ldr	r0, [pc, #92]	; (80014c4 <API_FOC_Init+0x8c>)
 8001468:	f009 fb54 	bl	800ab14 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2) ;
 800146c:	2104      	movs	r1, #4
 800146e:	4815      	ldr	r0, [pc, #84]	; (80014c4 <API_FOC_Init+0x8c>)
 8001470:	f00a fd7a 	bl	800bf68 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8001474:	2108      	movs	r1, #8
 8001476:	4813      	ldr	r0, [pc, #76]	; (80014c4 <API_FOC_Init+0x8c>)
 8001478:	f009 fb4c 	bl	800ab14 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3) ;
 800147c:	2108      	movs	r1, #8
 800147e:	4811      	ldr	r0, [pc, #68]	; (80014c4 <API_FOC_Init+0x8c>)
 8001480:	f00a fd72 	bl	800bf68 <HAL_TIMEx_PWMN_Start>
	// OPAMP and ADC init
	HAL_OPAMP_Start(&hopamp1);
 8001484:	4810      	ldr	r0, [pc, #64]	; (80014c8 <API_FOC_Init+0x90>)
 8001486:	f008 fa1f 	bl	80098c8 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp2);
 800148a:	4810      	ldr	r0, [pc, #64]	; (80014cc <API_FOC_Init+0x94>)
 800148c:	f008 fa1c 	bl	80098c8 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp3);
 8001490:	480f      	ldr	r0, [pc, #60]	; (80014d0 <API_FOC_Init+0x98>)
 8001492:	f008 fa19 	bl	80098c8 <HAL_OPAMP_Start>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC1_DMA,5);
 8001496:	2205      	movs	r2, #5
 8001498:	490e      	ldr	r1, [pc, #56]	; (80014d4 <API_FOC_Init+0x9c>)
 800149a:	480f      	ldr	r0, [pc, #60]	; (80014d8 <API_FOC_Init+0xa0>)
 800149c:	f005 f9e4 	bl	8006868 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2,(uint32_t*)ADC2_DMA,3);
 80014a0:	2203      	movs	r2, #3
 80014a2:	490e      	ldr	r1, [pc, #56]	; (80014dc <API_FOC_Init+0xa4>)
 80014a4:	480e      	ldr	r0, [pc, #56]	; (80014e0 <API_FOC_Init+0xa8>)
 80014a6:	f005 f9df 	bl	8006868 <HAL_ADC_Start_DMA>
	// CORDIC init
	API_CORDIC_Processor_Init();
 80014aa:	f7ff ff63 	bl	8001374 <API_CORDIC_Processor_Init>
	// encoder init
	API_AS5048A_Position_Sensor_Init(&htim4);
 80014ae:	480d      	ldr	r0, [pc, #52]	; (80014e4 <API_FOC_Init+0xac>)
 80014b0:	f002 ff56 	bl	8004360 <API_AS5048A_Position_Sensor_Init>
	// PID init
	pid_reset(&pid_flux);
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <API_FOC_Init+0xb0>)
 80014b6:	f002 fe8f 	bl	80041d8 <pid_reset>
	pid_reset(&pid_torque);
 80014ba:	480c      	ldr	r0, [pc, #48]	; (80014ec <API_FOC_Init+0xb4>)
 80014bc:	f002 fe8c 	bl	80041d8 <pid_reset>
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20002f44 	.word	0x20002f44
 80014c8:	2000045c 	.word	0x2000045c
 80014cc:	2000032c 	.word	0x2000032c
 80014d0:	20000420 	.word	0x20000420
 80014d4:	200000cc 	.word	0x200000cc
 80014d8:	20000498 	.word	0x20000498
 80014dc:	200000d8 	.word	0x200000d8
 80014e0:	200003b4 	.word	0x200003b4
 80014e4:	20000368 	.word	0x20000368
 80014e8:	20000104 	.word	0x20000104
 80014ec:	20000110 	.word	0x20000110

080014f0 <LL_FOC_Update_Temperature>:
// this function update present_temperature_C
// this function update REG_HARDWARE_ERROR_STATUS register (set/reset HW_ERROR_BIT_OVERHEATING bit)
// this function use REG_TEMPERATURE_LIMIT register
// the temperature ADC samples are collected with phase current samples
void LL_FOC_Update_Temperature()
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	ed2d 8b02 	vpush	{d8}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
	// convert ADC sample into temperature (STM32G431-ESC1 specific)
	static float const R60 = 4700.0f; // ohm
	static float const eps = 0.1f; // epsilon (avoid divide by zero)
	float const R_NTC = R60*(4096.0f/(temperature_input_adc+eps)-1.0f); // 10kohm NTC at 25°C
 80014fa:	4b37      	ldr	r3, [pc, #220]	; (80015d8 <LL_FOC_Update_Temperature+0xe8>)
 80014fc:	ed93 7a00 	vldr	s14, [r3]
 8001500:	4b36      	ldr	r3, [pc, #216]	; (80015dc <LL_FOC_Update_Temperature+0xec>)
 8001502:	edd3 7a00 	vldr	s15, [r3]
 8001506:	ee37 7a27 	vadd.f32	s14, s14, s15
 800150a:	eddf 6a35 	vldr	s13, [pc, #212]	; 80015e0 <LL_FOC_Update_Temperature+0xf0>
 800150e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001516:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800151a:	4b32      	ldr	r3, [pc, #200]	; (80015e4 <LL_FOC_Update_Temperature+0xf4>)
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001524:	edc7 7a03 	vstr	s15, [r7, #12]
	static float const Beta = 3455.0f; // for a 10k NTC
	static float const Kelvin = 273.15f; //°C
	static float const T0 = 273.15f + 25.0f;
	static float const R0 = 10000.0f; // 10kohm at 25° for 10k NTC
	float const present_temperature_K = Beta * T0 / ( Beta - T0*logf(R0/R_NTC) );
 8001528:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <LL_FOC_Update_Temperature+0xf8>)
 800152a:	ed93 7a00 	vldr	s14, [r3]
 800152e:	4b2f      	ldr	r3, [pc, #188]	; (80015ec <LL_FOC_Update_Temperature+0xfc>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001538:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <LL_FOC_Update_Temperature+0xf8>)
 800153a:	edd3 8a00 	vldr	s17, [r3]
 800153e:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <LL_FOC_Update_Temperature+0x100>)
 8001540:	ed93 7a00 	vldr	s14, [r3]
 8001544:	edd7 7a03 	vldr	s15, [r7, #12]
 8001548:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800154c:	eeb0 0a66 	vmov.f32	s0, s13
 8001550:	f00c f974 	bl	800d83c <logf>
 8001554:	eeb0 7a40 	vmov.f32	s14, s0
 8001558:	4b24      	ldr	r3, [pc, #144]	; (80015ec <LL_FOC_Update_Temperature+0xfc>)
 800155a:	edd3 7a00 	vldr	s15, [r3]
 800155e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001562:	ee38 7ae7 	vsub.f32	s14, s17, s15
 8001566:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800156a:	edc7 7a02 	vstr	s15, [r7, #8]
	present_temperature_C = present_temperature_K-Kelvin;
 800156e:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <LL_FOC_Update_Temperature+0x104>)
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	ed97 7a02 	vldr	s14, [r7, #8]
 8001578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800157c:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <LL_FOC_Update_Temperature+0x108>)
 800157e:	edc3 7a00 	vstr	s15, [r3]

	// apply thermal protection and update hardware error register
	float const max_temperature_C = regs[REG_TEMPERATURE_LIMIT];
 8001582:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <LL_FOC_Update_Temperature+0x10c>)
 8001584:	7f1b      	ldrb	r3, [r3, #28]
 8001586:	ee07 3a90 	vmov	s15, r3
 800158a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800158e:	edc7 7a01 	vstr	s15, [r7, #4]
	if(present_temperature_C>max_temperature_C)
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <LL_FOC_Update_Temperature+0x108>)
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	ed97 7a01 	vldr	s14, [r7, #4]
 800159c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a4:	d509      	bpl.n	80015ba <LL_FOC_Update_Temperature+0xca>
	{
		// set overheating error
		regs[REG_HARDWARE_ERROR_STATUS] |= 1UL << HW_ERROR_BIT_OVERHEATING;
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <LL_FOC_Update_Temperature+0x10c>)
 80015a8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80015ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4b12      	ldr	r3, [pc, #72]	; (80015fc <LL_FOC_Update_Temperature+0x10c>)
 80015b4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	else
	{
		// clear overheating error
		regs[REG_HARDWARE_ERROR_STATUS] &= ~(1UL << HW_ERROR_BIT_OVERHEATING);
	}
}
 80015b8:	e008      	b.n	80015cc <LL_FOC_Update_Temperature+0xdc>
		regs[REG_HARDWARE_ERROR_STATUS] &= ~(1UL << HW_ERROR_BIT_OVERHEATING);
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <LL_FOC_Update_Temperature+0x10c>)
 80015bc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80015c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <LL_FOC_Update_Temperature+0x10c>)
 80015c8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
}
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	ecbd 8b02 	vpop	{d8}
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000134 	.word	0x20000134
 80015dc:	0800e4ec 	.word	0x0800e4ec
 80015e0:	45800000 	.word	0x45800000
 80015e4:	0800e4f0 	.word	0x0800e4f0
 80015e8:	0800e4f4 	.word	0x0800e4f4
 80015ec:	0800e4f8 	.word	0x0800e4f8
 80015f0:	0800e4fc 	.word	0x0800e4fc
 80015f4:	0800e500 	.word	0x0800e500
 80015f8:	2000013c 	.word	0x2000013c
 80015fc:	20000218 	.word	0x20000218

08001600 <LL_FOC_Update_Voltage>:
// this function update present_voltage_V
// this function update REG_HARDWARE_ERROR_STATUS register (set/reset HW_ERROR_BIT_VOLTAGE bit)
// this function use REG_LOW_VOLTAGE_LIMIT and REG_HIGH_VOLTAGE_LIMIT registers
// the voltage ADC samples are collected with phase current samples
void LL_FOC_Update_Voltage()
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
	// process input voltage (STM32G431-ESC1 specific)
	{
		static float const R68 = 169.0f; // kohm
		static float const R76 = 18.0f; // kohm
		present_voltage_V = vbus_input_adc/4096.0f*3.3f*(R68+R76)/R76;
 8001606:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <LL_FOC_Update_Voltage+0xbc>)
 8001608:	ed93 7a00 	vldr	s14, [r3]
 800160c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80016c0 <LL_FOC_Update_Voltage+0xc0>
 8001610:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001614:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80016c4 <LL_FOC_Update_Voltage+0xc4>
 8001618:	ee27 7a87 	vmul.f32	s14, s15, s14
 800161c:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <LL_FOC_Update_Voltage+0xc8>)
 800161e:	edd3 6a00 	vldr	s13, [r3]
 8001622:	4b2a      	ldr	r3, [pc, #168]	; (80016cc <LL_FOC_Update_Voltage+0xcc>)
 8001624:	edd3 7a00 	vldr	s15, [r3]
 8001628:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800162c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001630:	4b26      	ldr	r3, [pc, #152]	; (80016cc <LL_FOC_Update_Voltage+0xcc>)
 8001632:	ed93 7a00 	vldr	s14, [r3]
 8001636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800163a:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <LL_FOC_Update_Voltage+0xd0>)
 800163c:	edc3 7a00 	vstr	s15, [r3]
	}

	// apply voltage protection and update
	float const min_voltage_V = regs[REG_LOW_VOLTAGE_LIMIT];
 8001640:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <LL_FOC_Update_Voltage+0xd4>)
 8001642:	7f5b      	ldrb	r3, [r3, #29]
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800164c:	edc7 7a01 	vstr	s15, [r7, #4]
	float const max_voltage_V = regs[REG_HIGH_VOLTAGE_LIMIT];
 8001650:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <LL_FOC_Update_Voltage+0xd4>)
 8001652:	7f9b      	ldrb	r3, [r3, #30]
 8001654:	ee07 3a90 	vmov	s15, r3
 8001658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800165c:	edc7 7a00 	vstr	s15, [r7]
	if((present_voltage_V>max_voltage_V)||(present_voltage_V<min_voltage_V))
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <LL_FOC_Update_Voltage+0xd0>)
 8001662:	edd3 7a00 	vldr	s15, [r3]
 8001666:	ed97 7a00 	vldr	s14, [r7]
 800166a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800166e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001672:	d409      	bmi.n	8001688 <LL_FOC_Update_Voltage+0x88>
 8001674:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <LL_FOC_Update_Voltage+0xd0>)
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	ed97 7a01 	vldr	s14, [r7, #4]
 800167e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001686:	dd09      	ble.n	800169c <LL_FOC_Update_Voltage+0x9c>
	{
		// set voltage error
		regs[REG_HARDWARE_ERROR_STATUS] |= 1UL << HW_ERROR_BIT_VOLTAGE;
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <LL_FOC_Update_Voltage+0xd4>)
 800168a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	b2da      	uxtb	r2, r3
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <LL_FOC_Update_Voltage+0xd4>)
 8001696:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 800169a:	e009      	b.n	80016b0 <LL_FOC_Update_Voltage+0xb0>
	}
	else
	{
		// clear voltage error
		regs[REG_HARDWARE_ERROR_STATUS] &= ~(1UL << HW_ERROR_BIT_VOLTAGE);
 800169c:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <LL_FOC_Update_Voltage+0xd4>)
 800169e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80016a2:	f023 0301 	bic.w	r3, r3, #1
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <LL_FOC_Update_Voltage+0xd4>)
 80016aa:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	}
}
 80016ae:	bf00      	nop
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	20000130 	.word	0x20000130
 80016c0:	45800000 	.word	0x45800000
 80016c4:	40533333 	.word	0x40533333
 80016c8:	0800e504 	.word	0x0800e504
 80016cc:	0800e508 	.word	0x0800e508
 80016d0:	20000138 	.word	0x20000138
 80016d4:	20000218 	.word	0x20000218

080016d8 <LL_FOC_Inverse_Clarke_Park_PWM_Generation>:

// low level function
// this function checks REG_HARDWARE_ERROR_STATUS register and enforce BRAKE is register not null
// this function use the present_voltage_V state variable to adjust PWM duty cycle according power supply voltage
void LL_FOC_Inverse_Clarke_Park_PWM_Generation( float Vd, float Vq, float cosine_theta, float sine_theta )
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	ed2d 8b02 	vpush	{d8}
 80016de:	b090      	sub	sp, #64	; 0x40
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80016e6:	edc7 0a02 	vstr	s1, [r7, #8]
 80016ea:	ed87 1a01 	vstr	s2, [r7, #4]
 80016ee:	edc7 1a00 	vstr	s3, [r7]
	// convert (Vd,Vq) [-max_voltage_V,max_voltage_V] to (Valpha,Vbeta) [-max_voltage_V,max_voltage_V] [Inverse Park Transformation]
	float const Valpha = Vd * cosine_theta - Vq * sine_theta;
 80016f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80016f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016fe:	edd7 6a02 	vldr	s13, [r7, #8]
 8001702:	edd7 7a00 	vldr	s15, [r7]
 8001706:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800170a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float const Vbeta = Vq * cosine_theta + Vd * sine_theta;
 8001712:	ed97 7a02 	vldr	s14, [r7, #8]
 8001716:	edd7 7a01 	vldr	s15, [r7, #4]
 800171a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800171e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001722:	edd7 7a00 	vldr	s15, [r7]
 8001726:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800172a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	// convert (Valpha,Vbeta) [-max_voltage_V,max_voltage_V] to (Va,Vb,Vc) [-max_voltage_V,max_voltage_V] [Inverse Clarke Transformation]
	static float const sqrt3 = sqrtf(3.0f);
	float Va = Valpha;
 8001732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001734:	637b      	str	r3, [r7, #52]	; 0x34
	float Vb = (-Valpha+sqrt3*Vbeta)/2.0f;
 8001736:	4b8f      	ldr	r3, [pc, #572]	; (8001974 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x29c>)
 8001738:	ed93 7a00 	vldr	s14, [r3]
 800173c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001740:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001744:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001748:	ee37 7a67 	vsub.f32	s14, s14, s15
 800174c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001750:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001754:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float Vc = (-Valpha-sqrt3*Vbeta)/2.0f;
 8001758:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800175c:	eeb1 7a67 	vneg.f32	s14, s15
 8001760:	4b84      	ldr	r3, [pc, #528]	; (8001974 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x29c>)
 8001762:	edd3 6a00 	vldr	s13, [r3]
 8001766:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800176a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800176e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001772:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001776:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800177a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	// SPWM done

#ifdef CSVPWM

	// apply CSVPWM to (Va,Vb,Vc)
	float const Vneutral = 0.5f*(fmaxf(fmaxf(Va,Vb),Vc)+fminf(fminf(Va,Vb),Vc));
 800177e:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8001782:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001786:	f00b ffdb 	bl	800d740 <fmaxf>
 800178a:	eef0 7a40 	vmov.f32	s15, s0
 800178e:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8001792:	eeb0 0a67 	vmov.f32	s0, s15
 8001796:	f00b ffd3 	bl	800d740 <fmaxf>
 800179a:	eeb0 8a40 	vmov.f32	s16, s0
 800179e:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 80017a2:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 80017a6:	f00b ffe6 	bl	800d776 <fminf>
 80017aa:	eef0 7a40 	vmov.f32	s15, s0
 80017ae:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 80017b2:	eeb0 0a67 	vmov.f32	s0, s15
 80017b6:	f00b ffde 	bl	800d776 <fminf>
 80017ba:	eef0 7a40 	vmov.f32	s15, s0
 80017be:	ee78 7a27 	vadd.f32	s15, s16, s15
 80017c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80017c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ca:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	Va -= Vneutral;
 80017ce:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80017d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017da:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	Vb -= Vneutral;
 80017de:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80017e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ea:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	Vc -= Vneutral;
 80017ee:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80017f2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017fa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

#endif

	// convert (Va,Vb,Vc) [-max_voltage_V,max_voltage_V] to PWM duty cycles % [0.0 1.0]
	float const duty_cycle_PWMa = fconstrain((Va/present_voltage_V+1.0f)*0.5f,MIN_PWM_DUTY_CYCLE,MAX_PWM_DUTY_CYCLE); // [0 1]
 80017fe:	4b5e      	ldr	r3, [pc, #376]	; (8001978 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2a0>)
 8001800:	ed93 7a00 	vldr	s14, [r3]
 8001804:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001810:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001814:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001818:	ee67 7a87 	vmul.f32	s15, s15, s14
 800181c:	ed9f 1a57 	vldr	s2, [pc, #348]	; 800197c <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2a4>
 8001820:	eddf 0a57 	vldr	s1, [pc, #348]	; 8001980 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2a8>
 8001824:	eeb0 0a67 	vmov.f32	s0, s15
 8001828:	f002 fcad 	bl	8004186 <fconstrain>
 800182c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float const duty_cycle_PWMb = fconstrain((Vb/present_voltage_V+1.0f)*0.5f,MIN_PWM_DUTY_CYCLE,MAX_PWM_DUTY_CYCLE); // [0 1]
 8001830:	4b51      	ldr	r3, [pc, #324]	; (8001978 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2a0>)
 8001832:	ed93 7a00 	vldr	s14, [r3]
 8001836:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800183a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800183e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001842:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001846:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800184a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800184e:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 800197c <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2a4>
 8001852:	eddf 0a4b 	vldr	s1, [pc, #300]	; 8001980 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2a8>
 8001856:	eeb0 0a67 	vmov.f32	s0, s15
 800185a:	f002 fc94 	bl	8004186 <fconstrain>
 800185e:	ed87 0a08 	vstr	s0, [r7, #32]
	float const duty_cycle_PWMc = fconstrain((Vc/present_voltage_V+1.0f)*0.5f,MIN_PWM_DUTY_CYCLE,MAX_PWM_DUTY_CYCLE); // [0 1]
 8001862:	4b45      	ldr	r3, [pc, #276]	; (8001978 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2a0>)
 8001864:	ed93 7a00 	vldr	s14, [r3]
 8001868:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800186c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001870:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001874:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001878:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800187c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001880:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 800197c <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2a4>
 8001884:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8001980 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2a8>
 8001888:	eeb0 0a67 	vmov.f32	s0, s15
 800188c:	f002 fc7b 	bl	8004186 <fconstrain>
 8001890:	ed87 0a07 	vstr	s0, [r7, #28]
	// convert PWM duty cycles % to TIMER1 CCR register values
	// fPWM = 16KHz
	// fTIM = 160MHz
	// in PWM centered mode, for the finest possible resolution :
	// ARR = fTIM/(2 * fPWM) -1 => ARR = 4999
	uint16_t const CCRa = (uint16_t)(duty_cycle_PWMa*(float)(__HAL_TIM_GET_AUTORELOAD(&htim1)+1))+1;
 8001894:	4b3b      	ldr	r3, [pc, #236]	; (8001984 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2ac>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189a:	3301      	adds	r3, #1
 800189c:	ee07 3a90 	vmov	s15, r3
 80018a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018b0:	ee17 3a90 	vmov	r3, s15
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	3301      	adds	r3, #1
 80018b8:	837b      	strh	r3, [r7, #26]
	uint16_t const CCRb = (uint16_t)(duty_cycle_PWMb*(float)(__HAL_TIM_GET_AUTORELOAD(&htim1)+1))+1;
 80018ba:	4b32      	ldr	r3, [pc, #200]	; (8001984 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2ac>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	3301      	adds	r3, #1
 80018c2:	ee07 3a90 	vmov	s15, r3
 80018c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80018ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018d6:	ee17 3a90 	vmov	r3, s15
 80018da:	b29b      	uxth	r3, r3
 80018dc:	3301      	adds	r3, #1
 80018de:	833b      	strh	r3, [r7, #24]
	uint16_t const CCRc = (uint16_t)(duty_cycle_PWMc*(float)(__HAL_TIM_GET_AUTORELOAD(&htim1)+1))+1;
 80018e0:	4b28      	ldr	r3, [pc, #160]	; (8001984 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2ac>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e6:	3301      	adds	r3, #1
 80018e8:	ee07 3a90 	vmov	s15, r3
 80018ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80018f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018fc:	ee17 3a90 	vmov	r3, s15
 8001900:	b29b      	uxth	r3, r3
 8001902:	3301      	adds	r3, #1
 8001904:	82fb      	strh	r3, [r7, #22]

	// update TIMER CCR registers
	//   and apply BRAKE if error
	if(regs[REG_HARDWARE_ERROR_STATUS] != 0 )
 8001906:	4b20      	ldr	r3, [pc, #128]	; (8001988 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2b0>)
 8001908:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d01f      	beq.n	8001950 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x278>
	{
		// compute a valid BRAKE value
		uint16_t const CCRx = (uint16_t)(0.5f*(float)(__HAL_TIM_GET_AUTORELOAD(&htim1)+1))+1; // note : 0 is OK too
 8001910:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2ac>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	3301      	adds	r3, #1
 8001918:	ee07 3a90 	vmov	s15, r3
 800191c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001920:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800192c:	ee17 3a90 	vmov	r3, s15
 8001930:	b29b      	uxth	r3, r3
 8001932:	3301      	adds	r3, #1
 8001934:	82bb      	strh	r3, [r7, #20]
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,CCRx);
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2ac>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	8aba      	ldrh	r2, [r7, #20]
 800193c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,CCRx);
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2ac>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	8aba      	ldrh	r2, [r7, #20]
 8001944:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,CCRx);
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2ac>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	8aba      	ldrh	r2, [r7, #20]
 800194c:	63da      	str	r2, [r3, #60]	; 0x3c
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,CCRa);
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,CCRb); // switch b and c phases
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,CCRc); // switch b and c phases
	}
}
 800194e:	e00b      	b.n	8001968 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x290>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,CCRa);
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2ac>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	8b7a      	ldrh	r2, [r7, #26]
 8001956:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,CCRb); // switch b and c phases
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2ac>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	8b3a      	ldrh	r2, [r7, #24]
 800195e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,CCRc); // switch b and c phases
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2ac>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	8afa      	ldrh	r2, [r7, #22]
 8001966:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001968:	bf00      	nop
 800196a:	3740      	adds	r7, #64	; 0x40
 800196c:	46bd      	mov	sp, r7
 800196e:	ecbd 8b02 	vpop	{d8}
 8001972:	bd80      	pop	{r7, pc}
 8001974:	0800e50c 	.word	0x0800e50c
 8001978:	20000138 	.word	0x20000138
 800197c:	3f733333 	.word	0x3f733333
 8001980:	3d4ccccd 	.word	0x3d4ccccd
 8001984:	20002f44 	.word	0x20002f44
 8001988:	20000218 	.word	0x20000218
 800198c:	00000000 	.word	0x00000000

08001990 <API_FOC_Set_Flux_Velocity>:
void API_FOC_Set_Flux_Velocity(
		uint16_t present_time_us,
		float setpoint_electrical_velocity_dps,
		float setpoint_flux_voltage_V
)
{
 8001990:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001994:	b088      	sub	sp, #32
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	ed87 0a02 	vstr	s0, [r7, #8]
 800199e:	edc7 0a01 	vstr	s1, [r7, #4]
 80019a2:	81fb      	strh	r3, [r7, #14]
	// check temperature and voltage
	LL_FOC_Update_Temperature();
 80019a4:	f7ff fda4 	bl	80014f0 <LL_FOC_Update_Temperature>
	LL_FOC_Update_Voltage();
 80019a8:	f7ff fe2a 	bl	8001600 <LL_FOC_Update_Voltage>

	// compute theta
	static float theta_rad = 0.0f;
	static float last_time_us = 0.0f;
	uint16_t delta_t_us = last_time_us-present_time_us;
 80019ac:	4b4c      	ldr	r3, [pc, #304]	; (8001ae0 <API_FOC_Set_Flux_Velocity+0x150>)
 80019ae:	ed93 7a00 	vldr	s14, [r3]
 80019b2:	89fb      	ldrh	r3, [r7, #14]
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019c4:	ee17 3a90 	vmov	r3, s15
 80019c8:	83fb      	strh	r3, [r7, #30]
	last_time_us = present_time_us;
 80019ca:	89fb      	ldrh	r3, [r7, #14]
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d4:	4b42      	ldr	r3, [pc, #264]	; (8001ae0 <API_FOC_Set_Flux_Velocity+0x150>)
 80019d6:	edc3 7a00 	vstr	s15, [r3]
	theta_rad += DEGREES_TO_RADIANS(setpoint_electrical_velocity_dps) * (float)delta_t_us/1000000.0f;
 80019da:	4b42      	ldr	r3, [pc, #264]	; (8001ae4 <API_FOC_Set_Flux_Velocity+0x154>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fd7e 	bl	80004e0 <__aeabi_f2d>
 80019e4:	4604      	mov	r4, r0
 80019e6:	460d      	mov	r5, r1
 80019e8:	68b8      	ldr	r0, [r7, #8]
 80019ea:	f7fe fd79 	bl	80004e0 <__aeabi_f2d>
 80019ee:	a338      	add	r3, pc, #224	; (adr r3, 8001ad0 <API_FOC_Set_Flux_Velocity+0x140>)
 80019f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f4:	f7fe fdcc 	bl	8000590 <__aeabi_dmul>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	4b38      	ldr	r3, [pc, #224]	; (8001ae8 <API_FOC_Set_Flux_Velocity+0x158>)
 8001a06:	f7fe feed 	bl	80007e4 <__aeabi_ddiv>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4690      	mov	r8, r2
 8001a10:	4699      	mov	r9, r3
 8001a12:	8bfb      	ldrh	r3, [r7, #30]
 8001a14:	ee07 3a90 	vmov	s15, r3
 8001a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a1c:	ee17 0a90 	vmov	r0, s15
 8001a20:	f7fe fd5e 	bl	80004e0 <__aeabi_f2d>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4640      	mov	r0, r8
 8001a2a:	4649      	mov	r1, r9
 8001a2c:	f7fe fdb0 	bl	8000590 <__aeabi_dmul>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	a327      	add	r3, pc, #156	; (adr r3, 8001ad8 <API_FOC_Set_Flux_Velocity+0x148>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	f7fe fed1 	bl	80007e4 <__aeabi_ddiv>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4620      	mov	r0, r4
 8001a48:	4629      	mov	r1, r5
 8001a4a:	f7fe fbeb 	bl	8000224 <__adddf3>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	f7ff f85d 	bl	8000b14 <__aeabi_d2f>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4a21      	ldr	r2, [pc, #132]	; (8001ae4 <API_FOC_Set_Flux_Velocity+0x154>)
 8001a5e:	6013      	str	r3, [r2, #0]

	// compute cosine and sine
	static float cosine_theta = 0.0f;
	static float sine_theta = 0.0f;
	API_CORDIC_Processor_Update(theta_rad,&cosine_theta,&sine_theta);
 8001a60:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <API_FOC_Set_Flux_Velocity+0x154>)
 8001a62:	edd3 7a00 	vldr	s15, [r3]
 8001a66:	4921      	ldr	r1, [pc, #132]	; (8001aec <API_FOC_Set_Flux_Velocity+0x15c>)
 8001a68:	4821      	ldr	r0, [pc, #132]	; (8001af0 <API_FOC_Set_Flux_Velocity+0x160>)
 8001a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a6e:	f7ff fc9b 	bl	80013a8 <API_CORDIC_Processor_Update>

	// compute (Vd,Vq) [-max_voltage_V,max_voltage_V]
	float const Vd = fconstrain(setpoint_flux_voltage_V,-regs[REG_HIGH_VOLTAGE_LIMIT_VALUE],regs[REG_HIGH_VOLTAGE_LIMIT_VALUE]); // torque setpoint open loop
 8001a72:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <API_FOC_Set_Flux_Velocity+0x164>)
 8001a74:	7f1b      	ldrb	r3, [r3, #28]
 8001a76:	425b      	negs	r3, r3
 8001a78:	ee07 3a90 	vmov	s15, r3
 8001a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a80:	4b1c      	ldr	r3, [pc, #112]	; (8001af4 <API_FOC_Set_Flux_Velocity+0x164>)
 8001a82:	7f1b      	ldrb	r3, [r3, #28]
 8001a84:	ee07 3a10 	vmov	s14, r3
 8001a88:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001a8c:	eeb0 1a47 	vmov.f32	s2, s14
 8001a90:	eef0 0a67 	vmov.f32	s1, s15
 8001a94:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a98:	f002 fb75 	bl	8004186 <fconstrain>
 8001a9c:	ed87 0a06 	vstr	s0, [r7, #24]
	float const Vq = 0.0f; // no torque
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]

	// do inverse clarke and park transformation and update TIMER1 register (3-phase PWM generation)
	LL_FOC_Inverse_Clarke_Park_PWM_Generation(Vd,Vq,cosine_theta,sine_theta);
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <API_FOC_Set_Flux_Velocity+0x160>)
 8001aa8:	edd3 7a00 	vldr	s15, [r3]
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <API_FOC_Set_Flux_Velocity+0x15c>)
 8001aae:	ed93 7a00 	vldr	s14, [r3]
 8001ab2:	eef0 1a47 	vmov.f32	s3, s14
 8001ab6:	eeb0 1a67 	vmov.f32	s2, s15
 8001aba:	edd7 0a05 	vldr	s1, [r7, #20]
 8001abe:	ed97 0a06 	vldr	s0, [r7, #24]
 8001ac2:	f7ff fe09 	bl	80016d8 <LL_FOC_Inverse_Clarke_Park_PWM_Generation>
	// this function checks REG_HARDWARE_ERROR_STATUS register and enforce BRAKE is register not null
	// this function use the present_voltage_V state variable to adjust PWM duty cycle according power supply voltage
}
 8001ac6:	bf00      	nop
 8001ac8:	3720      	adds	r7, #32
 8001aca:	46bd      	mov	sp, r7
 8001acc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ad0:	54442d18 	.word	0x54442d18
 8001ad4:	400921fb 	.word	0x400921fb
 8001ad8:	00000000 	.word	0x00000000
 8001adc:	412e8480 	.word	0x412e8480
 8001ae0:	20000150 	.word	0x20000150
 8001ae4:	20000154 	.word	0x20000154
 8001ae8:	40668000 	.word	0x40668000
 8001aec:	2000015c 	.word	0x2000015c
 8001af0:	20000158 	.word	0x20000158
 8001af4:	20000218 	.word	0x20000218

08001af8 <API_FOC_Torque_Update>:
		float setpoint_torque_current_mA,
		float setpoint_flux_current_mA,
		float phase_synchro_offset_rad,
		uint32_t closed_loop
)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	ed2d 8b02 	vpush	{d8}
 8001afe:	b09e      	sub	sp, #120	; 0x78
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	ed87 0a04 	vstr	s0, [r7, #16]
 8001b08:	edc7 0a03 	vstr	s1, [r7, #12]
 8001b0c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001b10:	6079      	str	r1, [r7, #4]
 8001b12:	82fb      	strh	r3, [r7, #22]
	// note : absolute position increases when turning CCW (encoder)
	// note : when Iq is positive, motor turns CW
	// note : FOC period is less than motor PWM period
	// drop phase current samples a few times between each FOC iteration
	if(current_samples>current_sample_drop_rate)
 8001b14:	4b68      	ldr	r3, [pc, #416]	; (8001cb8 <API_FOC_Torque_Update+0x1c0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	f240 82b6 	bls.w	800208e <API_FOC_Torque_Update+0x596>
	{
		current_samples-=(current_sample_drop_rate+1);
 8001b22:	4b65      	ldr	r3, [pc, #404]	; (8001cb8 <API_FOC_Torque_Update+0x1c0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	2301      	movs	r3, #1
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b61      	ldr	r3, [pc, #388]	; (8001cb8 <API_FOC_Torque_Update+0x1c0>)
 8001b32:	601a      	str	r2, [r3, #0]

		// backup 3-phase currents as soon as possible
		memcpy(motor_current_sample_adc,motor_current_input_adc,sizeof(uint16_t)*3);
 8001b34:	4b61      	ldr	r3, [pc, #388]	; (8001cbc <API_FOC_Torque_Update+0x1c4>)
 8001b36:	4a62      	ldr	r2, [pc, #392]	; (8001cc0 <API_FOC_Torque_Update+0x1c8>)
 8001b38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b3c:	6018      	str	r0, [r3, #0]
 8001b3e:	3304      	adds	r3, #4
 8001b40:	8019      	strh	r1, [r3, #0]

		// performance monitoring
		uint16_t const t_begin = __HAL_TIM_GET_COUNTER(&htim6);
 8001b42:	4b60      	ldr	r3, [pc, #384]	; (8001cc4 <API_FOC_Torque_Update+0x1cc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

		// process absolute position, and compute theta ahead using average processing time and velocity
		//absolute_position_rad = API_AS5048A_Position_Sensor_Get_Radians_Estimation(t_begin+average_processing_time);
		absolute_position_rad = API_AS5048A_Position_Sensor_Get_Radians_Estimation(t_begin); // we suppose that ADC sample have just been acquired (a few us before...)
 8001b4c:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8001b50:	4618      	mov	r0, r3
 8001b52:	f002 fd53 	bl	80045fc <API_AS5048A_Position_Sensor_Get_Radians_Estimation>
 8001b56:	eef0 7a40 	vmov.f32	s15, s0
 8001b5a:	4b5b      	ldr	r3, [pc, #364]	; (8001cc8 <API_FOC_Torque_Update+0x1d0>)
 8001b5c:	edc3 7a00 	vstr	s15, [r3]
		absolute_position_multi_rad = API_AS5048A_Position_Sensor_Get_Multiturn_Radians();
 8001b60:	f002 fd92 	bl	8004688 <API_AS5048A_Position_Sensor_Get_Multiturn_Radians>
 8001b64:	eef0 7a40 	vmov.f32	s15, s0
 8001b68:	4b58      	ldr	r3, [pc, #352]	; (8001ccc <API_FOC_Torque_Update+0x1d4>)
 8001b6a:	edc3 7a00 	vstr	s15, [r3]
		velocity_dps = API_AS5048A_Position_Sensor_Get_DPS();
 8001b6e:	f002 fd9b 	bl	80046a8 <API_AS5048A_Position_Sensor_Get_DPS>
 8001b72:	eef0 7a40 	vmov.f32	s15, s0
 8001b76:	4b56      	ldr	r3, [pc, #344]	; (8001cd0 <API_FOC_Torque_Update+0x1d8>)
 8001b78:	edc3 7a00 	vstr	s15, [r3]

		// check temperature and voltage
		LL_FOC_Update_Temperature();
 8001b7c:	f7ff fcb8 	bl	80014f0 <LL_FOC_Update_Temperature>
		LL_FOC_Update_Voltage();
 8001b80:	f7ff fd3e 	bl	8001600 <LL_FOC_Update_Voltage>

		// if ALARM then zeroize currents setpoints
		if(regs[REG_HARDWARE_ERROR_STATUS] != 0 )
 8001b84:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <API_FOC_Torque_Update+0x1dc>)
 8001b86:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d005      	beq.n	8001b9a <API_FOC_Torque_Update+0xa2>
		{
			setpoint_torque_current_mA = 0.0f;
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
			setpoint_flux_current_mA = 0.0f;
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
		// process phase current
		// Note : when current flows inward phase, shunt voltage is negative
		// Note : when current flows outward phase, shunt voltage is positive
		// Note : The current sign is positive when flowing in to a phase
		// Note : The current sign is negative when flowing out from a phase
		for(size_t index=0;index<3;++index)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	677b      	str	r3, [r7, #116]	; 0x74
 8001b9e:	e022      	b.n	8001be6 <API_FOC_Torque_Update+0xee>
		{
			 motor_current_mA[index]= -((float)motor_current_sample_adc[index]-motor_current_input_adc_offset[index])/motor_current_input_adc_mA[index]; // note : the (-) sign here
 8001ba0:	4a46      	ldr	r2, [pc, #280]	; (8001cbc <API_FOC_Torque_Update+0x1c4>)
 8001ba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ba8:	ee07 3a90 	vmov	s15, r3
 8001bac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bb0:	4a49      	ldr	r2, [pc, #292]	; (8001cd8 <API_FOC_Torque_Update+0x1e0>)
 8001bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	edd3 7a00 	vldr	s15, [r3]
 8001bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc0:	eef1 6a67 	vneg.f32	s13, s15
 8001bc4:	4a45      	ldr	r2, [pc, #276]	; (8001cdc <API_FOC_Torque_Update+0x1e4>)
 8001bc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	ed93 7a00 	vldr	s14, [r3]
 8001bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bd4:	4a42      	ldr	r2, [pc, #264]	; (8001ce0 <API_FOC_Torque_Update+0x1e8>)
 8001bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	edc3 7a00 	vstr	s15, [r3]
		for(size_t index=0;index<3;++index)
 8001be0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001be2:	3301      	adds	r3, #1
 8001be4:	677b      	str	r3, [r7, #116]	; 0x74
 8001be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d9d9      	bls.n	8001ba0 <API_FOC_Torque_Update+0xa8>
		}
		present_current_sq = 2.0f/3.0f*(powf(motor_current_mA[0],2.0f)+powf(motor_current_mA[1],2.0f)+powf(motor_current_mA[2],2.0f));
 8001bec:	4b3c      	ldr	r3, [pc, #240]	; (8001ce0 <API_FOC_Torque_Update+0x1e8>)
 8001bee:	edd3 7a00 	vldr	s15, [r3]
 8001bf2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bfa:	f00b fe55 	bl	800d8a8 <powf>
 8001bfe:	eeb0 8a40 	vmov.f32	s16, s0
 8001c02:	4b37      	ldr	r3, [pc, #220]	; (8001ce0 <API_FOC_Torque_Update+0x1e8>)
 8001c04:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c08:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001c0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c10:	f00b fe4a 	bl	800d8a8 <powf>
 8001c14:	eef0 7a40 	vmov.f32	s15, s0
 8001c18:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001c1c:	4b30      	ldr	r3, [pc, #192]	; (8001ce0 <API_FOC_Torque_Update+0x1e8>)
 8001c1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c22:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001c26:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2a:	f00b fe3d 	bl	800d8a8 <powf>
 8001c2e:	eef0 7a40 	vmov.f32	s15, s0
 8001c32:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001c36:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001ce4 <API_FOC_Torque_Update+0x1ec>
 8001c3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ce8 <API_FOC_Torque_Update+0x1f0>)
 8001c40:	edc3 7a00 	vstr	s15, [r3]

		// process theta for Park and Clarke Transformation and compute cosine(theta) and sine(theta)
		float const phase_offset_rad = DEGREES_TO_RADIANS((int16_t)(MAKE_SHORT(regs[REG_MOTOR_SYNCHRO_L],regs[REG_MOTOR_SYNCHRO_H])));
 8001c44:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <API_FOC_Torque_Update+0x1dc>)
 8001c46:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001c4a:	021b      	lsls	r3, r3, #8
 8001c4c:	b21a      	sxth	r2, r3
 8001c4e:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <API_FOC_Torque_Update+0x1dc>)
 8001c50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	4313      	orrs	r3, r2
 8001c58:	b21b      	sxth	r3, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fc2e 	bl	80004bc <__aeabi_i2d>
 8001c60:	a313      	add	r3, pc, #76	; (adr r3, 8001cb0 <API_FOC_Torque_Update+0x1b8>)
 8001c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c66:	f7fe fc93 	bl	8000590 <__aeabi_dmul>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4610      	mov	r0, r2
 8001c70:	4619      	mov	r1, r3
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <API_FOC_Torque_Update+0x1f4>)
 8001c78:	f7fe fdb4 	bl	80007e4 <__aeabi_ddiv>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	f7fe ff46 	bl	8000b14 <__aeabi_d2f>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
		float const reg_pole_pairs = regs[REG_MOTOR_POLE_PAIRS];
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <API_FOC_Torque_Update+0x1dc>)
 8001c8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c92:	ee07 3a90 	vmov	s15, r3
 8001c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c9a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		float const reverse = regs[REG_INV_PHASE_MOTOR] == 0 ? 1.0f : -1.0f;
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <API_FOC_Torque_Update+0x1dc>)
 8001ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d123      	bne.n	8001cf0 <API_FOC_Torque_Update+0x1f8>
 8001ca8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001cac:	e021      	b.n	8001cf2 <API_FOC_Torque_Update+0x1fa>
 8001cae:	bf00      	nop
 8001cb0:	54442d18 	.word	0x54442d18
 8001cb4:	400921fb 	.word	0x400921fb
 8001cb8:	200000c8 	.word	0x200000c8
 8001cbc:	200000e8 	.word	0x200000e8
 8001cc0:	200000e0 	.word	0x200000e0
 8001cc4:	20002ef8 	.word	0x20002ef8
 8001cc8:	20000120 	.word	0x20000120
 8001ccc:	20000124 	.word	0x20000124
 8001cd0:	20000128 	.word	0x20000128
 8001cd4:	20000218 	.word	0x20000218
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	2000000c 	.word	0x2000000c
 8001ce0:	200000f0 	.word	0x200000f0
 8001ce4:	3f2aaaab 	.word	0x3f2aaaab
 8001ce8:	2000011c 	.word	0x2000011c
 8001cec:	40668000 	.word	0x40668000
 8001cf0:	4ba7      	ldr	r3, [pc, #668]	; (8001f90 <API_FOC_Torque_Update+0x498>)
 8001cf2:	667b      	str	r3, [r7, #100]	; 0x64
		float const theta_rad = fmodf(absolute_position_rad*reg_pole_pairs*reverse,M_2PI) + phase_offset_rad + phase_synchro_offset_rad; // theta
 8001cf4:	4ba7      	ldr	r3, [pc, #668]	; (8001f94 <API_FOC_Torque_Update+0x49c>)
 8001cf6:	ed93 7a00 	vldr	s14, [r3]
 8001cfa:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001cfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d02:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d0a:	eddf 0aa3 	vldr	s1, [pc, #652]	; 8001f98 <API_FOC_Torque_Update+0x4a0>
 8001d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d12:	f00b fd67 	bl	800d7e4 <fmodf>
 8001d16:	eeb0 7a40 	vmov.f32	s14, s0
 8001d1a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d22:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		static float cosine_theta = 0.0f;
		static float sine_theta = 0.0f;
		API_CORDIC_Processor_Update(theta_rad,&cosine_theta,&sine_theta);
 8001d2e:	499b      	ldr	r1, [pc, #620]	; (8001f9c <API_FOC_Torque_Update+0x4a4>)
 8001d30:	489b      	ldr	r0, [pc, #620]	; (8001fa0 <API_FOC_Torque_Update+0x4a8>)
 8001d32:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8001d36:	f7ff fb37 	bl	80013a8 <API_CORDIC_Processor_Update>

		// phase current (Ia,Ib,Ic) [0..xxxmA] to (Ialpha,Ibeta) [0..xxxmA] [Clarke Transformation]
		static float const sqrt3 = sqrtf(3.0f);
		float const present_Ialpha = 2.0f/3.0f*motor_current_mA[0]-1.0f/3.0f*(motor_current_mA[1]+motor_current_mA[2]);
 8001d3a:	4b9a      	ldr	r3, [pc, #616]	; (8001fa4 <API_FOC_Torque_Update+0x4ac>)
 8001d3c:	edd3 7a00 	vldr	s15, [r3]
 8001d40:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8001fa8 <API_FOC_Torque_Update+0x4b0>
 8001d44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d48:	4b96      	ldr	r3, [pc, #600]	; (8001fa4 <API_FOC_Torque_Update+0x4ac>)
 8001d4a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d4e:	4b95      	ldr	r3, [pc, #596]	; (8001fa4 <API_FOC_Torque_Update+0x4ac>)
 8001d50:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d58:	eddf 6a94 	vldr	s13, [pc, #592]	; 8001fac <API_FOC_Torque_Update+0x4b4>
 8001d5c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d64:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		float const present_Ibeta = 1.0f/sqrt3*(motor_current_mA[1]-motor_current_mA[2]);
 8001d68:	4b91      	ldr	r3, [pc, #580]	; (8001fb0 <API_FOC_Torque_Update+0x4b8>)
 8001d6a:	edd3 7a00 	vldr	s15, [r3]
 8001d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d76:	4b8b      	ldr	r3, [pc, #556]	; (8001fa4 <API_FOC_Torque_Update+0x4ac>)
 8001d78:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d7c:	4b89      	ldr	r3, [pc, #548]	; (8001fa4 <API_FOC_Torque_Update+0x4ac>)
 8001d7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d82:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d8a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		// Note Ialpha synchone de Ia et de même phase/signe
		// Note Ibeta suit Iaplha de 90°

		// (Ialpha,Ibeta) [0..xxxmA] to (Id,Iq) [0..xxxmA] [Park Transformation]
		float present_Id =  present_Ialpha*cosine_theta+present_Ibeta*sine_theta;
 8001d8e:	4b84      	ldr	r3, [pc, #528]	; (8001fa0 <API_FOC_Torque_Update+0x4a8>)
 8001d90:	ed93 7a00 	vldr	s14, [r3]
 8001d94:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001d98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d9c:	4b7f      	ldr	r3, [pc, #508]	; (8001f9c <API_FOC_Torque_Update+0x4a4>)
 8001d9e:	edd3 6a00 	vldr	s13, [r3]
 8001da2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001da6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dae:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		float present_Iq = -present_Ialpha*sine_theta+present_Ibeta*cosine_theta;
 8001db2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001db6:	eeb1 7a67 	vneg.f32	s14, s15
 8001dba:	4b78      	ldr	r3, [pc, #480]	; (8001f9c <API_FOC_Torque_Update+0x4a4>)
 8001dbc:	edd3 7a00 	vldr	s15, [r3]
 8001dc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dc4:	4b76      	ldr	r3, [pc, #472]	; (8001fa0 <API_FOC_Torque_Update+0x4a8>)
 8001dc6:	edd3 6a00 	vldr	s13, [r3]
 8001dca:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001dce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

		// (Id,Iq) filtering
		present_Id_filtered = ALPHA_CURRENT_DQ*present_Id+(1.0f-ALPHA_CURRENT_DQ)*present_Id_filtered;
 8001dda:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001dde:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001fb4 <API_FOC_Torque_Update+0x4bc>
 8001de2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001de6:	4b74      	ldr	r3, [pc, #464]	; (8001fb8 <API_FOC_Torque_Update+0x4c0>)
 8001de8:	edd3 7a00 	vldr	s15, [r3]
 8001dec:	eddf 6a73 	vldr	s13, [pc, #460]	; 8001fbc <API_FOC_Torque_Update+0x4c4>
 8001df0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df8:	4b6f      	ldr	r3, [pc, #444]	; (8001fb8 <API_FOC_Torque_Update+0x4c0>)
 8001dfa:	edc3 7a00 	vstr	s15, [r3]
		present_Iq_filtered = ALPHA_CURRENT_DQ*present_Iq+(1.0f-ALPHA_CURRENT_DQ)*present_Iq_filtered;
 8001dfe:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001e02:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001fb4 <API_FOC_Torque_Update+0x4bc>
 8001e06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e0a:	4b6d      	ldr	r3, [pc, #436]	; (8001fc0 <API_FOC_Torque_Update+0x4c8>)
 8001e0c:	edd3 7a00 	vldr	s15, [r3]
 8001e10:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8001fbc <API_FOC_Torque_Update+0x4c4>
 8001e14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e1c:	4b68      	ldr	r3, [pc, #416]	; (8001fc0 <API_FOC_Torque_Update+0x4c8>)
 8001e1e:	edc3 7a00 	vstr	s15, [r3]

		// flux controller (PI+FF) ==> Vd [-max_voltage_V,max_voltage_V]
		float const setpoint_Id = setpoint_flux_current_mA;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	64fb      	str	r3, [r7, #76]	; 0x4c
		float const Flux_Kp = (float)((int16_t)(MAKE_SHORT(regs[REG_PID_FLUX_CURRENT_KP_L],regs[REG_PID_FLUX_CURRENT_KP_H])))/100000.0f;
 8001e26:	4b67      	ldr	r3, [pc, #412]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001e28:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001e2c:	021b      	lsls	r3, r3, #8
 8001e2e:	b21a      	sxth	r2, r3
 8001e30:	4b64      	ldr	r3, [pc, #400]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001e32:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001e36:	b21b      	sxth	r3, r3
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	b21b      	sxth	r3, r3
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e44:	eddf 6a60 	vldr	s13, [pc, #384]	; 8001fc8 <API_FOC_Torque_Update+0x4d0>
 8001e48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e4c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		float const Flux_Ki = (float)((int16_t)(MAKE_SHORT(regs[REG_PID_FLUX_CURRENT_KI_L],regs[REG_PID_FLUX_CURRENT_KI_H])))/10000000.0f;
 8001e50:	4b5c      	ldr	r3, [pc, #368]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e56:	021b      	lsls	r3, r3, #8
 8001e58:	b21a      	sxth	r2, r3
 8001e5a:	4b5a      	ldr	r3, [pc, #360]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e60:	b21b      	sxth	r3, r3
 8001e62:	4313      	orrs	r3, r2
 8001e64:	b21b      	sxth	r3, r3
 8001e66:	ee07 3a90 	vmov	s15, r3
 8001e6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e6e:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001fcc <API_FOC_Torque_Update+0x4d4>
 8001e72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e76:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		float const Flux_Kff = (float)((int16_t)(MAKE_SHORT(regs[REG_PID_FLUX_CURRENT_KFF_L],regs[REG_PID_FLUX_CURRENT_KFF_H])))/100000.0f;
 8001e7a:	4b52      	ldr	r3, [pc, #328]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001e7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	b21a      	sxth	r2, r3
 8001e84:	4b4f      	ldr	r3, [pc, #316]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001e86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e8a:	b21b      	sxth	r3, r3
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	b21b      	sxth	r3, r3
 8001e90:	ee07 3a90 	vmov	s15, r3
 8001e94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e98:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8001fc8 <API_FOC_Torque_Update+0x4d0>
 8001e9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ea0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		float const error_Id = setpoint_Id-( closed_loop == 1 ? present_Id_filtered : 0.0f);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d103      	bne.n	8001eb2 <API_FOC_Torque_Update+0x3ba>
 8001eaa:	4b43      	ldr	r3, [pc, #268]	; (8001fb8 <API_FOC_Torque_Update+0x4c0>)
 8001eac:	edd3 7a00 	vldr	s15, [r3]
 8001eb0:	e001      	b.n	8001eb6 <API_FOC_Torque_Update+0x3be>
 8001eb2:	eddf 7a48 	vldr	s15, [pc, #288]	; 8001fd4 <API_FOC_Torque_Update+0x4dc>
 8001eb6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001eba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ebe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				&pid_flux,
				error_Id,
				Flux_Kp,
				Flux_Ki,
				0.0f, // no Kd
				regs[REG_HIGH_VOLTAGE_LIMIT_VALUE],
 8001ec2:	4b40      	ldr	r3, [pc, #256]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001ec4:	7f1b      	ldrb	r3, [r3, #28]
		float const Vd = pid_process_antiwindup_clamp_with_ff(
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ece:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001ed2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eda:	eeb0 3a67 	vmov.f32	s6, s15
 8001ede:	eddf 2a3d 	vldr	s5, [pc, #244]	; 8001fd4 <API_FOC_Torque_Update+0x4dc>
 8001ee2:	eeb0 2a66 	vmov.f32	s4, s13
 8001ee6:	eddf 1a3b 	vldr	s3, [pc, #236]	; 8001fd4 <API_FOC_Torque_Update+0x4dc>
 8001eea:	ed97 1a11 	vldr	s2, [r7, #68]	; 0x44
 8001eee:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 8001ef2:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001ef6:	4836      	ldr	r0, [pc, #216]	; (8001fd0 <API_FOC_Torque_Update+0x4d8>)
 8001ef8:	f002 f984 	bl	8004204 <pid_process_antiwindup_clamp_with_ff>
 8001efc:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
				0.0f, // no derivative low pass filter
				Flux_Kff*setpoint_Id
		);

		// torque controller (PI+FF) ==> Vq [-max_voltage_V,max_voltage_V]
		float const setpoint_Iq = setpoint_torque_current_mA;
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	637b      	str	r3, [r7, #52]	; 0x34
		float const Torque_Kp = (float)((int16_t)(MAKE_SHORT(regs[REG_PID_TORQUE_CURRENT_KP_L],regs[REG_PID_TORQUE_CURRENT_KP_H])))/100000.0f;
 8001f04:	4b2f      	ldr	r3, [pc, #188]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001f06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f0a:	021b      	lsls	r3, r3, #8
 8001f0c:	b21a      	sxth	r2, r3
 8001f0e:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001f10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f14:	b21b      	sxth	r3, r3
 8001f16:	4313      	orrs	r3, r2
 8001f18:	b21b      	sxth	r3, r3
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f22:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001fc8 <API_FOC_Torque_Update+0x4d0>
 8001f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f2a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		float const Torque_Ki = (float)((int16_t)(MAKE_SHORT(regs[REG_PID_TORQUE_CURRENT_KI_L],regs[REG_PID_TORQUE_CURRENT_KI_H])))/10000000.0f;
 8001f2e:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001f30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	b21a      	sxth	r2, r3
 8001f38:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001f3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f3e:	b21b      	sxth	r3, r3
 8001f40:	4313      	orrs	r3, r2
 8001f42:	b21b      	sxth	r3, r3
 8001f44:	ee07 3a90 	vmov	s15, r3
 8001f48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f4c:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001fcc <API_FOC_Torque_Update+0x4d4>
 8001f50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f54:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		float const Torque_Kff = (float)((int16_t)(MAKE_SHORT(regs[REG_PID_TORQUE_CURRENT_KFF_L],regs[REG_PID_TORQUE_CURRENT_KFF_H])))/100000.0f;
 8001f58:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001f5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	b21a      	sxth	r2, r3
 8001f62:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001f64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f68:	b21b      	sxth	r3, r3
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	b21b      	sxth	r3, r3
 8001f6e:	ee07 3a90 	vmov	s15, r3
 8001f72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f76:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001fc8 <API_FOC_Torque_Update+0x4d0>
 8001f7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f7e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		float const error_Iq = setpoint_Iq-( closed_loop == 1 ? present_Iq_filtered : 0.0f);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d127      	bne.n	8001fd8 <API_FOC_Torque_Update+0x4e0>
 8001f88:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <API_FOC_Torque_Update+0x4c8>)
 8001f8a:	edd3 7a00 	vldr	s15, [r3]
 8001f8e:	e025      	b.n	8001fdc <API_FOC_Torque_Update+0x4e4>
 8001f90:	bf800000 	.word	0xbf800000
 8001f94:	20000120 	.word	0x20000120
 8001f98:	40c90fdb 	.word	0x40c90fdb
 8001f9c:	20000164 	.word	0x20000164
 8001fa0:	20000160 	.word	0x20000160
 8001fa4:	200000f0 	.word	0x200000f0
 8001fa8:	3f2aaaab 	.word	0x3f2aaaab
 8001fac:	3eaaaaab 	.word	0x3eaaaaab
 8001fb0:	0800e510 	.word	0x0800e510
 8001fb4:	3d4ccccd 	.word	0x3d4ccccd
 8001fb8:	200000fc 	.word	0x200000fc
 8001fbc:	3f733333 	.word	0x3f733333
 8001fc0:	20000100 	.word	0x20000100
 8001fc4:	20000218 	.word	0x20000218
 8001fc8:	47c35000 	.word	0x47c35000
 8001fcc:	4b189680 	.word	0x4b189680
 8001fd0:	20000104 	.word	0x20000104
 8001fd4:	00000000 	.word	0x00000000
 8001fd8:	ed5f 7a02 	vldr	s15, [pc, #-8]	; 8001fd4 <API_FOC_Torque_Update+0x4dc>
 8001fdc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fe4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				&pid_torque,
				error_Iq,
				Torque_Kp,
				Torque_Ki,
				0.0f, // no Kd
				regs[REG_HIGH_VOLTAGE_LIMIT_VALUE],
 8001fe8:	4b2c      	ldr	r3, [pc, #176]	; (800209c <API_FOC_Torque_Update+0x5a4>)
 8001fea:	7f1b      	ldrb	r3, [r3, #28]
		float const Vq = pid_process_antiwindup_clamp_with_ff(
 8001fec:	ee07 3a90 	vmov	s15, r3
 8001ff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ff4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001ff8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002000:	eeb0 3a67 	vmov.f32	s6, s15
 8002004:	eddf 2a26 	vldr	s5, [pc, #152]	; 80020a0 <API_FOC_Torque_Update+0x5a8>
 8002008:	eeb0 2a66 	vmov.f32	s4, s13
 800200c:	eddf 1a24 	vldr	s3, [pc, #144]	; 80020a0 <API_FOC_Torque_Update+0x5a8>
 8002010:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 8002014:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8002018:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800201c:	4821      	ldr	r0, [pc, #132]	; (80020a4 <API_FOC_Torque_Update+0x5ac>)
 800201e:	f002 f8f1 	bl	8004204 <pid_process_antiwindup_clamp_with_ff>
 8002022:	ed87 0a08 	vstr	s0, [r7, #32]
				0.0f, // no derivative low pass filter
				Torque_Kff*setpoint_Iq
		);

		// do inverse clarke and park transformation and update TIMER1 register (3-phase PWM generation)
		LL_FOC_Inverse_Clarke_Park_PWM_Generation(Vd,Vq,cosine_theta,sine_theta);
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <API_FOC_Torque_Update+0x5b0>)
 8002028:	edd3 7a00 	vldr	s15, [r3]
 800202c:	4b1f      	ldr	r3, [pc, #124]	; (80020ac <API_FOC_Torque_Update+0x5b4>)
 800202e:	ed93 7a00 	vldr	s14, [r3]
 8002032:	eef0 1a47 	vmov.f32	s3, s14
 8002036:	eeb0 1a67 	vmov.f32	s2, s15
 800203a:	edd7 0a08 	vldr	s1, [r7, #32]
 800203e:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8002042:	f7ff fb49 	bl	80016d8 <LL_FOC_Inverse_Clarke_Park_PWM_Generation>

		// performance monitoring
		uint16_t const t_end = __HAL_TIM_GET_COUNTER(&htim6);
 8002046:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <API_FOC_Torque_Update+0x5b8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	83fb      	strh	r3, [r7, #30]
		uint16_t const t_tp = t_end-t_begin;
 800204e:	8bfa      	ldrh	r2, [r7, #30]
 8002050:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	83bb      	strh	r3, [r7, #28]
		static const float alpha_performance_monitoring = 0.001f;
		average_processing_time_us = (1.0f-alpha_performance_monitoring)*average_processing_time_us+alpha_performance_monitoring*(float)t_tp;
 8002058:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <API_FOC_Torque_Update+0x5bc>)
 800205a:	edd3 7a00 	vldr	s15, [r3]
 800205e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002062:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002066:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <API_FOC_Torque_Update+0x5c0>)
 8002068:	edd3 7a00 	vldr	s15, [r3]
 800206c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002070:	8bbb      	ldrh	r3, [r7, #28]
 8002072:	ee07 3a90 	vmov	s15, r3
 8002076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <API_FOC_Torque_Update+0x5bc>)
 800207c:	edd3 7a00 	vldr	s15, [r3]
 8002080:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <API_FOC_Torque_Update+0x5c0>)
 800208a:	edc3 7a00 	vstr	s15, [r3]
				(int)(duty_cycle_PWMb*100.0f),
				(int)(duty_cycle_PWMc*100.0f)
			);
		}*/
	}
}
 800208e:	bf00      	nop
 8002090:	3778      	adds	r7, #120	; 0x78
 8002092:	46bd      	mov	sp, r7
 8002094:	ecbd 8b02 	vpop	{d8}
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000218 	.word	0x20000218
 80020a0:	00000000 	.word	0x00000000
 80020a4:	20000110 	.word	0x20000110
 80020a8:	20000160 	.word	0x20000160
 80020ac:	20000164 	.word	0x20000164
 80020b0:	20002ef8 	.word	0x20002ef8
 80020b4:	0800e514 	.word	0x0800e514
 80020b8:	20000140 	.word	0x20000140

080020bc <API_FOC_Get_Present_Velocity>:
{
	return absolute_position_multi_rad;
}

float API_FOC_Get_Present_Velocity()
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
	return velocity_dps;
 80020c0:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <API_FOC_Get_Present_Velocity+0x18>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	ee07 3a90 	vmov	s15, r3
}
 80020c8:	eeb0 0a67 	vmov.f32	s0, s15
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	20000128 	.word	0x20000128

080020d8 <API_FOC_Get_Present_Torque_Current>:

float API_FOC_Get_Present_Torque_Current()
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
	return present_Iq_filtered;
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <API_FOC_Get_Present_Torque_Current+0x18>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	ee07 3a90 	vmov	s15, r3
}
 80020e4:	eeb0 0a67 	vmov.f32	s0, s15
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	20000100 	.word	0x20000100

080020f4 <API_FOC_Get_Present_Flux_Current>:

float API_FOC_Get_Present_Flux_Current()
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
	return present_Id_filtered;
 80020f8:	4b04      	ldr	r3, [pc, #16]	; (800210c <API_FOC_Get_Present_Flux_Current+0x18>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	ee07 3a90 	vmov	s15, r3
}
 8002100:	eeb0 0a67 	vmov.f32	s0, s15
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	200000fc 	.word	0x200000fc

08002110 <API_FOC_Get_Present_Voltage>:

float API_FOC_Get_Present_Voltage()
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
	return present_voltage_V;
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <API_FOC_Get_Present_Voltage+0x18>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	ee07 3a90 	vmov	s15, r3
}
 800211c:	eeb0 0a67 	vmov.f32	s0, s15
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	20000138 	.word	0x20000138

0800212c <API_FOC_Get_Present_Temp>:

float API_FOC_Get_Present_Temp()
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
	return present_temperature_C;
 8002130:	4b04      	ldr	r3, [pc, #16]	; (8002144 <API_FOC_Get_Present_Temp+0x18>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	ee07 3a90 	vmov	s15, r3
}
 8002138:	eeb0 0a67 	vmov.f32	s0, s15
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	2000013c 	.word	0x2000013c

08002148 <API_FOC_Get_Processing_Time>:

float API_FOC_Get_Processing_Time()
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
	return average_processing_time_us;
 800214c:	4b04      	ldr	r3, [pc, #16]	; (8002160 <API_FOC_Get_Processing_Time+0x18>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	ee07 3a90 	vmov	s15, r3

}
 8002154:	eeb0 0a67 	vmov.f32	s0, s15
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	20000140 	.word	0x20000140

08002164 <API_FOC_It>:

void API_FOC_It(ADC_HandleTypeDef *hadc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	if(hadc==&hadc1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a4e      	ldr	r2, [pc, #312]	; (80022a8 <API_FOC_It+0x144>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d146      	bne.n	8002202 <API_FOC_It+0x9e>
	{
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1))
 8002174:	4b4d      	ldr	r3, [pc, #308]	; (80022ac <API_FOC_It+0x148>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	2b10      	cmp	r3, #16
 8002180:	d123      	bne.n	80021ca <API_FOC_It+0x66>
		{
			// Filter (EWMA) position and voltage ADC samples
			motor_current_input_adc[0] = ADC1_DMA[1];
 8002182:	4b4b      	ldr	r3, [pc, #300]	; (80022b0 <API_FOC_It+0x14c>)
 8002184:	885b      	ldrh	r3, [r3, #2]
 8002186:	b29a      	uxth	r2, r3
 8002188:	4b4a      	ldr	r3, [pc, #296]	; (80022b4 <API_FOC_It+0x150>)
 800218a:	801a      	strh	r2, [r3, #0]
			potentiometer_input_adc = ADC1_DMA[2];
 800218c:	4b48      	ldr	r3, [pc, #288]	; (80022b0 <API_FOC_It+0x14c>)
 800218e:	889b      	ldrh	r3, [r3, #4]
 8002190:	b29b      	uxth	r3, r3
 8002192:	ee07 3a90 	vmov	s15, r3
 8002196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800219a:	4b47      	ldr	r3, [pc, #284]	; (80022b8 <API_FOC_It+0x154>)
 800219c:	edc3 7a00 	vstr	s15, [r3]
			vbus_input_adc = ADC1_DMA[3];
 80021a0:	4b43      	ldr	r3, [pc, #268]	; (80022b0 <API_FOC_It+0x14c>)
 80021a2:	88db      	ldrh	r3, [r3, #6]
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	ee07 3a90 	vmov	s15, r3
 80021aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ae:	4b43      	ldr	r3, [pc, #268]	; (80022bc <API_FOC_It+0x158>)
 80021b0:	edc3 7a00 	vstr	s15, [r3]
			temperature_input_adc = ADC1_DMA[4];
 80021b4:	4b3e      	ldr	r3, [pc, #248]	; (80022b0 <API_FOC_It+0x14c>)
 80021b6:	891b      	ldrh	r3, [r3, #8]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	ee07 3a90 	vmov	s15, r3
 80021be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021c2:	4b3f      	ldr	r3, [pc, #252]	; (80022c0 <API_FOC_It+0x15c>)
 80021c4:	edc3 7a00 	vstr	s15, [r3]
 80021c8:	e016      	b.n	80021f8 <API_FOC_It+0x94>
		}
		else
		{
			motor_current_input_adc_offset[0] = ALPHA_CURRENT_SENSE_OFFSET*(float)(ADC1_DMA[1]) + (1.0f-ALPHA_CURRENT_SENSE_OFFSET)*motor_current_input_adc_offset[0];
 80021ca:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <API_FOC_It+0x14c>)
 80021cc:	885b      	ldrh	r3, [r3, #2]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	ee07 3a90 	vmov	s15, r3
 80021d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021d8:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80022c4 <API_FOC_It+0x160>
 80021dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021e0:	4b39      	ldr	r3, [pc, #228]	; (80022c8 <API_FOC_It+0x164>)
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	eddf 6a39 	vldr	s13, [pc, #228]	; 80022cc <API_FOC_It+0x168>
 80021ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f2:	4b35      	ldr	r3, [pc, #212]	; (80022c8 <API_FOC_It+0x164>)
 80021f4:	edc3 7a00 	vstr	s15, [r3]
		}
		// restart ADC
		HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC1_DMA,5);
 80021f8:	2205      	movs	r2, #5
 80021fa:	492d      	ldr	r1, [pc, #180]	; (80022b0 <API_FOC_It+0x14c>)
 80021fc:	482a      	ldr	r0, [pc, #168]	; (80022a8 <API_FOC_It+0x144>)
 80021fe:	f004 fb33 	bl	8006868 <HAL_ADC_Start_DMA>
	}
	if(hadc==&hadc2)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a32      	ldr	r2, [pc, #200]	; (80022d0 <API_FOC_It+0x16c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d149      	bne.n	800229e <API_FOC_It+0x13a>
	{
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1))
 800220a:	4b28      	ldr	r3, [pc, #160]	; (80022ac <API_FOC_It+0x148>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0310 	and.w	r3, r3, #16
 8002214:	2b10      	cmp	r3, #16
 8002216:	d10f      	bne.n	8002238 <API_FOC_It+0xd4>
		{
			// Filter (EWMA) position and voltage ADC samples
			motor_current_input_adc[1] = ADC2_DMA[1];
 8002218:	4b2e      	ldr	r3, [pc, #184]	; (80022d4 <API_FOC_It+0x170>)
 800221a:	885b      	ldrh	r3, [r3, #2]
 800221c:	b29a      	uxth	r2, r3
 800221e:	4b25      	ldr	r3, [pc, #148]	; (80022b4 <API_FOC_It+0x150>)
 8002220:	805a      	strh	r2, [r3, #2]
			motor_current_input_adc[2] = ADC2_DMA[2];
 8002222:	4b2c      	ldr	r3, [pc, #176]	; (80022d4 <API_FOC_It+0x170>)
 8002224:	889b      	ldrh	r3, [r3, #4]
 8002226:	b29a      	uxth	r2, r3
 8002228:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <API_FOC_It+0x150>)
 800222a:	809a      	strh	r2, [r3, #4]
			++current_samples;
 800222c:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <API_FOC_It+0x174>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	3301      	adds	r3, #1
 8002232:	4a29      	ldr	r2, [pc, #164]	; (80022d8 <API_FOC_It+0x174>)
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e02d      	b.n	8002294 <API_FOC_It+0x130>
		}
		else
		{
			motor_current_input_adc_offset[1] = ALPHA_CURRENT_SENSE_OFFSET*(float)(ADC2_DMA[1]) + (1.0f-ALPHA_CURRENT_SENSE_OFFSET)*motor_current_input_adc_offset[1];
 8002238:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <API_FOC_It+0x170>)
 800223a:	885b      	ldrh	r3, [r3, #2]
 800223c:	b29b      	uxth	r3, r3
 800223e:	ee07 3a90 	vmov	s15, r3
 8002242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002246:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80022c4 <API_FOC_It+0x160>
 800224a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800224e:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <API_FOC_It+0x164>)
 8002250:	edd3 7a01 	vldr	s15, [r3, #4]
 8002254:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80022cc <API_FOC_It+0x168>
 8002258:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800225c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002260:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <API_FOC_It+0x164>)
 8002262:	edc3 7a01 	vstr	s15, [r3, #4]
			motor_current_input_adc_offset[2] = ALPHA_CURRENT_SENSE_OFFSET*(float)(ADC2_DMA[2]) + (1.0f-ALPHA_CURRENT_SENSE_OFFSET)*motor_current_input_adc_offset[2];
 8002266:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <API_FOC_It+0x170>)
 8002268:	889b      	ldrh	r3, [r3, #4]
 800226a:	b29b      	uxth	r3, r3
 800226c:	ee07 3a90 	vmov	s15, r3
 8002270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002274:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80022c4 <API_FOC_It+0x160>
 8002278:	ee27 7a87 	vmul.f32	s14, s15, s14
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <API_FOC_It+0x164>)
 800227e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002282:	eddf 6a12 	vldr	s13, [pc, #72]	; 80022cc <API_FOC_It+0x168>
 8002286:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800228a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <API_FOC_It+0x164>)
 8002290:	edc3 7a02 	vstr	s15, [r3, #8]
		}
		// restart ADC
		HAL_ADC_Start_DMA(&hadc2,(uint32_t*)ADC2_DMA,3);
 8002294:	2203      	movs	r2, #3
 8002296:	490f      	ldr	r1, [pc, #60]	; (80022d4 <API_FOC_It+0x170>)
 8002298:	480d      	ldr	r0, [pc, #52]	; (80022d0 <API_FOC_It+0x16c>)
 800229a:	f004 fae5 	bl	8006868 <HAL_ADC_Start_DMA>
	}
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000498 	.word	0x20000498
 80022ac:	20002f44 	.word	0x20002f44
 80022b0:	200000cc 	.word	0x200000cc
 80022b4:	200000e0 	.word	0x200000e0
 80022b8:	2000012c 	.word	0x2000012c
 80022bc:	20000130 	.word	0x20000130
 80022c0:	20000134 	.word	0x20000134
 80022c4:	3a83126f 	.word	0x3a83126f
 80022c8:	20000000 	.word	0x20000000
 80022cc:	3f7fbe77 	.word	0x3f7fbe77
 80022d0:	200003b4 	.word	0x200003b4
 80022d4:	200000d8 	.word	0x200000d8
 80022d8:	200000c8 	.word	0x200000c8

080022dc <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
	API_AS5048A_Position_Sensor_It(htim);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f002 f857 	bl	8004398 <API_AS5048A_Position_Sensor_It>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_ADC_ConvCpltCallback>:


// current sense
// TODO: add OC4 with short pulse to start ADC en OC4 EVENT, a little time before UPDATE
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
	API_FOC_It(hadc);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff ff32 	bl	8002164 <API_FOC_It>
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <FDCAN_Config>:
  * @brief  Configures the FDCAN.
  * @param  None
  * @retval None
  */
static void FDCAN_Config(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af02      	add	r7, sp, #8
  FDCAN_FilterTypeDef sFilterConfig;

  /* Configure Rx filter */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800230e:	2300      	movs	r3, #0
 8002310:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800231a:	2301      	movs	r3, #1
 800231c:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x000;
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x100;
 8002322:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002326:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8002328:	463b      	mov	r3, r7
 800232a:	4619      	mov	r1, r3
 800232c:	4829      	ldr	r0, [pc, #164]	; (80023d4 <FDCAN_Config+0xcc>)
 800232e:	f006 fa47 	bl	80087c0 <HAL_FDCAN_ConfigFilter>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <FDCAN_Config+0x34>
  {
    Error_Handler();
 8002338:	f001 ff20 	bl	800417c <Error_Handler>
  }

  /* Configure global filter:
     Filter all remote frames with STD and EXT ID
     Reject non matching frames with STD ID and EXT ID */
  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 800233c:	2300      	movs	r3, #0
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2300      	movs	r3, #0
 8002342:	2202      	movs	r2, #2
 8002344:	2102      	movs	r1, #2
 8002346:	4823      	ldr	r0, [pc, #140]	; (80023d4 <FDCAN_Config+0xcc>)
 8002348:	f006 fa94 	bl	8008874 <HAL_FDCAN_ConfigGlobalFilter>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <FDCAN_Config+0x4e>
  {
    Error_Handler();
 8002352:	f001 ff13 	bl	800417c <Error_Handler>
  }

  HAL_GPIO_WritePin(CAN_SHDN_GPIO_Port, CAN_SHDN_Pin, GPIO_PIN_RESET);
 8002356:	2200      	movs	r2, #0
 8002358:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800235c:	481e      	ldr	r0, [pc, #120]	; (80023d8 <FDCAN_Config+0xd0>)
 800235e:	f007 f9cb 	bl	80096f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAN_TERM_GPIO_Port, CAN_TERM_Pin, GPIO_PIN_RESET); // SET means activating R120
 8002362:	2200      	movs	r2, #0
 8002364:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002368:	481b      	ldr	r0, [pc, #108]	; (80023d8 <FDCAN_Config+0xd0>)
 800236a:	f007 f9c5 	bl	80096f8 <HAL_GPIO_WritePin>

  /* Start the FDCAN module */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800236e:	4819      	ldr	r0, [pc, #100]	; (80023d4 <FDCAN_Config+0xcc>)
 8002370:	f006 fab1 	bl	80088d6 <HAL_FDCAN_Start>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <FDCAN_Config+0x76>
  {
    Error_Handler();
 800237a:	f001 feff 	bl	800417c <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800237e:	2200      	movs	r2, #0
 8002380:	2101      	movs	r1, #1
 8002382:	4814      	ldr	r0, [pc, #80]	; (80023d4 <FDCAN_Config+0xcc>)
 8002384:	f006 fc0c 	bl	8008ba0 <HAL_FDCAN_ActivateNotification>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <FDCAN_Config+0x8a>
  {
    Error_Handler();
 800238e:	f001 fef5 	bl	800417c <Error_Handler>
  }

  /* Prepare Tx Header */
  TxHeader.Identifier = 0x001;
 8002392:	4b12      	ldr	r3, [pc, #72]	; (80023dc <FDCAN_Config+0xd4>)
 8002394:	2201      	movs	r2, #1
 8002396:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8002398:	4b10      	ldr	r3, [pc, #64]	; (80023dc <FDCAN_Config+0xd4>)
 800239a:	2200      	movs	r2, #0
 800239c:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800239e:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <FDCAN_Config+0xd4>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80023a4:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <FDCAN_Config+0xd4>)
 80023a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80023aa:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <FDCAN_Config+0xd4>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80023b2:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <FDCAN_Config+0xd4>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <FDCAN_Config+0xd4>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80023be:	4b07      	ldr	r3, [pc, #28]	; (80023dc <FDCAN_Config+0xd4>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <FDCAN_Config+0xd4>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	621a      	str	r2, [r3, #32]
}
 80023ca:	bf00      	nop
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20002e94 	.word	0x20002e94
 80023d8:	48000800 	.word	0x48000800
 80023dc:	20000198 	.word	0x20000198

080023e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023e0:	b5b0      	push	{r4, r5, r7, lr}
 80023e2:	ed2d 8b04 	vpush	{d8-d9}
 80023e6:	b0bc      	sub	sp, #240	; 0xf0
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023ea:	f003 fde2 	bl	8005fb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023ee:	f001 f9fb 	bl	80037e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023f2:	f001 fe6b 	bl	80040cc <MX_GPIO_Init>
  MX_DMA_Init();
 80023f6:	f001 fe27 	bl	8004048 <MX_DMA_Init>
  MX_TIM4_Init();
 80023fa:	f001 fd4b 	bl	8003e94 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80023fe:	f001 fdd5 	bl	8003fac <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002402:	f001 fc7b 	bl	8003cfc <MX_TIM1_Init>
  MX_ADC1_Init();
 8002406:	f001 fa59 	bl	80038bc <MX_ADC1_Init>
  MX_ADC2_Init();
 800240a:	f001 fb0f 	bl	8003a2c <MX_ADC2_Init>
  MX_OPAMP1_Init();
 800240e:	f001 fbeb 	bl	8003be8 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8002412:	f001 fc17 	bl	8003c44 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8002416:	f001 fc43 	bl	8003ca0 <MX_OPAMP3_Init>
  MX_CORDIC_Init();
 800241a:	f001 fb8b 	bl	8003b34 <MX_CORDIC_Init>
  MX_TIM6_Init();
 800241e:	f001 fd8f 	bl	8003f40 <MX_TIM6_Init>
  MX_FDCAN1_Init();
 8002422:	f001 fb9b 	bl	8003b5c <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6); // 1us base timer
 8002426:	4882      	ldr	r0, [pc, #520]	; (8002630 <main+0x250>)
 8002428:	f008 fab0 	bl	800a98c <HAL_TIM_Base_Start>
  uint16_t present_time_us = __HAL_TIM_GET_COUNTER(&htim6);
 800242c:	4b80      	ldr	r3, [pc, #512]	; (8002630 <main+0x250>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
  uint16_t last_time_us = present_time_us;
 8002436:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800243a:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
  API_FOC_Init();
 800243e:	f7fe fffb 	bl	8001438 <API_FOC_Init>
  HAL_Serial_Init(&huart2,&serial);
 8002442:	497c      	ldr	r1, [pc, #496]	; (8002634 <main+0x254>)
 8002444:	487c      	ldr	r0, [pc, #496]	; (8002638 <main+0x258>)
 8002446:	f002 fcc3 	bl	8004dd0 <HAL_Serial_Init>
  HAL_Serial_Print(&serial,"RESET!\n");
 800244a:	497c      	ldr	r1, [pc, #496]	; (800263c <main+0x25c>)
 800244c:	4879      	ldr	r0, [pc, #484]	; (8002634 <main+0x254>)
 800244e:	f003 f8f7 	bl	8005640 <HAL_Serial_Print>
	if(eeprom_empty())
 8002452:	f7fe fe67 	bl	8001124 <eeprom_empty>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <main+0x80>
		factory_reset_eeprom_regs();
 800245c:	f7fe fd26 	bl	8000eac <factory_reset_eeprom_regs>
	load_eeprom_regs();
 8002460:	f7fe fe36 	bl	80010d0 <load_eeprom_regs>
	reset_ram_regs();
 8002464:	f7fe fe48 	bl	80010f8 <reset_ram_regs>
	FDCAN_Config();
 8002468:	f7ff ff4e 	bl	8002308 <FDCAN_Config>
	///////////////
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	float setpoint_position_deg = 0.0f;
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	float setpoint_velocity_dps = 0.0f;
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	float setpoint_acceleration_dpss = 0.0f;
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	float setpoint_torque_current_mA = 0.0f;
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	float setpoint_flux_current_mA = 0.0f;
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	float last_setpoint_velocity_dps = 0.0f;
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	uint16_t last_mode = regs[REG_CONTROL_MODE];
 800249c:	4b68      	ldr	r3, [pc, #416]	; (8002640 <main+0x260>)
 800249e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80024a2:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	pid_context_t pid_velocity;
	pid_context_t pid_position;
	pid_reset(&pid_position);
 80024a6:	f107 030c 	add.w	r3, r7, #12
 80024aa:	4618      	mov	r0, r3
 80024ac:	f001 fe94 	bl	80041d8 <pid_reset>
	pid_reset(&pid_velocity);
 80024b0:	f107 0318 	add.w	r3, r7, #24
 80024b4:	4618      	mov	r0, r3
 80024b6:	f001 fe8f 	bl	80041d8 <pid_reset>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// Handle CAN communication
	while( HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1,FDCAN_RX_FIFO0)!=0)
 80024ba:	e070      	b.n	800259e <main+0x1be>
	{
	  HAL_StatusTypeDef rx_result = HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0,&RxHeader,RxData);
 80024bc:	4b61      	ldr	r3, [pc, #388]	; (8002644 <main+0x264>)
 80024be:	4a62      	ldr	r2, [pc, #392]	; (8002648 <main+0x268>)
 80024c0:	2140      	movs	r1, #64	; 0x40
 80024c2:	4862      	ldr	r0, [pc, #392]	; (800264c <main+0x26c>)
 80024c4:	f006 fa74 	bl	80089b0 <HAL_FDCAN_GetRxMessage>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  if(rx_result==HAL_OK)
 80024ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d163      	bne.n	800259e <main+0x1be>
	  {
		  // decode message ID=0x000
		  if(RxHeader.Identifier==0x000)
 80024d6:	4b5c      	ldr	r3, [pc, #368]	; (8002648 <main+0x268>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d15f      	bne.n	800259e <main+0x1be>
		  {
			  uint32_t payload_length = RxHeader.DataLength>>16U;
 80024de:	4b5a      	ldr	r3, [pc, #360]	; (8002648 <main+0x268>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	0c1b      	lsrs	r3, r3, #16
 80024e4:	62bb      	str	r3, [r7, #40]	; 0x28
			  // check payload size = 8
			  if(payload_length==8)
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d158      	bne.n	800259e <main+0x1be>
			  {
				  // decode payload filed
				  uint8_t const id = RxData[0];
 80024ec:	4b55      	ldr	r3, [pc, #340]	; (8002644 <main+0x264>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				  //uint8_t const mode = RxData[1];
				  //float const goal_position = (int16_t)(MAKE_SHORT(RxData[2],RxData[3]));;
				  //float const goal_velocity = (int16_t)(MAKE_SHORT(RxData[4],RxData[5]));;
				  //float const goal_torque = (int16_t)(MAKE_SHORT(RxData[6],RxData[7]));;
				  if(id==regs[REG_ID])
 80024f4:	4b52      	ldr	r3, [pc, #328]	; (8002640 <main+0x260>)
 80024f6:	78db      	ldrb	r3, [r3, #3]
 80024f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d122      	bne.n	8002546 <main+0x166>
				  {
					  regs[REG_CONTROL_MODE] = RxData[1];
 8002500:	4b50      	ldr	r3, [pc, #320]	; (8002644 <main+0x264>)
 8002502:	785a      	ldrb	r2, [r3, #1]
 8002504:	4b4e      	ldr	r3, [pc, #312]	; (8002640 <main+0x260>)
 8002506:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
					  regs[REG_GOAL_POSITION_DEG_L] = RxData[2];
 800250a:	4b4e      	ldr	r3, [pc, #312]	; (8002644 <main+0x264>)
 800250c:	789a      	ldrb	r2, [r3, #2]
 800250e:	4b4c      	ldr	r3, [pc, #304]	; (8002640 <main+0x260>)
 8002510:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					  regs[REG_GOAL_POSITION_DEG_H] = RxData[3];
 8002514:	4b4b      	ldr	r3, [pc, #300]	; (8002644 <main+0x264>)
 8002516:	78da      	ldrb	r2, [r3, #3]
 8002518:	4b49      	ldr	r3, [pc, #292]	; (8002640 <main+0x260>)
 800251a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
					  regs[REG_GOAL_VELOCITY_DPS_L] = RxData[4];
 800251e:	4b49      	ldr	r3, [pc, #292]	; (8002644 <main+0x264>)
 8002520:	791a      	ldrb	r2, [r3, #4]
 8002522:	4b47      	ldr	r3, [pc, #284]	; (8002640 <main+0x260>)
 8002524:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
					  regs[REG_GOAL_VELOCITY_DPS_H] = RxData[5];
 8002528:	4b46      	ldr	r3, [pc, #280]	; (8002644 <main+0x264>)
 800252a:	795a      	ldrb	r2, [r3, #5]
 800252c:	4b44      	ldr	r3, [pc, #272]	; (8002640 <main+0x260>)
 800252e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
					  regs[REG_GOAL_TORQUE_CURRENT_MA_L] = RxData[6];
 8002532:	4b44      	ldr	r3, [pc, #272]	; (8002644 <main+0x264>)
 8002534:	799a      	ldrb	r2, [r3, #6]
 8002536:	4b42      	ldr	r3, [pc, #264]	; (8002640 <main+0x260>)
 8002538:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
					  regs[REG_GOAL_TORQUE_CURRENT_MA_H] = RxData[7];
 800253c:	4b41      	ldr	r3, [pc, #260]	; (8002644 <main+0x264>)
 800253e:	79da      	ldrb	r2, [r3, #7]
 8002540:	4b3f      	ldr	r3, [pc, #252]	; (8002640 <main+0x260>)
 8002542:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				  }
				  // then reply by a status frame
				  TxData[0] = regs[REG_ID];
 8002546:	4b3e      	ldr	r3, [pc, #248]	; (8002640 <main+0x260>)
 8002548:	78da      	ldrb	r2, [r3, #3]
 800254a:	4b41      	ldr	r3, [pc, #260]	; (8002650 <main+0x270>)
 800254c:	701a      	strb	r2, [r3, #0]
				  TxData[1] = regs[REG_HARDWARE_ERROR_STATUS];
 800254e:	4b3c      	ldr	r3, [pc, #240]	; (8002640 <main+0x260>)
 8002550:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 8002554:	4b3e      	ldr	r3, [pc, #248]	; (8002650 <main+0x270>)
 8002556:	705a      	strb	r2, [r3, #1]
				  TxData[2] = regs[REG_PRESENT_POSITION_DEG_L];
 8002558:	4b39      	ldr	r3, [pc, #228]	; (8002640 <main+0x260>)
 800255a:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 800255e:	4b3c      	ldr	r3, [pc, #240]	; (8002650 <main+0x270>)
 8002560:	709a      	strb	r2, [r3, #2]
				  TxData[3] = regs[REG_PRESENT_POSITION_DEG_H];
 8002562:	4b37      	ldr	r3, [pc, #220]	; (8002640 <main+0x260>)
 8002564:	f893 2091 	ldrb.w	r2, [r3, #145]	; 0x91
 8002568:	4b39      	ldr	r3, [pc, #228]	; (8002650 <main+0x270>)
 800256a:	70da      	strb	r2, [r3, #3]
				  TxData[4] = regs[REG_PRESENT_TORQUE_CURRENT_MA_L];
 800256c:	4b34      	ldr	r3, [pc, #208]	; (8002640 <main+0x260>)
 800256e:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
 8002572:	4b37      	ldr	r3, [pc, #220]	; (8002650 <main+0x270>)
 8002574:	711a      	strb	r2, [r3, #4]
				  TxData[5] = regs[REG_PRESENT_TORQUE_CURRENT_MA_H];
 8002576:	4b32      	ldr	r3, [pc, #200]	; (8002640 <main+0x260>)
 8002578:	f893 2095 	ldrb.w	r2, [r3, #149]	; 0x95
 800257c:	4b34      	ldr	r3, [pc, #208]	; (8002650 <main+0x270>)
 800257e:	715a      	strb	r2, [r3, #5]
				  TxData[6] = regs[REG_PRESENT_VOLTAGE];
 8002580:	4b2f      	ldr	r3, [pc, #188]	; (8002640 <main+0x260>)
 8002582:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8002586:	4b32      	ldr	r3, [pc, #200]	; (8002650 <main+0x270>)
 8002588:	719a      	strb	r2, [r3, #6]
				  TxData[7] = regs[REG_PRESENT_TEMPERATURE];
 800258a:	4b2d      	ldr	r3, [pc, #180]	; (8002640 <main+0x260>)
 800258c:	f893 2099 	ldrb.w	r2, [r3, #153]	; 0x99
 8002590:	4b2f      	ldr	r3, [pc, #188]	; (8002650 <main+0x270>)
 8002592:	71da      	strb	r2, [r3, #7]
				  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1,&TxHeader,TxData);
 8002594:	4a2e      	ldr	r2, [pc, #184]	; (8002650 <main+0x270>)
 8002596:	492f      	ldr	r1, [pc, #188]	; (8002654 <main+0x274>)
 8002598:	482c      	ldr	r0, [pc, #176]	; (800264c <main+0x26c>)
 800259a:	f006 f9c4 	bl	8008926 <HAL_FDCAN_AddMessageToTxFifoQ>
	while( HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1,FDCAN_RX_FIFO0)!=0)
 800259e:	2140      	movs	r1, #64	; 0x40
 80025a0:	482a      	ldr	r0, [pc, #168]	; (800264c <main+0x26c>)
 80025a2:	f006 fadf 	bl	8008b64 <HAL_FDCAN_GetRxFifoFillLevel>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d187      	bne.n	80024bc <main+0xdc>
	  //else
	  // CAN error handler
	}

	// Handle serial communication
	while(HAL_Serial_Available(&serial))
 80025ac:	e00a      	b.n	80025c4 <main+0x1e4>
	{
	  char c = HAL_Serial_GetChar(&serial);
 80025ae:	4821      	ldr	r0, [pc, #132]	; (8002634 <main+0x254>)
 80025b0:	f002 fca8 	bl	8004f04 <HAL_Serial_GetChar>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  packet_handler(c);
 80025ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025be:	4618      	mov	r0, r3
 80025c0:	f002 fa9c 	bl	8004afc <packet_handler>
	while(HAL_Serial_Available(&serial))
 80025c4:	481b      	ldr	r0, [pc, #108]	; (8002634 <main+0x254>)
 80025c6:	f002 fc6d 	bl	8004ea4 <HAL_Serial_Available>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1ee      	bne.n	80025ae <main+0x1ce>
	}

	// 1Khz low priority process
	#define MAIN_LOO_PERIOD_US 900
	present_time_us = __HAL_TIM_GET_COUNTER(&htim6);
 80025d0:	4b17      	ldr	r3, [pc, #92]	; (8002630 <main+0x250>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	int16_t const delta_time_us = present_time_us-last_time_us;
 80025da:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 80025de:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
	if(delta_time_us>=MAIN_LOO_PERIOD_US)
 80025ea:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 80025ee:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80025f2:	f2c1 809b 	blt.w	800372c <main+0x134c>
	{
		last_time_us+=MAIN_LOO_PERIOD_US;
 80025f6:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80025fa:	f503 7361 	add.w	r3, r3, #900	; 0x384
 80025fe:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
		// make alias
		uint16_t const reg_control_mode = regs[REG_CONTROL_MODE];
 8002602:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <main+0x260>)
 8002604:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002608:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
		// process operating mode
		switch(reg_control_mode)
 800260c:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8002610:	2b04      	cmp	r3, #4
 8002612:	f200 8705 	bhi.w	8003420 <main+0x1040>
 8002616:	a201      	add	r2, pc, #4	; (adr r2, 800261c <main+0x23c>)
 8002618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261c:	08002659 	.word	0x08002659
 8002620:	08002bb5 	.word	0x08002bb5
 8002624:	0800301f 	.word	0x0800301f
 8002628:	0800327b 	.word	0x0800327b
 800262c:	08003379 	.word	0x08003379
 8002630:	20002ef8 	.word	0x20002ef8
 8002634:	20000564 	.word	0x20000564
 8002638:	20002f90 	.word	0x20002f90
 800263c:	0800e4d4 	.word	0x0800e4d4
 8002640:	20000218 	.word	0x20000218
 8002644:	20000190 	.word	0x20000190
 8002648:	20000168 	.word	0x20000168
 800264c:	20002e94 	.word	0x20002e94
 8002650:	200001bc 	.word	0x200001bc
 8002654:	20000198 	.word	0x20000198
		{
		case REG_CONTROL_MODE_POSITION_VELOCITY_TORQUE_VELOCITY_PROFIL:
			if(last_mode!=REG_CONTROL_MODE_POSITION_VELOCITY_TORQUE_VELOCITY_PROFIL)
 8002658:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 809a 	beq.w	8002796 <main+0x3b6>
			{
				pid_reset(&pid_position);
 8002662:	f107 030c 	add.w	r3, r7, #12
 8002666:	4618      	mov	r0, r3
 8002668:	f001 fdb6 	bl	80041d8 <pid_reset>
				pid_reset(&pid_velocity);
 800266c:	f107 0318 	add.w	r3, r7, #24
 8002670:	4618      	mov	r0, r3
 8002672:	f001 fdb1 	bl	80041d8 <pid_reset>
				// copy EEPROM to RAM
				regs[REG_GOAL_VELOCITY_DPS_L] = regs[REG_MAX_VELOCITY_DPS_L];
 8002676:	4b94      	ldr	r3, [pc, #592]	; (80028c8 <main+0x4e8>)
 8002678:	7d1a      	ldrb	r2, [r3, #20]
 800267a:	4b93      	ldr	r3, [pc, #588]	; (80028c8 <main+0x4e8>)
 800267c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
				regs[REG_GOAL_VELOCITY_DPS_H] = regs[REG_MAX_VELOCITY_DPS_H];
 8002680:	4b91      	ldr	r3, [pc, #580]	; (80028c8 <main+0x4e8>)
 8002682:	7d5a      	ldrb	r2, [r3, #21]
 8002684:	4b90      	ldr	r3, [pc, #576]	; (80028c8 <main+0x4e8>)
 8002686:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
				regs[REG_GOAL_TORQUE_CURRENT_MA_L] = regs[REG_MAX_CURRENT_MA_L];
 800268a:	4b8f      	ldr	r3, [pc, #572]	; (80028c8 <main+0x4e8>)
 800268c:	7e1a      	ldrb	r2, [r3, #24]
 800268e:	4b8e      	ldr	r3, [pc, #568]	; (80028c8 <main+0x4e8>)
 8002690:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
				regs[REG_GOAL_TORQUE_CURRENT_MA_H] = regs[REG_MAX_CURRENT_MA_H];
 8002694:	4b8c      	ldr	r3, [pc, #560]	; (80028c8 <main+0x4e8>)
 8002696:	7e5a      	ldrb	r2, [r3, #25]
 8002698:	4b8b      	ldr	r3, [pc, #556]	; (80028c8 <main+0x4e8>)
 800269a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				// reset unused RAM
				regs[REG_GOAL_FLUX_CURRENT_MA_L] = 0;
 800269e:	4b8a      	ldr	r3, [pc, #552]	; (80028c8 <main+0x4e8>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
				regs[REG_GOAL_FLUX_CURRENT_MA_H] = 0;
 80026a6:	4b88      	ldr	r3, [pc, #544]	; (80028c8 <main+0x4e8>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
				// set goal to current position to avoid glicth
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(10.0f*RADIANS_TO_DEGREES(API_AS5048A_Position_Sensor_Get_Multiturn_Radians())));
 80026ae:	f001 ffeb 	bl	8004688 <API_AS5048A_Position_Sensor_Get_Multiturn_Radians>
 80026b2:	eef0 7a40 	vmov.f32	s15, s0
 80026b6:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80028cc <main+0x4ec>
 80026ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026be:	ee17 0a90 	vmov	r0, s15
 80026c2:	f7fd ff0d 	bl	80004e0 <__aeabi_f2d>
 80026c6:	a37e      	add	r3, pc, #504	; (adr r3, 80028c0 <main+0x4e0>)
 80026c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026cc:	f7fe f88a 	bl	80007e4 <__aeabi_ddiv>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4610      	mov	r0, r2
 80026d6:	4619      	mov	r1, r3
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	4b7c      	ldr	r3, [pc, #496]	; (80028d0 <main+0x4f0>)
 80026de:	f7fd ff57 	bl	8000590 <__aeabi_dmul>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4610      	mov	r0, r2
 80026e8:	4619      	mov	r1, r3
 80026ea:	f7fe f9eb 	bl	8000ac4 <__aeabi_d2iz>
 80026ee:	4603      	mov	r3, r0
 80026f0:	b21b      	sxth	r3, r3
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	4b74      	ldr	r3, [pc, #464]	; (80028c8 <main+0x4e8>)
 80026f6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(10.0f*RADIANS_TO_DEGREES(API_AS5048A_Position_Sensor_Get_Multiturn_Radians())));
 80026fa:	f001 ffc5 	bl	8004688 <API_AS5048A_Position_Sensor_Get_Multiturn_Radians>
 80026fe:	eef0 7a40 	vmov.f32	s15, s0
 8002702:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80028cc <main+0x4ec>
 8002706:	ee67 7a87 	vmul.f32	s15, s15, s14
 800270a:	ee17 0a90 	vmov	r0, s15
 800270e:	f7fd fee7 	bl	80004e0 <__aeabi_f2d>
 8002712:	a36b      	add	r3, pc, #428	; (adr r3, 80028c0 <main+0x4e0>)
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	f7fe f864 	bl	80007e4 <__aeabi_ddiv>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4610      	mov	r0, r2
 8002722:	4619      	mov	r1, r3
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	4b69      	ldr	r3, [pc, #420]	; (80028d0 <main+0x4f0>)
 800272a:	f7fd ff31 	bl	8000590 <__aeabi_dmul>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	f7fe f9c5 	bl	8000ac4 <__aeabi_d2iz>
 800273a:	4603      	mov	r3, r0
 800273c:	b21b      	sxth	r3, r3
 800273e:	121b      	asrs	r3, r3, #8
 8002740:	b21b      	sxth	r3, r3
 8002742:	b2da      	uxtb	r2, r3
 8002744:	4b60      	ldr	r3, [pc, #384]	; (80028c8 <main+0x4e8>)
 8002746:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
				// reset filtered setpoint
				setpoint_velocity_dps = 0.0f;
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
				last_setpoint_velocity_dps = 0.0f;
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
				setpoint_torque_current_mA = 0.0f;
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
				// set setpoint_position_deg to avoid glitch
				setpoint_position_deg = RADIANS_TO_DEGREES(API_AS5048A_Position_Sensor_Get_Multiturn_Radians());
 8002762:	f001 ff91 	bl	8004688 <API_AS5048A_Position_Sensor_Get_Multiturn_Radians>
 8002766:	eef0 7a40 	vmov.f32	s15, s0
 800276a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80028cc <main+0x4ec>
 800276e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002772:	ee17 0a90 	vmov	r0, s15
 8002776:	f7fd feb3 	bl	80004e0 <__aeabi_f2d>
 800277a:	a351      	add	r3, pc, #324	; (adr r3, 80028c0 <main+0x4e0>)
 800277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002780:	f7fe f830 	bl	80007e4 <__aeabi_ddiv>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4610      	mov	r0, r2
 800278a:	4619      	mov	r1, r3
 800278c:	f7fe f9c2 	bl	8000b14 <__aeabi_d2f>
 8002790:	4603      	mov	r3, r0
 8002792:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			}
			{
				// compute position setpoint from goal and EEPROM velocity limit
				float const goal_position_deg = (float)((int16_t)(MAKE_SHORT(regs[REG_GOAL_POSITION_DEG_L],regs[REG_GOAL_POSITION_DEG_H])))/10.0f;
 8002796:	4b4c      	ldr	r3, [pc, #304]	; (80028c8 <main+0x4e8>)
 8002798:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800279c:	021b      	lsls	r3, r3, #8
 800279e:	b21a      	sxth	r2, r3
 80027a0:	4b49      	ldr	r3, [pc, #292]	; (80028c8 <main+0x4e8>)
 80027a2:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 80027a6:	b21b      	sxth	r3, r3
 80027a8:	4313      	orrs	r3, r2
 80027aa:	b21b      	sxth	r3, r3
 80027ac:	ee07 3a90 	vmov	s15, r3
 80027b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027b4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80027b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027bc:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
				float const reg_min_position_deg = (float)((int16_t)(MAKE_SHORT(regs[REG_MIN_POSITION_DEG_L],regs[REG_MIN_POSITION_DEG_H])));
 80027c0:	4b41      	ldr	r3, [pc, #260]	; (80028c8 <main+0x4e8>)
 80027c2:	7c5b      	ldrb	r3, [r3, #17]
 80027c4:	021b      	lsls	r3, r3, #8
 80027c6:	b21a      	sxth	r2, r3
 80027c8:	4b3f      	ldr	r3, [pc, #252]	; (80028c8 <main+0x4e8>)
 80027ca:	7c1b      	ldrb	r3, [r3, #16]
 80027cc:	b21b      	sxth	r3, r3
 80027ce:	4313      	orrs	r3, r2
 80027d0:	b21b      	sxth	r3, r3
 80027d2:	ee07 3a90 	vmov	s15, r3
 80027d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027da:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
				float const reg_max_position_deg = (float)((int16_t)(MAKE_SHORT(regs[REG_MAX_POSITION_DEG_L],regs[REG_MAX_POSITION_DEG_H])));
 80027de:	4b3a      	ldr	r3, [pc, #232]	; (80028c8 <main+0x4e8>)
 80027e0:	7cdb      	ldrb	r3, [r3, #19]
 80027e2:	021b      	lsls	r3, r3, #8
 80027e4:	b21a      	sxth	r2, r3
 80027e6:	4b38      	ldr	r3, [pc, #224]	; (80028c8 <main+0x4e8>)
 80027e8:	7c9b      	ldrb	r3, [r3, #18]
 80027ea:	b21b      	sxth	r3, r3
 80027ec:	4313      	orrs	r3, r2
 80027ee:	b21b      	sxth	r3, r3
 80027f0:	ee07 3a90 	vmov	s15, r3
 80027f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027f8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
				float const target_position_deg = fconstrain(goal_position_deg,reg_min_position_deg,reg_max_position_deg);
 80027fc:	ed97 1a1d 	vldr	s2, [r7, #116]	; 0x74
 8002800:	edd7 0a1e 	vldr	s1, [r7, #120]	; 0x78
 8002804:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8002808:	f001 fcbd 	bl	8004186 <fconstrain>
 800280c:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
				// compute velocity&acceleration setpoint using velocity&acceleration trapezoidal profil, RAM goal velocity  and EEPROM velocity & acceleration limit
				float const goal_velocity_dps = (int16_t)(MAKE_SHORT(regs[REG_GOAL_VELOCITY_DPS_L],regs[REG_GOAL_VELOCITY_DPS_H]));
 8002810:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <main+0x4e8>)
 8002812:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	b21a      	sxth	r2, r3
 800281a:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <main+0x4e8>)
 800281c:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8002820:	b21b      	sxth	r3, r3
 8002822:	4313      	orrs	r3, r2
 8002824:	b21b      	sxth	r3, r3
 8002826:	ee07 3a90 	vmov	s15, r3
 800282a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800282e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
				float const reg_max_velocity_dps = (uint16_t)(MAKE_SHORT(regs[REG_MAX_VELOCITY_DPS_L],regs[REG_MAX_VELOCITY_DPS_H]));
 8002832:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <main+0x4e8>)
 8002834:	7d5b      	ldrb	r3, [r3, #21]
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	b21a      	sxth	r2, r3
 800283a:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <main+0x4e8>)
 800283c:	7d1b      	ldrb	r3, [r3, #20]
 800283e:	b21b      	sxth	r3, r3
 8002840:	4313      	orrs	r3, r2
 8002842:	b21b      	sxth	r3, r3
 8002844:	b29b      	uxth	r3, r3
 8002846:	ee07 3a90 	vmov	s15, r3
 800284a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284e:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
				float const max_velocity_dps = fminf(goal_velocity_dps,reg_max_velocity_dps);
 8002852:	edd7 0a1a 	vldr	s1, [r7, #104]	; 0x68
 8002856:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 800285a:	f00a ff8c 	bl	800d776 <fminf>
 800285e:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
				float const max_acceleration_dpss = (float)(MAKE_SHORT(regs[REG_MAX_ACCELERATION_DPSS_L],regs[REG_MAX_ACCELERATION_DPSS_H]));
 8002862:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <main+0x4e8>)
 8002864:	7ddb      	ldrb	r3, [r3, #23]
 8002866:	021b      	lsls	r3, r3, #8
 8002868:	4a17      	ldr	r2, [pc, #92]	; (80028c8 <main+0x4e8>)
 800286a:	7d92      	ldrb	r2, [r2, #22]
 800286c:	4313      	orrs	r3, r2
 800286e:	ee07 3a90 	vmov	s15, r3
 8002872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002876:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
				// compute remaining distance between setpoint position to target position
				float const remaining_distance_deg = target_position_deg - setpoint_position_deg;
 800287a:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800287e:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 8002882:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002886:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
				// compute maximun velocity to be able to stop at goal position
				float vmax = sqrtf( 2.0f * max_acceleration_dpss * fabsf(remaining_distance_deg) );
 800288a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800288e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002892:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002896:	eef0 7ae7 	vabs.f32	s15, s15
 800289a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289e:	eeb0 0a67 	vmov.f32	s0, s15
 80028a2:	f00b f899 	bl	800d9d8 <sqrtf>
 80028a6:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
				// restore sign
				vmax = ( remaining_distance_deg>0.0f) ? vmax : -vmax;
 80028aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b6:	dd11      	ble.n	80028dc <main+0x4fc>
 80028b8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80028bc:	e012      	b.n	80028e4 <main+0x504>
 80028be:	bf00      	nop
 80028c0:	54442d18 	.word	0x54442d18
 80028c4:	400921fb 	.word	0x400921fb
 80028c8:	20000218 	.word	0x20000218
 80028cc:	43340000 	.word	0x43340000
 80028d0:	40240000 	.word	0x40240000
 80028d4:	49742400 	.word	0x49742400
 80028d8:	44610000 	.word	0x44610000
 80028dc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80028e0:	eef1 7a67 	vneg.f32	s15, s15
 80028e4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
				// limit maximum velocity, when far from stop
				vmax = fconstrain(vmax,-max_velocity_dps,max_velocity_dps);
 80028e8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80028ec:	eef1 7a67 	vneg.f32	s15, s15
 80028f0:	ed97 1a19 	vldr	s2, [r7, #100]	; 0x64
 80028f4:	eef0 0a67 	vmov.f32	s1, s15
 80028f8:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 80028fc:	f001 fc43 	bl	8004186 <fconstrain>
 8002900:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
				// compute distance between maximun velocity and current velocity
				float delta_v = vmax - setpoint_velocity_dps;
 8002904:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002908:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800290c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002910:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
				// now compute new velocity according acceleration
				setpoint_velocity_dps += fconstrain(delta_v, (-max_acceleration_dpss*MAIN_LOO_PERIOD_US/1000000.0f), (max_acceleration_dpss*MAIN_LOO_PERIOD_US/1000000.0f));
 8002914:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002918:	eef1 7a67 	vneg.f32	s15, s15
 800291c:	ed1f 7a12 	vldr	s14, [pc, #-72]	; 80028d8 <main+0x4f8>
 8002920:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002924:	ed5f 6a15 	vldr	s13, [pc, #-84]	; 80028d4 <main+0x4f4>
 8002928:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800292c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002930:	ed5f 6a17 	vldr	s13, [pc, #-92]	; 80028d8 <main+0x4f8>
 8002934:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002938:	ed1f 6a1a 	vldr	s12, [pc, #-104]	; 80028d4 <main+0x4f4>
 800293c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002940:	eeb0 1a66 	vmov.f32	s2, s13
 8002944:	eef0 0a47 	vmov.f32	s1, s14
 8002948:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 800294c:	f001 fc1b 	bl	8004186 <fconstrain>
 8002950:	eeb0 7a40 	vmov.f32	s14, s0
 8002954:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8002958:	ee77 7a87 	vadd.f32	s15, s15, s14
 800295c:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
				// compute new position setpoint
				setpoint_position_deg += (setpoint_velocity_dps*MAIN_LOO_PERIOD_US/1000000.0f);
 8002960:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8002964:	ed1f 7a24 	vldr	s14, [pc, #-144]	; 80028d8 <main+0x4f8>
 8002968:	ee27 7a87 	vmul.f32	s14, s15, s14
 800296c:	ed5f 6a27 	vldr	s13, [pc, #-156]	; 80028d4 <main+0x4f4>
 8002970:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002974:	ed97 7a3a 	vldr	s14, [r7, #232]	; 0xe8
 8002978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800297c:	edc7 7a3a 	vstr	s15, [r7, #232]	; 0xe8
				// now compute acceleration setpoint
				setpoint_acceleration_dpss = (setpoint_velocity_dps - last_setpoint_velocity_dps)*1000000.0f/MAIN_LOO_PERIOD_US;
 8002980:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 8002984:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8002988:	ee77 7a67 	vsub.f32	s15, s14, s15
 800298c:	ed1f 7a2f 	vldr	s14, [pc, #-188]	; 80028d4 <main+0x4f4>
 8002990:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002994:	ed5f 6a30 	vldr	s13, [pc, #-192]	; 80028d8 <main+0x4f8>
 8002998:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800299c:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
				last_setpoint_velocity_dps =  setpoint_velocity_dps;
 80029a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
				// compute velocity/acceleration feed forwards
				float const pid_vel_kff = (float)(MAKE_SHORT(regs[REG_PID_VELOCITY_KFF_L],regs[REG_PID_VELOCITY_KFF_H]))/1000.0f;
 80029a8:	4b79      	ldr	r3, [pc, #484]	; (8002b90 <main+0x7b0>)
 80029aa:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	4a77      	ldr	r2, [pc, #476]	; (8002b90 <main+0x7b0>)
 80029b2:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80029b6:	4313      	orrs	r3, r2
 80029b8:	ee07 3a90 	vmov	s15, r3
 80029bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029c0:	eddf 6a74 	vldr	s13, [pc, #464]	; 8002b94 <main+0x7b4>
 80029c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029c8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				float const pid_acc_kff = (float)(MAKE_SHORT(regs[REG_PID_ACCELERATION_KFF_L],regs[REG_PID_ACCELERATION_KFF_H]))/100000.0f;
 80029cc:	4b70      	ldr	r3, [pc, #448]	; (8002b90 <main+0x7b0>)
 80029ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	4a6e      	ldr	r2, [pc, #440]	; (8002b90 <main+0x7b0>)
 80029d6:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 80029da:	4313      	orrs	r3, r2
 80029dc:	ee07 3a90 	vmov	s15, r3
 80029e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029e4:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8002b98 <main+0x7b8>
 80029e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029ec:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
				float const velocity_feed_forward = pid_vel_kff * setpoint_velocity_dps;
 80029f0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80029f4:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 80029f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029fc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
				float const acceleration_feed_forward = pid_acc_kff * setpoint_acceleration_dpss;
 8002a00:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002a04:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a0c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
				// compute position error
				float const error_position_deg = setpoint_position_deg-RADIANS_TO_DEGREES(API_AS5048A_Position_Sensor_Get_Multiturn_Radians());
 8002a10:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8002a14:	f7fd fd64 	bl	80004e0 <__aeabi_f2d>
 8002a18:	4604      	mov	r4, r0
 8002a1a:	460d      	mov	r5, r1
 8002a1c:	f001 fe34 	bl	8004688 <API_AS5048A_Position_Sensor_Get_Multiturn_Radians>
 8002a20:	eef0 7a40 	vmov.f32	s15, s0
 8002a24:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8002b9c <main+0x7bc>
 8002a28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a2c:	ee17 0a90 	vmov	r0, s15
 8002a30:	f7fd fd56 	bl	80004e0 <__aeabi_f2d>
 8002a34:	a354      	add	r3, pc, #336	; (adr r3, 8002b88 <main+0x7a8>)
 8002a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3a:	f7fd fed3 	bl	80007e4 <__aeabi_ddiv>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4620      	mov	r0, r4
 8002a44:	4629      	mov	r1, r5
 8002a46:	f7fd fbeb 	bl	8000220 <__aeabi_dsub>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4610      	mov	r0, r2
 8002a50:	4619      	mov	r1, r3
 8002a52:	f7fe f85f 	bl	8000b14 <__aeabi_d2f>
 8002a56:	4603      	mov	r3, r0
 8002a58:	643b      	str	r3, [r7, #64]	; 0x40
				// compute torque current setpoint using PID position, current is limited bt goal current and EEPROM current limit
				float const goal_torque_current_mA=(int16_t)(MAKE_SHORT(regs[REG_GOAL_TORQUE_CURRENT_MA_L],regs[REG_GOAL_TORQUE_CURRENT_MA_H]));
 8002a5a:	4b4d      	ldr	r3, [pc, #308]	; (8002b90 <main+0x7b0>)
 8002a5c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8002a60:	021b      	lsls	r3, r3, #8
 8002a62:	b21a      	sxth	r2, r3
 8002a64:	4b4a      	ldr	r3, [pc, #296]	; (8002b90 <main+0x7b0>)
 8002a66:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8002a6a:	b21b      	sxth	r3, r3
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	b21b      	sxth	r3, r3
 8002a70:	ee07 3a90 	vmov	s15, r3
 8002a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a78:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				float const reg_max_current_ma = (uint16_t)(MAKE_SHORT(regs[REG_MAX_CURRENT_MA_L],regs[REG_MAX_CURRENT_MA_H]));
 8002a7c:	4b44      	ldr	r3, [pc, #272]	; (8002b90 <main+0x7b0>)
 8002a7e:	7e5b      	ldrb	r3, [r3, #25]
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	b21a      	sxth	r2, r3
 8002a84:	4b42      	ldr	r3, [pc, #264]	; (8002b90 <main+0x7b0>)
 8002a86:	7e1b      	ldrb	r3, [r3, #24]
 8002a88:	b21b      	sxth	r3, r3
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	b21b      	sxth	r3, r3
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	ee07 3a90 	vmov	s15, r3
 8002a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a98:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				float const reg_reverse = regs[REG_INV_PHASE_MOTOR] == 0 ? 1.0f : -1.0f;
 8002a9c:	4b3c      	ldr	r3, [pc, #240]	; (8002b90 <main+0x7b0>)
 8002a9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d102      	bne.n	8002aac <main+0x6cc>
 8002aa6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002aaa:	e000      	b.n	8002aae <main+0x6ce>
 8002aac:	4b3c      	ldr	r3, [pc, #240]	; (8002ba0 <main+0x7c0>)
 8002aae:	637b      	str	r3, [r7, #52]	; 0x34
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8002ab0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002ab4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002ba4 <main+0x7c4>
 8002ab8:	ee27 8a87 	vmul.f32	s16, s15, s14
						&pid_position,
						error_position_deg,
						(float)((int16_t)(MAKE_SHORT(regs[REG_PID_POSITION_KP_L],regs[REG_PID_POSITION_KP_H])))/1.0f,
 8002abc:	4b34      	ldr	r3, [pc, #208]	; (8002b90 <main+0x7b0>)
 8002abe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002ac2:	021b      	lsls	r3, r3, #8
 8002ac4:	b21a      	sxth	r2, r3
 8002ac6:	4b32      	ldr	r3, [pc, #200]	; (8002b90 <main+0x7b0>)
 8002ac8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002acc:	b21b      	sxth	r3, r3
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	b21b      	sxth	r3, r3
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8002ad2:	ee07 3a90 	vmov	s15, r3
 8002ad6:	eef8 8ae7 	vcvt.f32.s32	s17, s15
						(float)((int16_t)(MAKE_SHORT(regs[REG_PID_POSITION_KI_L],regs[REG_PID_POSITION_KI_H])))/100.0f,
 8002ada:	4b2d      	ldr	r3, [pc, #180]	; (8002b90 <main+0x7b0>)
 8002adc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002ae0:	021b      	lsls	r3, r3, #8
 8002ae2:	b21a      	sxth	r2, r3
 8002ae4:	4b2a      	ldr	r3, [pc, #168]	; (8002b90 <main+0x7b0>)
 8002ae6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002aea:	b21b      	sxth	r3, r3
 8002aec:	4313      	orrs	r3, r2
 8002aee:	b21b      	sxth	r3, r3
 8002af0:	ee07 3a90 	vmov	s15, r3
 8002af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8002af8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002ba8 <main+0x7c8>
 8002afc:	ee87 9a87 	vdiv.f32	s18, s15, s14
						(float)((int16_t)(MAKE_SHORT(regs[REG_PID_POSITION_KD_L],regs[REG_PID_POSITION_KD_H])))/1.0f,
 8002b00:	4b23      	ldr	r3, [pc, #140]	; (8002b90 <main+0x7b0>)
 8002b02:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002b06:	021b      	lsls	r3, r3, #8
 8002b08:	b21a      	sxth	r2, r3
 8002b0a:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <main+0x7b0>)
 8002b0c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002b10:	b21b      	sxth	r3, r3
 8002b12:	4313      	orrs	r3, r2
 8002b14:	b21b      	sxth	r3, r3
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8002b16:	ee07 3a90 	vmov	s15, r3
 8002b1a:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 8002b1e:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 8002b22:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8002b26:	f00a fe26 	bl	800d776 <fminf>
 8002b2a:	eef0 6a40 	vmov.f32	s13, s0
 8002b2e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002b32:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3a:	f107 030c 	add.w	r3, r7, #12
 8002b3e:	eeb0 3a67 	vmov.f32	s6, s15
 8002b42:	eddf 2a1a 	vldr	s5, [pc, #104]	; 8002bac <main+0x7cc>
 8002b46:	eeb0 2a66 	vmov.f32	s4, s13
 8002b4a:	eef0 1a69 	vmov.f32	s3, s19
 8002b4e:	eeb0 1a49 	vmov.f32	s2, s18
 8002b52:	eef0 0a68 	vmov.f32	s1, s17
 8002b56:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f001 fb52 	bl	8004204 <pid_process_antiwindup_clamp_with_ff>
 8002b60:	eef0 7a40 	vmov.f32	s15, s0
 8002b64:	ee28 7a27 	vmul.f32	s14, s16, s15
						fminf(goal_torque_current_mA,reg_max_current_ma), // limit is the lowest limit from goal and EEPROM
						0.1f,// ALPHA D
						velocity_feed_forward+acceleration_feed_forward // FF
				) + (1.0f-ALPHA_CURRENT_SETPOINT)*setpoint_torque_current_mA;
 8002b68:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002b6c:	eddf 6a10 	vldr	s13, [pc, #64]	; 8002bb0 <main+0x7d0>
 8002b70:	ee67 7aa6 	vmul.f32	s15, s15, s13
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8002b74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b78:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
				// in this operating mode, flux current is forced to 0
				setpoint_flux_current_mA=0.0f;
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			}
			break;
 8002b84:	f000 bc81 	b.w	800348a <main+0x10aa>
 8002b88:	54442d18 	.word	0x54442d18
 8002b8c:	400921fb 	.word	0x400921fb
 8002b90:	20000218 	.word	0x20000218
 8002b94:	447a0000 	.word	0x447a0000
 8002b98:	47c35000 	.word	0x47c35000
 8002b9c:	43340000 	.word	0x43340000
 8002ba0:	bf800000 	.word	0xbf800000
 8002ba4:	3ef5c28f 	.word	0x3ef5c28f
 8002ba8:	42c80000 	.word	0x42c80000
 8002bac:	3dcccccd 	.word	0x3dcccccd
 8002bb0:	3f051eb8 	.word	0x3f051eb8
		case REG_CONTROL_MODE_POSITION_VELOCITY_TORQUE: // DEPRECATED
			// DEPRECATED
			// This mode is replaced by mode 0
			// DEPRECATED
			if(last_mode!=REG_CONTROL_MODE_POSITION_VELOCITY_TORQUE)
 8002bb4:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d07b      	beq.n	8002cb4 <main+0x8d4>
			{
				pid_reset(&pid_position);
 8002bbc:	f107 030c 	add.w	r3, r7, #12
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f001 fb09 	bl	80041d8 <pid_reset>
				pid_reset(&pid_velocity);
 8002bc6:	f107 0318 	add.w	r3, r7, #24
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f001 fb04 	bl	80041d8 <pid_reset>
				// copy EEPROM to RAM
				regs[REG_GOAL_VELOCITY_DPS_L] = regs[REG_MAX_VELOCITY_DPS_L];
 8002bd0:	4bc7      	ldr	r3, [pc, #796]	; (8002ef0 <main+0xb10>)
 8002bd2:	7d1a      	ldrb	r2, [r3, #20]
 8002bd4:	4bc6      	ldr	r3, [pc, #792]	; (8002ef0 <main+0xb10>)
 8002bd6:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
				regs[REG_GOAL_VELOCITY_DPS_H] = regs[REG_MAX_VELOCITY_DPS_H];
 8002bda:	4bc5      	ldr	r3, [pc, #788]	; (8002ef0 <main+0xb10>)
 8002bdc:	7d5a      	ldrb	r2, [r3, #21]
 8002bde:	4bc4      	ldr	r3, [pc, #784]	; (8002ef0 <main+0xb10>)
 8002be0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
				regs[REG_GOAL_TORQUE_CURRENT_MA_L] = regs[REG_MAX_CURRENT_MA_L];
 8002be4:	4bc2      	ldr	r3, [pc, #776]	; (8002ef0 <main+0xb10>)
 8002be6:	7e1a      	ldrb	r2, [r3, #24]
 8002be8:	4bc1      	ldr	r3, [pc, #772]	; (8002ef0 <main+0xb10>)
 8002bea:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
				regs[REG_GOAL_TORQUE_CURRENT_MA_H] = regs[REG_MAX_CURRENT_MA_H];
 8002bee:	4bc0      	ldr	r3, [pc, #768]	; (8002ef0 <main+0xb10>)
 8002bf0:	7e5a      	ldrb	r2, [r3, #25]
 8002bf2:	4bbf      	ldr	r3, [pc, #764]	; (8002ef0 <main+0xb10>)
 8002bf4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				// reset unused RAM
				regs[REG_GOAL_FLUX_CURRENT_MA_L] = 0;
 8002bf8:	4bbd      	ldr	r3, [pc, #756]	; (8002ef0 <main+0xb10>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
				regs[REG_GOAL_FLUX_CURRENT_MA_H] = 0;
 8002c00:	4bbb      	ldr	r3, [pc, #748]	; (8002ef0 <main+0xb10>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
				// set goal to current position to avoid glicth
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(10.0f*RADIANS_TO_DEGREES(API_AS5048A_Position_Sensor_Get_Multiturn_Radians())));
 8002c08:	f001 fd3e 	bl	8004688 <API_AS5048A_Position_Sensor_Get_Multiturn_Radians>
 8002c0c:	eef0 7a40 	vmov.f32	s15, s0
 8002c10:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8002ef4 <main+0xb14>
 8002c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c18:	ee17 0a90 	vmov	r0, s15
 8002c1c:	f7fd fc60 	bl	80004e0 <__aeabi_f2d>
 8002c20:	a3b1      	add	r3, pc, #708	; (adr r3, 8002ee8 <main+0xb08>)
 8002c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c26:	f7fd fddd 	bl	80007e4 <__aeabi_ddiv>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4619      	mov	r1, r3
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	4bb0      	ldr	r3, [pc, #704]	; (8002ef8 <main+0xb18>)
 8002c38:	f7fd fcaa 	bl	8000590 <__aeabi_dmul>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	f7fd ff3e 	bl	8000ac4 <__aeabi_d2iz>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	b21b      	sxth	r3, r3
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	4ba8      	ldr	r3, [pc, #672]	; (8002ef0 <main+0xb10>)
 8002c50:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(10.0f*RADIANS_TO_DEGREES(API_AS5048A_Position_Sensor_Get_Multiturn_Radians())));
 8002c54:	f001 fd18 	bl	8004688 <API_AS5048A_Position_Sensor_Get_Multiturn_Radians>
 8002c58:	eef0 7a40 	vmov.f32	s15, s0
 8002c5c:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002ef4 <main+0xb14>
 8002c60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c64:	ee17 0a90 	vmov	r0, s15
 8002c68:	f7fd fc3a 	bl	80004e0 <__aeabi_f2d>
 8002c6c:	a39e      	add	r3, pc, #632	; (adr r3, 8002ee8 <main+0xb08>)
 8002c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c72:	f7fd fdb7 	bl	80007e4 <__aeabi_ddiv>
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	4b9d      	ldr	r3, [pc, #628]	; (8002ef8 <main+0xb18>)
 8002c84:	f7fd fc84 	bl	8000590 <__aeabi_dmul>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f7fd ff18 	bl	8000ac4 <__aeabi_d2iz>
 8002c94:	4603      	mov	r3, r0
 8002c96:	b21b      	sxth	r3, r3
 8002c98:	121b      	asrs	r3, r3, #8
 8002c9a:	b21b      	sxth	r3, r3
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	4b94      	ldr	r3, [pc, #592]	; (8002ef0 <main+0xb10>)
 8002ca0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
				// reset filtered setpoint
				setpoint_velocity_dps = 0.0f;
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
				setpoint_torque_current_mA = 0.0f;
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			}
			{
				setpoint_acceleration_dpss = 0.0f;
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
				// compute position setpoint from goal and EEPROM velocity limit
				float const goal_position_deg = (float)((int16_t)(MAKE_SHORT(regs[REG_GOAL_POSITION_DEG_L],regs[REG_GOAL_POSITION_DEG_H])))/10.0f;
 8002cbc:	4b8c      	ldr	r3, [pc, #560]	; (8002ef0 <main+0xb10>)
 8002cbe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002cc2:	021b      	lsls	r3, r3, #8
 8002cc4:	b21a      	sxth	r2, r3
 8002cc6:	4b8a      	ldr	r3, [pc, #552]	; (8002ef0 <main+0xb10>)
 8002cc8:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8002ccc:	b21b      	sxth	r3, r3
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	b21b      	sxth	r3, r3
 8002cd2:	ee07 3a90 	vmov	s15, r3
 8002cd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cda:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002cde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ce2:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
				float const reg_min_position_deg = (float)((int16_t)(MAKE_SHORT(regs[REG_MIN_POSITION_DEG_L],regs[REG_MIN_POSITION_DEG_H])));
 8002ce6:	4b82      	ldr	r3, [pc, #520]	; (8002ef0 <main+0xb10>)
 8002ce8:	7c5b      	ldrb	r3, [r3, #17]
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	b21a      	sxth	r2, r3
 8002cee:	4b80      	ldr	r3, [pc, #512]	; (8002ef0 <main+0xb10>)
 8002cf0:	7c1b      	ldrb	r3, [r3, #16]
 8002cf2:	b21b      	sxth	r3, r3
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	b21b      	sxth	r3, r3
 8002cf8:	ee07 3a90 	vmov	s15, r3
 8002cfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d00:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
				float const reg_max_position_deg = (float)((int16_t)(MAKE_SHORT(regs[REG_MAX_POSITION_DEG_L],regs[REG_MAX_POSITION_DEG_H])));
 8002d04:	4b7a      	ldr	r3, [pc, #488]	; (8002ef0 <main+0xb10>)
 8002d06:	7cdb      	ldrb	r3, [r3, #19]
 8002d08:	021b      	lsls	r3, r3, #8
 8002d0a:	b21a      	sxth	r2, r3
 8002d0c:	4b78      	ldr	r3, [pc, #480]	; (8002ef0 <main+0xb10>)
 8002d0e:	7c9b      	ldrb	r3, [r3, #18]
 8002d10:	b21b      	sxth	r3, r3
 8002d12:	4313      	orrs	r3, r2
 8002d14:	b21b      	sxth	r3, r3
 8002d16:	ee07 3a90 	vmov	s15, r3
 8002d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d1e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
				setpoint_position_deg = fconstrain(goal_position_deg,reg_min_position_deg,reg_max_position_deg);
 8002d22:	ed97 1a27 	vldr	s2, [r7, #156]	; 0x9c
 8002d26:	edd7 0a28 	vldr	s1, [r7, #160]	; 0xa0
 8002d2a:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 8002d2e:	f001 fa2a 	bl	8004186 <fconstrain>
 8002d32:	ed87 0a3a 	vstr	s0, [r7, #232]	; 0xe8
				// compute positiony error
				float const error_position_deg = setpoint_position_deg-RADIANS_TO_DEGREES(API_AS5048A_Position_Sensor_Get_Multiturn_Radians());
 8002d36:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8002d3a:	f7fd fbd1 	bl	80004e0 <__aeabi_f2d>
 8002d3e:	4604      	mov	r4, r0
 8002d40:	460d      	mov	r5, r1
 8002d42:	f001 fca1 	bl	8004688 <API_AS5048A_Position_Sensor_Get_Multiturn_Radians>
 8002d46:	eef0 7a40 	vmov.f32	s15, s0
 8002d4a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002ef4 <main+0xb14>
 8002d4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d52:	ee17 0a90 	vmov	r0, s15
 8002d56:	f7fd fbc3 	bl	80004e0 <__aeabi_f2d>
 8002d5a:	a363      	add	r3, pc, #396	; (adr r3, 8002ee8 <main+0xb08>)
 8002d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d60:	f7fd fd40 	bl	80007e4 <__aeabi_ddiv>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4620      	mov	r0, r4
 8002d6a:	4629      	mov	r1, r5
 8002d6c:	f7fd fa58 	bl	8000220 <__aeabi_dsub>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4610      	mov	r0, r2
 8002d76:	4619      	mov	r1, r3
 8002d78:	f7fd fecc 	bl	8000b14 <__aeabi_d2f>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				// compute velocity setpoint using PID position and EEPROM velocity limit
				float const goal_velocity_dps = (int16_t)(MAKE_SHORT(regs[REG_GOAL_VELOCITY_DPS_L],regs[REG_GOAL_VELOCITY_DPS_H]));
 8002d82:	4b5b      	ldr	r3, [pc, #364]	; (8002ef0 <main+0xb10>)
 8002d84:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002d88:	021b      	lsls	r3, r3, #8
 8002d8a:	b21a      	sxth	r2, r3
 8002d8c:	4b58      	ldr	r3, [pc, #352]	; (8002ef0 <main+0xb10>)
 8002d8e:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8002d92:	b21b      	sxth	r3, r3
 8002d94:	4313      	orrs	r3, r2
 8002d96:	b21b      	sxth	r3, r3
 8002d98:	ee07 3a90 	vmov	s15, r3
 8002d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002da0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
				float const reg_max_velocity_dps = (uint16_t)(MAKE_SHORT(regs[REG_MAX_VELOCITY_DPS_L],regs[REG_MAX_VELOCITY_DPS_H]));
 8002da4:	4b52      	ldr	r3, [pc, #328]	; (8002ef0 <main+0xb10>)
 8002da6:	7d5b      	ldrb	r3, [r3, #21]
 8002da8:	021b      	lsls	r3, r3, #8
 8002daa:	b21a      	sxth	r2, r3
 8002dac:	4b50      	ldr	r3, [pc, #320]	; (8002ef0 <main+0xb10>)
 8002dae:	7d1b      	ldrb	r3, [r3, #20]
 8002db0:	b21b      	sxth	r3, r3
 8002db2:	4313      	orrs	r3, r2
 8002db4:	b21b      	sxth	r3, r3
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	ee07 3a90 	vmov	s15, r3
 8002dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc0:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
				setpoint_velocity_dps = ALPHA_VELOCITY*pid_process_antiwindup_clamp_with_ff(
						&pid_position,
						error_position_deg,
						(float)((int16_t)(MAKE_SHORT(regs[REG_PID_POSITION_KP_L],regs[REG_PID_POSITION_KP_H])))/1.0f,
 8002dc4:	4b4a      	ldr	r3, [pc, #296]	; (8002ef0 <main+0xb10>)
 8002dc6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	b21a      	sxth	r2, r3
 8002dce:	4b48      	ldr	r3, [pc, #288]	; (8002ef0 <main+0xb10>)
 8002dd0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002dd4:	b21b      	sxth	r3, r3
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	b21b      	sxth	r3, r3
				setpoint_velocity_dps = ALPHA_VELOCITY*pid_process_antiwindup_clamp_with_ff(
 8002dda:	ee07 3a90 	vmov	s15, r3
 8002dde:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
						(float)((int16_t)(MAKE_SHORT(regs[REG_PID_POSITION_KI_L],regs[REG_PID_POSITION_KI_H])))/100.0f,
 8002de2:	4b43      	ldr	r3, [pc, #268]	; (8002ef0 <main+0xb10>)
 8002de4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002de8:	021b      	lsls	r3, r3, #8
 8002dea:	b21a      	sxth	r2, r3
 8002dec:	4b40      	ldr	r3, [pc, #256]	; (8002ef0 <main+0xb10>)
 8002dee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002df2:	b21b      	sxth	r3, r3
 8002df4:	4313      	orrs	r3, r2
 8002df6:	b21b      	sxth	r3, r3
 8002df8:	ee07 3a90 	vmov	s15, r3
 8002dfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				setpoint_velocity_dps = ALPHA_VELOCITY*pid_process_antiwindup_clamp_with_ff(
 8002e00:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002efc <main+0xb1c>
 8002e04:	eec7 8a87 	vdiv.f32	s17, s15, s14
						(float)((int16_t)(MAKE_SHORT(regs[REG_PID_POSITION_KD_L],regs[REG_PID_POSITION_KD_H])))/1.0f,
 8002e08:	4b39      	ldr	r3, [pc, #228]	; (8002ef0 <main+0xb10>)
 8002e0a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	b21a      	sxth	r2, r3
 8002e12:	4b37      	ldr	r3, [pc, #220]	; (8002ef0 <main+0xb10>)
 8002e14:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002e18:	b21b      	sxth	r3, r3
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	b21b      	sxth	r3, r3
				setpoint_velocity_dps = ALPHA_VELOCITY*pid_process_antiwindup_clamp_with_ff(
 8002e1e:	ee07 3a90 	vmov	s15, r3
 8002e22:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 8002e26:	edd7 0a24 	vldr	s1, [r7, #144]	; 0x90
 8002e2a:	ed97 0a25 	vldr	s0, [r7, #148]	; 0x94
 8002e2e:	f00a fca2 	bl	800d776 <fminf>
 8002e32:	eef0 7a40 	vmov.f32	s15, s0
 8002e36:	f107 030c 	add.w	r3, r7, #12
 8002e3a:	ed9f 3a31 	vldr	s6, [pc, #196]	; 8002f00 <main+0xb20>
 8002e3e:	eddf 2a31 	vldr	s5, [pc, #196]	; 8002f04 <main+0xb24>
 8002e42:	eeb0 2a67 	vmov.f32	s4, s15
 8002e46:	eef0 1a49 	vmov.f32	s3, s18
 8002e4a:	eeb0 1a68 	vmov.f32	s2, s17
 8002e4e:	eef0 0a48 	vmov.f32	s1, s16
 8002e52:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8002e56:	4618      	mov	r0, r3
 8002e58:	f001 f9d4 	bl	8004204 <pid_process_antiwindup_clamp_with_ff>
 8002e5c:	eef0 7a40 	vmov.f32	s15, s0
 8002e60:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002f08 <main+0xb28>
 8002e64:	ee27 7a87 	vmul.f32	s14, s15, s14
						fminf(goal_velocity_dps,reg_max_velocity_dps), // limit is the lowest limit from goal and EEPROM
						0.1f,// ALPHA D
						0.0f // FF
				) + (1.0f-ALPHA_VELOCITY)*setpoint_velocity_dps;
 8002e68:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8002e6c:	eddf 6a27 	vldr	s13, [pc, #156]	; 8002f0c <main+0xb2c>
 8002e70:	ee67 7aa6 	vmul.f32	s15, s15, s13
				setpoint_velocity_dps = ALPHA_VELOCITY*pid_process_antiwindup_clamp_with_ff(
 8002e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e78:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
				// compute velocity error
				float const error_velocity_dps = setpoint_velocity_dps-API_FOC_Get_Present_Velocity();
 8002e7c:	f7ff f91e 	bl	80020bc <API_FOC_Get_Present_Velocity>
 8002e80:	eeb0 7a40 	vmov.f32	s14, s0
 8002e84:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8002e88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e8c:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
				// compute torque current setpoint using PID velocity, current is limited bt goal current and EEPROM current limit
				float const goal_torque_current_mA=(int16_t)(MAKE_SHORT(regs[REG_GOAL_TORQUE_CURRENT_MA_L],regs[REG_GOAL_TORQUE_CURRENT_MA_H]));
 8002e90:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <main+0xb10>)
 8002e92:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8002e96:	021b      	lsls	r3, r3, #8
 8002e98:	b21a      	sxth	r2, r3
 8002e9a:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <main+0xb10>)
 8002e9c:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8002ea0:	b21b      	sxth	r3, r3
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	b21b      	sxth	r3, r3
 8002ea6:	ee07 3a90 	vmov	s15, r3
 8002eaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eae:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
				float const reg_max_current_ma = (uint16_t)(MAKE_SHORT(regs[REG_MAX_CURRENT_MA_L],regs[REG_MAX_CURRENT_MA_H]));
 8002eb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <main+0xb10>)
 8002eb4:	7e5b      	ldrb	r3, [r3, #25]
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	b21a      	sxth	r2, r3
 8002eba:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <main+0xb10>)
 8002ebc:	7e1b      	ldrb	r3, [r3, #24]
 8002ebe:	b21b      	sxth	r3, r3
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	b21b      	sxth	r3, r3
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	ee07 3a90 	vmov	s15, r3
 8002eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ece:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
				float const reg_reverse = regs[REG_INV_PHASE_MOTOR] == 0 ? 1.0f : -1.0f;
 8002ed2:	4b07      	ldr	r3, [pc, #28]	; (8002ef0 <main+0xb10>)
 8002ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d119      	bne.n	8002f10 <main+0xb30>
 8002edc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002ee0:	e017      	b.n	8002f12 <main+0xb32>
 8002ee2:	bf00      	nop
 8002ee4:	f3af 8000 	nop.w
 8002ee8:	54442d18 	.word	0x54442d18
 8002eec:	400921fb 	.word	0x400921fb
 8002ef0:	20000218 	.word	0x20000218
 8002ef4:	43340000 	.word	0x43340000
 8002ef8:	40240000 	.word	0x40240000
 8002efc:	42c80000 	.word	0x42c80000
 8002f00:	00000000 	.word	0x00000000
 8002f04:	3dcccccd 	.word	0x3dcccccd
 8002f08:	3e75c28f 	.word	0x3e75c28f
 8002f0c:	3f428f5c 	.word	0x3f428f5c
 8002f10:	4b8f      	ldr	r3, [pc, #572]	; (8003150 <main+0xd70>)
 8002f12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8002f16:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002f1a:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8003154 <main+0xd74>
 8002f1e:	ee27 8a87 	vmul.f32	s16, s15, s14
						&pid_velocity,
						error_velocity_dps,
						(float)((int16_t)(MAKE_SHORT(regs[REG_PID_VELOCITY_KP_L],regs[REG_PID_VELOCITY_KP_H])))/1000.0f,
 8002f22:	4b8d      	ldr	r3, [pc, #564]	; (8003158 <main+0xd78>)
 8002f24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	b21a      	sxth	r2, r3
 8002f2c:	4b8a      	ldr	r3, [pc, #552]	; (8003158 <main+0xd78>)
 8002f2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f32:	b21b      	sxth	r3, r3
 8002f34:	4313      	orrs	r3, r2
 8002f36:	b21b      	sxth	r3, r3
 8002f38:	ee07 3a90 	vmov	s15, r3
 8002f3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8002f40:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800315c <main+0xd7c>
 8002f44:	eec7 8a87 	vdiv.f32	s17, s15, s14
						(float)((int16_t)(MAKE_SHORT(regs[REG_PID_VELOCITY_KI_L],regs[REG_PID_VELOCITY_KI_H])))/100000.0f,
 8002f48:	4b83      	ldr	r3, [pc, #524]	; (8003158 <main+0xd78>)
 8002f4a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002f4e:	021b      	lsls	r3, r3, #8
 8002f50:	b21a      	sxth	r2, r3
 8002f52:	4b81      	ldr	r3, [pc, #516]	; (8003158 <main+0xd78>)
 8002f54:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002f58:	b21b      	sxth	r3, r3
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	b21b      	sxth	r3, r3
 8002f5e:	ee07 3a90 	vmov	s15, r3
 8002f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8002f66:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8003160 <main+0xd80>
 8002f6a:	ee87 9a87 	vdiv.f32	s18, s15, s14
						(float)((int16_t)(MAKE_SHORT(regs[REG_PID_VELOCITY_KD_L],regs[REG_PID_VELOCITY_KD_H])))/1000.0f,
 8002f6e:	4b7a      	ldr	r3, [pc, #488]	; (8003158 <main+0xd78>)
 8002f70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f74:	021b      	lsls	r3, r3, #8
 8002f76:	b21a      	sxth	r2, r3
 8002f78:	4b77      	ldr	r3, [pc, #476]	; (8003158 <main+0xd78>)
 8002f7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f7e:	b21b      	sxth	r3, r3
 8002f80:	4313      	orrs	r3, r2
 8002f82:	b21b      	sxth	r3, r3
 8002f84:	ee07 3a90 	vmov	s15, r3
 8002f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8002f8c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800315c <main+0xd7c>
 8002f90:	eec7 9a87 	vdiv.f32	s19, s15, s14
 8002f94:	edd7 0a21 	vldr	s1, [r7, #132]	; 0x84
 8002f98:	ed97 0a22 	vldr	s0, [r7, #136]	; 0x88
 8002f9c:	f00a fbeb 	bl	800d776 <fminf>
 8002fa0:	eef0 6a40 	vmov.f32	s13, s0
						fminf(goal_torque_current_mA,reg_max_current_ma), // current limit is the lowest limit from goal and EEPROM
						0.1f,// ALPHA D
						setpoint_velocity_dps*(float)((int16_t)(MAKE_SHORT(regs[REG_PID_VELOCITY_KFF_L],regs[REG_PID_VELOCITY_KFF_H])))/1000.0f
 8002fa4:	4b6c      	ldr	r3, [pc, #432]	; (8003158 <main+0xd78>)
 8002fa6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002faa:	021b      	lsls	r3, r3, #8
 8002fac:	b21a      	sxth	r2, r3
 8002fae:	4b6a      	ldr	r3, [pc, #424]	; (8003158 <main+0xd78>)
 8002fb0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002fb4:	b21b      	sxth	r3, r3
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	b21b      	sxth	r3, r3
 8002fba:	ee07 3a90 	vmov	s15, r3
 8002fbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fc2:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8002fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8002fca:	ed9f 6a64 	vldr	s12, [pc, #400]	; 800315c <main+0xd7c>
 8002fce:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8002fd2:	f107 0318 	add.w	r3, r7, #24
 8002fd6:	eeb0 3a47 	vmov.f32	s6, s14
 8002fda:	eddf 2a62 	vldr	s5, [pc, #392]	; 8003164 <main+0xd84>
 8002fde:	eeb0 2a66 	vmov.f32	s4, s13
 8002fe2:	eef0 1a69 	vmov.f32	s3, s19
 8002fe6:	eeb0 1a49 	vmov.f32	s2, s18
 8002fea:	eef0 0a68 	vmov.f32	s1, s17
 8002fee:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f001 f906 	bl	8004204 <pid_process_antiwindup_clamp_with_ff>
 8002ff8:	eef0 7a40 	vmov.f32	s15, s0
 8002ffc:	ee28 7a27 	vmul.f32	s14, s16, s15
				) + (1.0f-ALPHA_CURRENT_SETPOINT)*setpoint_torque_current_mA;
 8003000:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003004:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003168 <main+0xd88>
 8003008:	ee67 7aa6 	vmul.f32	s15, s15, s13
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 800300c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003010:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
				// in this operating mode, flux current is forced to 0
				setpoint_flux_current_mA=0.0f;
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			}
			break;
 800301c:	e235      	b.n	800348a <main+0x10aa>
		case REG_CONTROL_MODE_VELOCITY_TORQUE:
			if(last_mode!=REG_CONTROL_MODE_VELOCITY_TORQUE)
 800301e:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8003022:	2b02      	cmp	r3, #2
 8003024:	d02a      	beq.n	800307c <main+0xc9c>
			{
				pid_reset(&pid_velocity);
 8003026:	f107 0318 	add.w	r3, r7, #24
 800302a:	4618      	mov	r0, r3
 800302c:	f001 f8d4 	bl	80041d8 <pid_reset>
				// copy EEPROM to RAM
				regs[REG_GOAL_TORQUE_CURRENT_MA_L] = regs[REG_MAX_CURRENT_MA_L];
 8003030:	4b49      	ldr	r3, [pc, #292]	; (8003158 <main+0xd78>)
 8003032:	7e1a      	ldrb	r2, [r3, #24]
 8003034:	4b48      	ldr	r3, [pc, #288]	; (8003158 <main+0xd78>)
 8003036:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
				regs[REG_GOAL_TORQUE_CURRENT_MA_H] = regs[REG_MAX_CURRENT_MA_H];
 800303a:	4b47      	ldr	r3, [pc, #284]	; (8003158 <main+0xd78>)
 800303c:	7e5a      	ldrb	r2, [r3, #25]
 800303e:	4b46      	ldr	r3, [pc, #280]	; (8003158 <main+0xd78>)
 8003040:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				// reset unused RAM
				regs[REG_GOAL_FLUX_CURRENT_MA_L] = 0;
 8003044:	4b44      	ldr	r3, [pc, #272]	; (8003158 <main+0xd78>)
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
				regs[REG_GOAL_FLUX_CURRENT_MA_H] = 0;
 800304c:	4b42      	ldr	r3, [pc, #264]	; (8003158 <main+0xd78>)
 800304e:	2200      	movs	r2, #0
 8003050:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
				regs[REG_GOAL_POSITION_DEG_L] = 0;
 8003054:	4b40      	ldr	r3, [pc, #256]	; (8003158 <main+0xd78>)
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				regs[REG_GOAL_POSITION_DEG_H] = 0;
 800305c:	4b3e      	ldr	r3, [pc, #248]	; (8003158 <main+0xd78>)
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
				// reset goal to avoid glicth
				regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 8003064:	4b3c      	ldr	r3, [pc, #240]	; (8003158 <main+0xd78>)
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
				regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 800306c:	4b3a      	ldr	r3, [pc, #232]	; (8003158 <main+0xd78>)
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
				// reset filtered setpoint
				setpoint_torque_current_mA = 0.0f;
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			}
			{
				setpoint_position_deg = 0.0f;
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
				setpoint_acceleration_dpss = 0.0f;
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
				// compute velocity setpoint from goal and EEPROM velocity limit
				float const goal_velocity_dps = (int16_t)(MAKE_SHORT(regs[REG_GOAL_VELOCITY_DPS_L],regs[REG_GOAL_VELOCITY_DPS_H]));
 800308c:	4b32      	ldr	r3, [pc, #200]	; (8003158 <main+0xd78>)
 800308e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8003092:	021b      	lsls	r3, r3, #8
 8003094:	b21a      	sxth	r2, r3
 8003096:	4b30      	ldr	r3, [pc, #192]	; (8003158 <main+0xd78>)
 8003098:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800309c:	b21b      	sxth	r3, r3
 800309e:	4313      	orrs	r3, r2
 80030a0:	b21b      	sxth	r3, r3
 80030a2:	ee07 3a90 	vmov	s15, r3
 80030a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030aa:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
				float const reg_max_velocity_dps = (uint16_t)(MAKE_SHORT(regs[REG_MAX_VELOCITY_DPS_L],regs[REG_MAX_VELOCITY_DPS_H]));
 80030ae:	4b2a      	ldr	r3, [pc, #168]	; (8003158 <main+0xd78>)
 80030b0:	7d5b      	ldrb	r3, [r3, #21]
 80030b2:	021b      	lsls	r3, r3, #8
 80030b4:	b21a      	sxth	r2, r3
 80030b6:	4b28      	ldr	r3, [pc, #160]	; (8003158 <main+0xd78>)
 80030b8:	7d1b      	ldrb	r3, [r3, #20]
 80030ba:	b21b      	sxth	r3, r3
 80030bc:	4313      	orrs	r3, r2
 80030be:	b21b      	sxth	r3, r3
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	ee07 3a90 	vmov	s15, r3
 80030c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ca:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
				setpoint_velocity_dps = fconstrain(goal_velocity_dps,-reg_max_velocity_dps,reg_max_velocity_dps);
 80030ce:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80030d2:	eef1 7a67 	vneg.f32	s15, s15
 80030d6:	ed97 1a2e 	vldr	s2, [r7, #184]	; 0xb8
 80030da:	eef0 0a67 	vmov.f32	s1, s15
 80030de:	ed97 0a2f 	vldr	s0, [r7, #188]	; 0xbc
 80030e2:	f001 f850 	bl	8004186 <fconstrain>
 80030e6:	ed87 0a39 	vstr	s0, [r7, #228]	; 0xe4
				// compute velocity error
				float const error_velocity_dps = setpoint_velocity_dps-API_FOC_Get_Present_Velocity();
 80030ea:	f7fe ffe7 	bl	80020bc <API_FOC_Get_Present_Velocity>
 80030ee:	eeb0 7a40 	vmov.f32	s14, s0
 80030f2:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 80030f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030fa:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
				// compute torque current setpoint using PID velocity, current is limited bt goal current and EEPROM current limit
				float const goal_torque_current_mA=(int16_t)(MAKE_SHORT(regs[REG_GOAL_TORQUE_CURRENT_MA_L],regs[REG_GOAL_TORQUE_CURRENT_MA_H]));
 80030fe:	4b16      	ldr	r3, [pc, #88]	; (8003158 <main+0xd78>)
 8003100:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003104:	021b      	lsls	r3, r3, #8
 8003106:	b21a      	sxth	r2, r3
 8003108:	4b13      	ldr	r3, [pc, #76]	; (8003158 <main+0xd78>)
 800310a:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 800310e:	b21b      	sxth	r3, r3
 8003110:	4313      	orrs	r3, r2
 8003112:	b21b      	sxth	r3, r3
 8003114:	ee07 3a90 	vmov	s15, r3
 8003118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800311c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
				float const reg_max_current_ma = (uint16_t)(MAKE_SHORT(regs[REG_MAX_CURRENT_MA_L],regs[REG_MAX_CURRENT_MA_H]));
 8003120:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <main+0xd78>)
 8003122:	7e5b      	ldrb	r3, [r3, #25]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	b21a      	sxth	r2, r3
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <main+0xd78>)
 800312a:	7e1b      	ldrb	r3, [r3, #24]
 800312c:	b21b      	sxth	r3, r3
 800312e:	4313      	orrs	r3, r2
 8003130:	b21b      	sxth	r3, r3
 8003132:	b29b      	uxth	r3, r3
 8003134:	ee07 3a90 	vmov	s15, r3
 8003138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
				float const reg_reverse = regs[REG_INV_PHASE_MOTOR] == 0 ? 1.0f : -1.0f;
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <main+0xd78>)
 8003142:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003146:	2b00      	cmp	r3, #0
 8003148:	d110      	bne.n	800316c <main+0xd8c>
 800314a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800314e:	e00e      	b.n	800316e <main+0xd8e>
 8003150:	bf800000 	.word	0xbf800000
 8003154:	3ef5c28f 	.word	0x3ef5c28f
 8003158:	20000218 	.word	0x20000218
 800315c:	447a0000 	.word	0x447a0000
 8003160:	47c35000 	.word	0x47c35000
 8003164:	3dcccccd 	.word	0x3dcccccd
 8003168:	3f051eb8 	.word	0x3f051eb8
 800316c:	4ba5      	ldr	r3, [pc, #660]	; (8003404 <main+0x1024>)
 800316e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8003172:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003176:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8003408 <main+0x1028>
 800317a:	ee27 8a87 	vmul.f32	s16, s15, s14
						&pid_velocity,
						error_velocity_dps,
						(float)((int16_t)(MAKE_SHORT(regs[REG_PID_VELOCITY_KP_L],regs[REG_PID_VELOCITY_KP_H])))/1000.0f,
 800317e:	4ba3      	ldr	r3, [pc, #652]	; (800340c <main+0x102c>)
 8003180:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	b21a      	sxth	r2, r3
 8003188:	4ba0      	ldr	r3, [pc, #640]	; (800340c <main+0x102c>)
 800318a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800318e:	b21b      	sxth	r3, r3
 8003190:	4313      	orrs	r3, r2
 8003192:	b21b      	sxth	r3, r3
 8003194:	ee07 3a90 	vmov	s15, r3
 8003198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 800319c:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8003410 <main+0x1030>
 80031a0:	eec7 8a87 	vdiv.f32	s17, s15, s14
						(float)((int16_t)(MAKE_SHORT(regs[REG_PID_VELOCITY_KI_L],regs[REG_PID_VELOCITY_KI_H])))/100000.0f,
 80031a4:	4b99      	ldr	r3, [pc, #612]	; (800340c <main+0x102c>)
 80031a6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80031aa:	021b      	lsls	r3, r3, #8
 80031ac:	b21a      	sxth	r2, r3
 80031ae:	4b97      	ldr	r3, [pc, #604]	; (800340c <main+0x102c>)
 80031b0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80031b4:	b21b      	sxth	r3, r3
 80031b6:	4313      	orrs	r3, r2
 80031b8:	b21b      	sxth	r3, r3
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 80031c2:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8003414 <main+0x1034>
 80031c6:	ee87 9a87 	vdiv.f32	s18, s15, s14
						(float)((int16_t)(MAKE_SHORT(regs[REG_PID_VELOCITY_KD_L],regs[REG_PID_VELOCITY_KD_H])))/1000.0f,
 80031ca:	4b90      	ldr	r3, [pc, #576]	; (800340c <main+0x102c>)
 80031cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031d0:	021b      	lsls	r3, r3, #8
 80031d2:	b21a      	sxth	r2, r3
 80031d4:	4b8d      	ldr	r3, [pc, #564]	; (800340c <main+0x102c>)
 80031d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031da:	b21b      	sxth	r3, r3
 80031dc:	4313      	orrs	r3, r2
 80031de:	b21b      	sxth	r3, r3
 80031e0:	ee07 3a90 	vmov	s15, r3
 80031e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 80031e8:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8003410 <main+0x1030>
 80031ec:	eec7 9a87 	vdiv.f32	s19, s15, s14
 80031f0:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 80031f4:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 80031f8:	f00a fabd 	bl	800d776 <fminf>
 80031fc:	eef0 6a40 	vmov.f32	s13, s0
						fminf(goal_torque_current_mA,reg_max_current_ma), // current limit is the lowest limit from goal and EEPROM
						0.1f,// ALPHA D
						setpoint_velocity_dps*(float)((int16_t)(MAKE_SHORT(regs[REG_PID_VELOCITY_KFF_L],regs[REG_PID_VELOCITY_KFF_H])))/1000.0f
 8003200:	4b82      	ldr	r3, [pc, #520]	; (800340c <main+0x102c>)
 8003202:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003206:	021b      	lsls	r3, r3, #8
 8003208:	b21a      	sxth	r2, r3
 800320a:	4b80      	ldr	r3, [pc, #512]	; (800340c <main+0x102c>)
 800320c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003210:	b21b      	sxth	r3, r3
 8003212:	4313      	orrs	r3, r2
 8003214:	b21b      	sxth	r3, r3
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800321e:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8003222:	ee67 7a27 	vmul.f32	s15, s14, s15
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8003226:	ed9f 6a7a 	vldr	s12, [pc, #488]	; 8003410 <main+0x1030>
 800322a:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800322e:	f107 0318 	add.w	r3, r7, #24
 8003232:	eeb0 3a47 	vmov.f32	s6, s14
 8003236:	eddf 2a78 	vldr	s5, [pc, #480]	; 8003418 <main+0x1038>
 800323a:	eeb0 2a66 	vmov.f32	s4, s13
 800323e:	eef0 1a69 	vmov.f32	s3, s19
 8003242:	eeb0 1a49 	vmov.f32	s2, s18
 8003246:	eef0 0a68 	vmov.f32	s1, s17
 800324a:	ed97 0a2d 	vldr	s0, [r7, #180]	; 0xb4
 800324e:	4618      	mov	r0, r3
 8003250:	f000 ffd8 	bl	8004204 <pid_process_antiwindup_clamp_with_ff>
 8003254:	eef0 7a40 	vmov.f32	s15, s0
 8003258:	ee28 7a27 	vmul.f32	s14, s16, s15
				) + (1.0f-ALPHA_CURRENT_SETPOINT)*setpoint_torque_current_mA;
 800325c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003260:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800341c <main+0x103c>
 8003264:	ee67 7aa6 	vmul.f32	s15, s15, s13
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8003268:	ee77 7a27 	vadd.f32	s15, s14, s15
 800326c:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
				// in this operating mode, flux current is forced to 0
				setpoint_flux_current_mA=0.0f;
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			}
			break;
 8003278:	e107      	b.n	800348a <main+0x10aa>
		case REG_CONTROL_MODE_TORQUE:
			if(last_mode!=REG_CONTROL_MODE_TORQUE)
 800327a:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800327e:	2b03      	cmp	r3, #3
 8003280:	d01f      	beq.n	80032c2 <main+0xee2>
			{
				// reset unused RAM
				regs[REG_GOAL_POSITION_DEG_L] = 0;
 8003282:	4b62      	ldr	r3, [pc, #392]	; (800340c <main+0x102c>)
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				regs[REG_GOAL_POSITION_DEG_H] = 0;
 800328a:	4b60      	ldr	r3, [pc, #384]	; (800340c <main+0x102c>)
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
				regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 8003292:	4b5e      	ldr	r3, [pc, #376]	; (800340c <main+0x102c>)
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
				regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 800329a:	4b5c      	ldr	r3, [pc, #368]	; (800340c <main+0x102c>)
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
				// reset goal to avoid glicth
				regs[REG_GOAL_TORQUE_CURRENT_MA_L] = 0;
 80032a2:	4b5a      	ldr	r3, [pc, #360]	; (800340c <main+0x102c>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
				regs[REG_GOAL_TORQUE_CURRENT_MA_H] = 0;
 80032aa:	4b58      	ldr	r3, [pc, #352]	; (800340c <main+0x102c>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				regs[REG_GOAL_FLUX_CURRENT_MA_L] = 0;
 80032b2:	4b56      	ldr	r3, [pc, #344]	; (800340c <main+0x102c>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
				regs[REG_GOAL_FLUX_CURRENT_MA_H] = 0;
 80032ba:	4b54      	ldr	r3, [pc, #336]	; (800340c <main+0x102c>)
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
			}
			{
				setpoint_position_deg = 0.0f;
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
				setpoint_velocity_dps = 0.0f;
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
				setpoint_acceleration_dpss = 0.0f;
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
				// compute flux & torque current setpoints, from goals and EEPROM current limit
				float const goal_torque_current_mA=(int16_t)(MAKE_SHORT(regs[REG_GOAL_TORQUE_CURRENT_MA_L],regs[REG_GOAL_TORQUE_CURRENT_MA_H]));
 80032da:	4b4c      	ldr	r3, [pc, #304]	; (800340c <main+0x102c>)
 80032dc:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80032e0:	021b      	lsls	r3, r3, #8
 80032e2:	b21a      	sxth	r2, r3
 80032e4:	4b49      	ldr	r3, [pc, #292]	; (800340c <main+0x102c>)
 80032e6:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80032ea:	b21b      	sxth	r3, r3
 80032ec:	4313      	orrs	r3, r2
 80032ee:	b21b      	sxth	r3, r3
 80032f0:	ee07 3a90 	vmov	s15, r3
 80032f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032f8:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
				float const goal_flux_current_mA=(int16_t)(MAKE_SHORT(regs[REG_GOAL_FLUX_CURRENT_MA_L],regs[REG_GOAL_FLUX_CURRENT_MA_H]));
 80032fc:	4b43      	ldr	r3, [pc, #268]	; (800340c <main+0x102c>)
 80032fe:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8003302:	021b      	lsls	r3, r3, #8
 8003304:	b21a      	sxth	r2, r3
 8003306:	4b41      	ldr	r3, [pc, #260]	; (800340c <main+0x102c>)
 8003308:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800330c:	b21b      	sxth	r3, r3
 800330e:	4313      	orrs	r3, r2
 8003310:	b21b      	sxth	r3, r3
 8003312:	ee07 3a90 	vmov	s15, r3
 8003316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800331a:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
				float const reg_max_current_ma = (uint16_t)(MAKE_SHORT(regs[REG_MAX_CURRENT_MA_L],regs[REG_MAX_CURRENT_MA_H]));
 800331e:	4b3b      	ldr	r3, [pc, #236]	; (800340c <main+0x102c>)
 8003320:	7e5b      	ldrb	r3, [r3, #25]
 8003322:	021b      	lsls	r3, r3, #8
 8003324:	b21a      	sxth	r2, r3
 8003326:	4b39      	ldr	r3, [pc, #228]	; (800340c <main+0x102c>)
 8003328:	7e1b      	ldrb	r3, [r3, #24]
 800332a:	b21b      	sxth	r3, r3
 800332c:	4313      	orrs	r3, r2
 800332e:	b21b      	sxth	r3, r3
 8003330:	b29b      	uxth	r3, r3
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800333a:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
				setpoint_flux_current_mA = fconstrain(goal_flux_current_mA,-reg_max_current_ma,reg_max_current_ma);
 800333e:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003342:	eef1 7a67 	vneg.f32	s15, s15
 8003346:	ed97 1a30 	vldr	s2, [r7, #192]	; 0xc0
 800334a:	eef0 0a67 	vmov.f32	s1, s15
 800334e:	ed97 0a31 	vldr	s0, [r7, #196]	; 0xc4
 8003352:	f000 ff18 	bl	8004186 <fconstrain>
 8003356:	ed87 0a37 	vstr	s0, [r7, #220]	; 0xdc
				setpoint_torque_current_mA = fconstrain(goal_torque_current_mA,-reg_max_current_ma,reg_max_current_ma);
 800335a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800335e:	eef1 7a67 	vneg.f32	s15, s15
 8003362:	ed97 1a30 	vldr	s2, [r7, #192]	; 0xc0
 8003366:	eef0 0a67 	vmov.f32	s1, s15
 800336a:	ed97 0a32 	vldr	s0, [r7, #200]	; 0xc8
 800336e:	f000 ff0a 	bl	8004186 <fconstrain>
 8003372:	ed87 0a38 	vstr	s0, [r7, #224]	; 0xe0
			}
			break;
 8003376:	e088      	b.n	800348a <main+0x10aa>
		case REG_CONTROL_MODE_VELOCITY_TORQUE_OPEN_LOOP:
			{
				if(last_mode!=REG_CONTROL_MODE_VELOCITY_TORQUE_OPEN_LOOP)
 8003378:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800337c:	2b04      	cmp	r3, #4
 800337e:	d01f      	beq.n	80033c0 <main+0xfe0>
				{
					// reset unused RAM
					regs[REG_GOAL_POSITION_DEG_L] = 0;
 8003380:	4b22      	ldr	r3, [pc, #136]	; (800340c <main+0x102c>)
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					regs[REG_GOAL_POSITION_DEG_H] = 0;
 8003388:	4b20      	ldr	r3, [pc, #128]	; (800340c <main+0x102c>)
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
					regs[REG_GOAL_FLUX_CURRENT_MA_L] = 0;
 8003390:	4b1e      	ldr	r3, [pc, #120]	; (800340c <main+0x102c>)
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
					regs[REG_GOAL_FLUX_CURRENT_MA_H] = 0;
 8003398:	4b1c      	ldr	r3, [pc, #112]	; (800340c <main+0x102c>)
 800339a:	2200      	movs	r2, #0
 800339c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
					regs[REG_GOAL_TORQUE_CURRENT_MA_L] = 0;
 80033a0:	4b1a      	ldr	r3, [pc, #104]	; (800340c <main+0x102c>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
					regs[REG_GOAL_TORQUE_CURRENT_MA_H] = 0;
 80033a8:	4b18      	ldr	r3, [pc, #96]	; (800340c <main+0x102c>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
					// reset goal to avoid glicth
					regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 80033b0:	4b16      	ldr	r3, [pc, #88]	; (800340c <main+0x102c>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
					regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 80033b8:	4b14      	ldr	r3, [pc, #80]	; (800340c <main+0x102c>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
				}
				setpoint_position_deg = 0.0f;
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
				setpoint_velocity_dps = (int16_t)(MAKE_SHORT(regs[REG_GOAL_VELOCITY_DPS_L],regs[REG_GOAL_VELOCITY_DPS_H]));
 80033c8:	4b10      	ldr	r3, [pc, #64]	; (800340c <main+0x102c>)
 80033ca:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80033ce:	021b      	lsls	r3, r3, #8
 80033d0:	b21a      	sxth	r2, r3
 80033d2:	4b0e      	ldr	r3, [pc, #56]	; (800340c <main+0x102c>)
 80033d4:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80033d8:	b21b      	sxth	r3, r3
 80033da:	4313      	orrs	r3, r2
 80033dc:	b21b      	sxth	r3, r3
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033e6:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
				setpoint_acceleration_dpss = 0.0f;
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
				setpoint_torque_current_mA = 0.0f;
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
				setpoint_flux_current_mA = 0.0f;
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			}
			break;
 8003402:	e042      	b.n	800348a <main+0x10aa>
 8003404:	bf800000 	.word	0xbf800000
 8003408:	3ef5c28f 	.word	0x3ef5c28f
 800340c:	20000218 	.word	0x20000218
 8003410:	447a0000 	.word	0x447a0000
 8003414:	47c35000 	.word	0x47c35000
 8003418:	3dcccccd 	.word	0x3dcccccd
 800341c:	3f051eb8 	.word	0x3f051eb8
		default:
			// reset unused RAM
			regs[REG_GOAL_POSITION_DEG_L] = 0;
 8003420:	4bcd      	ldr	r3, [pc, #820]	; (8003758 <main+0x1378>)
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			regs[REG_GOAL_POSITION_DEG_H] = 0;
 8003428:	4bcb      	ldr	r3, [pc, #812]	; (8003758 <main+0x1378>)
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 8003430:	4bc9      	ldr	r3, [pc, #804]	; (8003758 <main+0x1378>)
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
			regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 8003438:	4bc7      	ldr	r3, [pc, #796]	; (8003758 <main+0x1378>)
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			regs[REG_GOAL_TORQUE_CURRENT_MA_L] = 0;
 8003440:	4bc5      	ldr	r3, [pc, #788]	; (8003758 <main+0x1378>)
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			regs[REG_GOAL_TORQUE_CURRENT_MA_H] = 0;
 8003448:	4bc3      	ldr	r3, [pc, #780]	; (8003758 <main+0x1378>)
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
			regs[REG_GOAL_FLUX_CURRENT_MA_L] = 0;
 8003450:	4bc1      	ldr	r3, [pc, #772]	; (8003758 <main+0x1378>)
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
			regs[REG_GOAL_FLUX_CURRENT_MA_H] = 0;
 8003458:	4bbf      	ldr	r3, [pc, #764]	; (8003758 <main+0x1378>)
 800345a:	2200      	movs	r2, #0
 800345c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
			// reset all setpoints
			setpoint_position_deg = 0.0f;
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			setpoint_velocity_dps = 0.0f;
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			setpoint_acceleration_dpss = 0.0f;
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			setpoint_torque_current_mA=0.0f;
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			setpoint_flux_current_mA=0.0f;
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			break;
 8003488:	bf00      	nop
		}
		last_mode = reg_control_mode;
 800348a:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800348e:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		// PERFORMANCE
		//uint16_t t_end = __HAL_TIM_GET_COUNTER(&htim6);

		// RAM Update
		regs[REG_PRESENT_POSITION_DEG_L] = LOW_BYTE((int16_t)(RADIANS_TO_DEGREES(API_AS5048A_Position_Sensor_Get_Multiturn_Radians())*10.0f));
 8003492:	f001 f8f9 	bl	8004688 <API_AS5048A_Position_Sensor_Get_Multiturn_Radians>
 8003496:	eef0 7a40 	vmov.f32	s15, s0
 800349a:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 800375c <main+0x137c>
 800349e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034a2:	ee17 0a90 	vmov	r0, s15
 80034a6:	f7fd f81b 	bl	80004e0 <__aeabi_f2d>
 80034aa:	a3a9      	add	r3, pc, #676	; (adr r3, 8003750 <main+0x1370>)
 80034ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b0:	f7fd f998 	bl	80007e4 <__aeabi_ddiv>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4610      	mov	r0, r2
 80034ba:	4619      	mov	r1, r3
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	4ba7      	ldr	r3, [pc, #668]	; (8003760 <main+0x1380>)
 80034c2:	f7fd f865 	bl	8000590 <__aeabi_dmul>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4610      	mov	r0, r2
 80034cc:	4619      	mov	r1, r3
 80034ce:	f7fd faf9 	bl	8000ac4 <__aeabi_d2iz>
 80034d2:	4603      	mov	r3, r0
 80034d4:	b21b      	sxth	r3, r3
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	4b9f      	ldr	r3, [pc, #636]	; (8003758 <main+0x1378>)
 80034da:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		regs[REG_PRESENT_POSITION_DEG_H] = HIGH_BYTE((int16_t)(RADIANS_TO_DEGREES(API_AS5048A_Position_Sensor_Get_Multiturn_Radians())*10.0f));
 80034de:	f001 f8d3 	bl	8004688 <API_AS5048A_Position_Sensor_Get_Multiturn_Radians>
 80034e2:	eef0 7a40 	vmov.f32	s15, s0
 80034e6:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 800375c <main+0x137c>
 80034ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034ee:	ee17 0a90 	vmov	r0, s15
 80034f2:	f7fc fff5 	bl	80004e0 <__aeabi_f2d>
 80034f6:	a396      	add	r3, pc, #600	; (adr r3, 8003750 <main+0x1370>)
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	f7fd f972 	bl	80007e4 <__aeabi_ddiv>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4610      	mov	r0, r2
 8003506:	4619      	mov	r1, r3
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	4b94      	ldr	r3, [pc, #592]	; (8003760 <main+0x1380>)
 800350e:	f7fd f83f 	bl	8000590 <__aeabi_dmul>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4610      	mov	r0, r2
 8003518:	4619      	mov	r1, r3
 800351a:	f7fd fad3 	bl	8000ac4 <__aeabi_d2iz>
 800351e:	4603      	mov	r3, r0
 8003520:	b21b      	sxth	r3, r3
 8003522:	121b      	asrs	r3, r3, #8
 8003524:	b21b      	sxth	r3, r3
 8003526:	b2da      	uxtb	r2, r3
 8003528:	4b8b      	ldr	r3, [pc, #556]	; (8003758 <main+0x1378>)
 800352a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
		regs[REG_PRESENT_VELOCITY_DPS_L] = LOW_BYTE((int16_t)(API_AS5048A_Position_Sensor_Get_DPS()*1.0f));
 800352e:	f001 f8bb 	bl	80046a8 <API_AS5048A_Position_Sensor_Get_DPS>
 8003532:	eef0 7a40 	vmov.f32	s15, s0
 8003536:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800353a:	ee17 3a90 	vmov	r3, s15
 800353e:	b21b      	sxth	r3, r3
 8003540:	b2da      	uxtb	r2, r3
 8003542:	4b85      	ldr	r3, [pc, #532]	; (8003758 <main+0x1378>)
 8003544:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
		regs[REG_PRESENT_VELOCITY_DPS_H] = HIGH_BYTE((int16_t)(API_AS5048A_Position_Sensor_Get_DPS()*1.0f));
 8003548:	f001 f8ae 	bl	80046a8 <API_AS5048A_Position_Sensor_Get_DPS>
 800354c:	eef0 7a40 	vmov.f32	s15, s0
 8003550:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003554:	ee17 3a90 	vmov	r3, s15
 8003558:	b21b      	sxth	r3, r3
 800355a:	121b      	asrs	r3, r3, #8
 800355c:	b21b      	sxth	r3, r3
 800355e:	b2da      	uxtb	r2, r3
 8003560:	4b7d      	ldr	r3, [pc, #500]	; (8003758 <main+0x1378>)
 8003562:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		regs[REG_PRESENT_TORQUE_CURRENT_MA_L] = LOW_BYTE((int16_t)(API_FOC_Get_Present_Torque_Current()*1.0f));
 8003566:	f7fe fdb7 	bl	80020d8 <API_FOC_Get_Present_Torque_Current>
 800356a:	eef0 7a40 	vmov.f32	s15, s0
 800356e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003572:	ee17 3a90 	vmov	r3, s15
 8003576:	b21b      	sxth	r3, r3
 8003578:	b2da      	uxtb	r2, r3
 800357a:	4b77      	ldr	r3, [pc, #476]	; (8003758 <main+0x1378>)
 800357c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		regs[REG_PRESENT_TORQUE_CURRENT_MA_H] = HIGH_BYTE((int16_t)(API_FOC_Get_Present_Torque_Current()*1.0f));
 8003580:	f7fe fdaa 	bl	80020d8 <API_FOC_Get_Present_Torque_Current>
 8003584:	eef0 7a40 	vmov.f32	s15, s0
 8003588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800358c:	ee17 3a90 	vmov	r3, s15
 8003590:	b21b      	sxth	r3, r3
 8003592:	121b      	asrs	r3, r3, #8
 8003594:	b21b      	sxth	r3, r3
 8003596:	b2da      	uxtb	r2, r3
 8003598:	4b6f      	ldr	r3, [pc, #444]	; (8003758 <main+0x1378>)
 800359a:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
		regs[REG_PRESENT_FLUX_CURRENT_MA_L] = LOW_BYTE((int16_t)(API_FOC_Get_Present_Flux_Current()*1.0f));
 800359e:	f7fe fda9 	bl	80020f4 <API_FOC_Get_Present_Flux_Current>
 80035a2:	eef0 7a40 	vmov.f32	s15, s0
 80035a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035aa:	ee17 3a90 	vmov	r3, s15
 80035ae:	b21b      	sxth	r3, r3
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	4b69      	ldr	r3, [pc, #420]	; (8003758 <main+0x1378>)
 80035b4:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
		regs[REG_PRESENT_FLUX_CURRENT_MA_H] = HIGH_BYTE((int16_t)(API_FOC_Get_Present_Flux_Current()*1.0f));
 80035b8:	f7fe fd9c 	bl	80020f4 <API_FOC_Get_Present_Flux_Current>
 80035bc:	eef0 7a40 	vmov.f32	s15, s0
 80035c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035c4:	ee17 3a90 	vmov	r3, s15
 80035c8:	b21b      	sxth	r3, r3
 80035ca:	121b      	asrs	r3, r3, #8
 80035cc:	b21b      	sxth	r3, r3
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	4b61      	ldr	r3, [pc, #388]	; (8003758 <main+0x1378>)
 80035d2:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
		regs[REG_PRESENT_VOLTAGE] = (uint16_t)(API_FOC_Get_Present_Voltage());
 80035d6:	f7fe fd9b 	bl	8002110 <API_FOC_Get_Present_Voltage>
 80035da:	eef0 7a40 	vmov.f32	s15, s0
 80035de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035e2:	ee17 3a90 	vmov	r3, s15
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	4b5b      	ldr	r3, [pc, #364]	; (8003758 <main+0x1378>)
 80035ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		regs[REG_PRESENT_TEMPERATURE] = (uint16_t)(API_FOC_Get_Present_Temp());
 80035f0:	f7fe fd9c 	bl	800212c <API_FOC_Get_Present_Temp>
 80035f4:	eef0 7a40 	vmov.f32	s15, s0
 80035f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035fc:	ee17 3a90 	vmov	r3, s15
 8003600:	b29b      	uxth	r3, r3
 8003602:	b2da      	uxtb	r2, r3
 8003604:	4b54      	ldr	r3, [pc, #336]	; (8003758 <main+0x1378>)
 8003606:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		regs[REG_MOVING] = (uint16_t)(fabsf(API_AS5048A_Position_Sensor_Get_DPS())) > (uint16_t)(regs[REG_MOVING_THRESHOLD_DPS]) ? 1 : 0;
 800360a:	f001 f84d 	bl	80046a8 <API_AS5048A_Position_Sensor_Get_DPS>
 800360e:	eef0 7a40 	vmov.f32	s15, s0
 8003612:	eef0 7ae7 	vabs.f32	s15, s15
 8003616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800361a:	ee17 3a90 	vmov	r3, s15
 800361e:	b29a      	uxth	r2, r3
 8003620:	4b4d      	ldr	r3, [pc, #308]	; (8003758 <main+0x1378>)
 8003622:	7fdb      	ldrb	r3, [r3, #31]
 8003624:	b29b      	uxth	r3, r3
 8003626:	429a      	cmp	r2, r3
 8003628:	bf8c      	ite	hi
 800362a:	2301      	movhi	r3, #1
 800362c:	2300      	movls	r3, #0
 800362e:	b2db      	uxtb	r3, r3
 8003630:	461a      	mov	r2, r3
 8003632:	4b49      	ldr	r3, [pc, #292]	; (8003758 <main+0x1378>)
 8003634:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

		// DEBUG RAM Update
		regs[REG_SETPOINT_POSITION_DEG_L] = LOW_BYTE((int16_t)(setpoint_position_deg*10.0f));
 8003638:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 800363c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003640:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003644:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003648:	ee17 3a90 	vmov	r3, s15
 800364c:	b21b      	sxth	r3, r3
 800364e:	b2da      	uxtb	r2, r3
 8003650:	4b41      	ldr	r3, [pc, #260]	; (8003758 <main+0x1378>)
 8003652:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
		regs[REG_SETPOINT_POSITION_DEG_H] = HIGH_BYTE((int16_t)(setpoint_position_deg*10.0f));
 8003656:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 800365a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800365e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003666:	ee17 3a90 	vmov	r3, s15
 800366a:	b21b      	sxth	r3, r3
 800366c:	121b      	asrs	r3, r3, #8
 800366e:	b21b      	sxth	r3, r3
 8003670:	b2da      	uxtb	r2, r3
 8003672:	4b39      	ldr	r3, [pc, #228]	; (8003758 <main+0x1378>)
 8003674:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
		regs[REG_SETPOINT_VELOCITY_DPS_L] = LOW_BYTE((int16_t)(setpoint_velocity_dps*1.0f));
 8003678:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800367c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003680:	ee17 3a90 	vmov	r3, s15
 8003684:	b21b      	sxth	r3, r3
 8003686:	b2da      	uxtb	r2, r3
 8003688:	4b33      	ldr	r3, [pc, #204]	; (8003758 <main+0x1378>)
 800368a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		regs[REG_SETPOINT_VELOCITY_DPS_H] = HIGH_BYTE((int16_t)(setpoint_velocity_dps*1.0f));
 800368e:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8003692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003696:	ee17 3a90 	vmov	r3, s15
 800369a:	b21b      	sxth	r3, r3
 800369c:	121b      	asrs	r3, r3, #8
 800369e:	b21b      	sxth	r3, r3
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	4b2d      	ldr	r3, [pc, #180]	; (8003758 <main+0x1378>)
 80036a4:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
		regs[REG_SETPOINT_TORQUE_CURRENT_MA_L] = LOW_BYTE((int16_t)(setpoint_torque_current_mA*1.0f));
 80036a8:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80036ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036b0:	ee17 3a90 	vmov	r3, s15
 80036b4:	b21b      	sxth	r3, r3
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	4b27      	ldr	r3, [pc, #156]	; (8003758 <main+0x1378>)
 80036ba:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		regs[REG_SETPOINT_TORQUE_CURRENT_MA_H] = HIGH_BYTE((int16_t)(setpoint_torque_current_mA*1.0f));
 80036be:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80036c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036c6:	ee17 3a90 	vmov	r3, s15
 80036ca:	b21b      	sxth	r3, r3
 80036cc:	121b      	asrs	r3, r3, #8
 80036ce:	b21b      	sxth	r3, r3
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	4b21      	ldr	r3, [pc, #132]	; (8003758 <main+0x1378>)
 80036d4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		regs[REG_SETPOINT_FLUX_CURRENT_MA_L] = LOW_BYTE((int16_t)(setpoint_flux_current_mA*1.0f));
 80036d8:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80036dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036e0:	ee17 3a90 	vmov	r3, s15
 80036e4:	b21b      	sxth	r3, r3
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <main+0x1378>)
 80036ea:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
		regs[REG_SETPOINT_FLUX_CURRENT_MA_H] = HIGH_BYTE((int16_t)(setpoint_flux_current_mA*1.0f));
 80036ee:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80036f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036f6:	ee17 3a90 	vmov	r3, s15
 80036fa:	b21b      	sxth	r3, r3
 80036fc:	121b      	asrs	r3, r3, #8
 80036fe:	b21b      	sxth	r3, r3
 8003700:	b2da      	uxtb	r2, r3
 8003702:	4b15      	ldr	r3, [pc, #84]	; (8003758 <main+0x1378>)
 8003704:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
		regs[REG_PROCESSING_TIME] = (uint8_t)(API_FOC_Get_Processing_Time());
 8003708:	f7fe fd1e 	bl	8002148 <API_FOC_Get_Processing_Time>
 800370c:	eef0 7a40 	vmov.f32	s15, s0
 8003710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003714:	edc7 7a01 	vstr	s15, [r7, #4]
 8003718:	793b      	ldrb	r3, [r7, #4]
 800371a:	b2da      	uxtb	r2, r3
 800371c:	4b0e      	ldr	r3, [pc, #56]	; (8003758 <main+0x1378>)
 800371e:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

		// TRACE
		static uint32_t counter = 0;
		if(((++counter)%4)==0)
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <main+0x1384>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	3301      	adds	r3, #1
 8003728:	4a0e      	ldr	r2, [pc, #56]	; (8003764 <main+0x1384>)
 800372a:	6013      	str	r3, [r2, #0]
//						(int)(API_FOC_Get_Present_Flux_Current())
//					);
		}
	}
	// synchro adjustment
	float const phase_synchro_offset_rad = DEGREES_TO_RADIANS((float)(MAKE_SHORT(regs[REG_GOAL_SYNCHRO_OFFSET_L],regs[REG_GOAL_SYNCHRO_OFFSET_H])));
 800372c:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <main+0x1378>)
 800372e:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8003732:	021b      	lsls	r3, r3, #8
 8003734:	4a08      	ldr	r2, [pc, #32]	; (8003758 <main+0x1378>)
 8003736:	f892 208d 	ldrb.w	r2, [r2, #141]	; 0x8d
 800373a:	4313      	orrs	r3, r2
 800373c:	ee07 3a90 	vmov	s15, r3
 8003740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003744:	ee17 0a90 	vmov	r0, s15
 8003748:	f7fc feca 	bl	80004e0 <__aeabi_f2d>
 800374c:	e00c      	b.n	8003768 <main+0x1388>
 800374e:	bf00      	nop
 8003750:	54442d18 	.word	0x54442d18
 8003754:	400921fb 	.word	0x400921fb
 8003758:	20000218 	.word	0x20000218
 800375c:	43340000 	.word	0x43340000
 8003760:	40240000 	.word	0x40240000
 8003764:	200001c4 	.word	0x200001c4
 8003768:	a31d      	add	r3, pc, #116	; (adr r3, 80037e0 <main+0x1400>)
 800376a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376e:	f7fc ff0f 	bl	8000590 <__aeabi_dmul>
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	4610      	mov	r0, r2
 8003778:	4619      	mov	r1, r3
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	4b16      	ldr	r3, [pc, #88]	; (80037d8 <main+0x13f8>)
 8003780:	f7fd f830 	bl	80007e4 <__aeabi_ddiv>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4610      	mov	r0, r2
 800378a:	4619      	mov	r1, r3
 800378c:	f7fd f9c2 	bl	8000b14 <__aeabi_d2f>
 8003790:	4603      	mov	r3, r0
 8003792:	633b      	str	r3, [r7, #48]	; 0x30
	// FOC update (every 250us when current drop rate is set to 4)
	if(regs[REG_CONTROL_MODE]==REG_CONTROL_MODE_VELOCITY_TORQUE_OPEN_LOOP)
 8003794:	4b11      	ldr	r3, [pc, #68]	; (80037dc <main+0x13fc>)
 8003796:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800379a:	2b04      	cmp	r3, #4
 800379c:	d10a      	bne.n	80037b4 <main+0x13d4>
	{
		API_FOC_Set_Flux_Velocity(
 800379e:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80037a2:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80037a6:	ed97 0a39 	vldr	s0, [r7, #228]	; 0xe4
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fe f8f0 	bl	8001990 <API_FOC_Set_Flux_Velocity>
 80037b0:	f7fe be83 	b.w	80024ba <main+0xda>
		API_FOC_Torque_Update(
			present_time_us,
			setpoint_torque_current_mA,
			setpoint_flux_current_mA,
			phase_synchro_offset_rad,
			regs[REG_GOAL_CLOSED_LOOP] // open loop if 0, closed loop if 1
 80037b4:	4b09      	ldr	r3, [pc, #36]	; (80037dc <main+0x13fc>)
 80037b6:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
		API_FOC_Torque_Update(
 80037ba:	461a      	mov	r2, r3
 80037bc:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80037c0:	4611      	mov	r1, r2
 80037c2:	ed97 1a0c 	vldr	s2, [r7, #48]	; 0x30
 80037c6:	edd7 0a37 	vldr	s1, [r7, #220]	; 0xdc
 80037ca:	ed97 0a38 	vldr	s0, [r7, #224]	; 0xe0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fe f992 	bl	8001af8 <API_FOC_Torque_Update>
  {
 80037d4:	f7fe be71 	b.w	80024ba <main+0xda>
 80037d8:	40668000 	.word	0x40668000
 80037dc:	20000218 	.word	0x20000218
 80037e0:	54442d18 	.word	0x54442d18
 80037e4:	400921fb 	.word	0x400921fb

080037e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b0a4      	sub	sp, #144	; 0x90
 80037ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80037f2:	2238      	movs	r2, #56	; 0x38
 80037f4:	2100      	movs	r1, #0
 80037f6:	4618      	mov	r0, r3
 80037f8:	f009 ff9a 	bl	800d730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	60da      	str	r2, [r3, #12]
 800380a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800380c:	463b      	mov	r3, r7
 800380e:	2244      	movs	r2, #68	; 0x44
 8003810:	2100      	movs	r1, #0
 8003812:	4618      	mov	r0, r3
 8003814:	f009 ff8c 	bl	800d730 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003818:	2000      	movs	r0, #0
 800381a:	f006 f887 	bl	800992c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800381e:	2301      	movs	r3, #1
 8003820:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003822:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003826:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003828:	2302      	movs	r3, #2
 800382a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800382c:	2303      	movs	r3, #3
 800382e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003830:	2301      	movs	r3, #1
 8003832:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003834:	2328      	movs	r3, #40	; 0x28
 8003836:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800383a:	2302      	movs	r3, #2
 800383c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003840:	2302      	movs	r3, #2
 8003842:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003846:	2302      	movs	r3, #2
 8003848:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800384c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003850:	4618      	mov	r0, r3
 8003852:	f006 f91f 	bl	8009a94 <HAL_RCC_OscConfig>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800385c:	f000 fc8e 	bl	800417c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003860:	230f      	movs	r3, #15
 8003862:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003864:	2303      	movs	r3, #3
 8003866:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003868:	2300      	movs	r3, #0
 800386a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800386c:	2300      	movs	r3, #0
 800386e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003870:	2300      	movs	r3, #0
 8003872:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003874:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003878:	2104      	movs	r1, #4
 800387a:	4618      	mov	r0, r3
 800387c:	f006 fc22 	bl	800a0c4 <HAL_RCC_ClockConfig>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003886:	f000 fc79 	bl	800417c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 800388a:	f249 0302 	movw	r3, #36866	; 0x9002
 800388e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003890:	2300      	movs	r3, #0
 8003892:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8003894:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003898:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800389a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800389e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038a0:	463b      	mov	r3, r7
 80038a2:	4618      	mov	r0, r3
 80038a4:	f006 fe2a 	bl	800a4fc <HAL_RCCEx_PeriphCLKConfig>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80038ae:	f000 fc65 	bl	800417c <Error_Handler>
  }
}
 80038b2:	bf00      	nop
 80038b4:	3790      	adds	r7, #144	; 0x90
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08c      	sub	sp, #48	; 0x30
 80038c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80038c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	605a      	str	r2, [r3, #4]
 80038cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80038ce:	1d3b      	adds	r3, r7, #4
 80038d0:	2220      	movs	r2, #32
 80038d2:	2100      	movs	r1, #0
 80038d4:	4618      	mov	r0, r3
 80038d6:	f009 ff2b 	bl	800d730 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80038da:	4b4f      	ldr	r3, [pc, #316]	; (8003a18 <MX_ADC1_Init+0x15c>)
 80038dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80038e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80038e2:	4b4d      	ldr	r3, [pc, #308]	; (8003a18 <MX_ADC1_Init+0x15c>)
 80038e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80038e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80038ea:	4b4b      	ldr	r3, [pc, #300]	; (8003a18 <MX_ADC1_Init+0x15c>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80038f0:	4b49      	ldr	r3, [pc, #292]	; (8003a18 <MX_ADC1_Init+0x15c>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80038f6:	4b48      	ldr	r3, [pc, #288]	; (8003a18 <MX_ADC1_Init+0x15c>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80038fc:	4b46      	ldr	r3, [pc, #280]	; (8003a18 <MX_ADC1_Init+0x15c>)
 80038fe:	2201      	movs	r2, #1
 8003900:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003902:	4b45      	ldr	r3, [pc, #276]	; (8003a18 <MX_ADC1_Init+0x15c>)
 8003904:	2208      	movs	r2, #8
 8003906:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003908:	4b43      	ldr	r3, [pc, #268]	; (8003a18 <MX_ADC1_Init+0x15c>)
 800390a:	2200      	movs	r2, #0
 800390c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800390e:	4b42      	ldr	r3, [pc, #264]	; (8003a18 <MX_ADC1_Init+0x15c>)
 8003910:	2200      	movs	r2, #0
 8003912:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 5;
 8003914:	4b40      	ldr	r3, [pc, #256]	; (8003a18 <MX_ADC1_Init+0x15c>)
 8003916:	2205      	movs	r2, #5
 8003918:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800391a:	4b3f      	ldr	r3, [pc, #252]	; (8003a18 <MX_ADC1_Init+0x15c>)
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8003922:	4b3d      	ldr	r3, [pc, #244]	; (8003a18 <MX_ADC1_Init+0x15c>)
 8003924:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8003928:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800392a:	4b3b      	ldr	r3, [pc, #236]	; (8003a18 <MX_ADC1_Init+0x15c>)
 800392c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003930:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003932:	4b39      	ldr	r3, [pc, #228]	; (8003a18 <MX_ADC1_Init+0x15c>)
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800393a:	4b37      	ldr	r3, [pc, #220]	; (8003a18 <MX_ADC1_Init+0x15c>)
 800393c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003940:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003942:	4b35      	ldr	r3, [pc, #212]	; (8003a18 <MX_ADC1_Init+0x15c>)
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800394a:	4833      	ldr	r0, [pc, #204]	; (8003a18 <MX_ADC1_Init+0x15c>)
 800394c:	f002 fe04 	bl	8006558 <HAL_ADC_Init>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8003956:	f000 fc11 	bl	800417c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800395a:	2300      	movs	r3, #0
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800395e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003962:	4619      	mov	r1, r3
 8003964:	482c      	ldr	r0, [pc, #176]	; (8003a18 <MX_ADC1_Init+0x15c>)
 8003966:	f003 ffa1 	bl	80078ac <HAL_ADCEx_MultiModeConfigChannel>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8003970:	f000 fc04 	bl	800417c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 8003974:	4b29      	ldr	r3, [pc, #164]	; (8003a1c <MX_ADC1_Init+0x160>)
 8003976:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003978:	2306      	movs	r3, #6
 800397a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003980:	237f      	movs	r3, #127	; 0x7f
 8003982:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003984:	2304      	movs	r3, #4
 8003986:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003988:	2300      	movs	r3, #0
 800398a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800398c:	1d3b      	adds	r3, r7, #4
 800398e:	4619      	mov	r1, r3
 8003990:	4821      	ldr	r0, [pc, #132]	; (8003a18 <MX_ADC1_Init+0x15c>)
 8003992:	f003 fa55 	bl	8006e40 <HAL_ADC_ConfigChannel>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800399c:	f000 fbee 	bl	800417c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80039a0:	230c      	movs	r3, #12
 80039a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039a4:	1d3b      	adds	r3, r7, #4
 80039a6:	4619      	mov	r1, r3
 80039a8:	481b      	ldr	r0, [pc, #108]	; (8003a18 <MX_ADC1_Init+0x15c>)
 80039aa:	f003 fa49 	bl	8006e40 <HAL_ADC_ConfigChannel>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80039b4:	f000 fbe2 	bl	800417c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80039b8:	4b19      	ldr	r3, [pc, #100]	; (8003a20 <MX_ADC1_Init+0x164>)
 80039ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80039bc:	2312      	movs	r3, #18
 80039be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039c0:	1d3b      	adds	r3, r7, #4
 80039c2:	4619      	mov	r1, r3
 80039c4:	4814      	ldr	r0, [pc, #80]	; (8003a18 <MX_ADC1_Init+0x15c>)
 80039c6:	f003 fa3b 	bl	8006e40 <HAL_ADC_ConfigChannel>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80039d0:	f000 fbd4 	bl	800417c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80039d4:	4b13      	ldr	r3, [pc, #76]	; (8003a24 <MX_ADC1_Init+0x168>)
 80039d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80039d8:	2318      	movs	r3, #24
 80039da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039dc:	1d3b      	adds	r3, r7, #4
 80039de:	4619      	mov	r1, r3
 80039e0:	480d      	ldr	r0, [pc, #52]	; (8003a18 <MX_ADC1_Init+0x15c>)
 80039e2:	f003 fa2d 	bl	8006e40 <HAL_ADC_ConfigChannel>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80039ec:	f000 fbc6 	bl	800417c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80039f0:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <MX_ADC1_Init+0x16c>)
 80039f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80039f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039fa:	1d3b      	adds	r3, r7, #4
 80039fc:	4619      	mov	r1, r3
 80039fe:	4806      	ldr	r0, [pc, #24]	; (8003a18 <MX_ADC1_Init+0x15c>)
 8003a00:	f003 fa1e 	bl	8006e40 <HAL_ADC_ConfigChannel>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8003a0a:	f000 fbb7 	bl	800417c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003a0e:	bf00      	nop
 8003a10:	3730      	adds	r7, #48	; 0x30
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000498 	.word	0x20000498
 8003a1c:	b6902000 	.word	0xb6902000
 8003a20:	2e300800 	.word	0x2e300800
 8003a24:	04300002 	.word	0x04300002
 8003a28:	14f00020 	.word	0x14f00020

08003a2c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003a32:	463b      	mov	r3, r7
 8003a34:	2220      	movs	r2, #32
 8003a36:	2100      	movs	r1, #0
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f009 fe79 	bl	800d730 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8003a3e:	4b39      	ldr	r3, [pc, #228]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a40:	4a39      	ldr	r2, [pc, #228]	; (8003b28 <MX_ADC2_Init+0xfc>)
 8003a42:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003a44:	4b37      	ldr	r3, [pc, #220]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a46:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003a4a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003a4c:	4b35      	ldr	r3, [pc, #212]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003a52:	4b34      	ldr	r3, [pc, #208]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8003a58:	4b32      	ldr	r3, [pc, #200]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003a5e:	4b31      	ldr	r3, [pc, #196]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003a64:	4b2f      	ldr	r3, [pc, #188]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a66:	2208      	movs	r2, #8
 8003a68:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003a6a:	4b2e      	ldr	r3, [pc, #184]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003a70:	4b2c      	ldr	r3, [pc, #176]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 3;
 8003a76:	4b2b      	ldr	r3, [pc, #172]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a78:	2203      	movs	r2, #3
 8003a7a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003a7c:	4b29      	ldr	r3, [pc, #164]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8003a84:	4b27      	ldr	r3, [pc, #156]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a86:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8003a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003a8c:	4b25      	ldr	r3, [pc, #148]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a92:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003a94:	4b23      	ldr	r3, [pc, #140]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003a9c:	4b21      	ldr	r3, [pc, #132]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003aa2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8003aa4:	4b1f      	ldr	r3, [pc, #124]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003aac:	481d      	ldr	r0, [pc, #116]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003aae:	f002 fd53 	bl	8006558 <HAL_ADC_Init>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003ab8:	f000 fb60 	bl	800417c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 8003abc:	4b1b      	ldr	r3, [pc, #108]	; (8003b2c <MX_ADC2_Init+0x100>)
 8003abe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003ac0:	2306      	movs	r3, #6
 8003ac2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003ac8:	237f      	movs	r3, #127	; 0x7f
 8003aca:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003acc:	2304      	movs	r3, #4
 8003ace:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ad4:	463b      	mov	r3, r7
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4812      	ldr	r0, [pc, #72]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003ada:	f003 f9b1 	bl	8006e40 <HAL_ADC_ConfigChannel>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8003ae4:	f000 fb4a 	bl	800417c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003ae8:	230c      	movs	r3, #12
 8003aea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003aec:	463b      	mov	r3, r7
 8003aee:	4619      	mov	r1, r3
 8003af0:	480c      	ldr	r0, [pc, #48]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003af2:	f003 f9a5 	bl	8006e40 <HAL_ADC_ConfigChannel>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8003afc:	f000 fb3e 	bl	800417c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 8003b00:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <MX_ADC2_Init+0x104>)
 8003b02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003b04:	2312      	movs	r3, #18
 8003b06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003b08:	463b      	mov	r3, r7
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4805      	ldr	r0, [pc, #20]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003b0e:	f003 f997 	bl	8006e40 <HAL_ADC_ConfigChannel>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <MX_ADC2_Init+0xf0>
  {
    Error_Handler();
 8003b18:	f000 fb30 	bl	800417c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003b1c:	bf00      	nop
 8003b1e:	3720      	adds	r7, #32
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	200003b4 	.word	0x200003b4
 8003b28:	50000100 	.word	0x50000100
 8003b2c:	c3290000 	.word	0xc3290000
 8003b30:	cb8c0000 	.word	0xcb8c0000

08003b34 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8003b38:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <MX_CORDIC_Init+0x20>)
 8003b3a:	4a07      	ldr	r2, [pc, #28]	; (8003b58 <MX_CORDIC_Init+0x24>)
 8003b3c:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8003b3e:	4805      	ldr	r0, [pc, #20]	; (8003b54 <MX_CORDIC_Init+0x20>)
 8003b40:	f003 ff54 	bl	80079ec <HAL_CORDIC_Init>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8003b4a:	f000 fb17 	bl	800417c <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8003b4e:	bf00      	nop
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	20002e6c 	.word	0x20002e6c
 8003b58:	40020c00 	.word	0x40020c00

08003b5c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003b60:	4b1f      	ldr	r3, [pc, #124]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003b62:	4a20      	ldr	r2, [pc, #128]	; (8003be4 <MX_FDCAN1_Init+0x88>)
 8003b64:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 8003b66:	4b1e      	ldr	r3, [pc, #120]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003b6c:	4b1c      	ldr	r3, [pc, #112]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003b72:	4b1b      	ldr	r3, [pc, #108]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8003b78:	4b19      	ldr	r3, [pc, #100]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8003b7e:	4b18      	ldr	r3, [pc, #96]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003b84:	4b16      	ldr	r3, [pc, #88]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8003b8a:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8003b90:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003b92:	2210      	movs	r2, #16
 8003b94:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 63;
 8003b96:	4b12      	ldr	r3, [pc, #72]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003b98:	223f      	movs	r2, #63	; 0x3f
 8003b9a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8003b9c:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003b9e:	2210      	movs	r2, #16
 8003ba0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8003ba2:	4b0f      	ldr	r3, [pc, #60]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8003ba8:	4b0d      	ldr	r3, [pc, #52]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003baa:	2204      	movs	r2, #4
 8003bac:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8003bae:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003bb0:	2205      	movs	r2, #5
 8003bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8003bb4:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8003bba:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003bc0:	4b07      	ldr	r3, [pc, #28]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003bc6:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003bcc:	4804      	ldr	r0, [pc, #16]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003bce:	f004 fc9d 	bl	800850c <HAL_FDCAN_Init>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8003bd8:	f000 fad0 	bl	800417c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003bdc:	bf00      	nop
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	20002e94 	.word	0x20002e94
 8003be4:	40006400 	.word	0x40006400

08003be8 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8003bec:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <MX_OPAMP1_Init+0x54>)
 8003bee:	4a14      	ldr	r2, [pc, #80]	; (8003c40 <MX_OPAMP1_Init+0x58>)
 8003bf0:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8003bf2:	4b12      	ldr	r3, [pc, #72]	; (8003c3c <MX_OPAMP1_Init+0x54>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8003bf8:	4b10      	ldr	r3, [pc, #64]	; (8003c3c <MX_OPAMP1_Init+0x54>)
 8003bfa:	2240      	movs	r2, #64	; 0x40
 8003bfc:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8003bfe:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <MX_OPAMP1_Init+0x54>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8003c04:	4b0d      	ldr	r3, [pc, #52]	; (8003c3c <MX_OPAMP1_Init+0x54>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8003c0a:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <MX_OPAMP1_Init+0x54>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8003c10:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <MX_OPAMP1_Init+0x54>)
 8003c12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c16:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8003c18:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <MX_OPAMP1_Init+0x54>)
 8003c1a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8003c1e:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8003c20:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <MX_OPAMP1_Init+0x54>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8003c26:	4805      	ldr	r0, [pc, #20]	; (8003c3c <MX_OPAMP1_Init+0x54>)
 8003c28:	f005 fd7e 	bl	8009728 <HAL_OPAMP_Init>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8003c32:	f000 faa3 	bl	800417c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8003c36:	bf00      	nop
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	2000045c 	.word	0x2000045c
 8003c40:	40010300 	.word	0x40010300

08003c44 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8003c48:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <MX_OPAMP2_Init+0x54>)
 8003c4a:	4a14      	ldr	r2, [pc, #80]	; (8003c9c <MX_OPAMP2_Init+0x58>)
 8003c4c:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8003c4e:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <MX_OPAMP2_Init+0x54>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8003c54:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <MX_OPAMP2_Init+0x54>)
 8003c56:	2240      	movs	r2, #64	; 0x40
 8003c58:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8003c5a:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <MX_OPAMP2_Init+0x54>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 8003c60:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <MX_OPAMP2_Init+0x54>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8003c66:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <MX_OPAMP2_Init+0x54>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8003c6c:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <MX_OPAMP2_Init+0x54>)
 8003c6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c72:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8003c74:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <MX_OPAMP2_Init+0x54>)
 8003c76:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8003c7c:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <MX_OPAMP2_Init+0x54>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8003c82:	4805      	ldr	r0, [pc, #20]	; (8003c98 <MX_OPAMP2_Init+0x54>)
 8003c84:	f005 fd50 	bl	8009728 <HAL_OPAMP_Init>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 8003c8e:	f000 fa75 	bl	800417c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8003c92:	bf00      	nop
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	2000032c 	.word	0x2000032c
 8003c9c:	40010304 	.word	0x40010304

08003ca0 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8003ca4:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <MX_OPAMP3_Init+0x54>)
 8003ca6:	4a14      	ldr	r2, [pc, #80]	; (8003cf8 <MX_OPAMP3_Init+0x58>)
 8003ca8:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8003caa:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <MX_OPAMP3_Init+0x54>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8003cb0:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <MX_OPAMP3_Init+0x54>)
 8003cb2:	2240      	movs	r2, #64	; 0x40
 8003cb4:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8003cb6:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <MX_OPAMP3_Init+0x54>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8003cbc:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <MX_OPAMP3_Init+0x54>)
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <MX_OPAMP3_Init+0x54>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8003cc8:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <MX_OPAMP3_Init+0x54>)
 8003cca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8003cd0:	4b08      	ldr	r3, [pc, #32]	; (8003cf4 <MX_OPAMP3_Init+0x54>)
 8003cd2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8003cd6:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8003cd8:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <MX_OPAMP3_Init+0x54>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8003cde:	4805      	ldr	r0, [pc, #20]	; (8003cf4 <MX_OPAMP3_Init+0x54>)
 8003ce0:	f005 fd22 	bl	8009728 <HAL_OPAMP_Init>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8003cea:	f000 fa47 	bl	800417c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8003cee:	bf00      	nop
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000420 	.word	0x20000420
 8003cf8:	40010308 	.word	0x40010308

08003cfc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b09c      	sub	sp, #112	; 0x70
 8003d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d02:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	605a      	str	r2, [r3, #4]
 8003d0c:	609a      	str	r2, [r3, #8]
 8003d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d10:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	605a      	str	r2, [r3, #4]
 8003d1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	605a      	str	r2, [r3, #4]
 8003d26:	609a      	str	r2, [r3, #8]
 8003d28:	60da      	str	r2, [r3, #12]
 8003d2a:	611a      	str	r2, [r3, #16]
 8003d2c:	615a      	str	r2, [r3, #20]
 8003d2e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003d30:	1d3b      	adds	r3, r7, #4
 8003d32:	2234      	movs	r2, #52	; 0x34
 8003d34:	2100      	movs	r1, #0
 8003d36:	4618      	mov	r0, r3
 8003d38:	f009 fcfa 	bl	800d730 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003d3c:	4b53      	ldr	r3, [pc, #332]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003d3e:	4a54      	ldr	r2, [pc, #336]	; (8003e90 <MX_TIM1_Init+0x194>)
 8003d40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003d42:	4b52      	ldr	r3, [pc, #328]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003d48:	4b50      	ldr	r3, [pc, #320]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8003d4e:	4b4f      	ldr	r3, [pc, #316]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003d50:	f241 3287 	movw	r2, #4999	; 0x1387
 8003d54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d56:	4b4d      	ldr	r3, [pc, #308]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003d5c:	4b4b      	ldr	r3, [pc, #300]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d62:	4b4a      	ldr	r3, [pc, #296]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003d68:	4848      	ldr	r0, [pc, #288]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003d6a:	f006 fdb7 	bl	800a8dc <HAL_TIM_Base_Init>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003d74:	f000 fa02 	bl	800417c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d7c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003d7e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003d82:	4619      	mov	r1, r3
 8003d84:	4841      	ldr	r0, [pc, #260]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003d86:	f007 fb89 	bl	800b49c <HAL_TIM_ConfigClockSource>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003d90:	f000 f9f4 	bl	800417c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003d94:	483d      	ldr	r0, [pc, #244]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003d96:	f006 fe5b 	bl	800aa50 <HAL_TIM_PWM_Init>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003da0:	f000 f9ec 	bl	800417c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003da4:	2320      	movs	r3, #32
 8003da6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003da8:	2300      	movs	r3, #0
 8003daa:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dac:	2300      	movs	r3, #0
 8003dae:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003db0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003db4:	4619      	mov	r1, r3
 8003db6:	4835      	ldr	r0, [pc, #212]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003db8:	f008 f98a 	bl	800c0d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003dc2:	f000 f9db 	bl	800417c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003dc6:	2360      	movs	r3, #96	; 0x60
 8003dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003dde:	2300      	movs	r3, #0
 8003de0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003de2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003de6:	2200      	movs	r2, #0
 8003de8:	4619      	mov	r1, r3
 8003dea:	4828      	ldr	r0, [pc, #160]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003dec:	f007 fa46 	bl	800b27c <HAL_TIM_PWM_ConfigChannel>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8003df6:	f000 f9c1 	bl	800417c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003dfe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e02:	2204      	movs	r2, #4
 8003e04:	4619      	mov	r1, r3
 8003e06:	4821      	ldr	r0, [pc, #132]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003e08:	f007 fa38 	bl	800b27c <HAL_TIM_PWM_ConfigChannel>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 8003e12:	f000 f9b3 	bl	800417c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e1e:	2208      	movs	r2, #8
 8003e20:	4619      	mov	r1, r3
 8003e22:	481a      	ldr	r0, [pc, #104]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003e24:	f007 fa2a 	bl	800b27c <HAL_TIM_PWM_ConfigChannel>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8003e2e:	f000 f9a5 	bl	800417c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003e32:	2300      	movs	r3, #0
 8003e34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003e36:	2300      	movs	r3, #0
 8003e38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 128;
 8003e3e:	2380      	movs	r3, #128	; 0x80
 8003e40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003e46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003e50:	2300      	movs	r3, #0
 8003e52:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003e54:	2300      	movs	r3, #0
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003e58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003e62:	2300      	movs	r3, #0
 8003e64:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003e66:	2300      	movs	r3, #0
 8003e68:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003e6a:	1d3b      	adds	r3, r7, #4
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4807      	ldr	r0, [pc, #28]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003e70:	f008 f9b0 	bl	800c1d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <MX_TIM1_Init+0x182>
  {
    Error_Handler();
 8003e7a:	f000 f97f 	bl	800417c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003e7e:	4803      	ldr	r0, [pc, #12]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003e80:	f001 febe 	bl	8005c00 <HAL_TIM_MspPostInit>

}
 8003e84:	bf00      	nop
 8003e86:	3770      	adds	r7, #112	; 0x70
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	20002f44 	.word	0x20002f44
 8003e90:	40012c00 	.word	0x40012c00

08003e94 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08c      	sub	sp, #48	; 0x30
 8003e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003e9a:	f107 030c 	add.w	r3, r7, #12
 8003e9e:	2224      	movs	r2, #36	; 0x24
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f009 fc44 	bl	800d730 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ea8:	463b      	mov	r3, r7
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	605a      	str	r2, [r3, #4]
 8003eb0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003eb2:	4b21      	ldr	r3, [pc, #132]	; (8003f38 <MX_TIM4_Init+0xa4>)
 8003eb4:	4a21      	ldr	r2, [pc, #132]	; (8003f3c <MX_TIM4_Init+0xa8>)
 8003eb6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003eb8:	4b1f      	ldr	r3, [pc, #124]	; (8003f38 <MX_TIM4_Init+0xa4>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ebe:	4b1e      	ldr	r3, [pc, #120]	; (8003f38 <MX_TIM4_Init+0xa4>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8191;
 8003ec4:	4b1c      	ldr	r3, [pc, #112]	; (8003f38 <MX_TIM4_Init+0xa4>)
 8003ec6:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8003eca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ecc:	4b1a      	ldr	r3, [pc, #104]	; (8003f38 <MX_TIM4_Init+0xa4>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ed2:	4b19      	ldr	r3, [pc, #100]	; (8003f38 <MX_TIM4_Init+0xa4>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003edc:	2300      	movs	r3, #0
 8003ede:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8003ee8:	230f      	movs	r3, #15
 8003eea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003eec:	2300      	movs	r3, #0
 8003eee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8003ef8:	230f      	movs	r3, #15
 8003efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003efc:	f107 030c 	add.w	r3, r7, #12
 8003f00:	4619      	mov	r1, r3
 8003f02:	480d      	ldr	r0, [pc, #52]	; (8003f38 <MX_TIM4_Init+0xa4>)
 8003f04:	f006 ff06 	bl	800ad14 <HAL_TIM_Encoder_Init>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003f0e:	f000 f935 	bl	800417c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f12:	2300      	movs	r3, #0
 8003f14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f16:	2300      	movs	r3, #0
 8003f18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003f1a:	463b      	mov	r3, r7
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4806      	ldr	r0, [pc, #24]	; (8003f38 <MX_TIM4_Init+0xa4>)
 8003f20:	f008 f8d6 	bl	800c0d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003f2a:	f000 f927 	bl	800417c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003f2e:	bf00      	nop
 8003f30:	3730      	adds	r7, #48	; 0x30
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000368 	.word	0x20000368
 8003f3c:	40000800 	.word	0x40000800

08003f40 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f46:	1d3b      	adds	r3, r7, #4
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	605a      	str	r2, [r3, #4]
 8003f4e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003f50:	4b14      	ldr	r3, [pc, #80]	; (8003fa4 <MX_TIM6_Init+0x64>)
 8003f52:	4a15      	ldr	r2, [pc, #84]	; (8003fa8 <MX_TIM6_Init+0x68>)
 8003f54:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 159;
 8003f56:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <MX_TIM6_Init+0x64>)
 8003f58:	229f      	movs	r2, #159	; 0x9f
 8003f5a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f5c:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <MX_TIM6_Init+0x64>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003f62:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <MX_TIM6_Init+0x64>)
 8003f64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f68:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f6a:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <MX_TIM6_Init+0x64>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003f70:	480c      	ldr	r0, [pc, #48]	; (8003fa4 <MX_TIM6_Init+0x64>)
 8003f72:	f006 fcb3 	bl	800a8dc <HAL_TIM_Base_Init>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003f7c:	f000 f8fe 	bl	800417c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f80:	2300      	movs	r3, #0
 8003f82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003f88:	1d3b      	adds	r3, r7, #4
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4805      	ldr	r0, [pc, #20]	; (8003fa4 <MX_TIM6_Init+0x64>)
 8003f8e:	f008 f89f 	bl	800c0d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003f98:	f000 f8f0 	bl	800417c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20002ef8 	.word	0x20002ef8
 8003fa8:	40001000 	.word	0x40001000

08003fac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003fb0:	4b22      	ldr	r3, [pc, #136]	; (800403c <MX_USART2_UART_Init+0x90>)
 8003fb2:	4a23      	ldr	r2, [pc, #140]	; (8004040 <MX_USART2_UART_Init+0x94>)
 8003fb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8003fb6:	4b21      	ldr	r3, [pc, #132]	; (800403c <MX_USART2_UART_Init+0x90>)
 8003fb8:	4a22      	ldr	r2, [pc, #136]	; (8004044 <MX_USART2_UART_Init+0x98>)
 8003fba:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003fbc:	4b1f      	ldr	r3, [pc, #124]	; (800403c <MX_USART2_UART_Init+0x90>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003fc2:	4b1e      	ldr	r3, [pc, #120]	; (800403c <MX_USART2_UART_Init+0x90>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003fc8:	4b1c      	ldr	r3, [pc, #112]	; (800403c <MX_USART2_UART_Init+0x90>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003fce:	4b1b      	ldr	r3, [pc, #108]	; (800403c <MX_USART2_UART_Init+0x90>)
 8003fd0:	220c      	movs	r2, #12
 8003fd2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fd4:	4b19      	ldr	r3, [pc, #100]	; (800403c <MX_USART2_UART_Init+0x90>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fda:	4b18      	ldr	r3, [pc, #96]	; (800403c <MX_USART2_UART_Init+0x90>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003fe0:	4b16      	ldr	r3, [pc, #88]	; (800403c <MX_USART2_UART_Init+0x90>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003fe6:	4b15      	ldr	r3, [pc, #84]	; (800403c <MX_USART2_UART_Init+0x90>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003fec:	4b13      	ldr	r3, [pc, #76]	; (800403c <MX_USART2_UART_Init+0x90>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ff2:	4812      	ldr	r0, [pc, #72]	; (800403c <MX_USART2_UART_Init+0x90>)
 8003ff4:	f008 f9f9 	bl	800c3ea <HAL_UART_Init>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8003ffe:	f000 f8bd 	bl	800417c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004002:	2100      	movs	r1, #0
 8004004:	480d      	ldr	r0, [pc, #52]	; (800403c <MX_USART2_UART_Init+0x90>)
 8004006:	f009 fa76 	bl	800d4f6 <HAL_UARTEx_SetTxFifoThreshold>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8004010:	f000 f8b4 	bl	800417c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004014:	2100      	movs	r1, #0
 8004016:	4809      	ldr	r0, [pc, #36]	; (800403c <MX_USART2_UART_Init+0x90>)
 8004018:	f009 faab 	bl	800d572 <HAL_UARTEx_SetRxFifoThreshold>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8004022:	f000 f8ab 	bl	800417c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004026:	4805      	ldr	r0, [pc, #20]	; (800403c <MX_USART2_UART_Init+0x90>)
 8004028:	f009 fa2c 	bl	800d484 <HAL_UARTEx_DisableFifoMode>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8004032:	f000 f8a3 	bl	800417c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004036:	bf00      	nop
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	20002f90 	.word	0x20002f90
 8004040:	40004400 	.word	0x40004400
 8004044:	000f4240 	.word	0x000f4240

08004048 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800404e:	4b1e      	ldr	r3, [pc, #120]	; (80040c8 <MX_DMA_Init+0x80>)
 8004050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004052:	4a1d      	ldr	r2, [pc, #116]	; (80040c8 <MX_DMA_Init+0x80>)
 8004054:	f043 0304 	orr.w	r3, r3, #4
 8004058:	6493      	str	r3, [r2, #72]	; 0x48
 800405a:	4b1b      	ldr	r3, [pc, #108]	; (80040c8 <MX_DMA_Init+0x80>)
 800405c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800405e:	f003 0304 	and.w	r3, r3, #4
 8004062:	607b      	str	r3, [r7, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004066:	4b18      	ldr	r3, [pc, #96]	; (80040c8 <MX_DMA_Init+0x80>)
 8004068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406a:	4a17      	ldr	r2, [pc, #92]	; (80040c8 <MX_DMA_Init+0x80>)
 800406c:	f043 0301 	orr.w	r3, r3, #1
 8004070:	6493      	str	r3, [r2, #72]	; 0x48
 8004072:	4b15      	ldr	r3, [pc, #84]	; (80040c8 <MX_DMA_Init+0x80>)
 8004074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800407e:	2200      	movs	r2, #0
 8004080:	2100      	movs	r1, #0
 8004082:	200b      	movs	r0, #11
 8004084:	f003 ff2f 	bl	8007ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004088:	200b      	movs	r0, #11
 800408a:	f003 ff46 	bl	8007f1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800408e:	2200      	movs	r2, #0
 8004090:	2100      	movs	r1, #0
 8004092:	200c      	movs	r0, #12
 8004094:	f003 ff27 	bl	8007ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004098:	200c      	movs	r0, #12
 800409a:	f003 ff3e 	bl	8007f1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800409e:	2200      	movs	r2, #0
 80040a0:	2100      	movs	r1, #0
 80040a2:	200d      	movs	r0, #13
 80040a4:	f003 ff1f 	bl	8007ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80040a8:	200d      	movs	r0, #13
 80040aa:	f003 ff36 	bl	8007f1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80040ae:	2200      	movs	r2, #0
 80040b0:	2100      	movs	r1, #0
 80040b2:	200e      	movs	r0, #14
 80040b4:	f003 ff17 	bl	8007ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80040b8:	200e      	movs	r0, #14
 80040ba:	f003 ff2e 	bl	8007f1a <HAL_NVIC_EnableIRQ>

}
 80040be:	bf00      	nop
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40021000 	.word	0x40021000

080040cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b08a      	sub	sp, #40	; 0x28
 80040d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040d2:	f107 0314 	add.w	r3, r7, #20
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	605a      	str	r2, [r3, #4]
 80040dc:	609a      	str	r2, [r3, #8]
 80040de:	60da      	str	r2, [r3, #12]
 80040e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040e2:	4b24      	ldr	r3, [pc, #144]	; (8004174 <MX_GPIO_Init+0xa8>)
 80040e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e6:	4a23      	ldr	r2, [pc, #140]	; (8004174 <MX_GPIO_Init+0xa8>)
 80040e8:	f043 0304 	orr.w	r3, r3, #4
 80040ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040ee:	4b21      	ldr	r3, [pc, #132]	; (8004174 <MX_GPIO_Init+0xa8>)
 80040f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f2:	f003 0304 	and.w	r3, r3, #4
 80040f6:	613b      	str	r3, [r7, #16]
 80040f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80040fa:	4b1e      	ldr	r3, [pc, #120]	; (8004174 <MX_GPIO_Init+0xa8>)
 80040fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fe:	4a1d      	ldr	r2, [pc, #116]	; (8004174 <MX_GPIO_Init+0xa8>)
 8004100:	f043 0320 	orr.w	r3, r3, #32
 8004104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004106:	4b1b      	ldr	r3, [pc, #108]	; (8004174 <MX_GPIO_Init+0xa8>)
 8004108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004112:	4b18      	ldr	r3, [pc, #96]	; (8004174 <MX_GPIO_Init+0xa8>)
 8004114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004116:	4a17      	ldr	r2, [pc, #92]	; (8004174 <MX_GPIO_Init+0xa8>)
 8004118:	f043 0301 	orr.w	r3, r3, #1
 800411c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800411e:	4b15      	ldr	r3, [pc, #84]	; (8004174 <MX_GPIO_Init+0xa8>)
 8004120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	60bb      	str	r3, [r7, #8]
 8004128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800412a:	4b12      	ldr	r3, [pc, #72]	; (8004174 <MX_GPIO_Init+0xa8>)
 800412c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412e:	4a11      	ldr	r2, [pc, #68]	; (8004174 <MX_GPIO_Init+0xa8>)
 8004130:	f043 0302 	orr.w	r3, r3, #2
 8004134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004136:	4b0f      	ldr	r3, [pc, #60]	; (8004174 <MX_GPIO_Init+0xa8>)
 8004138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	607b      	str	r3, [r7, #4]
 8004140:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CAN_TERM_Pin|STATUS_Pin|CAN_SHDN_Pin, GPIO_PIN_RESET);
 8004142:	2200      	movs	r2, #0
 8004144:	f644 0140 	movw	r1, #18496	; 0x4840
 8004148:	480b      	ldr	r0, [pc, #44]	; (8004178 <MX_GPIO_Init+0xac>)
 800414a:	f005 fad5 	bl	80096f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAN_TERM_Pin STATUS_Pin CAN_SHDN_Pin */
  GPIO_InitStruct.Pin = CAN_TERM_Pin|STATUS_Pin|CAN_SHDN_Pin;
 800414e:	f644 0340 	movw	r3, #18496	; 0x4840
 8004152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004154:	2301      	movs	r3, #1
 8004156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004158:	2300      	movs	r3, #0
 800415a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800415c:	2300      	movs	r3, #0
 800415e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004160:	f107 0314 	add.w	r3, r7, #20
 8004164:	4619      	mov	r1, r3
 8004166:	4804      	ldr	r0, [pc, #16]	; (8004178 <MX_GPIO_Init+0xac>)
 8004168:	f005 f944 	bl	80093f4 <HAL_GPIO_Init>

}
 800416c:	bf00      	nop
 800416e:	3728      	adds	r7, #40	; 0x28
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40021000 	.word	0x40021000
 8004178:	48000800 	.word	0x48000800

0800417c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004180:	b672      	cpsid	i
}
 8004182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004184:	e7fe      	b.n	8004184 <Error_Handler+0x8>

08004186 <fconstrain>:
    else
        return x;
}

float fconstrain(float x, float min, float max)
{
 8004186:	b480      	push	{r7}
 8004188:	b085      	sub	sp, #20
 800418a:	af00      	add	r7, sp, #0
 800418c:	ed87 0a03 	vstr	s0, [r7, #12]
 8004190:	edc7 0a02 	vstr	s1, [r7, #8]
 8004194:	ed87 1a01 	vstr	s2, [r7, #4]
    if(x<min)
 8004198:	ed97 7a03 	vldr	s14, [r7, #12]
 800419c:	edd7 7a02 	vldr	s15, [r7, #8]
 80041a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a8:	d501      	bpl.n	80041ae <fconstrain+0x28>
        return min;
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	e00b      	b.n	80041c6 <fconstrain+0x40>
    else if(x>max)
 80041ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80041b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80041b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041be:	dd01      	ble.n	80041c4 <fconstrain+0x3e>
        return max;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	e000      	b.n	80041c6 <fconstrain+0x40>
    else
        return x;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	ee07 3a90 	vmov	s15, r3
}
 80041ca:	eeb0 0a67 	vmov.f32	s0, s15
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <pid_reset>:
#include <string.h>
#include <stdbool.h>
#include "math_tool.h"

void pid_reset( pid_context_t * ctx )
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
	ctx->err_last_one = 0.0f;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]
	ctx->err_integral = 0.0f;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	605a      	str	r2, [r3, #4]
	ctx->derivative_filtered = 0.0f;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	609a      	str	r2, [r3, #8]
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <pid_process_antiwindup_clamp_with_ff>:
		float kd,
		float output_limit,
		float alpha_derivative,
		float feed_forward
)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08e      	sub	sp, #56	; 0x38
 8004208:	af00      	add	r7, sp, #0
 800420a:	61f8      	str	r0, [r7, #28]
 800420c:	ed87 0a06 	vstr	s0, [r7, #24]
 8004210:	edc7 0a05 	vstr	s1, [r7, #20]
 8004214:	ed87 1a04 	vstr	s2, [r7, #16]
 8004218:	edc7 1a03 	vstr	s3, [r7, #12]
 800421c:	ed87 2a02 	vstr	s4, [r7, #8]
 8004220:	edc7 2a01 	vstr	s5, [r7, #4]
 8004224:	ed87 3a00 	vstr	s6, [r7]
	// filter derivative
	ctx->derivative_filtered = alpha_derivative*(error-ctx->err_last_one)+(1.0f-alpha_derivative)*ctx->derivative_filtered;
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	edd3 7a00 	vldr	s15, [r3]
 800422e:	ed97 7a06 	vldr	s14, [r7, #24]
 8004232:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004236:	edd7 7a01 	vldr	s15, [r7, #4]
 800423a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800423e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004242:	edd7 7a01 	vldr	s15, [r7, #4]
 8004246:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004250:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	edc3 7a02 	vstr	s15, [r3, #8]
	// update derivative state
	ctx->err_last_one = error;
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	601a      	str	r2, [r3, #0]
	// PID
	float const p_term = kp*error;
 8004264:	ed97 7a05 	vldr	s14, [r7, #20]
 8004268:	edd7 7a06 	vldr	s15, [r7, #24]
 800426c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004270:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float const i_term = ctx->err_integral;
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	633b      	str	r3, [r7, #48]	; 0x30
	float const d_term = kd*ctx->derivative_filtered;
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004280:	ed97 7a03 	vldr	s14, [r7, #12]
 8004284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004288:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	// compute output before saturation
	float const v = p_term + i_term + d_term + feed_forward;
 800428c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004290:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004294:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004298:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800429c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042a0:	ed97 7a00 	vldr	s14, [r7]
 80042a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042a8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	// saturation
	float const u = fconstrain(v,-output_limit,output_limit);
 80042ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80042b0:	eef1 7a67 	vneg.f32	s15, s15
 80042b4:	ed97 1a02 	vldr	s2, [r7, #8]
 80042b8:	eef0 0a67 	vmov.f32	s1, s15
 80042bc:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80042c0:	f7ff ff61 	bl	8004186 <fconstrain>
 80042c4:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	// output saturating
	bool saturating = (u!=v);
 80042c8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80042cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80042d0:	eeb4 7a67 	vcmp.f32	s14, s15
 80042d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d8:	bf14      	ite	ne
 80042da:	2301      	movne	r3, #1
 80042dc:	2300      	moveq	r3, #0
 80042de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	// error and output same sign
	bool sign = (error*v >= 0);
 80042e2:	ed97 7a06 	vldr	s14, [r7, #24]
 80042e6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80042ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f6:	bfac      	ite	ge
 80042f8:	2301      	movge	r3, #1
 80042fa:	2300      	movlt	r3, #0
 80042fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	// zero
	bool clamp = saturating && sign;
 8004300:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004304:	2b00      	cmp	r3, #0
 8004306:	d005      	beq.n	8004314 <pid_process_antiwindup_clamp_with_ff+0x110>
 8004308:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <pid_process_antiwindup_clamp_with_ff+0x110>
 8004310:	2301      	movs	r3, #1
 8004312:	e000      	b.n	8004316 <pid_process_antiwindup_clamp_with_ff+0x112>
 8004314:	2300      	movs	r3, #0
 8004316:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800431a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(!clamp)
 8004326:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800432a:	f083 0301 	eor.w	r3, r3, #1
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00d      	beq.n	8004350 <pid_process_antiwindup_clamp_with_ff+0x14c>
		ctx->err_integral = ctx->err_integral + ki*error;
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	ed93 7a01 	vldr	s14, [r3, #4]
 800433a:	edd7 6a04 	vldr	s13, [r7, #16]
 800433e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004342:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	edc3 7a01 	vstr	s15, [r3, #4]
	// output
	return u;
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004352:	ee07 3a90 	vmov	s15, r3
}
 8004356:	eeb0 0a67 	vmov.f32	s0, s15
 800435a:	3738      	adds	r7, #56	; 0x38
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <API_AS5048A_Position_Sensor_Init>:
//static uint32_t last_encoder_counter = 0; probably not needed

#define ALPHA_VELOCITY 0.01f // 0.1f default

void API_AS5048A_Position_Sensor_Init(TIM_HandleTypeDef * htim)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8004368:	213c      	movs	r1, #60	; 0x3c
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f006 fd78 	bl	800ae60 <HAL_TIM_Encoder_Start>


	HAL_Delay(3);
 8004370:	2003      	movs	r0, #3
 8004372:	f001 fe8f 	bl	8006094 <HAL_Delay>
	present_revolution = 0;
 8004376:	4b05      	ldr	r3, [pc, #20]	; (800438c <API_AS5048A_Position_Sensor_Init+0x2c>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]
	present_velocity_rad = 0.0f;
 800437c:	4b04      	ldr	r3, [pc, #16]	; (8004390 <API_AS5048A_Position_Sensor_Init+0x30>)
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
}
 8004384:	bf00      	nop
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	200001e8 	.word	0x200001e8
 8004390:	200001e4 	.word	0x200001e4
 8004394:	00000000 	.word	0x00000000

08004398 <API_AS5048A_Position_Sensor_It>:

void API_AS5048A_Position_Sensor_It(TIM_HandleTypeDef *htim)
{
 8004398:	b5b0      	push	{r4, r5, r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
	if(htim==position_sensor_htim)
 80043a0:	4b83      	ldr	r3, [pc, #524]	; (80045b0 <API_AS5048A_Position_Sensor_It+0x218>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	f040 80f1 	bne.w	800458e <API_AS5048A_Position_Sensor_It+0x1f6>
	{
		++calls;
 80043ac:	4b81      	ldr	r3, [pc, #516]	; (80045b4 <API_AS5048A_Position_Sensor_It+0x21c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3301      	adds	r3, #1
 80043b2:	4a80      	ldr	r2, [pc, #512]	; (80045b4 <API_AS5048A_Position_Sensor_It+0x21c>)
 80043b4:	6013      	str	r3, [r2, #0]
		// timestamp as soon as possible
		present_time_us = __HAL_TIM_GET_COUNTER(&htim6);
 80043b6:	4b80      	ldr	r3, [pc, #512]	; (80045b8 <API_AS5048A_Position_Sensor_It+0x220>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	b29a      	uxth	r2, r3
 80043be:	4b7f      	ldr	r3, [pc, #508]	; (80045bc <API_AS5048A_Position_Sensor_It+0x224>)
 80043c0:	801a      	strh	r2, [r3, #0]
		present_encoder_counter = __HAL_TIM_GET_COUNTER(htim);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	4a7d      	ldr	r2, [pc, #500]	; (80045c0 <API_AS5048A_Position_Sensor_It+0x228>)
 80043ca:	6013      	str	r3, [r2, #0]
		// when position is MAX = 2*PI*(1-1/4096)°, length is 16+4095 bits
		// compute PWM width / PWM period * 4119bits that gives the number of 1 bits
		// @150MHz, CHANNEL1 = period = 45500 with PSC=3
		//0.0007669903939428206148590437947459
		// compute new position in radians and constrain it to [0..2pi[
		present_position_rad = present_encoder_counter*bit_to_radians_ratio;
 80043cc:	4b7c      	ldr	r3, [pc, #496]	; (80045c0 <API_AS5048A_Position_Sensor_It+0x228>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	ee07 3a90 	vmov	s15, r3
 80043d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d8:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 80045c4 <API_AS5048A_Position_Sensor_It+0x22c>
 80043dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043e0:	4b79      	ldr	r3, [pc, #484]	; (80045c8 <API_AS5048A_Position_Sensor_It+0x230>)
 80043e2:	edc3 7a00 	vstr	s15, [r3]
		if(present_position_rad<0.0f)
 80043e6:	4b78      	ldr	r3, [pc, #480]	; (80045c8 <API_AS5048A_Position_Sensor_It+0x230>)
 80043e8:	edd3 7a00 	vldr	s15, [r3]
 80043ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f4:	d503      	bpl.n	80043fe <API_AS5048A_Position_Sensor_It+0x66>
			present_position_rad=0.0f;
 80043f6:	4b74      	ldr	r3, [pc, #464]	; (80045c8 <API_AS5048A_Position_Sensor_It+0x230>)
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
		if(present_position_rad>max_radians)
 80043fe:	4b72      	ldr	r3, [pc, #456]	; (80045c8 <API_AS5048A_Position_Sensor_It+0x230>)
 8004400:	edd3 7a00 	vldr	s15, [r3]
 8004404:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80045cc <API_AS5048A_Position_Sensor_It+0x234>
 8004408:	eef4 7ac7 	vcmpe.f32	s15, s14
 800440c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004410:	dd02      	ble.n	8004418 <API_AS5048A_Position_Sensor_It+0x80>
			present_position_rad=max_radians;
 8004412:	4a6f      	ldr	r2, [pc, #444]	; (80045d0 <API_AS5048A_Position_Sensor_It+0x238>)
 8004414:	4b6c      	ldr	r3, [pc, #432]	; (80045c8 <API_AS5048A_Position_Sensor_It+0x230>)
 8004416:	601a      	str	r2, [r3, #0]
		// compute multi-turn position and velocity in radians
		delta_position_rad = present_position_rad-last_position_rad;
 8004418:	4b6b      	ldr	r3, [pc, #428]	; (80045c8 <API_AS5048A_Position_Sensor_It+0x230>)
 800441a:	ed93 7a00 	vldr	s14, [r3]
 800441e:	4b6d      	ldr	r3, [pc, #436]	; (80045d4 <API_AS5048A_Position_Sensor_It+0x23c>)
 8004420:	edd3 7a00 	vldr	s15, [r3]
 8004424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004428:	4b6b      	ldr	r3, [pc, #428]	; (80045d8 <API_AS5048A_Position_Sensor_It+0x240>)
 800442a:	edc3 7a00 	vstr	s15, [r3]
		if(delta_position_rad>M_PI)
 800442e:	4b6a      	ldr	r3, [pc, #424]	; (80045d8 <API_AS5048A_Position_Sensor_It+0x240>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f7fc f854 	bl	80004e0 <__aeabi_f2d>
 8004438:	a357      	add	r3, pc, #348	; (adr r3, 8004598 <API_AS5048A_Position_Sensor_It+0x200>)
 800443a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443e:	f7fc fb37 	bl	8000ab0 <__aeabi_dcmpgt>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d017      	beq.n	8004478 <API_AS5048A_Position_Sensor_It+0xe0>
		{
			--present_revolution;
 8004448:	4b64      	ldr	r3, [pc, #400]	; (80045dc <API_AS5048A_Position_Sensor_It+0x244>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3b01      	subs	r3, #1
 800444e:	4a63      	ldr	r2, [pc, #396]	; (80045dc <API_AS5048A_Position_Sensor_It+0x244>)
 8004450:	6013      	str	r3, [r2, #0]
			delta_position_rad-=M_2PI;
 8004452:	4b61      	ldr	r3, [pc, #388]	; (80045d8 <API_AS5048A_Position_Sensor_It+0x240>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f7fc f842 	bl	80004e0 <__aeabi_f2d>
 800445c:	a350      	add	r3, pc, #320	; (adr r3, 80045a0 <API_AS5048A_Position_Sensor_It+0x208>)
 800445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004462:	f7fb fedd 	bl	8000220 <__aeabi_dsub>
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	4610      	mov	r0, r2
 800446c:	4619      	mov	r1, r3
 800446e:	f7fc fb51 	bl	8000b14 <__aeabi_d2f>
 8004472:	4603      	mov	r3, r0
 8004474:	4a58      	ldr	r2, [pc, #352]	; (80045d8 <API_AS5048A_Position_Sensor_It+0x240>)
 8004476:	6013      	str	r3, [r2, #0]
		}
		if(delta_position_rad<-M_PI)
 8004478:	4b57      	ldr	r3, [pc, #348]	; (80045d8 <API_AS5048A_Position_Sensor_It+0x240>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4618      	mov	r0, r3
 800447e:	f7fc f82f 	bl	80004e0 <__aeabi_f2d>
 8004482:	a349      	add	r3, pc, #292	; (adr r3, 80045a8 <API_AS5048A_Position_Sensor_It+0x210>)
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f7fc faf4 	bl	8000a74 <__aeabi_dcmplt>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d017      	beq.n	80044c2 <API_AS5048A_Position_Sensor_It+0x12a>
		{
			++present_revolution;
 8004492:	4b52      	ldr	r3, [pc, #328]	; (80045dc <API_AS5048A_Position_Sensor_It+0x244>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3301      	adds	r3, #1
 8004498:	4a50      	ldr	r2, [pc, #320]	; (80045dc <API_AS5048A_Position_Sensor_It+0x244>)
 800449a:	6013      	str	r3, [r2, #0]
			delta_position_rad+=M_2PI;
 800449c:	4b4e      	ldr	r3, [pc, #312]	; (80045d8 <API_AS5048A_Position_Sensor_It+0x240>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fc f81d 	bl	80004e0 <__aeabi_f2d>
 80044a6:	a33e      	add	r3, pc, #248	; (adr r3, 80045a0 <API_AS5048A_Position_Sensor_It+0x208>)
 80044a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ac:	f7fb feba 	bl	8000224 <__adddf3>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4610      	mov	r0, r2
 80044b6:	4619      	mov	r1, r3
 80044b8:	f7fc fb2c 	bl	8000b14 <__aeabi_d2f>
 80044bc:	4603      	mov	r3, r0
 80044be:	4a46      	ldr	r2, [pc, #280]	; (80045d8 <API_AS5048A_Position_Sensor_It+0x240>)
 80044c0:	6013      	str	r3, [r2, #0]
		}
		present_position_multi_rad = present_position_rad+(float)present_revolution*M_2PI;
 80044c2:	4b41      	ldr	r3, [pc, #260]	; (80045c8 <API_AS5048A_Position_Sensor_It+0x230>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fc f80a 	bl	80004e0 <__aeabi_f2d>
 80044cc:	4604      	mov	r4, r0
 80044ce:	460d      	mov	r5, r1
 80044d0:	4b42      	ldr	r3, [pc, #264]	; (80045dc <API_AS5048A_Position_Sensor_It+0x244>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	ee07 3a90 	vmov	s15, r3
 80044d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044dc:	ee17 0a90 	vmov	r0, s15
 80044e0:	f7fb fffe 	bl	80004e0 <__aeabi_f2d>
 80044e4:	a32e      	add	r3, pc, #184	; (adr r3, 80045a0 <API_AS5048A_Position_Sensor_It+0x208>)
 80044e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ea:	f7fc f851 	bl	8000590 <__aeabi_dmul>
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	4620      	mov	r0, r4
 80044f4:	4629      	mov	r1, r5
 80044f6:	f7fb fe95 	bl	8000224 <__adddf3>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4610      	mov	r0, r2
 8004500:	4619      	mov	r1, r3
 8004502:	f7fc fb07 	bl	8000b14 <__aeabi_d2f>
 8004506:	4603      	mov	r3, r0
 8004508:	4a35      	ldr	r2, [pc, #212]	; (80045e0 <API_AS5048A_Position_Sensor_It+0x248>)
 800450a:	6013      	str	r3, [r2, #0]
		// compute velocity
		position_delta_time_us = present_time_us-last_position_time_us;
 800450c:	4b2b      	ldr	r3, [pc, #172]	; (80045bc <API_AS5048A_Position_Sensor_It+0x224>)
 800450e:	881a      	ldrh	r2, [r3, #0]
 8004510:	4b34      	ldr	r3, [pc, #208]	; (80045e4 <API_AS5048A_Position_Sensor_It+0x24c>)
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	b29a      	uxth	r2, r3
 8004518:	4b33      	ldr	r3, [pc, #204]	; (80045e8 <API_AS5048A_Position_Sensor_It+0x250>)
 800451a:	801a      	strh	r2, [r3, #0]
		float const alpha_vel = (float)(regs[REG_EWMA_ENCODER]+1)/2560.0f; // 255 => B=0.1, 1 => beta = 0.0004
 800451c:	4b33      	ldr	r3, [pc, #204]	; (80045ec <API_AS5048A_Position_Sensor_It+0x254>)
 800451e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004522:	3301      	adds	r3, #1
 8004524:	ee07 3a90 	vmov	s15, r3
 8004528:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800452c:	eddf 6a30 	vldr	s13, [pc, #192]	; 80045f0 <API_AS5048A_Position_Sensor_It+0x258>
 8004530:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004534:	edc7 7a03 	vstr	s15, [r7, #12]
		present_velocity_rad =
				alpha_vel * (delta_position_rad / (float)position_delta_time_us * 1000000.0f)
 8004538:	4b27      	ldr	r3, [pc, #156]	; (80045d8 <API_AS5048A_Position_Sensor_It+0x240>)
 800453a:	edd3 6a00 	vldr	s13, [r3]
 800453e:	4b2a      	ldr	r3, [pc, #168]	; (80045e8 <API_AS5048A_Position_Sensor_It+0x250>)
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	ee07 3a90 	vmov	s15, r3
 8004546:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800454a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800454e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80045f4 <API_AS5048A_Position_Sensor_It+0x25c>
 8004552:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004556:	edd7 7a03 	vldr	s15, [r7, #12]
 800455a:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ (1.0f-alpha_vel) * present_velocity_rad;
 800455e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004562:	edd7 7a03 	vldr	s15, [r7, #12]
 8004566:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800456a:	4b23      	ldr	r3, [pc, #140]	; (80045f8 <API_AS5048A_Position_Sensor_It+0x260>)
 800456c:	edd3 7a00 	vldr	s15, [r3]
 8004570:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004574:	ee77 7a27 	vadd.f32	s15, s14, s15
		present_velocity_rad =
 8004578:	4b1f      	ldr	r3, [pc, #124]	; (80045f8 <API_AS5048A_Position_Sensor_It+0x260>)
 800457a:	edc3 7a00 	vstr	s15, [r3]
		// save last position
		last_position_time_us = present_time_us;
 800457e:	4b0f      	ldr	r3, [pc, #60]	; (80045bc <API_AS5048A_Position_Sensor_It+0x224>)
 8004580:	881a      	ldrh	r2, [r3, #0]
 8004582:	4b18      	ldr	r3, [pc, #96]	; (80045e4 <API_AS5048A_Position_Sensor_It+0x24c>)
 8004584:	801a      	strh	r2, [r3, #0]
		last_position_rad = present_position_rad;
 8004586:	4b10      	ldr	r3, [pc, #64]	; (80045c8 <API_AS5048A_Position_Sensor_It+0x230>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a12      	ldr	r2, [pc, #72]	; (80045d4 <API_AS5048A_Position_Sensor_It+0x23c>)
 800458c:	6013      	str	r3, [r2, #0]

	}
}
 800458e:	bf00      	nop
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bdb0      	pop	{r4, r5, r7, pc}
 8004596:	bf00      	nop
 8004598:	54442d18 	.word	0x54442d18
 800459c:	400921fb 	.word	0x400921fb
 80045a0:	54442d18 	.word	0x54442d18
 80045a4:	401921fb 	.word	0x401921fb
 80045a8:	54442d18 	.word	0x54442d18
 80045ac:	c00921fb 	.word	0xc00921fb
 80045b0:	200001c8 	.word	0x200001c8
 80045b4:	200001cc 	.word	0x200001cc
 80045b8:	20002ef8 	.word	0x20002ef8
 80045bc:	200001d0 	.word	0x200001d0
 80045c0:	200001f0 	.word	0x200001f0
 80045c4:	3a490fdb 	.word	0x3a490fdb
 80045c8:	200001d4 	.word	0x200001d4
 80045cc:	40c9034a 	.word	0x40c9034a
 80045d0:	40c9034a 	.word	0x40c9034a
 80045d4:	200001e0 	.word	0x200001e0
 80045d8:	200001d8 	.word	0x200001d8
 80045dc:	200001e8 	.word	0x200001e8
 80045e0:	200001ec 	.word	0x200001ec
 80045e4:	200001de 	.word	0x200001de
 80045e8:	200001dc 	.word	0x200001dc
 80045ec:	20000218 	.word	0x20000218
 80045f0:	45200000 	.word	0x45200000
 80045f4:	49742400 	.word	0x49742400
 80045f8:	200001e4 	.word	0x200001e4

080045fc <API_AS5048A_Position_Sensor_Get_Radians_Estimation>:

float API_AS5048A_Position_Sensor_Get_Radians_Estimation(uint16_t time_us)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	80fb      	strh	r3, [r7, #6]
	uint16_t delta_t_us = time_us-present_time_us;
 8004606:	4b1b      	ldr	r3, [pc, #108]	; (8004674 <API_AS5048A_Position_Sensor_Get_Radians_Estimation+0x78>)
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	88fa      	ldrh	r2, [r7, #6]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	81fb      	strh	r3, [r7, #14]
	// check old sample error
	if(delta_t_us>2000) //2ms
 8004610:	89fb      	ldrh	r3, [r7, #14]
 8004612:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004616:	d909      	bls.n	800462c <API_AS5048A_Position_Sensor_Get_Radians_Estimation+0x30>
	{
		// set encoder error
		regs[REG_HARDWARE_ERROR_STATUS] |= 1UL << HW_ERROR_BIT_POSITION_SENSOR_NOS_RESPONDING;
 8004618:	4b17      	ldr	r3, [pc, #92]	; (8004678 <API_AS5048A_Position_Sensor_Get_Radians_Estimation+0x7c>)
 800461a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800461e:	f043 0304 	orr.w	r3, r3, #4
 8004622:	b2da      	uxtb	r2, r3
 8004624:	4b14      	ldr	r3, [pc, #80]	; (8004678 <API_AS5048A_Position_Sensor_Get_Radians_Estimation+0x7c>)
 8004626:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 800462a:	e008      	b.n	800463e <API_AS5048A_Position_Sensor_Get_Radians_Estimation+0x42>
	}
	else
	{
		// clear encoder error
		regs[REG_HARDWARE_ERROR_STATUS] &= ~(1UL << HW_ERROR_BIT_POSITION_SENSOR_NOS_RESPONDING);
 800462c:	4b12      	ldr	r3, [pc, #72]	; (8004678 <API_AS5048A_Position_Sensor_Get_Radians_Estimation+0x7c>)
 800462e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004632:	f023 0304 	bic.w	r3, r3, #4
 8004636:	b2da      	uxtb	r2, r3
 8004638:	4b0f      	ldr	r3, [pc, #60]	; (8004678 <API_AS5048A_Position_Sensor_Get_Radians_Estimation+0x7c>)
 800463a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	}
	return present_position_rad + present_velocity_rad*(float)(delta_t_us)/1000000.0f;
 800463e:	89fb      	ldrh	r3, [r7, #14]
 8004640:	ee07 3a90 	vmov	s15, r3
 8004644:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004648:	4b0c      	ldr	r3, [pc, #48]	; (800467c <API_AS5048A_Position_Sensor_Get_Radians_Estimation+0x80>)
 800464a:	edd3 7a00 	vldr	s15, [r3]
 800464e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004652:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8004680 <API_AS5048A_Position_Sensor_Get_Radians_Estimation+0x84>
 8004656:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800465a:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <API_AS5048A_Position_Sensor_Get_Radians_Estimation+0x88>)
 800465c:	edd3 7a00 	vldr	s15, [r3]
 8004660:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8004664:	eeb0 0a67 	vmov.f32	s0, s15
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	200001d0 	.word	0x200001d0
 8004678:	20000218 	.word	0x20000218
 800467c:	200001e4 	.word	0x200001e4
 8004680:	49742400 	.word	0x49742400
 8004684:	200001d4 	.word	0x200001d4

08004688 <API_AS5048A_Position_Sensor_Get_Multiturn_Radians>:
{
	return present_position_rad;
}

float API_AS5048A_Position_Sensor_Get_Multiturn_Radians()
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
	return present_position_multi_rad;
 800468c:	4b04      	ldr	r3, [pc, #16]	; (80046a0 <API_AS5048A_Position_Sensor_Get_Multiturn_Radians+0x18>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	ee07 3a90 	vmov	s15, r3
}
 8004694:	eeb0 0a67 	vmov.f32	s0, s15
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	200001ec 	.word	0x200001ec
 80046a4:	00000000 	.word	0x00000000

080046a8 <API_AS5048A_Position_Sensor_Get_DPS>:
{
	return present_velocity_rad;
}

float API_AS5048A_Position_Sensor_Get_DPS()
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
	return RADIANS_TO_DEGREES(present_velocity_rad);
 80046ac:	4b10      	ldr	r3, [pc, #64]	; (80046f0 <API_AS5048A_Position_Sensor_Get_DPS+0x48>)
 80046ae:	edd3 7a00 	vldr	s15, [r3]
 80046b2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80046f4 <API_AS5048A_Position_Sensor_Get_DPS+0x4c>
 80046b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046ba:	ee17 0a90 	vmov	r0, s15
 80046be:	f7fb ff0f 	bl	80004e0 <__aeabi_f2d>
 80046c2:	a309      	add	r3, pc, #36	; (adr r3, 80046e8 <API_AS5048A_Position_Sensor_Get_DPS+0x40>)
 80046c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c8:	f7fc f88c 	bl	80007e4 <__aeabi_ddiv>
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	4610      	mov	r0, r2
 80046d2:	4619      	mov	r1, r3
 80046d4:	f7fc fa1e 	bl	8000b14 <__aeabi_d2f>
 80046d8:	4603      	mov	r3, r0
 80046da:	ee07 3a90 	vmov	s15, r3
}
 80046de:	eeb0 0a67 	vmov.f32	s0, s15
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	f3af 8000 	nop.w
 80046e8:	54442d18 	.word	0x54442d18
 80046ec:	400921fb 	.word	0x400921fb
 80046f0:	200001e4 	.word	0x200001e4
 80046f4:	43340000 	.word	0x43340000

080046f8 <updateCRC>:
#include "serial.h"

extern HAL_Serial_Handler serial;

uint16_t updateCRC(uint16_t crc_accum, uint8_t *data_blk_ptr, uint16_t data_blk_size)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	4603      	mov	r3, r0
 8004700:	6039      	str	r1, [r7, #0]
 8004702:	80fb      	strh	r3, [r7, #6]
 8004704:	4613      	mov	r3, r2
 8004706:	80bb      	strh	r3, [r7, #4]
    0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264,
    0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E,
    0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219, 0x0208,
    0x820D, 0x8207, 0x0202 };

  for (j = 0; j < data_blk_size; j++)
 8004708:	2300      	movs	r3, #0
 800470a:	81fb      	strh	r3, [r7, #14]
 800470c:	e019      	b.n	8004742 <updateCRC+0x4a>
  {
    i = ((uint16_t)(crc_accum >> 8) ^ *data_blk_ptr++) & 0xFF;
 800470e:	88fb      	ldrh	r3, [r7, #6]
 8004710:	0a1b      	lsrs	r3, r3, #8
 8004712:	b29a      	uxth	r2, r3
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	1c59      	adds	r1, r3, #1
 8004718:	6039      	str	r1, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	b29b      	uxth	r3, r3
 800471e:	4053      	eors	r3, r2
 8004720:	b29b      	uxth	r3, r3
 8004722:	b2db      	uxtb	r3, r3
 8004724:	81bb      	strh	r3, [r7, #12]
    crc_accum = (crc_accum << 8) ^ crc_table[i];
 8004726:	88fb      	ldrh	r3, [r7, #6]
 8004728:	021b      	lsls	r3, r3, #8
 800472a:	b21a      	sxth	r2, r3
 800472c:	89bb      	ldrh	r3, [r7, #12]
 800472e:	490a      	ldr	r1, [pc, #40]	; (8004758 <updateCRC+0x60>)
 8004730:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004734:	b21b      	sxth	r3, r3
 8004736:	4053      	eors	r3, r2
 8004738:	b21b      	sxth	r3, r3
 800473a:	80fb      	strh	r3, [r7, #6]
  for (j = 0; j < data_blk_size; j++)
 800473c:	89fb      	ldrh	r3, [r7, #14]
 800473e:	3301      	adds	r3, #1
 8004740:	81fb      	strh	r3, [r7, #14]
 8004742:	89fa      	ldrh	r2, [r7, #14]
 8004744:	88bb      	ldrh	r3, [r7, #4]
 8004746:	429a      	cmp	r2, r3
 8004748:	d3e1      	bcc.n	800470e <updateCRC+0x16>
  }

  return crc_accum;
 800474a:	88fb      	ldrh	r3, [r7, #6]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	0800e518 	.word	0x0800e518

0800475c <packet_encapsulate>:
#define PKT_PARAMETER2          10
#define PKT_PARAMETER3          11
#define PKT_PARAMETER4          12

void packet_encapsulate(uint32_t payload_status_length) // length from instruction byte to last parameter byte
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
	// header
	tx_packet_buffer[PKT_HEADER0]=0xFF;
 8004764:	4b1e      	ldr	r3, [pc, #120]	; (80047e0 <packet_encapsulate+0x84>)
 8004766:	22ff      	movs	r2, #255	; 0xff
 8004768:	701a      	strb	r2, [r3, #0]
	tx_packet_buffer[PKT_HEADER1]=0xFF;
 800476a:	4b1d      	ldr	r3, [pc, #116]	; (80047e0 <packet_encapsulate+0x84>)
 800476c:	22ff      	movs	r2, #255	; 0xff
 800476e:	705a      	strb	r2, [r3, #1]
	tx_packet_buffer[PKT_HEADER2]=0xFD;
 8004770:	4b1b      	ldr	r3, [pc, #108]	; (80047e0 <packet_encapsulate+0x84>)
 8004772:	22fd      	movs	r2, #253	; 0xfd
 8004774:	709a      	strb	r2, [r3, #2]
	tx_packet_buffer[PKT_RESERVED]=0x00;
 8004776:	4b1a      	ldr	r3, [pc, #104]	; (80047e0 <packet_encapsulate+0x84>)
 8004778:	2200      	movs	r2, #0
 800477a:	70da      	strb	r2, [r3, #3]
	tx_packet_buffer[PKT_ID]=regs[REG_ID];
 800477c:	4b19      	ldr	r3, [pc, #100]	; (80047e4 <packet_encapsulate+0x88>)
 800477e:	78da      	ldrb	r2, [r3, #3]
 8004780:	4b17      	ldr	r3, [pc, #92]	; (80047e0 <packet_encapsulate+0x84>)
 8004782:	711a      	strb	r2, [r3, #4]
	// length
	uint16_t length = payload_status_length+2; // +crc
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	b29b      	uxth	r3, r3
 8004788:	3302      	adds	r3, #2
 800478a:	81fb      	strh	r3, [r7, #14]
	tx_packet_buffer[PKT_LENGTH_L]= LOW_BYTE(length);
 800478c:	89fb      	ldrh	r3, [r7, #14]
 800478e:	b2da      	uxtb	r2, r3
 8004790:	4b13      	ldr	r3, [pc, #76]	; (80047e0 <packet_encapsulate+0x84>)
 8004792:	715a      	strb	r2, [r3, #5]
	tx_packet_buffer[PKT_LENGTH_H]= HIGH_BYTE(length);
 8004794:	89fb      	ldrh	r3, [r7, #14]
 8004796:	0a1b      	lsrs	r3, r3, #8
 8004798:	b29b      	uxth	r3, r3
 800479a:	b2da      	uxtb	r2, r3
 800479c:	4b10      	ldr	r3, [pc, #64]	; (80047e0 <packet_encapsulate+0x84>)
 800479e:	719a      	strb	r2, [r3, #6]
	// crc
	uint16_t packet_crc = updateCRC(0, tx_packet_buffer, length+5);
 80047a0:	89fb      	ldrh	r3, [r7, #14]
 80047a2:	3305      	adds	r3, #5
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	461a      	mov	r2, r3
 80047a8:	490d      	ldr	r1, [pc, #52]	; (80047e0 <packet_encapsulate+0x84>)
 80047aa:	2000      	movs	r0, #0
 80047ac:	f7ff ffa4 	bl	80046f8 <updateCRC>
 80047b0:	4603      	mov	r3, r0
 80047b2:	81bb      	strh	r3, [r7, #12]
	tx_packet_buffer[PKT_INSTRUCTION+payload_status_length]= LOW_BYTE(packet_crc); // CRC 1
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3307      	adds	r3, #7
 80047b8:	89ba      	ldrh	r2, [r7, #12]
 80047ba:	b2d1      	uxtb	r1, r2
 80047bc:	4a08      	ldr	r2, [pc, #32]	; (80047e0 <packet_encapsulate+0x84>)
 80047be:	54d1      	strb	r1, [r2, r3]
	tx_packet_buffer[PKT_INSTRUCTION+payload_status_length+1]= HIGH_BYTE(packet_crc); // CRC 2
 80047c0:	89bb      	ldrh	r3, [r7, #12]
 80047c2:	0a1b      	lsrs	r3, r3, #8
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3308      	adds	r3, #8
 80047ca:	b2d1      	uxtb	r1, r2
 80047cc:	4a04      	ldr	r2, [pc, #16]	; (80047e0 <packet_encapsulate+0x84>)
 80047ce:	54d1      	strb	r1, [r2, r3]
	tx_packet_length = PKT_INSTRUCTION+payload_status_length+2;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3309      	adds	r3, #9
 80047d4:	4a04      	ldr	r2, [pc, #16]	; (80047e8 <packet_encapsulate+0x8c>)
 80047d6:	6013      	str	r3, [r2, #0]
}
 80047d8:	bf00      	nop
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	200034c8 	.word	0x200034c8
 80047e4:	20000218 	.word	0x20000218
 80047e8:	200001fc 	.word	0x200001fc

080047ec <instruction_handler>:
#define ERROR_DATA_LENGTH_ERROR  	0x05
#define ERROR_DATA_LIMIT_ERROR  	0x06
#define ERROR_ACCESS_ERROR  		0x07

void instruction_handler()
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08c      	sub	sp, #48	; 0x30
 80047f0:	af00      	add	r7, sp, #0
	switch(rx_packet_buffer[PKT_INSTRUCTION])
 80047f2:	4ba4      	ldr	r3, [pc, #656]	; (8004a84 <instruction_handler+0x298>)
 80047f4:	79db      	ldrb	r3, [r3, #7]
 80047f6:	2b83      	cmp	r3, #131	; 0x83
 80047f8:	f000 80d5 	beq.w	80049a6 <instruction_handler+0x1ba>
 80047fc:	2b83      	cmp	r3, #131	; 0x83
 80047fe:	f300 8161 	bgt.w	8004ac4 <instruction_handler+0x2d8>
 8004802:	2b08      	cmp	r3, #8
 8004804:	dc1a      	bgt.n	800483c <instruction_handler+0x50>
 8004806:	2b00      	cmp	r3, #0
 8004808:	f340 815c 	ble.w	8004ac4 <instruction_handler+0x2d8>
 800480c:	3b01      	subs	r3, #1
 800480e:	2b07      	cmp	r3, #7
 8004810:	f200 8158 	bhi.w	8004ac4 <instruction_handler+0x2d8>
 8004814:	a201      	add	r2, pc, #4	; (adr r2, 800481c <instruction_handler+0x30>)
 8004816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481a:	bf00      	nop
 800481c:	08004845 	.word	0x08004845
 8004820:	0800487f 	.word	0x0800487f
 8004824:	0800490d 	.word	0x0800490d
 8004828:	08004ac5 	.word	0x08004ac5
 800482c:	08004ac5 	.word	0x08004ac5
 8004830:	08004a53 	.word	0x08004a53
 8004834:	08004ac5 	.word	0x08004ac5
 8004838:	08004a99 	.word	0x08004a99
 800483c:	2b82      	cmp	r3, #130	; 0x82
 800483e:	f000 8152 	beq.w	8004ae6 <instruction_handler+0x2fa>
 8004842:	e13f      	b.n	8004ac4 <instruction_handler+0x2d8>
	{
	case INSTR_PING:
		{
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8004844:	4b90      	ldr	r3, [pc, #576]	; (8004a88 <instruction_handler+0x29c>)
 8004846:	2255      	movs	r2, #85	; 0x55
 8004848:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 800484a:	4b8f      	ldr	r3, [pc, #572]	; (8004a88 <instruction_handler+0x29c>)
 800484c:	2200      	movs	r2, #0
 800484e:	721a      	strb	r2, [r3, #8]
			tx_packet_buffer[PKT_PARAMETER1]= regs[REG_MODEL_NUMBER_L];
 8004850:	4b8e      	ldr	r3, [pc, #568]	; (8004a8c <instruction_handler+0x2a0>)
 8004852:	781a      	ldrb	r2, [r3, #0]
 8004854:	4b8c      	ldr	r3, [pc, #560]	; (8004a88 <instruction_handler+0x29c>)
 8004856:	725a      	strb	r2, [r3, #9]
			tx_packet_buffer[PKT_PARAMETER2]= regs[REG_MODEL_NUMBER_H];
 8004858:	4b8c      	ldr	r3, [pc, #560]	; (8004a8c <instruction_handler+0x2a0>)
 800485a:	785a      	ldrb	r2, [r3, #1]
 800485c:	4b8a      	ldr	r3, [pc, #552]	; (8004a88 <instruction_handler+0x29c>)
 800485e:	729a      	strb	r2, [r3, #10]
			tx_packet_buffer[PKT_PARAMETER3]= regs[REG_VERSION];
 8004860:	4b8a      	ldr	r3, [pc, #552]	; (8004a8c <instruction_handler+0x2a0>)
 8004862:	789a      	ldrb	r2, [r3, #2]
 8004864:	4b88      	ldr	r3, [pc, #544]	; (8004a88 <instruction_handler+0x29c>)
 8004866:	72da      	strb	r2, [r3, #11]
			packet_encapsulate(5);
 8004868:	2005      	movs	r0, #5
 800486a:	f7ff ff77 	bl	800475c <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 800486e:	4b88      	ldr	r3, [pc, #544]	; (8004a90 <instruction_handler+0x2a4>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	4984      	ldr	r1, [pc, #528]	; (8004a88 <instruction_handler+0x29c>)
 8004876:	4887      	ldr	r0, [pc, #540]	; (8004a94 <instruction_handler+0x2a8>)
 8004878:	f000 fb94 	bl	8004fa4 <HAL_Serial_Write>
		}
		break;
 800487c:	e134      	b.n	8004ae8 <instruction_handler+0x2fc>
	case INSTR_READ:
		{
			// resassemble 16-bit address and length
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 800487e:	4b81      	ldr	r3, [pc, #516]	; (8004a84 <instruction_handler+0x298>)
 8004880:	7a5b      	ldrb	r3, [r3, #9]
 8004882:	021b      	lsls	r3, r3, #8
 8004884:	b21a      	sxth	r2, r3
 8004886:	4b7f      	ldr	r3, [pc, #508]	; (8004a84 <instruction_handler+0x298>)
 8004888:	7a1b      	ldrb	r3, [r3, #8]
 800488a:	b21b      	sxth	r3, r3
 800488c:	4313      	orrs	r3, r2
 800488e:	b21b      	sxth	r3, r3
 8004890:	807b      	strh	r3, [r7, #2]
			uint16_t length =  MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER2],rx_packet_buffer[PKT_PARAMETER3]);
 8004892:	4b7c      	ldr	r3, [pc, #496]	; (8004a84 <instruction_handler+0x298>)
 8004894:	7adb      	ldrb	r3, [r3, #11]
 8004896:	021b      	lsls	r3, r3, #8
 8004898:	b21a      	sxth	r2, r3
 800489a:	4b7a      	ldr	r3, [pc, #488]	; (8004a84 <instruction_handler+0x298>)
 800489c:	7a9b      	ldrb	r3, [r3, #10]
 800489e:	b21b      	sxth	r3, r3
 80048a0:	4313      	orrs	r3, r2
 80048a2:	b21b      	sxth	r3, r3
 80048a4:	803b      	strh	r3, [r7, #0]
			// capture value
			if(address<REG_MAX)
 80048a6:	887b      	ldrh	r3, [r7, #2]
 80048a8:	2bb1      	cmp	r3, #177	; 0xb1
 80048aa:	d81e      	bhi.n	80048ea <instruction_handler+0xfe>
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 80048ac:	4b76      	ldr	r3, [pc, #472]	; (8004a88 <instruction_handler+0x29c>)
 80048ae:	2255      	movs	r2, #85	; 0x55
 80048b0:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= 0x00; // TODO : Alarm flag to handle here
 80048b2:	4b75      	ldr	r3, [pc, #468]	; (8004a88 <instruction_handler+0x29c>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	721a      	strb	r2, [r3, #8]
				for(uint32_t index=0;index<length;++index)
 80048b8:	2300      	movs	r3, #0
 80048ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048bc:	e00b      	b.n	80048d6 <instruction_handler+0xea>
					tx_packet_buffer[PKT_ERROR+1+index]= regs[address+index];
 80048be:	887a      	ldrh	r2, [r7, #2]
 80048c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c2:	441a      	add	r2, r3
 80048c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c6:	3309      	adds	r3, #9
 80048c8:	4970      	ldr	r1, [pc, #448]	; (8004a8c <instruction_handler+0x2a0>)
 80048ca:	5c89      	ldrb	r1, [r1, r2]
 80048cc:	4a6e      	ldr	r2, [pc, #440]	; (8004a88 <instruction_handler+0x29c>)
 80048ce:	54d1      	strb	r1, [r2, r3]
				for(uint32_t index=0;index<length;++index)
 80048d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d2:	3301      	adds	r3, #1
 80048d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048d6:	883b      	ldrh	r3, [r7, #0]
 80048d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048da:	429a      	cmp	r2, r3
 80048dc:	d3ef      	bcc.n	80048be <instruction_handler+0xd2>
				packet_encapsulate(2+length);
 80048de:	883b      	ldrh	r3, [r7, #0]
 80048e0:	3302      	adds	r3, #2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff ff3a 	bl	800475c <packet_encapsulate>
 80048e8:	e008      	b.n	80048fc <instruction_handler+0x110>
			}
			else
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 80048ea:	4b67      	ldr	r3, [pc, #412]	; (8004a88 <instruction_handler+0x29c>)
 80048ec:	2255      	movs	r2, #85	; 0x55
 80048ee:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= ERROR_ACCESS_ERROR; // TODO : Alarm flag to handle here
 80048f0:	4b65      	ldr	r3, [pc, #404]	; (8004a88 <instruction_handler+0x29c>)
 80048f2:	2207      	movs	r2, #7
 80048f4:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 80048f6:	2002      	movs	r0, #2
 80048f8:	f7ff ff30 	bl	800475c <packet_encapsulate>
			}
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 80048fc:	4b64      	ldr	r3, [pc, #400]	; (8004a90 <instruction_handler+0x2a4>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	461a      	mov	r2, r3
 8004902:	4961      	ldr	r1, [pc, #388]	; (8004a88 <instruction_handler+0x29c>)
 8004904:	4863      	ldr	r0, [pc, #396]	; (8004a94 <instruction_handler+0x2a8>)
 8004906:	f000 fb4d 	bl	8004fa4 <HAL_Serial_Write>
		}
		break;
 800490a:	e0ed      	b.n	8004ae8 <instruction_handler+0x2fc>
	case INSTR_WRITE:
		{
			// resassemble 16-bit address and value
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 800490c:	4b5d      	ldr	r3, [pc, #372]	; (8004a84 <instruction_handler+0x298>)
 800490e:	7a5b      	ldrb	r3, [r3, #9]
 8004910:	021b      	lsls	r3, r3, #8
 8004912:	b21a      	sxth	r2, r3
 8004914:	4b5b      	ldr	r3, [pc, #364]	; (8004a84 <instruction_handler+0x298>)
 8004916:	7a1b      	ldrb	r3, [r3, #8]
 8004918:	b21b      	sxth	r3, r3
 800491a:	4313      	orrs	r3, r2
 800491c:	b21b      	sxth	r3, r3
 800491e:	80fb      	strh	r3, [r7, #6]
			// TODO ; depend on length of packet
			uint16_t value_length =  MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-2-1-2; // remove INSTR, CRC-16 and PARAM0/1
 8004920:	4b58      	ldr	r3, [pc, #352]	; (8004a84 <instruction_handler+0x298>)
 8004922:	799b      	ldrb	r3, [r3, #6]
 8004924:	021b      	lsls	r3, r3, #8
 8004926:	b21a      	sxth	r2, r3
 8004928:	4b56      	ldr	r3, [pc, #344]	; (8004a84 <instruction_handler+0x298>)
 800492a:	795b      	ldrb	r3, [r3, #5]
 800492c:	b21b      	sxth	r3, r3
 800492e:	4313      	orrs	r3, r2
 8004930:	b21b      	sxth	r3, r3
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b05      	subs	r3, #5
 8004936:	80bb      	strh	r3, [r7, #4]
			// write into register
			if(address<REG_MAX)
 8004938:	88fb      	ldrh	r3, [r7, #6]
 800493a:	2bb1      	cmp	r3, #177	; 0xb1
 800493c:	d822      	bhi.n	8004984 <instruction_handler+0x198>
			{
				// TODO : check data range for global position, and other registers in RAM
				for(uint32_t index=0;index<value_length;++index)
 800493e:	2300      	movs	r3, #0
 8004940:	62bb      	str	r3, [r7, #40]	; 0x28
 8004942:	e00c      	b.n	800495e <instruction_handler+0x172>
					regs[address+index]=rx_packet_buffer[PKT_PARAMETER2+index];
 8004944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004946:	f103 020a 	add.w	r2, r3, #10
 800494a:	88f9      	ldrh	r1, [r7, #6]
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	440b      	add	r3, r1
 8004950:	494c      	ldr	r1, [pc, #304]	; (8004a84 <instruction_handler+0x298>)
 8004952:	5c89      	ldrb	r1, [r1, r2]
 8004954:	4a4d      	ldr	r2, [pc, #308]	; (8004a8c <instruction_handler+0x2a0>)
 8004956:	54d1      	strb	r1, [r2, r3]
				for(uint32_t index=0;index<value_length;++index)
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	3301      	adds	r3, #1
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
 800495e:	88bb      	ldrh	r3, [r7, #4]
 8004960:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004962:	429a      	cmp	r2, r3
 8004964:	d3ee      	bcc.n	8004944 <instruction_handler+0x158>
				// store when accessing EEPROM regs
				if(address<REG_TORQUE_ENABLE)
 8004966:	88fb      	ldrh	r3, [r7, #6]
 8004968:	2b7f      	cmp	r3, #127	; 0x7f
 800496a:	d801      	bhi.n	8004970 <instruction_handler+0x184>
				{
					store_eeprom_regs();
 800496c:	f7fc fbba 	bl	80010e4 <store_eeprom_regs>
				}
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8004970:	4b45      	ldr	r3, [pc, #276]	; (8004a88 <instruction_handler+0x29c>)
 8004972:	2255      	movs	r2, #85	; 0x55
 8004974:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= 0x00; // TODO : Alarm flag to handle here
 8004976:	4b44      	ldr	r3, [pc, #272]	; (8004a88 <instruction_handler+0x29c>)
 8004978:	2200      	movs	r2, #0
 800497a:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 800497c:	2002      	movs	r0, #2
 800497e:	f7ff feed 	bl	800475c <packet_encapsulate>
 8004982:	e008      	b.n	8004996 <instruction_handler+0x1aa>
			}
			else
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8004984:	4b40      	ldr	r3, [pc, #256]	; (8004a88 <instruction_handler+0x29c>)
 8004986:	2255      	movs	r2, #85	; 0x55
 8004988:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= ERROR_ACCESS_ERROR; // TODO : Alarm flag to handle here
 800498a:	4b3f      	ldr	r3, [pc, #252]	; (8004a88 <instruction_handler+0x29c>)
 800498c:	2207      	movs	r2, #7
 800498e:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 8004990:	2002      	movs	r0, #2
 8004992:	f7ff fee3 	bl	800475c <packet_encapsulate>
			}
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8004996:	4b3e      	ldr	r3, [pc, #248]	; (8004a90 <instruction_handler+0x2a4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	461a      	mov	r2, r3
 800499c:	493a      	ldr	r1, [pc, #232]	; (8004a88 <instruction_handler+0x29c>)
 800499e:	483d      	ldr	r0, [pc, #244]	; (8004a94 <instruction_handler+0x2a8>)
 80049a0:	f000 fb00 	bl	8004fa4 <HAL_Serial_Write>
		}
		break;
 80049a4:	e0a0      	b.n	8004ae8 <instruction_handler+0x2fc>
		}
		break;
	case INSTR_SYNC_WRITE:
		{
			// decode length of [ID,PARAMS]
			uint16_t const values_length =  MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-1-4-2; // remove INSTR, CRC-16 and PARAM0/1/2/3
 80049a6:	4b37      	ldr	r3, [pc, #220]	; (8004a84 <instruction_handler+0x298>)
 80049a8:	799b      	ldrb	r3, [r3, #6]
 80049aa:	021b      	lsls	r3, r3, #8
 80049ac:	b21a      	sxth	r2, r3
 80049ae:	4b35      	ldr	r3, [pc, #212]	; (8004a84 <instruction_handler+0x298>)
 80049b0:	795b      	ldrb	r3, [r3, #5]
 80049b2:	b21b      	sxth	r3, r3
 80049b4:	4313      	orrs	r3, r2
 80049b6:	b21b      	sxth	r3, r3
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3b07      	subs	r3, #7
 80049bc:	83fb      	strh	r3, [r7, #30]
			// decode the address
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 80049be:	4b31      	ldr	r3, [pc, #196]	; (8004a84 <instruction_handler+0x298>)
 80049c0:	7a5b      	ldrb	r3, [r3, #9]
 80049c2:	021b      	lsls	r3, r3, #8
 80049c4:	b21a      	sxth	r2, r3
 80049c6:	4b2f      	ldr	r3, [pc, #188]	; (8004a84 <instruction_handler+0x298>)
 80049c8:	7a1b      	ldrb	r3, [r3, #8]
 80049ca:	b21b      	sxth	r3, r3
 80049cc:	4313      	orrs	r3, r2
 80049ce:	b21b      	sxth	r3, r3
 80049d0:	83bb      	strh	r3, [r7, #28]
			// decode the size of data per ID
			uint32_t const data_length = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER2],rx_packet_buffer[PKT_PARAMETER3]);
 80049d2:	4b2c      	ldr	r3, [pc, #176]	; (8004a84 <instruction_handler+0x298>)
 80049d4:	7adb      	ldrb	r3, [r3, #11]
 80049d6:	021b      	lsls	r3, r3, #8
 80049d8:	4a2a      	ldr	r2, [pc, #168]	; (8004a84 <instruction_handler+0x298>)
 80049da:	7a92      	ldrb	r2, [r2, #10]
 80049dc:	4313      	orrs	r3, r2
 80049de:	61bb      	str	r3, [r7, #24]
			// count the [ID,PARAMS]
			uint16_t const number_of_id_and_data = values_length / (1+data_length); // 1 for ID + data_length
 80049e0:	8bfa      	ldrh	r2, [r7, #30]
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	3301      	adds	r3, #1
 80049e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ea:	82fb      	strh	r3, [r7, #22]
			// search for my ID
			uint32_t const my_id = regs[REG_ID];
 80049ec:	4b27      	ldr	r3, [pc, #156]	; (8004a8c <instruction_handler+0x2a0>)
 80049ee:	78db      	ldrb	r3, [r3, #3]
 80049f0:	613b      	str	r3, [r7, #16]
			for(uint32_t index=0;index<number_of_id_and_data;++index)
 80049f2:	2300      	movs	r3, #0
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
 80049f6:	e027      	b.n	8004a48 <instruction_handler+0x25c>
			{
				uint32_t position = PKT_PARAMETER4+index*(data_length+1);
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	3301      	adds	r3, #1
 80049fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049fe:	fb02 f303 	mul.w	r3, r2, r3
 8004a02:	330c      	adds	r3, #12
 8004a04:	60fb      	str	r3, [r7, #12]
				uint32_t id = rx_packet_buffer[position];
 8004a06:	4a1f      	ldr	r2, [pc, #124]	; (8004a84 <instruction_handler+0x298>)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	60bb      	str	r3, [r7, #8]
				// found my own id in one ID,PARAMS]
				if(id==my_id)
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d114      	bne.n	8004a42 <instruction_handler+0x256>
				{
					// update RAM
					for(uint32_t index2=0;index2<data_length;++index2)
 8004a18:	2300      	movs	r3, #0
 8004a1a:	623b      	str	r3, [r7, #32]
 8004a1c:	e00d      	b.n	8004a3a <instruction_handler+0x24e>
						regs[address+index2]=rx_packet_buffer[position+1+index2];
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	4413      	add	r3, r2
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	8bb9      	ldrh	r1, [r7, #28]
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	440b      	add	r3, r1
 8004a2c:	4915      	ldr	r1, [pc, #84]	; (8004a84 <instruction_handler+0x298>)
 8004a2e:	5c89      	ldrb	r1, [r1, r2]
 8004a30:	4a16      	ldr	r2, [pc, #88]	; (8004a8c <instruction_handler+0x2a0>)
 8004a32:	54d1      	strb	r1, [r2, r3]
					for(uint32_t index2=0;index2<data_length;++index2)
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	3301      	adds	r3, #1
 8004a38:	623b      	str	r3, [r7, #32]
 8004a3a:	6a3a      	ldr	r2, [r7, #32]
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d3ed      	bcc.n	8004a1e <instruction_handler+0x232>
			for(uint32_t index=0;index<number_of_id_and_data;++index)
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	3301      	adds	r3, #1
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
 8004a48:	8afb      	ldrh	r3, [r7, #22]
 8004a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d3d3      	bcc.n	80049f8 <instruction_handler+0x20c>
				}
			}
		}
		break;
 8004a50:	e04a      	b.n	8004ae8 <instruction_handler+0x2fc>
	case INSTR_FACTORY_RESET:
		{
			factory_reset_eeprom_regs();
 8004a52:	f7fc fa2b 	bl	8000eac <factory_reset_eeprom_regs>
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8004a56:	4b0c      	ldr	r3, [pc, #48]	; (8004a88 <instruction_handler+0x29c>)
 8004a58:	2255      	movs	r2, #85	; 0x55
 8004a5a:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 8004a5c:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <instruction_handler+0x29c>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 8004a62:	2002      	movs	r0, #2
 8004a64:	f7ff fe7a 	bl	800475c <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8004a68:	4b09      	ldr	r3, [pc, #36]	; (8004a90 <instruction_handler+0x2a4>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	4906      	ldr	r1, [pc, #24]	; (8004a88 <instruction_handler+0x29c>)
 8004a70:	4808      	ldr	r0, [pc, #32]	; (8004a94 <instruction_handler+0x2a8>)
 8004a72:	f000 fa97 	bl	8004fa4 <HAL_Serial_Write>
			// reboot
			HAL_Delay(100);
 8004a76:	2064      	movs	r0, #100	; 0x64
 8004a78:	f001 fb0c 	bl	8006094 <HAL_Delay>
			HAL_NVIC_SystemReset();
 8004a7c:	f003 fa5b 	bl	8007f36 <HAL_NVIC_SystemReset>
		}
		break;
 8004a80:	e032      	b.n	8004ae8 <instruction_handler+0x2fc>
 8004a82:	bf00      	nop
 8004a84:	2000307c 	.word	0x2000307c
 8004a88:	200034c8 	.word	0x200034c8
 8004a8c:	20000218 	.word	0x20000218
 8004a90:	200001fc 	.word	0x200001fc
 8004a94:	20000564 	.word	0x20000564
	case INSTR_REBOOT:
		{
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8004a98:	4b15      	ldr	r3, [pc, #84]	; (8004af0 <instruction_handler+0x304>)
 8004a9a:	2255      	movs	r2, #85	; 0x55
 8004a9c:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 8004a9e:	4b14      	ldr	r3, [pc, #80]	; (8004af0 <instruction_handler+0x304>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 8004aa4:	2002      	movs	r0, #2
 8004aa6:	f7ff fe59 	bl	800475c <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8004aaa:	4b12      	ldr	r3, [pc, #72]	; (8004af4 <instruction_handler+0x308>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	490f      	ldr	r1, [pc, #60]	; (8004af0 <instruction_handler+0x304>)
 8004ab2:	4811      	ldr	r0, [pc, #68]	; (8004af8 <instruction_handler+0x30c>)
 8004ab4:	f000 fa76 	bl	8004fa4 <HAL_Serial_Write>
			// reboot
			HAL_Delay(100);
 8004ab8:	2064      	movs	r0, #100	; 0x64
 8004aba:	f001 faeb 	bl	8006094 <HAL_Delay>
			HAL_NVIC_SystemReset();
 8004abe:	f003 fa3a 	bl	8007f36 <HAL_NVIC_SystemReset>
		}
		break;
 8004ac2:	e011      	b.n	8004ae8 <instruction_handler+0x2fc>
	default:
		// reply with a status packet with ERR only
		tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8004ac4:	4b0a      	ldr	r3, [pc, #40]	; (8004af0 <instruction_handler+0x304>)
 8004ac6:	2255      	movs	r2, #85	; 0x55
 8004ac8:	71da      	strb	r2, [r3, #7]
		tx_packet_buffer[PKT_ERROR]= ERROR_INSTRUCTION_ERROR; // TODO : Alarm flag to handle here
 8004aca:	4b09      	ldr	r3, [pc, #36]	; (8004af0 <instruction_handler+0x304>)
 8004acc:	2202      	movs	r2, #2
 8004ace:	721a      	strb	r2, [r3, #8]
		packet_encapsulate(2);
 8004ad0:	2002      	movs	r0, #2
 8004ad2:	f7ff fe43 	bl	800475c <packet_encapsulate>
		// send packet
		HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8004ad6:	4b07      	ldr	r3, [pc, #28]	; (8004af4 <instruction_handler+0x308>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	4904      	ldr	r1, [pc, #16]	; (8004af0 <instruction_handler+0x304>)
 8004ade:	4806      	ldr	r0, [pc, #24]	; (8004af8 <instruction_handler+0x30c>)
 8004ae0:	f000 fa60 	bl	8004fa4 <HAL_Serial_Write>
		break;
 8004ae4:	e000      	b.n	8004ae8 <instruction_handler+0x2fc>
		break;
 8004ae6:	bf00      	nop
		// nope
	}
}
 8004ae8:	bf00      	nop
 8004aea:	3730      	adds	r7, #48	; 0x30
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	200034c8 	.word	0x200034c8
 8004af4:	200001fc 	.word	0x200001fc
 8004af8:	20000564 	.word	0x20000564

08004afc <packet_handler>:
	HEADER1,HEADER2,HEADER3,RESERVED,ID,LENGTH1,LENGTH2,PAYLOAD,CRC1,CRC2
} e_packet_state;
e_packet_state packet_state = HEADER1;

void packet_handler(char c)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	4603      	mov	r3, r0
 8004b04:	71fb      	strb	r3, [r7, #7]
	switch(packet_state)
 8004b06:	4b84      	ldr	r3, [pc, #528]	; (8004d18 <packet_handler+0x21c>)
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b09      	cmp	r3, #9
 8004b0c:	f200 8100 	bhi.w	8004d10 <packet_handler+0x214>
 8004b10:	a201      	add	r2, pc, #4	; (adr r2, 8004b18 <packet_handler+0x1c>)
 8004b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b16:	bf00      	nop
 8004b18:	08004b41 	.word	0x08004b41
 8004b1c:	08004b57 	.word	0x08004b57
 8004b20:	08004b87 	.word	0x08004b87
 8004b24:	08004ba3 	.word	0x08004ba3
 8004b28:	08004bbf 	.word	0x08004bbf
 8004b2c:	08004be1 	.word	0x08004be1
 8004b30:	08004bef 	.word	0x08004bef
 8004b34:	08004c27 	.word	0x08004c27
 8004b38:	08004c55 	.word	0x08004c55
 8004b3c:	08004c71 	.word	0x08004c71
	{
	case HEADER1:
		if(c==0xFF)
 8004b40:	79fb      	ldrb	r3, [r7, #7]
 8004b42:	2bff      	cmp	r3, #255	; 0xff
 8004b44:	f040 80e1 	bne.w	8004d0a <packet_handler+0x20e>
		{
			rx_packet_buffer[PKT_HEADER0] = (uint8_t)c;
 8004b48:	4a74      	ldr	r2, [pc, #464]	; (8004d1c <packet_handler+0x220>)
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	7013      	strb	r3, [r2, #0]
			packet_state = HEADER2;
 8004b4e:	4b72      	ldr	r3, [pc, #456]	; (8004d18 <packet_handler+0x21c>)
 8004b50:	2201      	movs	r2, #1
 8004b52:	701a      	strb	r2, [r3, #0]
		}
		break;
 8004b54:	e0d9      	b.n	8004d0a <packet_handler+0x20e>
	case HEADER2:
		if(c==0xFF)
 8004b56:	79fb      	ldrb	r3, [r7, #7]
 8004b58:	2bff      	cmp	r3, #255	; 0xff
 8004b5a:	d106      	bne.n	8004b6a <packet_handler+0x6e>
		{
			rx_packet_buffer[PKT_HEADER1] = (uint8_t)c;
 8004b5c:	4a6f      	ldr	r2, [pc, #444]	; (8004d1c <packet_handler+0x220>)
 8004b5e:	79fb      	ldrb	r3, [r7, #7]
 8004b60:	7053      	strb	r3, [r2, #1]
			packet_state = HEADER3;
 8004b62:	4b6d      	ldr	r3, [pc, #436]	; (8004d18 <packet_handler+0x21c>)
 8004b64:	2202      	movs	r2, #2
 8004b66:	701a      	strb	r2, [r3, #0]
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
			packet_state = RESERVED;
		}
		else
			packet_state = HEADER1;
		break;
 8004b68:	e0d2      	b.n	8004d10 <packet_handler+0x214>
		else if(c==0xFD)
 8004b6a:	79fb      	ldrb	r3, [r7, #7]
 8004b6c:	2bfd      	cmp	r3, #253	; 0xfd
 8004b6e:	d106      	bne.n	8004b7e <packet_handler+0x82>
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
 8004b70:	4a6a      	ldr	r2, [pc, #424]	; (8004d1c <packet_handler+0x220>)
 8004b72:	79fb      	ldrb	r3, [r7, #7]
 8004b74:	7093      	strb	r3, [r2, #2]
			packet_state = RESERVED;
 8004b76:	4b68      	ldr	r3, [pc, #416]	; (8004d18 <packet_handler+0x21c>)
 8004b78:	2203      	movs	r2, #3
 8004b7a:	701a      	strb	r2, [r3, #0]
		break;
 8004b7c:	e0c8      	b.n	8004d10 <packet_handler+0x214>
			packet_state = HEADER1;
 8004b7e:	4b66      	ldr	r3, [pc, #408]	; (8004d18 <packet_handler+0x21c>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	701a      	strb	r2, [r3, #0]
		break;
 8004b84:	e0c4      	b.n	8004d10 <packet_handler+0x214>
	case HEADER3:
		if(c==0xFD)
 8004b86:	79fb      	ldrb	r3, [r7, #7]
 8004b88:	2bfd      	cmp	r3, #253	; 0xfd
 8004b8a:	d106      	bne.n	8004b9a <packet_handler+0x9e>
		{
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
 8004b8c:	4a63      	ldr	r2, [pc, #396]	; (8004d1c <packet_handler+0x220>)
 8004b8e:	79fb      	ldrb	r3, [r7, #7]
 8004b90:	7093      	strb	r3, [r2, #2]
			packet_state = RESERVED;
 8004b92:	4b61      	ldr	r3, [pc, #388]	; (8004d18 <packet_handler+0x21c>)
 8004b94:	2203      	movs	r2, #3
 8004b96:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 8004b98:	e0ba      	b.n	8004d10 <packet_handler+0x214>
			packet_state = HEADER1;
 8004b9a:	4b5f      	ldr	r3, [pc, #380]	; (8004d18 <packet_handler+0x21c>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	701a      	strb	r2, [r3, #0]
		break;
 8004ba0:	e0b6      	b.n	8004d10 <packet_handler+0x214>
	case RESERVED:
		if(c==0x00)
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d106      	bne.n	8004bb6 <packet_handler+0xba>
		{
			rx_packet_buffer[PKT_RESERVED] = (uint8_t)c;
 8004ba8:	4a5c      	ldr	r2, [pc, #368]	; (8004d1c <packet_handler+0x220>)
 8004baa:	79fb      	ldrb	r3, [r7, #7]
 8004bac:	70d3      	strb	r3, [r2, #3]
			packet_state = ID;
 8004bae:	4b5a      	ldr	r3, [pc, #360]	; (8004d18 <packet_handler+0x21c>)
 8004bb0:	2204      	movs	r2, #4
 8004bb2:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 8004bb4:	e0ac      	b.n	8004d10 <packet_handler+0x214>
			packet_state = HEADER1;
 8004bb6:	4b58      	ldr	r3, [pc, #352]	; (8004d18 <packet_handler+0x21c>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	701a      	strb	r2, [r3, #0]
		break;
 8004bbc:	e0a8      	b.n	8004d10 <packet_handler+0x214>
	case ID:
		if( (c<=252) || (c==254) ) // validate ID
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	2bfc      	cmp	r3, #252	; 0xfc
 8004bc2:	d902      	bls.n	8004bca <packet_handler+0xce>
 8004bc4:	79fb      	ldrb	r3, [r7, #7]
 8004bc6:	2bfe      	cmp	r3, #254	; 0xfe
 8004bc8:	d106      	bne.n	8004bd8 <packet_handler+0xdc>
		{
			rx_packet_buffer[PKT_ID] = (uint8_t)c;
 8004bca:	4a54      	ldr	r2, [pc, #336]	; (8004d1c <packet_handler+0x220>)
 8004bcc:	79fb      	ldrb	r3, [r7, #7]
 8004bce:	7113      	strb	r3, [r2, #4]
			packet_state = LENGTH1;
 8004bd0:	4b51      	ldr	r3, [pc, #324]	; (8004d18 <packet_handler+0x21c>)
 8004bd2:	2205      	movs	r2, #5
 8004bd4:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 8004bd6:	e09b      	b.n	8004d10 <packet_handler+0x214>
			packet_state = HEADER1;
 8004bd8:	4b4f      	ldr	r3, [pc, #316]	; (8004d18 <packet_handler+0x21c>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	701a      	strb	r2, [r3, #0]
		break;
 8004bde:	e097      	b.n	8004d10 <packet_handler+0x214>
	case LENGTH1:
		rx_packet_buffer[PKT_LENGTH_L] = (uint8_t)c;
 8004be0:	4a4e      	ldr	r2, [pc, #312]	; (8004d1c <packet_handler+0x220>)
 8004be2:	79fb      	ldrb	r3, [r7, #7]
 8004be4:	7153      	strb	r3, [r2, #5]
		packet_state = LENGTH2;
 8004be6:	4b4c      	ldr	r3, [pc, #304]	; (8004d18 <packet_handler+0x21c>)
 8004be8:	2206      	movs	r2, #6
 8004bea:	701a      	strb	r2, [r3, #0]
		break;
 8004bec:	e090      	b.n	8004d10 <packet_handler+0x214>
	case LENGTH2:
		rx_packet_buffer[PKT_LENGTH_H] = (uint8_t)c;
 8004bee:	4a4b      	ldr	r2, [pc, #300]	; (8004d1c <packet_handler+0x220>)
 8004bf0:	79fb      	ldrb	r3, [r7, #7]
 8004bf2:	7193      	strb	r3, [r2, #6]
		// reassemble length
		rx_packet_payload_bytes = (uint32_t)MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-2;
 8004bf4:	4b49      	ldr	r3, [pc, #292]	; (8004d1c <packet_handler+0x220>)
 8004bf6:	799b      	ldrb	r3, [r3, #6]
 8004bf8:	021b      	lsls	r3, r3, #8
 8004bfa:	4a48      	ldr	r2, [pc, #288]	; (8004d1c <packet_handler+0x220>)
 8004bfc:	7952      	ldrb	r2, [r2, #5]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	3b02      	subs	r3, #2
 8004c02:	4a47      	ldr	r2, [pc, #284]	; (8004d20 <packet_handler+0x224>)
 8004c04:	6013      	str	r3, [r2, #0]
		if(rx_packet_payload_bytes<=1024) // validate length
 8004c06:	4b46      	ldr	r3, [pc, #280]	; (8004d20 <packet_handler+0x224>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c0e:	d806      	bhi.n	8004c1e <packet_handler+0x122>
		{
			packet_state = PAYLOAD;
 8004c10:	4b41      	ldr	r3, [pc, #260]	; (8004d18 <packet_handler+0x21c>)
 8004c12:	2207      	movs	r2, #7
 8004c14:	701a      	strb	r2, [r3, #0]
			rx_packet_position = PKT_INSTRUCTION;
 8004c16:	4b43      	ldr	r3, [pc, #268]	; (8004d24 <packet_handler+0x228>)
 8004c18:	2207      	movs	r2, #7
 8004c1a:	601a      	str	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 8004c1c:	e078      	b.n	8004d10 <packet_handler+0x214>
			packet_state = HEADER1;
 8004c1e:	4b3e      	ldr	r3, [pc, #248]	; (8004d18 <packet_handler+0x21c>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	701a      	strb	r2, [r3, #0]
		break;
 8004c24:	e074      	b.n	8004d10 <packet_handler+0x214>
	case PAYLOAD:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 8004c26:	4b3f      	ldr	r3, [pc, #252]	; (8004d24 <packet_handler+0x228>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	493c      	ldr	r1, [pc, #240]	; (8004d1c <packet_handler+0x220>)
 8004c2c:	79fa      	ldrb	r2, [r7, #7]
 8004c2e:	54ca      	strb	r2, [r1, r3]
		++rx_packet_position;
 8004c30:	4b3c      	ldr	r3, [pc, #240]	; (8004d24 <packet_handler+0x228>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3301      	adds	r3, #1
 8004c36:	4a3b      	ldr	r2, [pc, #236]	; (8004d24 <packet_handler+0x228>)
 8004c38:	6013      	str	r3, [r2, #0]
		--rx_packet_payload_bytes;
 8004c3a:	4b39      	ldr	r3, [pc, #228]	; (8004d20 <packet_handler+0x224>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	4a37      	ldr	r2, [pc, #220]	; (8004d20 <packet_handler+0x224>)
 8004c42:	6013      	str	r3, [r2, #0]
		if(rx_packet_payload_bytes==0)
 8004c44:	4b36      	ldr	r3, [pc, #216]	; (8004d20 <packet_handler+0x224>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d160      	bne.n	8004d0e <packet_handler+0x212>
			packet_state = CRC1;
 8004c4c:	4b32      	ldr	r3, [pc, #200]	; (8004d18 <packet_handler+0x21c>)
 8004c4e:	2208      	movs	r2, #8
 8004c50:	701a      	strb	r2, [r3, #0]
		break;
 8004c52:	e05c      	b.n	8004d0e <packet_handler+0x212>
	case CRC1:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 8004c54:	4b33      	ldr	r3, [pc, #204]	; (8004d24 <packet_handler+0x228>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4930      	ldr	r1, [pc, #192]	; (8004d1c <packet_handler+0x220>)
 8004c5a:	79fa      	ldrb	r2, [r7, #7]
 8004c5c:	54ca      	strb	r2, [r1, r3]
		++rx_packet_position;
 8004c5e:	4b31      	ldr	r3, [pc, #196]	; (8004d24 <packet_handler+0x228>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3301      	adds	r3, #1
 8004c64:	4a2f      	ldr	r2, [pc, #188]	; (8004d24 <packet_handler+0x228>)
 8004c66:	6013      	str	r3, [r2, #0]
		packet_state = CRC2;
 8004c68:	4b2b      	ldr	r3, [pc, #172]	; (8004d18 <packet_handler+0x21c>)
 8004c6a:	2209      	movs	r2, #9
 8004c6c:	701a      	strb	r2, [r3, #0]
		break;
 8004c6e:	e04f      	b.n	8004d10 <packet_handler+0x214>
	case CRC2:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 8004c70:	4b2c      	ldr	r3, [pc, #176]	; (8004d24 <packet_handler+0x228>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4929      	ldr	r1, [pc, #164]	; (8004d1c <packet_handler+0x220>)
 8004c76:	79fa      	ldrb	r2, [r7, #7]
 8004c78:	54ca      	strb	r2, [r1, r3]
		// check CRC
		uint16_t received_crc = (uint16_t)MAKE_SHORT(rx_packet_buffer[rx_packet_position-1],rx_packet_buffer[rx_packet_position]);
 8004c7a:	4b2a      	ldr	r3, [pc, #168]	; (8004d24 <packet_handler+0x228>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a27      	ldr	r2, [pc, #156]	; (8004d1c <packet_handler+0x220>)
 8004c80:	5cd3      	ldrb	r3, [r2, r3]
 8004c82:	021b      	lsls	r3, r3, #8
 8004c84:	b21a      	sxth	r2, r3
 8004c86:	4b27      	ldr	r3, [pc, #156]	; (8004d24 <packet_handler+0x228>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	4923      	ldr	r1, [pc, #140]	; (8004d1c <packet_handler+0x220>)
 8004c8e:	5ccb      	ldrb	r3, [r1, r3]
 8004c90:	b21b      	sxth	r3, r3
 8004c92:	4313      	orrs	r3, r2
 8004c94:	b21b      	sxth	r3, r3
 8004c96:	81fb      	strh	r3, [r7, #14]
		uint16_t calculated_crc = updateCRC(0,rx_packet_buffer,rx_packet_position-1);
 8004c98:	4b22      	ldr	r3, [pc, #136]	; (8004d24 <packet_handler+0x228>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	491d      	ldr	r1, [pc, #116]	; (8004d1c <packet_handler+0x220>)
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	f7ff fd26 	bl	80046f8 <updateCRC>
 8004cac:	4603      	mov	r3, r0
 8004cae:	81bb      	strh	r3, [r7, #12]
		if(calculated_crc==received_crc)
 8004cb0:	89ba      	ldrh	r2, [r7, #12]
 8004cb2:	89fb      	ldrh	r3, [r7, #14]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d10c      	bne.n	8004cd2 <packet_handler+0x1d6>
		{
			if(rx_packet_buffer[PKT_ID]==regs[REG_ID] || rx_packet_buffer[PKT_ID]==0xFE)
 8004cb8:	4b18      	ldr	r3, [pc, #96]	; (8004d1c <packet_handler+0x220>)
 8004cba:	791a      	ldrb	r2, [r3, #4]
 8004cbc:	4b1a      	ldr	r3, [pc, #104]	; (8004d28 <packet_handler+0x22c>)
 8004cbe:	78db      	ldrb	r3, [r3, #3]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d003      	beq.n	8004ccc <packet_handler+0x1d0>
 8004cc4:	4b15      	ldr	r3, [pc, #84]	; (8004d1c <packet_handler+0x220>)
 8004cc6:	791b      	ldrb	r3, [r3, #4]
 8004cc8:	2bfe      	cmp	r3, #254	; 0xfe
 8004cca:	d11a      	bne.n	8004d02 <packet_handler+0x206>
				instruction_handler();
 8004ccc:	f7ff fd8e 	bl	80047ec <instruction_handler>
 8004cd0:	e017      	b.n	8004d02 <packet_handler+0x206>
		}
		else
		{
			regs[REG_PROTOCOL_CRC_FAIL] = regs[REG_PROTOCOL_CRC_FAIL] + 1;
 8004cd2:	4b15      	ldr	r3, [pc, #84]	; (8004d28 <packet_handler+0x22c>)
 8004cd4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004cd8:	3301      	adds	r3, #1
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	4b12      	ldr	r3, [pc, #72]	; (8004d28 <packet_handler+0x22c>)
 8004cde:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
			// reply with a status packet with ERR only
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8004ce2:	4b12      	ldr	r3, [pc, #72]	; (8004d2c <packet_handler+0x230>)
 8004ce4:	2255      	movs	r2, #85	; 0x55
 8004ce6:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_CRC_ERROR; // TODO : Alarm flag to handle here
 8004ce8:	4b10      	ldr	r3, [pc, #64]	; (8004d2c <packet_handler+0x230>)
 8004cea:	2203      	movs	r2, #3
 8004cec:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 8004cee:	2002      	movs	r0, #2
 8004cf0:	f7ff fd34 	bl	800475c <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8004cf4:	4b0e      	ldr	r3, [pc, #56]	; (8004d30 <packet_handler+0x234>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	490c      	ldr	r1, [pc, #48]	; (8004d2c <packet_handler+0x230>)
 8004cfc:	480d      	ldr	r0, [pc, #52]	; (8004d34 <packet_handler+0x238>)
 8004cfe:	f000 f951 	bl	8004fa4 <HAL_Serial_Write>
		}
		packet_state = HEADER1;
 8004d02:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <packet_handler+0x21c>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	701a      	strb	r2, [r3, #0]
		break;
 8004d08:	e002      	b.n	8004d10 <packet_handler+0x214>
		break;
 8004d0a:	bf00      	nop
 8004d0c:	e000      	b.n	8004d10 <packet_handler+0x214>
		break;
 8004d0e:	bf00      	nop
	}
}
 8004d10:	bf00      	nop
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	20000200 	.word	0x20000200
 8004d1c:	2000307c 	.word	0x2000307c
 8004d20:	200001f8 	.word	0x200001f8
 8004d24:	200001f4 	.word	0x200001f4
 8004d28:	20000218 	.word	0x20000218
 8004d2c:	200034c8 	.word	0x200034c8
 8004d30:	200001fc 	.word	0x200001fc
 8004d34:	20000564 	.word	0x20000564

08004d38 <HAL_UART_ErrorCallback>:
/// This table has to be filled in the application code
HAL_Serial_Handler * hserial_table[HAL_Serial_Handler_Count] = {0};
uint32_t serial_counter = 0;

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
	static int id = 0;
	for(id=0;id!=serial_counter;++id)
 8004d40:	4b20      	ldr	r3, [pc, #128]	; (8004dc4 <HAL_UART_ErrorCallback+0x8c>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	e032      	b.n	8004dae <HAL_UART_ErrorCallback+0x76>
	{
		if(hserial_table[id]->huart == huart)
 8004d48:	4b1e      	ldr	r3, [pc, #120]	; (8004dc4 <HAL_UART_ErrorCallback+0x8c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a1e      	ldr	r2, [pc, #120]	; (8004dc8 <HAL_UART_ErrorCallback+0x90>)
 8004d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d124      	bne.n	8004da4 <HAL_UART_ErrorCallback+0x6c>
		{
			hserial_table[id]->rx_tail_ptr = hserial_table[id]->rx_circular_buffer;
 8004d5a:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <HAL_UART_ErrorCallback+0x8c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a1a      	ldr	r2, [pc, #104]	; (8004dc8 <HAL_UART_ErrorCallback+0x90>)
 8004d60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004d64:	4b17      	ldr	r3, [pc, #92]	; (8004dc4 <HAL_UART_ErrorCallback+0x8c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4917      	ldr	r1, [pc, #92]	; (8004dc8 <HAL_UART_ErrorCallback+0x90>)
 8004d6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d6e:	f502 5202 	add.w	r2, r2, #8320	; 0x2080
 8004d72:	3210      	adds	r2, #16
 8004d74:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004d78:	3310      	adds	r3, #16
 8004d7a:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(hserial_table[id]->huart, hserial_table[id]->rx_circular_buffer,size_of_rx_circular_buffer);
 8004d7c:	4b11      	ldr	r3, [pc, #68]	; (8004dc4 <HAL_UART_ErrorCallback+0x8c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a11      	ldr	r2, [pc, #68]	; (8004dc8 <HAL_UART_ErrorCallback+0x90>)
 8004d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d86:	6818      	ldr	r0, [r3, #0]
 8004d88:	4b0e      	ldr	r3, [pc, #56]	; (8004dc4 <HAL_UART_ErrorCallback+0x8c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a0e      	ldr	r2, [pc, #56]	; (8004dc8 <HAL_UART_ErrorCallback+0x90>)
 8004d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d92:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004d96:	3310      	adds	r3, #16
 8004d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	f007 fbf5 	bl	800c58c <HAL_UART_Receive_DMA>
		   break;
 8004da2:	e00b      	b.n	8004dbc <HAL_UART_ErrorCallback+0x84>
	for(id=0;id!=serial_counter;++id)
 8004da4:	4b07      	ldr	r3, [pc, #28]	; (8004dc4 <HAL_UART_ErrorCallback+0x8c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3301      	adds	r3, #1
 8004daa:	4a06      	ldr	r2, [pc, #24]	; (8004dc4 <HAL_UART_ErrorCallback+0x8c>)
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <HAL_UART_ErrorCallback+0x8c>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a06      	ldr	r2, [pc, #24]	; (8004dcc <HAL_UART_ErrorCallback+0x94>)
 8004db4:	6812      	ldr	r2, [r2, #0]
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d1c6      	bne.n	8004d48 <HAL_UART_ErrorCallback+0x10>
		}
	}
}
 8004dba:	bf00      	nop
 8004dbc:	bf00      	nop
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	2000020c 	.word	0x2000020c
 8004dc8:	20000204 	.word	0x20000204
 8004dcc:	20000208 	.word	0x20000208

08004dd0 <HAL_Serial_Init>:

void HAL_Serial_Init(UART_HandleTypeDef * huart, HAL_Serial_Handler * hserial)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
	// register this handle
	hserial_table[serial_counter++]=hserial;
 8004dda:	4b30      	ldr	r3, [pc, #192]	; (8004e9c <HAL_Serial_Init+0xcc>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	492e      	ldr	r1, [pc, #184]	; (8004e9c <HAL_Serial_Init+0xcc>)
 8004de2:	600a      	str	r2, [r1, #0]
 8004de4:	492e      	ldr	r1, [pc, #184]	; (8004ea0 <HAL_Serial_Init+0xd0>)
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    hserial->huart = huart;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	601a      	str	r2, [r3, #0]

    // reset tx fifo pool buffer
    hserial->tx_head_position = 0;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004df8:	3304      	adds	r3, #4
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]
    hserial->tx_tail_position = 0;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004e04:	3308      	adds	r3, #8
 8004e06:	2200      	movs	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]
	hserial->tx_dma = 0;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004e10:	330c      	adds	r3, #12
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]

	// reset rx circular buffer
	hserial->rx_tail_ptr = hserial->rx_circular_buffer;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	f503 5202 	add.w	r2, r3, #8320	; 0x2080
 8004e1c:	3210      	adds	r2, #16
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004e24:	3310      	adds	r3, #16
 8004e26:	601a      	str	r2, [r3, #0]

    // start rx DMA
	HAL_UART_Receive_DMA(hserial->huart, hserial->rx_circular_buffer,size_of_rx_circular_buffer);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004e32:	3310      	adds	r3, #16
 8004e34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e38:	4619      	mov	r1, r3
 8004e3a:	f007 fba7 	bl	800c58c <HAL_UART_Receive_DMA>

	// half-duplex
	hserial->half_duplex = false;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004e44:	3314      	adds	r3, #20
 8004e46:	2200      	movs	r2, #0
 8004e48:	701a      	strb	r2, [r3, #0]
	hserial->GPIOx_DIR_TX = 0;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004e50:	3318      	adds	r3, #24
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
	hserial->GPIO_Pin_DIR_TX = 0;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004e5c:	331c      	adds	r3, #28
 8004e5e:	2200      	movs	r2, #0
 8004e60:	801a      	strh	r2, [r3, #0]
	hserial->PinState_DIR_TX = 0;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004e68:	331e      	adds	r3, #30
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	701a      	strb	r2, [r3, #0]
	hserial->GPIOx_DIR_RX = 0;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004e74:	3320      	adds	r3, #32
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
	hserial->GPIO_Pin_DIR_RX = 0;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004e80:	3324      	adds	r3, #36	; 0x24
 8004e82:	2200      	movs	r2, #0
 8004e84:	801a      	strh	r2, [r3, #0]
	hserial->PinState_DIR_RX = 0;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004e8c:	3326      	adds	r3, #38	; 0x26
 8004e8e:	2200      	movs	r2, #0
 8004e90:	701a      	strb	r2, [r3, #0]
}
 8004e92:	bf00      	nop
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	20000208 	.word	0x20000208
 8004ea0:	20000204 	.word	0x20000204

08004ea4 <HAL_Serial_Available>:
    HAL_GPIO_WritePin(hserial->GPIOx_DIR_TX,hserial->GPIO_Pin_DIR_TX,hserial->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
    HAL_GPIO_WritePin(hserial->GPIOx_DIR_RX,hserial->GPIO_Pin_DIR_RX,hserial->PinState_DIR_RX);
}

int HAL_Serial_Available(HAL_Serial_Handler * hserial)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
    if(hserial->huart == 0)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <HAL_Serial_Available+0x14>
        return 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	e01f      	b.n	8004ef8 <HAL_Serial_Available+0x54>
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004ebe:	3310      	adds	r3, #16
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8004ec6:	6812      	ldr	r2, [r2, #0]
 8004ec8:	6852      	ldr	r2, [r2, #4]
 8004eca:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 8004ece:	4413      	add	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]
    uint8_t const * tail = hserial->rx_tail_ptr;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004ed8:	3310      	adds	r3, #16
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60bb      	str	r3, [r7, #8]
    if( head>=tail )
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d303      	bcc.n	8004eee <HAL_Serial_Available+0x4a>
        return head-tail;
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	e004      	b.n	8004ef8 <HAL_Serial_Available+0x54>
    else
        return head-tail+size_of_rx_circular_buffer;
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_Serial_GetChar>:

char HAL_Serial_GetChar(HAL_Serial_Handler * hserial)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
    if(hserial->huart == 0)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_Serial_GetChar+0x14>
        return 0;
 8004f14:	2300      	movs	r3, #0
 8004f16:	e03f      	b.n	8004f98 <HAL_Serial_GetChar+0x94>
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004f1e:	3310      	adds	r3, #16
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6812      	ldr	r2, [r2, #0]
 8004f24:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8004f26:	6812      	ldr	r2, [r2, #0]
 8004f28:	6852      	ldr	r2, [r2, #4]
 8004f2a:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 8004f2e:	4413      	add	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]
    uint8_t const * tail = hserial->rx_tail_ptr;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004f38:	3310      	adds	r3, #16
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	613b      	str	r3, [r7, #16]
    if(head!=tail)
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d027      	beq.n	8004f96 <HAL_Serial_GetChar+0x92>
    {
        char c =  *hserial->rx_tail_ptr++;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004f4c:	3310      	adds	r3, #16
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	1c51      	adds	r1, r2, #1
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004f58:	3310      	adds	r3, #16
 8004f5a:	6019      	str	r1, [r3, #0]
 8004f5c:	7813      	ldrb	r3, [r2, #0]
 8004f5e:	73fb      	strb	r3, [r7, #15]
        if(hserial->rx_tail_ptr>=hserial->rx_circular_buffer + size_of_rx_circular_buffer)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004f66:	3310      	adds	r3, #16
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004f70:	3310      	adds	r3, #16
 8004f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d30b      	bcc.n	8004f92 <HAL_Serial_GetChar+0x8e>
            hserial->rx_tail_ptr-=size_of_rx_circular_buffer;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004f80:	3310      	adds	r3, #16
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f5a3 6200 	sub.w	r2, r3, #2048	; 0x800
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004f8e:	3310      	adds	r3, #16
 8004f90:	601a      	str	r2, [r3, #0]
        return c;
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
 8004f94:	e000      	b.n	8004f98 <HAL_Serial_GetChar+0x94>
    }
    else
        return 0;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	371c      	adds	r7, #28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_Serial_Write>:
    }
    return counter;
}

int HAL_Serial_Write(HAL_Serial_Handler * hserial, uint8_t const * ptr, int len )
{
 8004fa4:	b590      	push	{r4, r7, lr}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
    if(hserial->huart == 0)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <HAL_Serial_Write+0x18>
        return 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	e09a      	b.n	80050f2 <HAL_Serial_Write+0x14e>

    // copy user data into the head tx buffer into tx pool, inc tx pool head
    hserial->tx_buffer_pool[hserial->tx_head_position].length = len;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004fc2:	3304      	adds	r3, #4
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	019b      	lsls	r3, r3, #6
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4403      	add	r3, r0
 8004fd4:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8004fd8:	6019      	str	r1, [r3, #0]
    uint8_t * dst = hserial->tx_buffer_pool[hserial->tx_head_position].data;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	019b      	lsls	r3, r3, #6
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4413      	add	r3, r2
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	617b      	str	r3, [r7, #20]
    memcpy(dst,ptr,len);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	68b9      	ldr	r1, [r7, #8]
 8004ffa:	6978      	ldr	r0, [r7, #20]
 8004ffc:	f008 fb8a 	bl	800d714 <memcpy>
    hserial->tx_head_position = (hserial->tx_head_position + 1 ) % size_of_tx_pool;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8005006:	3304      	adds	r3, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3301      	adds	r3, #1
 800500c:	f003 021f 	and.w	r2, r3, #31
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8005016:	3304      	adds	r3, #4
 8005018:	601a      	str	r2, [r3, #0]

    // if no tx dma running, start tx dma
    if(hserial->tx_dma==0)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8005020:	330c      	adds	r3, #12
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d163      	bne.n	80050f0 <HAL_Serial_Write+0x14c>
    {
    	// set tx dma running
        hserial->tx_dma=1;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800502e:	330c      	adds	r3, #12
 8005030:	2201      	movs	r2, #1
 8005032:	601a      	str	r2, [r3, #0]

        // TX = ON
        if(hserial->half_duplex)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800503a:	3314      	adds	r3, #20
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d028      	beq.n	8005094 <HAL_Serial_Write+0xf0>
        {
        	HAL_GPIO_WritePin(hserial->GPIOx_DIR_TX,hserial->GPIO_Pin_DIR_TX,hserial->PinState_DIR_TX);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005048:	3318      	adds	r3, #24
 800504a:	6818      	ldr	r0, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005052:	331c      	adds	r3, #28
 8005054:	8819      	ldrh	r1, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800505c:	331e      	adds	r3, #30
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	f004 fb49 	bl	80096f8 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(hserial->GPIOx_DIR_RX,hserial->GPIO_Pin_DIR_RX,hserial->PinState_DIR_RX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800506c:	3320      	adds	r3, #32
 800506e:	6818      	ldr	r0, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005076:	3324      	adds	r3, #36	; 0x24
 8005078:	8819      	ldrh	r1, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005080:	3326      	adds	r3, #38	; 0x26
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	bf0c      	ite	eq
 8005088:	2301      	moveq	r3, #1
 800508a:	2300      	movne	r3, #0
 800508c:	b2db      	uxtb	r3, r3
 800508e:	461a      	mov	r2, r3
 8005090:	f004 fb32 	bl	80096f8 <HAL_GPIO_WritePin>
        // transmit serial internal tx buffer using DMA if no DMA running
        //HAL_StatusTypeDef result = 0;
        //do
        //{
        	//result =
        	HAL_UART_Transmit_DMA(
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6818      	ldr	r0, [r3, #0]
        			hserial->huart,
					hserial->tx_buffer_pool[hserial->tx_tail_position].data,
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800509e:	3308      	adds	r3, #8
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	4613      	mov	r3, r2
 80050a4:	019b      	lsls	r3, r3, #6
 80050a6:	4413      	add	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4413      	add	r3, r2
 80050ae:	1d1c      	adds	r4, r3, #4
					hserial->tx_buffer_pool[hserial->tx_tail_position].length
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80050b6:	3308      	adds	r3, #8
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68f9      	ldr	r1, [r7, #12]
 80050bc:	4613      	mov	r3, r2
 80050be:	019b      	lsls	r3, r3, #6
 80050c0:	4413      	add	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	440b      	add	r3, r1
 80050c6:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80050ca:	681b      	ldr	r3, [r3, #0]
        	HAL_UART_Transmit_DMA(
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	461a      	mov	r2, r3
 80050d0:	4621      	mov	r1, r4
 80050d2:	f007 f9db 	bl	800c48c <HAL_UART_Transmit_DMA>
					);
        //}
        //while(result!=HAL_OK);
        hserial->tx_tail_position = (hserial->tx_tail_position + 1 ) % size_of_tx_pool;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80050dc:	3308      	adds	r3, #8
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3301      	adds	r3, #1
 80050e2:	f003 021f 	and.w	r2, r3, #31
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80050ec:	3308      	adds	r3, #8
 80050ee:	601a      	str	r2, [r3, #0]
    }
    else
    {
    	// end of tx dma callback will start next tx dma
    }
    return len;
 80050f0:	687b      	ldr	r3, [r7, #4]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd90      	pop	{r4, r7, pc}
	...

080050fc <HAL_UART_TxCpltCallback>:
//	HAL_Delay(100);
//
//}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050fc:	b590      	push	{r4, r7, lr}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
    static int id = 0;
    for(id=0;id!=serial_counter;++id)
 8005104:	4b70      	ldr	r3, [pc, #448]	; (80052c8 <HAL_UART_TxCpltCallback+0x1cc>)
 8005106:	2200      	movs	r2, #0
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	e0d0      	b.n	80052ae <HAL_UART_TxCpltCallback+0x1b2>
    {
        if(hserial_table[id]->huart == huart && hserial_table[id]->tx_dma == 1)
 800510c:	4b6e      	ldr	r3, [pc, #440]	; (80052c8 <HAL_UART_TxCpltCallback+0x1cc>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a6e      	ldr	r2, [pc, #440]	; (80052cc <HAL_UART_TxCpltCallback+0x1d0>)
 8005112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	429a      	cmp	r2, r3
 800511c:	f040 80c2 	bne.w	80052a4 <HAL_UART_TxCpltCallback+0x1a8>
 8005120:	4b69      	ldr	r3, [pc, #420]	; (80052c8 <HAL_UART_TxCpltCallback+0x1cc>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a69      	ldr	r2, [pc, #420]	; (80052cc <HAL_UART_TxCpltCallback+0x1d0>)
 8005126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800512a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800512e:	330c      	adds	r3, #12
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b01      	cmp	r3, #1
 8005134:	f040 80b6 	bne.w	80052a4 <HAL_UART_TxCpltCallback+0x1a8>
        {
			// tx buffer from pool waiting for transmission ?
			if(hserial_table[id]->tx_head_position!=hserial_table[id]->tx_tail_position)
 8005138:	4b63      	ldr	r3, [pc, #396]	; (80052c8 <HAL_UART_TxCpltCallback+0x1cc>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a63      	ldr	r2, [pc, #396]	; (80052cc <HAL_UART_TxCpltCallback+0x1d0>)
 800513e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005142:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8005146:	3304      	adds	r3, #4
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	4b5f      	ldr	r3, [pc, #380]	; (80052c8 <HAL_UART_TxCpltCallback+0x1cc>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	495f      	ldr	r1, [pc, #380]	; (80052cc <HAL_UART_TxCpltCallback+0x1d0>)
 8005150:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005154:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8005158:	3308      	adds	r3, #8
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	429a      	cmp	r2, r3
 800515e:	d04a      	beq.n	80051f6 <HAL_UART_TxCpltCallback+0xfa>
		        //HAL_StatusTypeDef result = 0;
		        //do
		        //{
		        	//result =
				 HAL_UART_Transmit_DMA(
		        			hserial_table[id]->huart,
 8005160:	4b59      	ldr	r3, [pc, #356]	; (80052c8 <HAL_UART_TxCpltCallback+0x1cc>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a59      	ldr	r2, [pc, #356]	; (80052cc <HAL_UART_TxCpltCallback+0x1d0>)
 8005166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				 HAL_UART_Transmit_DMA(
 800516a:	6818      	ldr	r0, [r3, #0]
							hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].data,
 800516c:	4b56      	ldr	r3, [pc, #344]	; (80052c8 <HAL_UART_TxCpltCallback+0x1cc>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a56      	ldr	r2, [pc, #344]	; (80052cc <HAL_UART_TxCpltCallback+0x1d0>)
 8005172:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005176:	4b54      	ldr	r3, [pc, #336]	; (80052c8 <HAL_UART_TxCpltCallback+0x1cc>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a54      	ldr	r2, [pc, #336]	; (80052cc <HAL_UART_TxCpltCallback+0x1d0>)
 800517c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005180:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8005184:	3308      	adds	r3, #8
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	4613      	mov	r3, r2
 800518a:	019b      	lsls	r3, r3, #6
 800518c:	4413      	add	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	440b      	add	r3, r1
 8005192:	1d1c      	adds	r4, r3, #4
							hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].length
 8005194:	4b4c      	ldr	r3, [pc, #304]	; (80052c8 <HAL_UART_TxCpltCallback+0x1cc>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a4c      	ldr	r2, [pc, #304]	; (80052cc <HAL_UART_TxCpltCallback+0x1d0>)
 800519a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800519e:	4b4a      	ldr	r3, [pc, #296]	; (80052c8 <HAL_UART_TxCpltCallback+0x1cc>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a4a      	ldr	r2, [pc, #296]	; (80052cc <HAL_UART_TxCpltCallback+0x1d0>)
 80051a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051a8:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80051ac:	3308      	adds	r3, #8
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	4613      	mov	r3, r2
 80051b2:	019b      	lsls	r3, r3, #6
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	440b      	add	r3, r1
 80051ba:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80051be:	681b      	ldr	r3, [r3, #0]
				 HAL_UART_Transmit_DMA(
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	4621      	mov	r1, r4
 80051c6:	f007 f961 	bl	800c48c <HAL_UART_Transmit_DMA>
							);
		        //}
		        //while(result!=HAL_OK);

				// inc tail
				hserial_table[id]->tx_tail_position = (hserial_table[id]->tx_tail_position + 1 ) % size_of_tx_pool;
 80051ca:	4b3f      	ldr	r3, [pc, #252]	; (80052c8 <HAL_UART_TxCpltCallback+0x1cc>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a3f      	ldr	r2, [pc, #252]	; (80052cc <HAL_UART_TxCpltCallback+0x1d0>)
 80051d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051d4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80051d8:	3308      	adds	r3, #8
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	1c5a      	adds	r2, r3, #1
 80051de:	4b3a      	ldr	r3, [pc, #232]	; (80052c8 <HAL_UART_TxCpltCallback+0x1cc>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	493a      	ldr	r1, [pc, #232]	; (80052cc <HAL_UART_TxCpltCallback+0x1d0>)
 80051e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80051e8:	f002 021f 	and.w	r2, r2, #31
 80051ec:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80051f0:	3308      	adds	r3, #8
 80051f2:	601a      	str	r2, [r3, #0]
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_TX,hserial_table[id]->GPIO_Pin_DIR_TX,hserial_table[id]->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_RX,hserial_table[id]->GPIO_Pin_DIR_RX,hserial_table[id]->PinState_DIR_RX);
		        }

			}
           break;
 80051f4:	e063      	b.n	80052be <HAL_UART_TxCpltCallback+0x1c2>
				hserial_table[id]->tx_dma = 0;
 80051f6:	4b34      	ldr	r3, [pc, #208]	; (80052c8 <HAL_UART_TxCpltCallback+0x1cc>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a34      	ldr	r2, [pc, #208]	; (80052cc <HAL_UART_TxCpltCallback+0x1d0>)
 80051fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005200:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8005204:	330c      	adds	r3, #12
 8005206:	2200      	movs	r2, #0
 8005208:	601a      	str	r2, [r3, #0]
		        if(hserial_table[id]->half_duplex)
 800520a:	4b2f      	ldr	r3, [pc, #188]	; (80052c8 <HAL_UART_TxCpltCallback+0x1cc>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a2f      	ldr	r2, [pc, #188]	; (80052cc <HAL_UART_TxCpltCallback+0x1d0>)
 8005210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005214:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005218:	3314      	adds	r3, #20
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d04e      	beq.n	80052be <HAL_UART_TxCpltCallback+0x1c2>
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_TX,hserial_table[id]->GPIO_Pin_DIR_TX,hserial_table[id]->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 8005220:	4b29      	ldr	r3, [pc, #164]	; (80052c8 <HAL_UART_TxCpltCallback+0x1cc>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a29      	ldr	r2, [pc, #164]	; (80052cc <HAL_UART_TxCpltCallback+0x1d0>)
 8005226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800522a:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800522e:	3318      	adds	r3, #24
 8005230:	6818      	ldr	r0, [r3, #0]
 8005232:	4b25      	ldr	r3, [pc, #148]	; (80052c8 <HAL_UART_TxCpltCallback+0x1cc>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a25      	ldr	r2, [pc, #148]	; (80052cc <HAL_UART_TxCpltCallback+0x1d0>)
 8005238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800523c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005240:	331c      	adds	r3, #28
 8005242:	8819      	ldrh	r1, [r3, #0]
 8005244:	4b20      	ldr	r3, [pc, #128]	; (80052c8 <HAL_UART_TxCpltCallback+0x1cc>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a20      	ldr	r2, [pc, #128]	; (80052cc <HAL_UART_TxCpltCallback+0x1d0>)
 800524a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800524e:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005252:	331e      	adds	r3, #30
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	bf0c      	ite	eq
 800525a:	2301      	moveq	r3, #1
 800525c:	2300      	movne	r3, #0
 800525e:	b2db      	uxtb	r3, r3
 8005260:	461a      	mov	r2, r3
 8005262:	f004 fa49 	bl	80096f8 <HAL_GPIO_WritePin>
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_RX,hserial_table[id]->GPIO_Pin_DIR_RX,hserial_table[id]->PinState_DIR_RX);
 8005266:	4b18      	ldr	r3, [pc, #96]	; (80052c8 <HAL_UART_TxCpltCallback+0x1cc>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a18      	ldr	r2, [pc, #96]	; (80052cc <HAL_UART_TxCpltCallback+0x1d0>)
 800526c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005270:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005274:	3320      	adds	r3, #32
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	4b13      	ldr	r3, [pc, #76]	; (80052c8 <HAL_UART_TxCpltCallback+0x1cc>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a13      	ldr	r2, [pc, #76]	; (80052cc <HAL_UART_TxCpltCallback+0x1d0>)
 800527e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005282:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005286:	3324      	adds	r3, #36	; 0x24
 8005288:	8819      	ldrh	r1, [r3, #0]
 800528a:	4b0f      	ldr	r3, [pc, #60]	; (80052c8 <HAL_UART_TxCpltCallback+0x1cc>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a0f      	ldr	r2, [pc, #60]	; (80052cc <HAL_UART_TxCpltCallback+0x1d0>)
 8005290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005294:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005298:	3326      	adds	r3, #38	; 0x26
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	461a      	mov	r2, r3
 800529e:	f004 fa2b 	bl	80096f8 <HAL_GPIO_WritePin>
           break;
 80052a2:	e00c      	b.n	80052be <HAL_UART_TxCpltCallback+0x1c2>
    for(id=0;id!=serial_counter;++id)
 80052a4:	4b08      	ldr	r3, [pc, #32]	; (80052c8 <HAL_UART_TxCpltCallback+0x1cc>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3301      	adds	r3, #1
 80052aa:	4a07      	ldr	r2, [pc, #28]	; (80052c8 <HAL_UART_TxCpltCallback+0x1cc>)
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	4b06      	ldr	r3, [pc, #24]	; (80052c8 <HAL_UART_TxCpltCallback+0x1cc>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a07      	ldr	r2, [pc, #28]	; (80052d0 <HAL_UART_TxCpltCallback+0x1d4>)
 80052b4:	6812      	ldr	r2, [r2, #0]
 80052b6:	4293      	cmp	r3, r2
 80052b8:	f47f af28 	bne.w	800510c <HAL_UART_TxCpltCallback+0x10>
        }
    }
}
 80052bc:	e000      	b.n	80052c0 <HAL_UART_TxCpltCallback+0x1c4>
           break;
 80052be:	bf00      	nop
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd90      	pop	{r4, r7, pc}
 80052c8:	20000210 	.word	0x20000210
 80052cc:	20000204 	.word	0x20000204
 80052d0:	20000208 	.word	0x20000208

080052d4 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
	int div = 1;
 80052e0:	2301      	movs	r3, #1
 80052e2:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80052e4:	e004      	b.n	80052f0 <ts_itoa+0x1c>
		div *= base;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	fb02 f303 	mul.w	r3, r2, r3
 80052ee:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d2f3      	bcs.n	80052e6 <ts_itoa+0x12>

	while (div != 0)
 80052fe:	e029      	b.n	8005354 <ts_itoa+0x80>
	{
		int num = d/div;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	fbb2 f3f3 	udiv	r3, r2, r3
 8005308:	613b      	str	r3, [r7, #16]
		d = d%div;
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005312:	fb02 f201 	mul.w	r2, r2, r1
 8005316:	1a9b      	subs	r3, r3, r2
 8005318:	60bb      	str	r3, [r7, #8]
		div /= base;
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005322:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	2b09      	cmp	r3, #9
 8005328:	dd0a      	ble.n	8005340 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	b2da      	uxtb	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	1c58      	adds	r0, r3, #1
 8005334:	68f9      	ldr	r1, [r7, #12]
 8005336:	6008      	str	r0, [r1, #0]
 8005338:	3237      	adds	r2, #55	; 0x37
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	e009      	b.n	8005354 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	b2da      	uxtb	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	1c58      	adds	r0, r3, #1
 800534a:	68f9      	ldr	r1, [r7, #12]
 800534c:	6008      	str	r0, [r1, #0]
 800534e:	3230      	adds	r2, #48	; 0x30
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1d2      	bne.n	8005300 <ts_itoa+0x2c>
	}
}
 800535a:	bf00      	nop
 800535c:	bf00      	nop
 800535e:	371c      	adds	r7, #28
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b088      	sub	sp, #32
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8005378:	e0bc      	b.n	80054f4 <ts_formatstring+0x18c>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	2b25      	cmp	r3, #37	; 0x25
 8005380:	f040 80b0 	bne.w	80054e4 <ts_formatstring+0x17c>
		{
			switch (*(++fmt))
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	3301      	adds	r3, #1
 8005388:	60bb      	str	r3, [r7, #8]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	2b25      	cmp	r3, #37	; 0x25
 8005390:	f000 809e 	beq.w	80054d0 <ts_formatstring+0x168>
 8005394:	2b25      	cmp	r3, #37	; 0x25
 8005396:	f2c0 80a1 	blt.w	80054dc <ts_formatstring+0x174>
 800539a:	2b78      	cmp	r3, #120	; 0x78
 800539c:	f300 809e 	bgt.w	80054dc <ts_formatstring+0x174>
 80053a0:	2b58      	cmp	r3, #88	; 0x58
 80053a2:	f2c0 809b 	blt.w	80054dc <ts_formatstring+0x174>
 80053a6:	3b58      	subs	r3, #88	; 0x58
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	f200 8097 	bhi.w	80054dc <ts_formatstring+0x174>
 80053ae:	a201      	add	r2, pc, #4	; (adr r2, 80053b4 <ts_formatstring+0x4c>)
 80053b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b4:	080054b9 	.word	0x080054b9
 80053b8:	080054dd 	.word	0x080054dd
 80053bc:	080054dd 	.word	0x080054dd
 80053c0:	080054dd 	.word	0x080054dd
 80053c4:	080054dd 	.word	0x080054dd
 80053c8:	080054dd 	.word	0x080054dd
 80053cc:	080054dd 	.word	0x080054dd
 80053d0:	080054dd 	.word	0x080054dd
 80053d4:	080054dd 	.word	0x080054dd
 80053d8:	080054dd 	.word	0x080054dd
 80053dc:	080054dd 	.word	0x080054dd
 80053e0:	08005439 	.word	0x08005439
 80053e4:	0800544d 	.word	0x0800544d
 80053e8:	080054dd 	.word	0x080054dd
 80053ec:	080054dd 	.word	0x080054dd
 80053f0:	080054dd 	.word	0x080054dd
 80053f4:	080054dd 	.word	0x080054dd
 80053f8:	0800544d 	.word	0x0800544d
 80053fc:	080054dd 	.word	0x080054dd
 8005400:	080054dd 	.word	0x080054dd
 8005404:	080054dd 	.word	0x080054dd
 8005408:	080054dd 	.word	0x080054dd
 800540c:	080054dd 	.word	0x080054dd
 8005410:	080054dd 	.word	0x080054dd
 8005414:	080054dd 	.word	0x080054dd
 8005418:	080054dd 	.word	0x080054dd
 800541c:	080054dd 	.word	0x080054dd
 8005420:	0800547d 	.word	0x0800547d
 8005424:	080054dd 	.word	0x080054dd
 8005428:	080054a3 	.word	0x080054a3
 800542c:	080054dd 	.word	0x080054dd
 8005430:	080054dd 	.word	0x080054dd
 8005434:	080054b9 	.word	0x080054b9
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	1d1a      	adds	r2, r3, #4
 800543c:	607a      	str	r2, [r7, #4]
 800543e:	6819      	ldr	r1, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	1c5a      	adds	r2, r3, #1
 8005444:	60fa      	str	r2, [r7, #12]
 8005446:	b2ca      	uxtb	r2, r1
 8005448:	701a      	strb	r2, [r3, #0]
				break;
 800544a:	e047      	b.n	80054dc <ts_formatstring+0x174>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	1d1a      	adds	r2, r3, #4
 8005450:	607a      	str	r2, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	2b00      	cmp	r3, #0
 800545a:	da07      	bge.n	800546c <ts_formatstring+0x104>
					{
						val *= -1;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	425b      	negs	r3, r3
 8005460:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	60fa      	str	r2, [r7, #12]
 8005468:	222d      	movs	r2, #45	; 0x2d
 800546a:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 800546c:	69f9      	ldr	r1, [r7, #28]
 800546e:	f107 030c 	add.w	r3, r7, #12
 8005472:	220a      	movs	r2, #10
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff ff2d 	bl	80052d4 <ts_itoa>
				}
				break;
 800547a:	e02f      	b.n	80054dc <ts_formatstring+0x174>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	1d1a      	adds	r2, r3, #4
 8005480:	607a      	str	r2, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8005486:	e007      	b.n	8005498 <ts_formatstring+0x130>
					{
						*buf++ = *arg++;
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	1c53      	adds	r3, r2, #1
 800548c:	61bb      	str	r3, [r7, #24]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	1c59      	adds	r1, r3, #1
 8005492:	60f9      	str	r1, [r7, #12]
 8005494:	7812      	ldrb	r2, [r2, #0]
 8005496:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1f3      	bne.n	8005488 <ts_formatstring+0x120>
					}
				}
				break;
 80054a0:	e01c      	b.n	80054dc <ts_formatstring+0x174>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	1d1a      	adds	r2, r3, #4
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	6819      	ldr	r1, [r3, #0]
 80054aa:	f107 030c 	add.w	r3, r7, #12
 80054ae:	220a      	movs	r2, #10
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff ff0f 	bl	80052d4 <ts_itoa>
				break;
 80054b6:	e011      	b.n	80054dc <ts_formatstring+0x174>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	1d1a      	adds	r2, r3, #4
 80054bc:	607a      	str	r2, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4619      	mov	r1, r3
 80054c2:	f107 030c 	add.w	r3, r7, #12
 80054c6:	2210      	movs	r2, #16
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7ff ff03 	bl	80052d4 <ts_itoa>
				break;
 80054ce:	e005      	b.n	80054dc <ts_formatstring+0x174>
			  case '%':
				  *buf++ = '%';
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	60fa      	str	r2, [r7, #12]
 80054d6:	2225      	movs	r2, #37	; 0x25
 80054d8:	701a      	strb	r2, [r3, #0]
				  break;
 80054da:	bf00      	nop
			}
			fmt++;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	3301      	adds	r3, #1
 80054e0:	60bb      	str	r3, [r7, #8]
 80054e2:	e007      	b.n	80054f4 <ts_formatstring+0x18c>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	1c53      	adds	r3, r2, #1
 80054e8:	60bb      	str	r3, [r7, #8]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	1c59      	adds	r1, r3, #1
 80054ee:	60f9      	str	r1, [r7, #12]
 80054f0:	7812      	ldrb	r2, [r2, #0]
 80054f2:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f47f af3e 	bne.w	800537a <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	1ad3      	subs	r3, r2, r3
}
 800550a:	4618      	mov	r0, r3
 800550c:	3720      	adds	r7, #32
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop

08005514 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
	int length = 0;
 800551e:	2300      	movs	r3, #0
 8005520:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8005522:	e080      	b.n	8005626 <ts_formatlength+0x112>
	{
		if (*fmt == '%')
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b25      	cmp	r3, #37	; 0x25
 800552a:	d176      	bne.n	800561a <ts_formatlength+0x106>
		{
			++fmt;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3301      	adds	r3, #1
 8005530:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	3b58      	subs	r3, #88	; 0x58
 8005538:	2b20      	cmp	r3, #32
 800553a:	d86a      	bhi.n	8005612 <ts_formatlength+0xfe>
 800553c:	a201      	add	r2, pc, #4	; (adr r2, 8005544 <ts_formatlength+0x30>)
 800553e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005542:	bf00      	nop
 8005544:	08005605 	.word	0x08005605
 8005548:	08005613 	.word	0x08005613
 800554c:	08005613 	.word	0x08005613
 8005550:	08005613 	.word	0x08005613
 8005554:	08005613 	.word	0x08005613
 8005558:	08005613 	.word	0x08005613
 800555c:	08005613 	.word	0x08005613
 8005560:	08005613 	.word	0x08005613
 8005564:	08005613 	.word	0x08005613
 8005568:	08005613 	.word	0x08005613
 800556c:	08005613 	.word	0x08005613
 8005570:	080055c9 	.word	0x080055c9
 8005574:	080055d7 	.word	0x080055d7
 8005578:	08005613 	.word	0x08005613
 800557c:	08005613 	.word	0x08005613
 8005580:	08005613 	.word	0x08005613
 8005584:	08005613 	.word	0x08005613
 8005588:	080055d7 	.word	0x080055d7
 800558c:	08005613 	.word	0x08005613
 8005590:	08005613 	.word	0x08005613
 8005594:	08005613 	.word	0x08005613
 8005598:	08005613 	.word	0x08005613
 800559c:	08005613 	.word	0x08005613
 80055a0:	08005613 	.word	0x08005613
 80055a4:	08005613 	.word	0x08005613
 80055a8:	08005613 	.word	0x08005613
 80055ac:	08005613 	.word	0x08005613
 80055b0:	080055e5 	.word	0x080055e5
 80055b4:	08005613 	.word	0x08005613
 80055b8:	080055d7 	.word	0x080055d7
 80055bc:	08005613 	.word	0x08005613
 80055c0:	08005613 	.word	0x08005613
 80055c4:	08005605 	.word	0x08005605
			{
			  case 'c':
		  		  va_arg(va, int);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	3304      	adds	r3, #4
 80055cc:	603b      	str	r3, [r7, #0]
				  ++length;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3301      	adds	r3, #1
 80055d2:	60fb      	str	r3, [r7, #12]
				  break;
 80055d4:	e024      	b.n	8005620 <ts_formatlength+0x10c>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	330b      	adds	r3, #11
 80055da:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	3304      	adds	r3, #4
 80055e0:	603b      	str	r3, [r7, #0]
				  break;
 80055e2:	e01d      	b.n	8005620 <ts_formatlength+0x10c>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	1d1a      	adds	r2, r3, #4
 80055e8:	603a      	str	r2, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 80055ee:	e002      	b.n	80055f6 <ts_formatlength+0xe2>
			  			  ++length;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	3301      	adds	r3, #1
 80055f4:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	60ba      	str	r2, [r7, #8]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1f6      	bne.n	80055f0 <ts_formatlength+0xdc>
			  	  }
				  break;
 8005602:	e00d      	b.n	8005620 <ts_formatlength+0x10c>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	3308      	adds	r3, #8
 8005608:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	3304      	adds	r3, #4
 800560e:	603b      	str	r3, [r7, #0]
				  break;
 8005610:	e006      	b.n	8005620 <ts_formatlength+0x10c>
			  default:
				  ++length;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	3301      	adds	r3, #1
 8005616:	60fb      	str	r3, [r7, #12]
				  break;
 8005618:	e002      	b.n	8005620 <ts_formatlength+0x10c>
			}
		}
		else
		{
			++length;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	3301      	adds	r3, #1
 800561e:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	3301      	adds	r3, #1
 8005624:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	f47f af7a 	bne.w	8005524 <ts_formatlength+0x10>
	}
	return length;
 8005630:	68fb      	ldr	r3, [r7, #12]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop

08005640 <HAL_Serial_Print>:

int HAL_Serial_Print(HAL_Serial_Handler * hserial,const char *fmt, ...)
{
 8005640:	b40e      	push	{r1, r2, r3}
 8005642:	b5b0      	push	{r4, r5, r7, lr}
 8005644:	b087      	sub	sp, #28
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
	int length = 0;
 800564a:	2300      	movs	r3, #0
 800564c:	617b      	str	r3, [r7, #20]
	va_list va;
	va_start(va, fmt);
 800564e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005652:	60bb      	str	r3, [r7, #8]
	length = ts_formatlength(fmt, va);
 8005654:	68b9      	ldr	r1, [r7, #8]
 8005656:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005658:	f7ff ff5c 	bl	8005514 <ts_formatlength>
 800565c:	6178      	str	r0, [r7, #20]
	va_end(va);
	{
 800565e:	466b      	mov	r3, sp
 8005660:	461d      	mov	r5, r3
		char buf[length];
 8005662:	697c      	ldr	r4, [r7, #20]
 8005664:	1e63      	subs	r3, r4, #1
 8005666:	613b      	str	r3, [r7, #16]
 8005668:	4623      	mov	r3, r4
 800566a:	4618      	mov	r0, r3
 800566c:	f04f 0100 	mov.w	r1, #0
 8005670:	f04f 0200 	mov.w	r2, #0
 8005674:	f04f 0300 	mov.w	r3, #0
 8005678:	00cb      	lsls	r3, r1, #3
 800567a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800567e:	00c2      	lsls	r2, r0, #3
 8005680:	4623      	mov	r3, r4
 8005682:	4618      	mov	r0, r3
 8005684:	f04f 0100 	mov.w	r1, #0
 8005688:	f04f 0200 	mov.w	r2, #0
 800568c:	f04f 0300 	mov.w	r3, #0
 8005690:	00cb      	lsls	r3, r1, #3
 8005692:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005696:	00c2      	lsls	r2, r0, #3
 8005698:	4623      	mov	r3, r4
 800569a:	3307      	adds	r3, #7
 800569c:	08db      	lsrs	r3, r3, #3
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	ebad 0d03 	sub.w	sp, sp, r3
 80056a4:	466b      	mov	r3, sp
 80056a6:	3300      	adds	r3, #0
 80056a8:	60fb      	str	r3, [r7, #12]
		va_start(va, fmt);
 80056aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056ae:	60bb      	str	r3, [r7, #8]
		length = ts_formatstring(buf, fmt, va);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff fe56 	bl	8005368 <ts_formatstring>
 80056bc:	6178      	str	r0, [r7, #20]
		length = HAL_Serial_Write(hserial, (uint8_t*)buf, length);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	4619      	mov	r1, r3
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7ff fc6d 	bl	8004fa4 <HAL_Serial_Write>
 80056ca:	6178      	str	r0, [r7, #20]
 80056cc:	46ad      	mov	sp, r5
		va_end(va);
	}
	return length;
 80056ce:	697b      	ldr	r3, [r7, #20]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	371c      	adds	r7, #28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80056da:	b003      	add	sp, #12
 80056dc:	4770      	bx	lr
	...

080056e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056e6:	4b0f      	ldr	r3, [pc, #60]	; (8005724 <HAL_MspInit+0x44>)
 80056e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ea:	4a0e      	ldr	r2, [pc, #56]	; (8005724 <HAL_MspInit+0x44>)
 80056ec:	f043 0301 	orr.w	r3, r3, #1
 80056f0:	6613      	str	r3, [r2, #96]	; 0x60
 80056f2:	4b0c      	ldr	r3, [pc, #48]	; (8005724 <HAL_MspInit+0x44>)
 80056f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	607b      	str	r3, [r7, #4]
 80056fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80056fe:	4b09      	ldr	r3, [pc, #36]	; (8005724 <HAL_MspInit+0x44>)
 8005700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005702:	4a08      	ldr	r2, [pc, #32]	; (8005724 <HAL_MspInit+0x44>)
 8005704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005708:	6593      	str	r3, [r2, #88]	; 0x58
 800570a:	4b06      	ldr	r3, [pc, #24]	; (8005724 <HAL_MspInit+0x44>)
 800570c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005712:	603b      	str	r3, [r7, #0]
 8005714:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8005716:	f004 f9ad 	bl	8009a74 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800571a:	bf00      	nop
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	40021000 	.word	0x40021000

08005728 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08c      	sub	sp, #48	; 0x30
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005730:	f107 031c 	add.w	r3, r7, #28
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	605a      	str	r2, [r3, #4]
 800573a:	609a      	str	r2, [r3, #8]
 800573c:	60da      	str	r2, [r3, #12]
 800573e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005748:	d17a      	bne.n	8005840 <HAL_ADC_MspInit+0x118>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800574a:	4b66      	ldr	r3, [pc, #408]	; (80058e4 <HAL_ADC_MspInit+0x1bc>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3301      	adds	r3, #1
 8005750:	4a64      	ldr	r2, [pc, #400]	; (80058e4 <HAL_ADC_MspInit+0x1bc>)
 8005752:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005754:	4b63      	ldr	r3, [pc, #396]	; (80058e4 <HAL_ADC_MspInit+0x1bc>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d10b      	bne.n	8005774 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800575c:	4b62      	ldr	r3, [pc, #392]	; (80058e8 <HAL_ADC_MspInit+0x1c0>)
 800575e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005760:	4a61      	ldr	r2, [pc, #388]	; (80058e8 <HAL_ADC_MspInit+0x1c0>)
 8005762:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005766:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005768:	4b5f      	ldr	r3, [pc, #380]	; (80058e8 <HAL_ADC_MspInit+0x1c0>)
 800576a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800576c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005770:	61bb      	str	r3, [r7, #24]
 8005772:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005774:	4b5c      	ldr	r3, [pc, #368]	; (80058e8 <HAL_ADC_MspInit+0x1c0>)
 8005776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005778:	4a5b      	ldr	r2, [pc, #364]	; (80058e8 <HAL_ADC_MspInit+0x1c0>)
 800577a:	f043 0301 	orr.w	r3, r3, #1
 800577e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005780:	4b59      	ldr	r3, [pc, #356]	; (80058e8 <HAL_ADC_MspInit+0x1c0>)
 8005782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	617b      	str	r3, [r7, #20]
 800578a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800578c:	4b56      	ldr	r3, [pc, #344]	; (80058e8 <HAL_ADC_MspInit+0x1c0>)
 800578e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005790:	4a55      	ldr	r2, [pc, #340]	; (80058e8 <HAL_ADC_MspInit+0x1c0>)
 8005792:	f043 0302 	orr.w	r3, r3, #2
 8005796:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005798:	4b53      	ldr	r3, [pc, #332]	; (80058e8 <HAL_ADC_MspInit+0x1c0>)
 800579a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80057a4:	2301      	movs	r3, #1
 80057a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80057a8:	2303      	movs	r3, #3
 80057aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ac:	2300      	movs	r3, #0
 80057ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057b0:	f107 031c 	add.w	r3, r7, #28
 80057b4:	4619      	mov	r1, r3
 80057b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057ba:	f003 fe1b 	bl	80093f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80057be:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80057c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80057c4:	2303      	movs	r3, #3
 80057c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057c8:	2300      	movs	r3, #0
 80057ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057cc:	f107 031c 	add.w	r3, r7, #28
 80057d0:	4619      	mov	r1, r3
 80057d2:	4846      	ldr	r0, [pc, #280]	; (80058ec <HAL_ADC_MspInit+0x1c4>)
 80057d4:	f003 fe0e 	bl	80093f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 80057d8:	4b45      	ldr	r3, [pc, #276]	; (80058f0 <HAL_ADC_MspInit+0x1c8>)
 80057da:	4a46      	ldr	r2, [pc, #280]	; (80058f4 <HAL_ADC_MspInit+0x1cc>)
 80057dc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80057de:	4b44      	ldr	r3, [pc, #272]	; (80058f0 <HAL_ADC_MspInit+0x1c8>)
 80057e0:	2205      	movs	r2, #5
 80057e2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057e4:	4b42      	ldr	r3, [pc, #264]	; (80058f0 <HAL_ADC_MspInit+0x1c8>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80057ea:	4b41      	ldr	r3, [pc, #260]	; (80058f0 <HAL_ADC_MspInit+0x1c8>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80057f0:	4b3f      	ldr	r3, [pc, #252]	; (80058f0 <HAL_ADC_MspInit+0x1c8>)
 80057f2:	2280      	movs	r2, #128	; 0x80
 80057f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80057f6:	4b3e      	ldr	r3, [pc, #248]	; (80058f0 <HAL_ADC_MspInit+0x1c8>)
 80057f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80057fe:	4b3c      	ldr	r3, [pc, #240]	; (80058f0 <HAL_ADC_MspInit+0x1c8>)
 8005800:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005804:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005806:	4b3a      	ldr	r3, [pc, #232]	; (80058f0 <HAL_ADC_MspInit+0x1c8>)
 8005808:	2220      	movs	r2, #32
 800580a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800580c:	4b38      	ldr	r3, [pc, #224]	; (80058f0 <HAL_ADC_MspInit+0x1c8>)
 800580e:	2200      	movs	r2, #0
 8005810:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005812:	4837      	ldr	r0, [pc, #220]	; (80058f0 <HAL_ADC_MspInit+0x1c8>)
 8005814:	f002 fba0 	bl	8007f58 <HAL_DMA_Init>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800581e:	f7fe fcad 	bl	800417c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a32      	ldr	r2, [pc, #200]	; (80058f0 <HAL_ADC_MspInit+0x1c8>)
 8005826:	655a      	str	r2, [r3, #84]	; 0x54
 8005828:	4a31      	ldr	r2, [pc, #196]	; (80058f0 <HAL_ADC_MspInit+0x1c8>)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800582e:	2200      	movs	r2, #0
 8005830:	2100      	movs	r1, #0
 8005832:	2012      	movs	r0, #18
 8005834:	f002 fb57 	bl	8007ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005838:	2012      	movs	r0, #18
 800583a:	f002 fb6e 	bl	8007f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800583e:	e04c      	b.n	80058da <HAL_ADC_MspInit+0x1b2>
  else if(hadc->Instance==ADC2)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a2c      	ldr	r2, [pc, #176]	; (80058f8 <HAL_ADC_MspInit+0x1d0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d147      	bne.n	80058da <HAL_ADC_MspInit+0x1b2>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800584a:	4b26      	ldr	r3, [pc, #152]	; (80058e4 <HAL_ADC_MspInit+0x1bc>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3301      	adds	r3, #1
 8005850:	4a24      	ldr	r2, [pc, #144]	; (80058e4 <HAL_ADC_MspInit+0x1bc>)
 8005852:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005854:	4b23      	ldr	r3, [pc, #140]	; (80058e4 <HAL_ADC_MspInit+0x1bc>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d10b      	bne.n	8005874 <HAL_ADC_MspInit+0x14c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800585c:	4b22      	ldr	r3, [pc, #136]	; (80058e8 <HAL_ADC_MspInit+0x1c0>)
 800585e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005860:	4a21      	ldr	r2, [pc, #132]	; (80058e8 <HAL_ADC_MspInit+0x1c0>)
 8005862:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005868:	4b1f      	ldr	r3, [pc, #124]	; (80058e8 <HAL_ADC_MspInit+0x1c0>)
 800586a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800586c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005870:	60fb      	str	r3, [r7, #12]
 8005872:	68fb      	ldr	r3, [r7, #12]
    hdma_adc2.Instance = DMA1_Channel4;
 8005874:	4b21      	ldr	r3, [pc, #132]	; (80058fc <HAL_ADC_MspInit+0x1d4>)
 8005876:	4a22      	ldr	r2, [pc, #136]	; (8005900 <HAL_ADC_MspInit+0x1d8>)
 8005878:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800587a:	4b20      	ldr	r3, [pc, #128]	; (80058fc <HAL_ADC_MspInit+0x1d4>)
 800587c:	2224      	movs	r2, #36	; 0x24
 800587e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005880:	4b1e      	ldr	r3, [pc, #120]	; (80058fc <HAL_ADC_MspInit+0x1d4>)
 8005882:	2200      	movs	r2, #0
 8005884:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005886:	4b1d      	ldr	r3, [pc, #116]	; (80058fc <HAL_ADC_MspInit+0x1d4>)
 8005888:	2200      	movs	r2, #0
 800588a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800588c:	4b1b      	ldr	r3, [pc, #108]	; (80058fc <HAL_ADC_MspInit+0x1d4>)
 800588e:	2280      	movs	r2, #128	; 0x80
 8005890:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005892:	4b1a      	ldr	r3, [pc, #104]	; (80058fc <HAL_ADC_MspInit+0x1d4>)
 8005894:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005898:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800589a:	4b18      	ldr	r3, [pc, #96]	; (80058fc <HAL_ADC_MspInit+0x1d4>)
 800589c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058a0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80058a2:	4b16      	ldr	r3, [pc, #88]	; (80058fc <HAL_ADC_MspInit+0x1d4>)
 80058a4:	2220      	movs	r2, #32
 80058a6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80058a8:	4b14      	ldr	r3, [pc, #80]	; (80058fc <HAL_ADC_MspInit+0x1d4>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80058ae:	4813      	ldr	r0, [pc, #76]	; (80058fc <HAL_ADC_MspInit+0x1d4>)
 80058b0:	f002 fb52 	bl	8007f58 <HAL_DMA_Init>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <HAL_ADC_MspInit+0x196>
      Error_Handler();
 80058ba:	f7fe fc5f 	bl	800417c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a0e      	ldr	r2, [pc, #56]	; (80058fc <HAL_ADC_MspInit+0x1d4>)
 80058c2:	655a      	str	r2, [r3, #84]	; 0x54
 80058c4:	4a0d      	ldr	r2, [pc, #52]	; (80058fc <HAL_ADC_MspInit+0x1d4>)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80058ca:	2200      	movs	r2, #0
 80058cc:	2100      	movs	r1, #0
 80058ce:	2012      	movs	r0, #18
 80058d0:	f002 fb09 	bl	8007ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80058d4:	2012      	movs	r0, #18
 80058d6:	f002 fb20 	bl	8007f1a <HAL_NVIC_EnableIRQ>
}
 80058da:	bf00      	nop
 80058dc:	3730      	adds	r7, #48	; 0x30
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	20000214 	.word	0x20000214
 80058e8:	40021000 	.word	0x40021000
 80058ec:	48000400 	.word	0x48000400
 80058f0:	20002e0c 	.word	0x20002e0c
 80058f4:	40020030 	.word	0x40020030
 80058f8:	50000100 	.word	0x50000100
 80058fc:	2000301c 	.word	0x2000301c
 8005900:	40020044 	.word	0x40020044

08005904 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a0d      	ldr	r2, [pc, #52]	; (8005948 <HAL_CORDIC_MspInit+0x44>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d113      	bne.n	800593e <HAL_CORDIC_MspInit+0x3a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8005916:	4b0d      	ldr	r3, [pc, #52]	; (800594c <HAL_CORDIC_MspInit+0x48>)
 8005918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800591a:	4a0c      	ldr	r2, [pc, #48]	; (800594c <HAL_CORDIC_MspInit+0x48>)
 800591c:	f043 0308 	orr.w	r3, r3, #8
 8005920:	6493      	str	r3, [r2, #72]	; 0x48
 8005922:	4b0a      	ldr	r3, [pc, #40]	; (800594c <HAL_CORDIC_MspInit+0x48>)
 8005924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	68fb      	ldr	r3, [r7, #12]
    /* CORDIC interrupt Init */
    HAL_NVIC_SetPriority(CORDIC_IRQn, 0, 0);
 800592e:	2200      	movs	r2, #0
 8005930:	2100      	movs	r1, #0
 8005932:	2064      	movs	r0, #100	; 0x64
 8005934:	f002 fad7 	bl	8007ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CORDIC_IRQn);
 8005938:	2064      	movs	r0, #100	; 0x64
 800593a:	f002 faee 	bl	8007f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 800593e:	bf00      	nop
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	40020c00 	.word	0x40020c00
 800594c:	40021000 	.word	0x40021000

08005950 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b08a      	sub	sp, #40	; 0x28
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005958:	f107 0314 	add.w	r3, r7, #20
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	605a      	str	r2, [r3, #4]
 8005962:	609a      	str	r2, [r3, #8]
 8005964:	60da      	str	r2, [r3, #12]
 8005966:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a26      	ldr	r2, [pc, #152]	; (8005a08 <HAL_FDCAN_MspInit+0xb8>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d146      	bne.n	8005a00 <HAL_FDCAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8005972:	4b26      	ldr	r3, [pc, #152]	; (8005a0c <HAL_FDCAN_MspInit+0xbc>)
 8005974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005976:	4a25      	ldr	r2, [pc, #148]	; (8005a0c <HAL_FDCAN_MspInit+0xbc>)
 8005978:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800597c:	6593      	str	r3, [r2, #88]	; 0x58
 800597e:	4b23      	ldr	r3, [pc, #140]	; (8005a0c <HAL_FDCAN_MspInit+0xbc>)
 8005980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005986:	613b      	str	r3, [r7, #16]
 8005988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800598a:	4b20      	ldr	r3, [pc, #128]	; (8005a0c <HAL_FDCAN_MspInit+0xbc>)
 800598c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800598e:	4a1f      	ldr	r2, [pc, #124]	; (8005a0c <HAL_FDCAN_MspInit+0xbc>)
 8005990:	f043 0301 	orr.w	r3, r3, #1
 8005994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005996:	4b1d      	ldr	r3, [pc, #116]	; (8005a0c <HAL_FDCAN_MspInit+0xbc>)
 8005998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059a2:	4b1a      	ldr	r3, [pc, #104]	; (8005a0c <HAL_FDCAN_MspInit+0xbc>)
 80059a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059a6:	4a19      	ldr	r2, [pc, #100]	; (8005a0c <HAL_FDCAN_MspInit+0xbc>)
 80059a8:	f043 0302 	orr.w	r3, r3, #2
 80059ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059ae:	4b17      	ldr	r3, [pc, #92]	; (8005a0c <HAL_FDCAN_MspInit+0xbc>)
 80059b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	60bb      	str	r3, [r7, #8]
 80059b8:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80059ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80059be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059c0:	2302      	movs	r3, #2
 80059c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059c4:	2300      	movs	r3, #0
 80059c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059c8:	2300      	movs	r3, #0
 80059ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80059cc:	2309      	movs	r3, #9
 80059ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059d0:	f107 0314 	add.w	r3, r7, #20
 80059d4:	4619      	mov	r1, r3
 80059d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059da:	f003 fd0b 	bl	80093f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80059de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059e4:	2302      	movs	r3, #2
 80059e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059e8:	2300      	movs	r3, #0
 80059ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059ec:	2300      	movs	r3, #0
 80059ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80059f0:	2309      	movs	r3, #9
 80059f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059f4:	f107 0314 	add.w	r3, r7, #20
 80059f8:	4619      	mov	r1, r3
 80059fa:	4805      	ldr	r0, [pc, #20]	; (8005a10 <HAL_FDCAN_MspInit+0xc0>)
 80059fc:	f003 fcfa 	bl	80093f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8005a00:	bf00      	nop
 8005a02:	3728      	adds	r7, #40	; 0x28
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	40006400 	.word	0x40006400
 8005a0c:	40021000 	.word	0x40021000
 8005a10:	48000400 	.word	0x48000400

08005a14 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b08a      	sub	sp, #40	; 0x28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a1c:	f107 0314 	add.w	r3, r7, #20
 8005a20:	2200      	movs	r2, #0
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	605a      	str	r2, [r3, #4]
 8005a26:	609a      	str	r2, [r3, #8]
 8005a28:	60da      	str	r2, [r3, #12]
 8005a2a:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a2e      	ldr	r2, [pc, #184]	; (8005aec <HAL_OPAMP_MspInit+0xd8>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d119      	bne.n	8005a6a <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a36:	4b2e      	ldr	r3, [pc, #184]	; (8005af0 <HAL_OPAMP_MspInit+0xdc>)
 8005a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a3a:	4a2d      	ldr	r2, [pc, #180]	; (8005af0 <HAL_OPAMP_MspInit+0xdc>)
 8005a3c:	f043 0301 	orr.w	r3, r3, #1
 8005a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a42:	4b2b      	ldr	r3, [pc, #172]	; (8005af0 <HAL_OPAMP_MspInit+0xdc>)
 8005a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	613b      	str	r3, [r7, #16]
 8005a4c:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8005a4e:	230a      	movs	r3, #10
 8005a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a52:	2303      	movs	r3, #3
 8005a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a5a:	f107 0314 	add.w	r3, r7, #20
 8005a5e:	4619      	mov	r1, r3
 8005a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a64:	f003 fcc6 	bl	80093f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8005a68:	e03b      	b.n	8005ae2 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP2)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a21      	ldr	r2, [pc, #132]	; (8005af4 <HAL_OPAMP_MspInit+0xe0>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d119      	bne.n	8005aa8 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a74:	4b1e      	ldr	r3, [pc, #120]	; (8005af0 <HAL_OPAMP_MspInit+0xdc>)
 8005a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a78:	4a1d      	ldr	r2, [pc, #116]	; (8005af0 <HAL_OPAMP_MspInit+0xdc>)
 8005a7a:	f043 0301 	orr.w	r3, r3, #1
 8005a7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a80:	4b1b      	ldr	r3, [pc, #108]	; (8005af0 <HAL_OPAMP_MspInit+0xdc>)
 8005a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005a8c:	23a0      	movs	r3, #160	; 0xa0
 8005a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a90:	2303      	movs	r3, #3
 8005a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a94:	2300      	movs	r3, #0
 8005a96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a98:	f107 0314 	add.w	r3, r7, #20
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005aa2:	f003 fca7 	bl	80093f4 <HAL_GPIO_Init>
}
 8005aa6:	e01c      	b.n	8005ae2 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP3)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a12      	ldr	r2, [pc, #72]	; (8005af8 <HAL_OPAMP_MspInit+0xe4>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d117      	bne.n	8005ae2 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ab2:	4b0f      	ldr	r3, [pc, #60]	; (8005af0 <HAL_OPAMP_MspInit+0xdc>)
 8005ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab6:	4a0e      	ldr	r2, [pc, #56]	; (8005af0 <HAL_OPAMP_MspInit+0xdc>)
 8005ab8:	f043 0302 	orr.w	r3, r3, #2
 8005abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005abe:	4b0c      	ldr	r3, [pc, #48]	; (8005af0 <HAL_OPAMP_MspInit+0xdc>)
 8005ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	60bb      	str	r3, [r7, #8]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8005aca:	2305      	movs	r3, #5
 8005acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ad6:	f107 0314 	add.w	r3, r7, #20
 8005ada:	4619      	mov	r1, r3
 8005adc:	4807      	ldr	r0, [pc, #28]	; (8005afc <HAL_OPAMP_MspInit+0xe8>)
 8005ade:	f003 fc89 	bl	80093f4 <HAL_GPIO_Init>
}
 8005ae2:	bf00      	nop
 8005ae4:	3728      	adds	r7, #40	; 0x28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	40010300 	.word	0x40010300
 8005af0:	40021000 	.word	0x40021000
 8005af4:	40010304 	.word	0x40010304
 8005af8:	40010308 	.word	0x40010308
 8005afc:	48000400 	.word	0x48000400

08005b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a13      	ldr	r2, [pc, #76]	; (8005b5c <HAL_TIM_Base_MspInit+0x5c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d10c      	bne.n	8005b2c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005b12:	4b13      	ldr	r3, [pc, #76]	; (8005b60 <HAL_TIM_Base_MspInit+0x60>)
 8005b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b16:	4a12      	ldr	r2, [pc, #72]	; (8005b60 <HAL_TIM_Base_MspInit+0x60>)
 8005b18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b1c:	6613      	str	r3, [r2, #96]	; 0x60
 8005b1e:	4b10      	ldr	r3, [pc, #64]	; (8005b60 <HAL_TIM_Base_MspInit+0x60>)
 8005b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8005b2a:	e010      	b.n	8005b4e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a0c      	ldr	r2, [pc, #48]	; (8005b64 <HAL_TIM_Base_MspInit+0x64>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d10b      	bne.n	8005b4e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005b36:	4b0a      	ldr	r3, [pc, #40]	; (8005b60 <HAL_TIM_Base_MspInit+0x60>)
 8005b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3a:	4a09      	ldr	r2, [pc, #36]	; (8005b60 <HAL_TIM_Base_MspInit+0x60>)
 8005b3c:	f043 0310 	orr.w	r3, r3, #16
 8005b40:	6593      	str	r3, [r2, #88]	; 0x58
 8005b42:	4b07      	ldr	r3, [pc, #28]	; (8005b60 <HAL_TIM_Base_MspInit+0x60>)
 8005b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b46:	f003 0310 	and.w	r3, r3, #16
 8005b4a:	60bb      	str	r3, [r7, #8]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
}
 8005b4e:	bf00      	nop
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40012c00 	.word	0x40012c00
 8005b60:	40021000 	.word	0x40021000
 8005b64:	40001000 	.word	0x40001000

08005b68 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08a      	sub	sp, #40	; 0x28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b70:	f107 0314 	add.w	r3, r7, #20
 8005b74:	2200      	movs	r2, #0
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	605a      	str	r2, [r3, #4]
 8005b7a:	609a      	str	r2, [r3, #8]
 8005b7c:	60da      	str	r2, [r3, #12]
 8005b7e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a1b      	ldr	r2, [pc, #108]	; (8005bf4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d12f      	bne.n	8005bea <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005b8a:	4b1b      	ldr	r3, [pc, #108]	; (8005bf8 <HAL_TIM_Encoder_MspInit+0x90>)
 8005b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8e:	4a1a      	ldr	r2, [pc, #104]	; (8005bf8 <HAL_TIM_Encoder_MspInit+0x90>)
 8005b90:	f043 0304 	orr.w	r3, r3, #4
 8005b94:	6593      	str	r3, [r2, #88]	; 0x58
 8005b96:	4b18      	ldr	r3, [pc, #96]	; (8005bf8 <HAL_TIM_Encoder_MspInit+0x90>)
 8005b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b9a:	f003 0304 	and.w	r3, r3, #4
 8005b9e:	613b      	str	r3, [r7, #16]
 8005ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ba2:	4b15      	ldr	r3, [pc, #84]	; (8005bf8 <HAL_TIM_Encoder_MspInit+0x90>)
 8005ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba6:	4a14      	ldr	r2, [pc, #80]	; (8005bf8 <HAL_TIM_Encoder_MspInit+0x90>)
 8005ba8:	f043 0302 	orr.w	r3, r3, #2
 8005bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bae:	4b12      	ldr	r3, [pc, #72]	; (8005bf8 <HAL_TIM_Encoder_MspInit+0x90>)
 8005bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	60fb      	str	r3, [r7, #12]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005bba:	23c0      	movs	r3, #192	; 0xc0
 8005bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005bca:	2302      	movs	r3, #2
 8005bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bce:	f107 0314 	add.w	r3, r7, #20
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4809      	ldr	r0, [pc, #36]	; (8005bfc <HAL_TIM_Encoder_MspInit+0x94>)
 8005bd6:	f003 fc0d 	bl	80093f4 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2100      	movs	r1, #0
 8005bde:	201e      	movs	r0, #30
 8005be0:	f002 f981 	bl	8007ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005be4:	201e      	movs	r0, #30
 8005be6:	f002 f998 	bl	8007f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005bea:	bf00      	nop
 8005bec:	3728      	adds	r7, #40	; 0x28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	40000800 	.word	0x40000800
 8005bf8:	40021000 	.word	0x40021000
 8005bfc:	48000400 	.word	0x48000400

08005c00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08a      	sub	sp, #40	; 0x28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c08:	f107 0314 	add.w	r3, r7, #20
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	605a      	str	r2, [r3, #4]
 8005c12:	609a      	str	r2, [r3, #8]
 8005c14:	60da      	str	r2, [r3, #12]
 8005c16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a2f      	ldr	r2, [pc, #188]	; (8005cdc <HAL_TIM_MspPostInit+0xdc>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d157      	bne.n	8005cd2 <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c22:	4b2f      	ldr	r3, [pc, #188]	; (8005ce0 <HAL_TIM_MspPostInit+0xe0>)
 8005c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c26:	4a2e      	ldr	r2, [pc, #184]	; (8005ce0 <HAL_TIM_MspPostInit+0xe0>)
 8005c28:	f043 0304 	orr.w	r3, r3, #4
 8005c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c2e:	4b2c      	ldr	r3, [pc, #176]	; (8005ce0 <HAL_TIM_MspPostInit+0xe0>)
 8005c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c32:	f003 0304 	and.w	r3, r3, #4
 8005c36:	613b      	str	r3, [r7, #16]
 8005c38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c3a:	4b29      	ldr	r3, [pc, #164]	; (8005ce0 <HAL_TIM_MspPostInit+0xe0>)
 8005c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c3e:	4a28      	ldr	r2, [pc, #160]	; (8005ce0 <HAL_TIM_MspPostInit+0xe0>)
 8005c40:	f043 0302 	orr.w	r3, r3, #2
 8005c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c46:	4b26      	ldr	r3, [pc, #152]	; (8005ce0 <HAL_TIM_MspPostInit+0xe0>)
 8005c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c52:	4b23      	ldr	r3, [pc, #140]	; (8005ce0 <HAL_TIM_MspPostInit+0xe0>)
 8005c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c56:	4a22      	ldr	r2, [pc, #136]	; (8005ce0 <HAL_TIM_MspPostInit+0xe0>)
 8005c58:	f043 0301 	orr.w	r3, r3, #1
 8005c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c5e:	4b20      	ldr	r3, [pc, #128]	; (8005ce0 <HAL_TIM_MspPostInit+0xe0>)
 8005c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	60bb      	str	r3, [r7, #8]
 8005c68:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005c6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c70:	2302      	movs	r3, #2
 8005c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c74:	2300      	movs	r3, #0
 8005c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8005c7c:	2304      	movs	r3, #4
 8005c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c80:	f107 0314 	add.w	r3, r7, #20
 8005c84:	4619      	mov	r1, r3
 8005c86:	4817      	ldr	r0, [pc, #92]	; (8005ce4 <HAL_TIM_MspPostInit+0xe4>)
 8005c88:	f003 fbb4 	bl	80093f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005c8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c92:	2302      	movs	r3, #2
 8005c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8005c9e:	2304      	movs	r3, #4
 8005ca0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ca2:	f107 0314 	add.w	r3, r7, #20
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	480f      	ldr	r0, [pc, #60]	; (8005ce8 <HAL_TIM_MspPostInit+0xe8>)
 8005caa:	f003 fba3 	bl	80093f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8005cae:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8005cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005cc0:	2306      	movs	r3, #6
 8005cc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cc4:	f107 0314 	add.w	r3, r7, #20
 8005cc8:	4619      	mov	r1, r3
 8005cca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005cce:	f003 fb91 	bl	80093f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005cd2:	bf00      	nop
 8005cd4:	3728      	adds	r7, #40	; 0x28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	40012c00 	.word	0x40012c00
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	48000800 	.word	0x48000800
 8005ce8:	48000400 	.word	0x48000400

08005cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08a      	sub	sp, #40	; 0x28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cf4:	f107 0314 	add.w	r3, r7, #20
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	605a      	str	r2, [r3, #4]
 8005cfe:	609a      	str	r2, [r3, #8]
 8005d00:	60da      	str	r2, [r3, #12]
 8005d02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a44      	ldr	r2, [pc, #272]	; (8005e1c <HAL_UART_MspInit+0x130>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	f040 8082 	bne.w	8005e14 <HAL_UART_MspInit+0x128>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005d10:	4b43      	ldr	r3, [pc, #268]	; (8005e20 <HAL_UART_MspInit+0x134>)
 8005d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d14:	4a42      	ldr	r2, [pc, #264]	; (8005e20 <HAL_UART_MspInit+0x134>)
 8005d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8005d1c:	4b40      	ldr	r3, [pc, #256]	; (8005e20 <HAL_UART_MspInit+0x134>)
 8005d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d24:	613b      	str	r3, [r7, #16]
 8005d26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d28:	4b3d      	ldr	r3, [pc, #244]	; (8005e20 <HAL_UART_MspInit+0x134>)
 8005d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d2c:	4a3c      	ldr	r2, [pc, #240]	; (8005e20 <HAL_UART_MspInit+0x134>)
 8005d2e:	f043 0302 	orr.w	r3, r3, #2
 8005d32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d34:	4b3a      	ldr	r3, [pc, #232]	; (8005e20 <HAL_UART_MspInit+0x134>)
 8005d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8005d40:	2318      	movs	r3, #24
 8005d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d44:	2302      	movs	r3, #2
 8005d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005d50:	2307      	movs	r3, #7
 8005d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d54:	f107 0314 	add.w	r3, r7, #20
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4832      	ldr	r0, [pc, #200]	; (8005e24 <HAL_UART_MspInit+0x138>)
 8005d5c:	f003 fb4a 	bl	80093f4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8005d60:	4b31      	ldr	r3, [pc, #196]	; (8005e28 <HAL_UART_MspInit+0x13c>)
 8005d62:	4a32      	ldr	r2, [pc, #200]	; (8005e2c <HAL_UART_MspInit+0x140>)
 8005d64:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005d66:	4b30      	ldr	r3, [pc, #192]	; (8005e28 <HAL_UART_MspInit+0x13c>)
 8005d68:	221a      	movs	r2, #26
 8005d6a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d6c:	4b2e      	ldr	r3, [pc, #184]	; (8005e28 <HAL_UART_MspInit+0x13c>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d72:	4b2d      	ldr	r3, [pc, #180]	; (8005e28 <HAL_UART_MspInit+0x13c>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d78:	4b2b      	ldr	r3, [pc, #172]	; (8005e28 <HAL_UART_MspInit+0x13c>)
 8005d7a:	2280      	movs	r2, #128	; 0x80
 8005d7c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d7e:	4b2a      	ldr	r3, [pc, #168]	; (8005e28 <HAL_UART_MspInit+0x13c>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d84:	4b28      	ldr	r3, [pc, #160]	; (8005e28 <HAL_UART_MspInit+0x13c>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005d8a:	4b27      	ldr	r3, [pc, #156]	; (8005e28 <HAL_UART_MspInit+0x13c>)
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005d90:	4b25      	ldr	r3, [pc, #148]	; (8005e28 <HAL_UART_MspInit+0x13c>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005d96:	4824      	ldr	r0, [pc, #144]	; (8005e28 <HAL_UART_MspInit+0x13c>)
 8005d98:	f002 f8de 	bl	8007f58 <HAL_DMA_Init>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 8005da2:	f7fe f9eb 	bl	800417c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a1f      	ldr	r2, [pc, #124]	; (8005e28 <HAL_UART_MspInit+0x13c>)
 8005daa:	679a      	str	r2, [r3, #120]	; 0x78
 8005dac:	4a1e      	ldr	r2, [pc, #120]	; (8005e28 <HAL_UART_MspInit+0x13c>)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8005db2:	4b1f      	ldr	r3, [pc, #124]	; (8005e30 <HAL_UART_MspInit+0x144>)
 8005db4:	4a1f      	ldr	r2, [pc, #124]	; (8005e34 <HAL_UART_MspInit+0x148>)
 8005db6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005db8:	4b1d      	ldr	r3, [pc, #116]	; (8005e30 <HAL_UART_MspInit+0x144>)
 8005dba:	221b      	movs	r2, #27
 8005dbc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005dbe:	4b1c      	ldr	r3, [pc, #112]	; (8005e30 <HAL_UART_MspInit+0x144>)
 8005dc0:	2210      	movs	r2, #16
 8005dc2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005dc4:	4b1a      	ldr	r3, [pc, #104]	; (8005e30 <HAL_UART_MspInit+0x144>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005dca:	4b19      	ldr	r3, [pc, #100]	; (8005e30 <HAL_UART_MspInit+0x144>)
 8005dcc:	2280      	movs	r2, #128	; 0x80
 8005dce:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005dd0:	4b17      	ldr	r3, [pc, #92]	; (8005e30 <HAL_UART_MspInit+0x144>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005dd6:	4b16      	ldr	r3, [pc, #88]	; (8005e30 <HAL_UART_MspInit+0x144>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005ddc:	4b14      	ldr	r3, [pc, #80]	; (8005e30 <HAL_UART_MspInit+0x144>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005de2:	4b13      	ldr	r3, [pc, #76]	; (8005e30 <HAL_UART_MspInit+0x144>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005de8:	4811      	ldr	r0, [pc, #68]	; (8005e30 <HAL_UART_MspInit+0x144>)
 8005dea:	f002 f8b5 	bl	8007f58 <HAL_DMA_Init>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8005df4:	f7fe f9c2 	bl	800417c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a0d      	ldr	r2, [pc, #52]	; (8005e30 <HAL_UART_MspInit+0x144>)
 8005dfc:	675a      	str	r2, [r3, #116]	; 0x74
 8005dfe:	4a0c      	ldr	r2, [pc, #48]	; (8005e30 <HAL_UART_MspInit+0x144>)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005e04:	2200      	movs	r2, #0
 8005e06:	2100      	movs	r1, #0
 8005e08:	2026      	movs	r0, #38	; 0x26
 8005e0a:	f002 f86c 	bl	8007ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005e0e:	2026      	movs	r0, #38	; 0x26
 8005e10:	f002 f883 	bl	8007f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005e14:	bf00      	nop
 8005e16:	3728      	adds	r7, #40	; 0x28
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	40004400 	.word	0x40004400
 8005e20:	40021000 	.word	0x40021000
 8005e24:	48000400 	.word	0x48000400
 8005e28:	200002cc 	.word	0x200002cc
 8005e2c:	40020008 	.word	0x40020008
 8005e30:	20000504 	.word	0x20000504
 8005e34:	4002001c 	.word	0x4002001c

08005e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005e3c:	e7fe      	b.n	8005e3c <NMI_Handler+0x4>

08005e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e42:	e7fe      	b.n	8005e42 <HardFault_Handler+0x4>

08005e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e48:	e7fe      	b.n	8005e48 <MemManage_Handler+0x4>

08005e4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e4e:	e7fe      	b.n	8005e4e <BusFault_Handler+0x4>

08005e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e54:	e7fe      	b.n	8005e54 <UsageFault_Handler+0x4>

08005e56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005e56:	b480      	push	{r7}
 8005e58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005e5a:	bf00      	nop
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e64:	b480      	push	{r7}
 8005e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e68:	bf00      	nop
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005e72:	b480      	push	{r7}
 8005e74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005e76:	bf00      	nop
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e84:	f000 f8e8 	bl	8006058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e88:	bf00      	nop
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005e90:	4802      	ldr	r0, [pc, #8]	; (8005e9c <DMA1_Channel1_IRQHandler+0x10>)
 8005e92:	f002 f9eb 	bl	800826c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005e96:	bf00      	nop
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	200002cc 	.word	0x200002cc

08005ea0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005ea4:	4802      	ldr	r0, [pc, #8]	; (8005eb0 <DMA1_Channel2_IRQHandler+0x10>)
 8005ea6:	f002 f9e1 	bl	800826c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005eaa:	bf00      	nop
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20000504 	.word	0x20000504

08005eb4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005eb8:	4802      	ldr	r0, [pc, #8]	; (8005ec4 <DMA1_Channel3_IRQHandler+0x10>)
 8005eba:	f002 f9d7 	bl	800826c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005ebe:	bf00      	nop
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20002e0c 	.word	0x20002e0c

08005ec8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005ecc:	4802      	ldr	r0, [pc, #8]	; (8005ed8 <DMA1_Channel4_IRQHandler+0x10>)
 8005ece:	f002 f9cd 	bl	800826c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005ed2:	bf00      	nop
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	2000301c 	.word	0x2000301c

08005edc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005ee0:	4803      	ldr	r0, [pc, #12]	; (8005ef0 <ADC1_2_IRQHandler+0x14>)
 8005ee2:	f000 fd75 	bl	80069d0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8005ee6:	4803      	ldr	r0, [pc, #12]	; (8005ef4 <ADC1_2_IRQHandler+0x18>)
 8005ee8:	f000 fd72 	bl	80069d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005eec:	bf00      	nop
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	20000498 	.word	0x20000498
 8005ef4:	200003b4 	.word	0x200003b4

08005ef8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005efc:	4802      	ldr	r0, [pc, #8]	; (8005f08 <TIM4_IRQHandler+0x10>)
 8005efe:	f005 f83d 	bl	800af7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005f02:	bf00      	nop
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20000368 	.word	0x20000368

08005f0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005f10:	4802      	ldr	r0, [pc, #8]	; (8005f1c <USART2_IRQHandler+0x10>)
 8005f12:	f006 fbc3 	bl	800c69c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005f16:	bf00      	nop
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20002f90 	.word	0x20002f90

08005f20 <CORDIC_IRQHandler>:

/**
  * @brief This function handles CORDIC interrupt.
  */
void CORDIC_IRQHandler(void)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CORDIC_IRQn 0 */

  /* USER CODE END CORDIC_IRQn 0 */
  HAL_CORDIC_IRQHandler(&hcordic);
 8005f24:	4802      	ldr	r0, [pc, #8]	; (8005f30 <CORDIC_IRQHandler+0x10>)
 8005f26:	f001 fe52 	bl	8007bce <HAL_CORDIC_IRQHandler>
  /* USER CODE BEGIN CORDIC_IRQn 1 */

  /* USER CODE END CORDIC_IRQn 1 */
}
 8005f2a:	bf00      	nop
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	20002e6c 	.word	0x20002e6c

08005f34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005f34:	b480      	push	{r7}
 8005f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005f38:	4b08      	ldr	r3, [pc, #32]	; (8005f5c <SystemInit+0x28>)
 8005f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f3e:	4a07      	ldr	r2, [pc, #28]	; (8005f5c <SystemInit+0x28>)
 8005f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005f48:	4b04      	ldr	r3, [pc, #16]	; (8005f5c <SystemInit+0x28>)
 8005f4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005f4e:	609a      	str	r2, [r3, #8]
#endif
}
 8005f50:	bf00      	nop
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	e000ed00 	.word	0xe000ed00

08005f60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005f60:	480d      	ldr	r0, [pc, #52]	; (8005f98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005f62:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f64:	480d      	ldr	r0, [pc, #52]	; (8005f9c <LoopForever+0x6>)
  ldr r1, =_edata
 8005f66:	490e      	ldr	r1, [pc, #56]	; (8005fa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005f68:	4a0e      	ldr	r2, [pc, #56]	; (8005fa4 <LoopForever+0xe>)
  movs r3, #0
 8005f6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005f6c:	e002      	b.n	8005f74 <LoopCopyDataInit>

08005f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f72:	3304      	adds	r3, #4

08005f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f78:	d3f9      	bcc.n	8005f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f7a:	4a0b      	ldr	r2, [pc, #44]	; (8005fa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005f7c:	4c0b      	ldr	r4, [pc, #44]	; (8005fac <LoopForever+0x16>)
  movs r3, #0
 8005f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f80:	e001      	b.n	8005f86 <LoopFillZerobss>

08005f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f84:	3204      	adds	r2, #4

08005f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f88:	d3fb      	bcc.n	8005f82 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005f8a:	f7ff ffd3 	bl	8005f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005f8e:	f007 fb9d 	bl	800d6cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005f92:	f7fc fa25 	bl	80023e0 <main>

08005f96 <LoopForever>:

LoopForever:
    b LoopForever
 8005f96:	e7fe      	b.n	8005f96 <LoopForever>
  ldr   r0, =_estack
 8005f98:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fa0:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8005fa4:	0800e794 	.word	0x0800e794
  ldr r2, =_sbss
 8005fa8:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8005fac:	20003918 	.word	0x20003918

08005fb0 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005fb0:	e7fe      	b.n	8005fb0 <COMP1_2_3_IRQHandler>

08005fb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b082      	sub	sp, #8
 8005fb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fbc:	2003      	movs	r0, #3
 8005fbe:	f001 ff87 	bl	8007ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005fc2:	2000      	movs	r0, #0
 8005fc4:	f000 f80e 	bl	8005fe4 <HAL_InitTick>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	71fb      	strb	r3, [r7, #7]
 8005fd2:	e001      	b.n	8005fd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005fd4:	f7ff fb84 	bl	80056e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005fd8:	79fb      	ldrb	r3, [r7, #7]

}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
	...

08005fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005ff0:	4b16      	ldr	r3, [pc, #88]	; (800604c <HAL_InitTick+0x68>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d022      	beq.n	800603e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005ff8:	4b15      	ldr	r3, [pc, #84]	; (8006050 <HAL_InitTick+0x6c>)
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	4b13      	ldr	r3, [pc, #76]	; (800604c <HAL_InitTick+0x68>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006004:	fbb1 f3f3 	udiv	r3, r1, r3
 8006008:	fbb2 f3f3 	udiv	r3, r2, r3
 800600c:	4618      	mov	r0, r3
 800600e:	f001 ff96 	bl	8007f3e <HAL_SYSTICK_Config>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10f      	bne.n	8006038 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b0f      	cmp	r3, #15
 800601c:	d809      	bhi.n	8006032 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800601e:	2200      	movs	r2, #0
 8006020:	6879      	ldr	r1, [r7, #4]
 8006022:	f04f 30ff 	mov.w	r0, #4294967295
 8006026:	f001 ff5e 	bl	8007ee6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800602a:	4a0a      	ldr	r2, [pc, #40]	; (8006054 <HAL_InitTick+0x70>)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	e007      	b.n	8006042 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	73fb      	strb	r3, [r7, #15]
 8006036:	e004      	b.n	8006042 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	73fb      	strb	r3, [r7, #15]
 800603c:	e001      	b.n	8006042 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006042:	7bfb      	ldrb	r3, [r7, #15]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	20000020 	.word	0x20000020
 8006050:	20000018 	.word	0x20000018
 8006054:	2000001c 	.word	0x2000001c

08006058 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006058:	b480      	push	{r7}
 800605a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800605c:	4b05      	ldr	r3, [pc, #20]	; (8006074 <HAL_IncTick+0x1c>)
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	4b05      	ldr	r3, [pc, #20]	; (8006078 <HAL_IncTick+0x20>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4413      	add	r3, r2
 8006066:	4a03      	ldr	r2, [pc, #12]	; (8006074 <HAL_IncTick+0x1c>)
 8006068:	6013      	str	r3, [r2, #0]
}
 800606a:	bf00      	nop
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	20003914 	.word	0x20003914
 8006078:	20000020 	.word	0x20000020

0800607c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800607c:	b480      	push	{r7}
 800607e:	af00      	add	r7, sp, #0
  return uwTick;
 8006080:	4b03      	ldr	r3, [pc, #12]	; (8006090 <HAL_GetTick+0x14>)
 8006082:	681b      	ldr	r3, [r3, #0]
}
 8006084:	4618      	mov	r0, r3
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	20003914 	.word	0x20003914

08006094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800609c:	f7ff ffee 	bl	800607c <HAL_GetTick>
 80060a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ac:	d004      	beq.n	80060b8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80060ae:	4b09      	ldr	r3, [pc, #36]	; (80060d4 <HAL_Delay+0x40>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	4413      	add	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80060b8:	bf00      	nop
 80060ba:	f7ff ffdf 	bl	800607c <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d8f7      	bhi.n	80060ba <HAL_Delay+0x26>
  {
  }
}
 80060ca:	bf00      	nop
 80060cc:	bf00      	nop
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	20000020 	.word	0x20000020

080060d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	431a      	orrs	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	609a      	str	r2, [r3, #8]
}
 80060f2:	bf00      	nop
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80060fe:	b480      	push	{r7}
 8006100:	b083      	sub	sp, #12
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	431a      	orrs	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	609a      	str	r2, [r3, #8]
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006134:	4618      	mov	r0, r3
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3360      	adds	r3, #96	; 0x60
 8006152:	461a      	mov	r2, r3
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	4b08      	ldr	r3, [pc, #32]	; (8006184 <LL_ADC_SetOffset+0x44>)
 8006162:	4013      	ands	r3, r2
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	4313      	orrs	r3, r2
 8006170:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006178:	bf00      	nop
 800617a:	371c      	adds	r7, #28
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	03fff000 	.word	0x03fff000

08006188 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	3360      	adds	r3, #96	; 0x60
 8006196:	461a      	mov	r2, r3
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	3360      	adds	r3, #96	; 0x60
 80061c4:	461a      	mov	r2, r3
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	431a      	orrs	r2, r3
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80061de:	bf00      	nop
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b087      	sub	sp, #28
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3360      	adds	r3, #96	; 0x60
 80061fa:	461a      	mov	r2, r3
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	431a      	orrs	r2, r3
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006214:	bf00      	nop
 8006216:	371c      	adds	r7, #28
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	3360      	adds	r3, #96	; 0x60
 8006230:	461a      	mov	r2, r3
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	431a      	orrs	r2, r3
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800624a:	bf00      	nop
 800624c:	371c      	adds	r7, #28
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006256:	b480      	push	{r7}
 8006258:	b083      	sub	sp, #12
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	431a      	orrs	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	615a      	str	r2, [r3, #20]
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006290:	2301      	movs	r3, #1
 8006292:	e000      	b.n	8006296 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b087      	sub	sp, #28
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	3330      	adds	r3, #48	; 0x30
 80062b2:	461a      	mov	r2, r3
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	0a1b      	lsrs	r3, r3, #8
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	f003 030c 	and.w	r3, r3, #12
 80062be:	4413      	add	r3, r2
 80062c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	f003 031f 	and.w	r3, r3, #31
 80062cc:	211f      	movs	r1, #31
 80062ce:	fa01 f303 	lsl.w	r3, r1, r3
 80062d2:	43db      	mvns	r3, r3
 80062d4:	401a      	ands	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	0e9b      	lsrs	r3, r3, #26
 80062da:	f003 011f 	and.w	r1, r3, #31
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f003 031f 	and.w	r3, r3, #31
 80062e4:	fa01 f303 	lsl.w	r3, r1, r3
 80062e8:	431a      	orrs	r2, r3
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80062ee:	bf00      	nop
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006306:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800630e:	2301      	movs	r3, #1
 8006310:	e000      	b.n	8006314 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	3314      	adds	r3, #20
 8006330:	461a      	mov	r2, r3
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	0e5b      	lsrs	r3, r3, #25
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	4413      	add	r3, r2
 800633e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	0d1b      	lsrs	r3, r3, #20
 8006348:	f003 031f 	and.w	r3, r3, #31
 800634c:	2107      	movs	r1, #7
 800634e:	fa01 f303 	lsl.w	r3, r1, r3
 8006352:	43db      	mvns	r3, r3
 8006354:	401a      	ands	r2, r3
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	0d1b      	lsrs	r3, r3, #20
 800635a:	f003 031f 	and.w	r3, r3, #31
 800635e:	6879      	ldr	r1, [r7, #4]
 8006360:	fa01 f303 	lsl.w	r3, r1, r3
 8006364:	431a      	orrs	r2, r3
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800636a:	bf00      	nop
 800636c:	371c      	adds	r7, #28
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
	...

08006378 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006390:	43db      	mvns	r3, r3
 8006392:	401a      	ands	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f003 0318 	and.w	r3, r3, #24
 800639a:	4908      	ldr	r1, [pc, #32]	; (80063bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800639c:	40d9      	lsrs	r1, r3
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	400b      	ands	r3, r1
 80063a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063a6:	431a      	orrs	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80063ae:	bf00      	nop
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	0007ffff 	.word	0x0007ffff

080063c0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f003 031f 	and.w	r3, r3, #31
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006408:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	6093      	str	r3, [r2, #8]
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800642c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006430:	d101      	bne.n	8006436 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006432:	2301      	movs	r3, #1
 8006434:	e000      	b.n	8006438 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006454:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006458:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800647c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006480:	d101      	bne.n	8006486 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006482:	2301      	movs	r3, #1
 8006484:	e000      	b.n	8006488 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80064a8:	f043 0201 	orr.w	r2, r3, #1
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d101      	bne.n	80064d4 <LL_ADC_IsEnabled+0x18>
 80064d0:	2301      	movs	r3, #1
 80064d2:	e000      	b.n	80064d6 <LL_ADC_IsEnabled+0x1a>
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b083      	sub	sp, #12
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80064f6:	f043 0204 	orr.w	r2, r3, #4
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80064fe:	bf00      	nop
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800650a:	b480      	push	{r7}
 800650c:	b083      	sub	sp, #12
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f003 0304 	and.w	r3, r3, #4
 800651a:	2b04      	cmp	r3, #4
 800651c:	d101      	bne.n	8006522 <LL_ADC_REG_IsConversionOngoing+0x18>
 800651e:	2301      	movs	r3, #1
 8006520:	e000      	b.n	8006524 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f003 0308 	and.w	r3, r3, #8
 8006540:	2b08      	cmp	r3, #8
 8006542:	d101      	bne.n	8006548 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006544:	2301      	movs	r3, #1
 8006546:	e000      	b.n	800654a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
	...

08006558 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006558:	b590      	push	{r4, r7, lr}
 800655a:	b089      	sub	sp, #36	; 0x24
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006564:	2300      	movs	r3, #0
 8006566:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e16b      	b.n	800684a <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800657c:	2b00      	cmp	r3, #0
 800657e:	d109      	bne.n	8006594 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f7ff f8d1 	bl	8005728 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4618      	mov	r0, r3
 800659a:	f7ff ff3f 	bl	800641c <LL_ADC_IsDeepPowerDownEnabled>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d004      	beq.n	80065ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7ff ff25 	bl	80063f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7ff ff5a 	bl	800646c <LL_ADC_IsInternalRegulatorEnabled>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d113      	bne.n	80065e6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7ff ff3e 	bl	8006444 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80065c8:	4ba2      	ldr	r3, [pc, #648]	; (8006854 <HAL_ADC_Init+0x2fc>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	099b      	lsrs	r3, r3, #6
 80065ce:	4aa2      	ldr	r2, [pc, #648]	; (8006858 <HAL_ADC_Init+0x300>)
 80065d0:	fba2 2303 	umull	r2, r3, r2, r3
 80065d4:	099b      	lsrs	r3, r3, #6
 80065d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80065d8:	e002      	b.n	80065e0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	3b01      	subs	r3, #1
 80065de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1f9      	bne.n	80065da <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7ff ff3e 	bl	800646c <LL_ADC_IsInternalRegulatorEnabled>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10d      	bne.n	8006612 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fa:	f043 0210 	orr.w	r2, r3, #16
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006606:	f043 0201 	orr.w	r2, r3, #1
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4618      	mov	r0, r3
 8006618:	f7ff ff77 	bl	800650a <LL_ADC_REG_IsConversionOngoing>
 800661c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006622:	f003 0310 	and.w	r3, r3, #16
 8006626:	2b00      	cmp	r3, #0
 8006628:	f040 8106 	bne.w	8006838 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	2b00      	cmp	r3, #0
 8006630:	f040 8102 	bne.w	8006838 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006638:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800663c:	f043 0202 	orr.w	r2, r3, #2
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4618      	mov	r0, r3
 800664a:	f7ff ff37 	bl	80064bc <LL_ADC_IsEnabled>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d111      	bne.n	8006678 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006654:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006658:	f7ff ff30 	bl	80064bc <LL_ADC_IsEnabled>
 800665c:	4604      	mov	r4, r0
 800665e:	487f      	ldr	r0, [pc, #508]	; (800685c <HAL_ADC_Init+0x304>)
 8006660:	f7ff ff2c 	bl	80064bc <LL_ADC_IsEnabled>
 8006664:	4603      	mov	r3, r0
 8006666:	4323      	orrs	r3, r4
 8006668:	2b00      	cmp	r3, #0
 800666a:	d105      	bne.n	8006678 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	4619      	mov	r1, r3
 8006672:	487b      	ldr	r0, [pc, #492]	; (8006860 <HAL_ADC_Init+0x308>)
 8006674:	f7ff fd30 	bl	80060d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	7f5b      	ldrb	r3, [r3, #29]
 800667c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006682:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006688:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800668e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006696:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006698:	4313      	orrs	r3, r2
 800669a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d106      	bne.n	80066b4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066aa:	3b01      	subs	r3, #1
 80066ac:	045b      	lsls	r3, r3, #17
 80066ae:	69ba      	ldr	r2, [r7, #24]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d009      	beq.n	80066d0 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	4b63      	ldr	r3, [pc, #396]	; (8006864 <HAL_ADC_Init+0x30c>)
 80066d8:	4013      	ands	r3, r2
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	6812      	ldr	r2, [r2, #0]
 80066de:	69b9      	ldr	r1, [r7, #24]
 80066e0:	430b      	orrs	r3, r1
 80066e2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4618      	mov	r0, r3
 8006700:	f7ff ff03 	bl	800650a <LL_ADC_REG_IsConversionOngoing>
 8006704:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4618      	mov	r0, r3
 800670c:	f7ff ff10 	bl	8006530 <LL_ADC_INJ_IsConversionOngoing>
 8006710:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d16d      	bne.n	80067f4 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d16a      	bne.n	80067f4 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006722:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800672a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800672c:	4313      	orrs	r3, r2
 800672e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800673a:	f023 0302 	bic.w	r3, r3, #2
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	6812      	ldr	r2, [r2, #0]
 8006742:	69b9      	ldr	r1, [r7, #24]
 8006744:	430b      	orrs	r3, r1
 8006746:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d017      	beq.n	8006780 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	691a      	ldr	r2, [r3, #16]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800675e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006768:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800676c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6911      	ldr	r1, [r2, #16]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	6812      	ldr	r2, [r2, #0]
 8006778:	430b      	orrs	r3, r1
 800677a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800677e:	e013      	b.n	80067a8 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	691a      	ldr	r2, [r3, #16]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800678e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	6812      	ldr	r2, [r2, #0]
 800679c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80067a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80067a4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d118      	bne.n	80067e4 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80067bc:	f023 0304 	bic.w	r3, r3, #4
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80067c8:	4311      	orrs	r1, r2
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80067ce:	4311      	orrs	r1, r2
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80067d4:	430a      	orrs	r2, r1
 80067d6:	431a      	orrs	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f042 0201 	orr.w	r2, r2, #1
 80067e0:	611a      	str	r2, [r3, #16]
 80067e2:	e007      	b.n	80067f4 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	691a      	ldr	r2, [r3, #16]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0201 	bic.w	r2, r2, #1
 80067f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d10c      	bne.n	8006816 <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	f023 010f 	bic.w	r1, r3, #15
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	1e5a      	subs	r2, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	430a      	orrs	r2, r1
 8006812:	631a      	str	r2, [r3, #48]	; 0x30
 8006814:	e007      	b.n	8006826 <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 020f 	bic.w	r2, r2, #15
 8006824:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800682a:	f023 0303 	bic.w	r3, r3, #3
 800682e:	f043 0201 	orr.w	r2, r3, #1
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	65da      	str	r2, [r3, #92]	; 0x5c
 8006836:	e007      	b.n	8006848 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683c:	f043 0210 	orr.w	r2, r3, #16
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006848:	7ffb      	ldrb	r3, [r7, #31]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3724      	adds	r7, #36	; 0x24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd90      	pop	{r4, r7, pc}
 8006852:	bf00      	nop
 8006854:	20000018 	.word	0x20000018
 8006858:	053e2d63 	.word	0x053e2d63
 800685c:	50000100 	.word	0x50000100
 8006860:	50000300 	.word	0x50000300
 8006864:	fff04007 	.word	0xfff04007

08006868 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006874:	4851      	ldr	r0, [pc, #324]	; (80069bc <HAL_ADC_Start_DMA+0x154>)
 8006876:	f7ff fda3 	bl	80063c0 <LL_ADC_GetMultimode>
 800687a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4618      	mov	r0, r3
 8006882:	f7ff fe42 	bl	800650a <LL_ADC_REG_IsConversionOngoing>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	f040 808f 	bne.w	80069ac <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006894:	2b01      	cmp	r3, #1
 8006896:	d101      	bne.n	800689c <HAL_ADC_Start_DMA+0x34>
 8006898:	2302      	movs	r3, #2
 800689a:	e08a      	b.n	80069b2 <HAL_ADC_Start_DMA+0x14a>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d005      	beq.n	80068b6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	2b05      	cmp	r3, #5
 80068ae:	d002      	beq.n	80068b6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	2b09      	cmp	r3, #9
 80068b4:	d173      	bne.n	800699e <HAL_ADC_Start_DMA+0x136>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 feb2 	bl	8007620 <ADC_Enable>
 80068bc:	4603      	mov	r3, r0
 80068be:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d166      	bne.n	8006994 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80068ce:	f023 0301 	bic.w	r3, r3, #1
 80068d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a38      	ldr	r2, [pc, #224]	; (80069c0 <HAL_ADC_Start_DMA+0x158>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d002      	beq.n	80068ea <HAL_ADC_Start_DMA+0x82>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	e001      	b.n	80068ee <HAL_ADC_Start_DMA+0x86>
 80068ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	6812      	ldr	r2, [r2, #0]
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d002      	beq.n	80068fc <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d105      	bne.n	8006908 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006900:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800690c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d006      	beq.n	8006922 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006918:	f023 0206 	bic.w	r2, r3, #6
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	661a      	str	r2, [r3, #96]	; 0x60
 8006920:	e002      	b.n	8006928 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800692c:	4a25      	ldr	r2, [pc, #148]	; (80069c4 <HAL_ADC_Start_DMA+0x15c>)
 800692e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006934:	4a24      	ldr	r2, [pc, #144]	; (80069c8 <HAL_ADC_Start_DMA+0x160>)
 8006936:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693c:	4a23      	ldr	r2, [pc, #140]	; (80069cc <HAL_ADC_Start_DMA+0x164>)
 800693e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	221c      	movs	r2, #28
 8006946:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0210 	orr.w	r2, r2, #16
 800695e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f042 0201 	orr.w	r2, r2, #1
 800696e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3340      	adds	r3, #64	; 0x40
 800697a:	4619      	mov	r1, r3
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f001 fb92 	bl	80080a8 <HAL_DMA_Start_IT>
 8006984:	4603      	mov	r3, r0
 8006986:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4618      	mov	r0, r3
 800698e:	f7ff fda8 	bl	80064e2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006992:	e00d      	b.n	80069b0 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800699c:	e008      	b.n	80069b0 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80069aa:	e001      	b.n	80069b0 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80069ac:	2302      	movs	r3, #2
 80069ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80069b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3718      	adds	r7, #24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	50000300 	.word	0x50000300
 80069c0:	50000100 	.word	0x50000100
 80069c4:	080076d5 	.word	0x080076d5
 80069c8:	080077ad 	.word	0x080077ad
 80069cc:	080077c9 	.word	0x080077c9

080069d0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b08a      	sub	sp, #40	; 0x28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80069d8:	2300      	movs	r3, #0
 80069da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80069ec:	4883      	ldr	r0, [pc, #524]	; (8006bfc <HAL_ADC_IRQHandler+0x22c>)
 80069ee:	f7ff fce7 	bl	80063c0 <LL_ADC_GetMultimode>
 80069f2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d017      	beq.n	8006a2e <HAL_ADC_IRQHandler+0x5e>
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d012      	beq.n	8006a2e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a0c:	f003 0310 	and.w	r3, r3, #16
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d105      	bne.n	8006a20 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a18:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 ff39 	bl	8007898 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	f003 0304 	and.w	r3, r3, #4
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d004      	beq.n	8006a42 <HAL_ADC_IRQHandler+0x72>
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	f003 0304 	and.w	r3, r3, #4
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10a      	bne.n	8006a58 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 8085 	beq.w	8006b58 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	f003 0308 	and.w	r3, r3, #8
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d07f      	beq.n	8006b58 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a5c:	f003 0310 	and.w	r3, r3, #16
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d105      	bne.n	8006a70 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7ff fc01 	bl	800627c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d064      	beq.n	8006b4a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a5e      	ldr	r2, [pc, #376]	; (8006c00 <HAL_ADC_IRQHandler+0x230>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d002      	beq.n	8006a90 <HAL_ADC_IRQHandler+0xc0>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	e001      	b.n	8006a94 <HAL_ADC_IRQHandler+0xc4>
 8006a90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	6812      	ldr	r2, [r2, #0]
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d008      	beq.n	8006aae <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d005      	beq.n	8006aae <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	2b05      	cmp	r3, #5
 8006aa6:	d002      	beq.n	8006aae <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	2b09      	cmp	r3, #9
 8006aac:	d104      	bne.n	8006ab8 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	623b      	str	r3, [r7, #32]
 8006ab6:	e00d      	b.n	8006ad4 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a50      	ldr	r2, [pc, #320]	; (8006c00 <HAL_ADC_IRQHandler+0x230>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d002      	beq.n	8006ac8 <HAL_ADC_IRQHandler+0xf8>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	e001      	b.n	8006acc <HAL_ADC_IRQHandler+0xfc>
 8006ac8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006acc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d135      	bne.n	8006b4a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0308 	and.w	r3, r3, #8
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	d12e      	bne.n	8006b4a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7ff fd0a 	bl	800650a <LL_ADC_REG_IsConversionOngoing>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d11a      	bne.n	8006b32 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 020c 	bic.w	r2, r2, #12
 8006b0a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d112      	bne.n	8006b4a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b28:	f043 0201 	orr.w	r2, r3, #1
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b30:	e00b      	b.n	8006b4a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b36:	f043 0210 	orr.w	r2, r3, #16
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b42:	f043 0201 	orr.w	r2, r3, #1
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7fb fbd1 	bl	80022f2 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	220c      	movs	r2, #12
 8006b56:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	f003 0320 	and.w	r3, r3, #32
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d004      	beq.n	8006b6c <HAL_ADC_IRQHandler+0x19c>
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	f003 0320 	and.w	r3, r3, #32
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10b      	bne.n	8006b84 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 809e 	beq.w	8006cb4 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f000 8098 	beq.w	8006cb4 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b88:	f003 0310 	and.w	r3, r3, #16
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d105      	bne.n	8006b9c <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b94:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7ff fbaa 	bl	80062fa <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006ba6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7ff fb65 	bl	800627c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006bb2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a11      	ldr	r2, [pc, #68]	; (8006c00 <HAL_ADC_IRQHandler+0x230>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d002      	beq.n	8006bc4 <HAL_ADC_IRQHandler+0x1f4>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	e001      	b.n	8006bc8 <HAL_ADC_IRQHandler+0x1f8>
 8006bc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6812      	ldr	r2, [r2, #0]
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d008      	beq.n	8006be2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d005      	beq.n	8006be2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2b06      	cmp	r3, #6
 8006bda:	d002      	beq.n	8006be2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	2b07      	cmp	r3, #7
 8006be0:	d104      	bne.n	8006bec <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	623b      	str	r3, [r7, #32]
 8006bea:	e011      	b.n	8006c10 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a03      	ldr	r2, [pc, #12]	; (8006c00 <HAL_ADC_IRQHandler+0x230>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d006      	beq.n	8006c04 <HAL_ADC_IRQHandler+0x234>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	e005      	b.n	8006c08 <HAL_ADC_IRQHandler+0x238>
 8006bfc:	50000300 	.word	0x50000300
 8006c00:	50000100 	.word	0x50000100
 8006c04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006c08:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10c      	bne.n	8006c30 <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d142      	bne.n	8006ca6 <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d03f      	beq.n	8006ca6 <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d13a      	bne.n	8006ca6 <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3a:	2b40      	cmp	r3, #64	; 0x40
 8006c3c:	d133      	bne.n	8006ca6 <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d12e      	bne.n	8006ca6 <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff fc6f 	bl	8006530 <LL_ADC_INJ_IsConversionOngoing>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d11a      	bne.n	8006c8e <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006c66:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c6c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d112      	bne.n	8006ca6 <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c84:	f043 0201 	orr.w	r2, r3, #1
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8006c8c:	e00b      	b.n	8006ca6 <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c92:	f043 0210 	orr.w	r2, r3, #16
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c9e:	f043 0201 	orr.w	r2, r3, #1
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fdce 	bl	8007848 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2260      	movs	r2, #96	; 0x60
 8006cb2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d011      	beq.n	8006ce2 <HAL_ADC_IRQHandler+0x312>
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00c      	beq.n	8006ce2 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ccc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 f89f 	bl	8006e18 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2280      	movs	r2, #128	; 0x80
 8006ce0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d012      	beq.n	8006d12 <HAL_ADC_IRQHandler+0x342>
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00d      	beq.n	8006d12 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cfa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fdb4 	bl	8007870 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d10:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d012      	beq.n	8006d42 <HAL_ADC_IRQHandler+0x372>
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00d      	beq.n	8006d42 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d2a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fda6 	bl	8007884 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d40:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	f003 0310 	and.w	r3, r3, #16
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d036      	beq.n	8006dba <HAL_ADC_IRQHandler+0x3ea>
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	f003 0310 	and.w	r3, r3, #16
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d031      	beq.n	8006dba <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d102      	bne.n	8006d64 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24
 8006d62:	e014      	b.n	8006d8e <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d008      	beq.n	8006d7c <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006d6a:	4825      	ldr	r0, [pc, #148]	; (8006e00 <HAL_ADC_IRQHandler+0x430>)
 8006d6c:	f7ff fb36 	bl	80063dc <LL_ADC_GetMultiDMATransfer>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00b      	beq.n	8006d8e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8006d76:	2301      	movs	r3, #1
 8006d78:	627b      	str	r3, [r7, #36]	; 0x24
 8006d7a:	e008      	b.n	8006d8e <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d10e      	bne.n	8006db2 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da4:	f043 0202 	orr.w	r2, r3, #2
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f83d 	bl	8006e2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2210      	movs	r2, #16
 8006db8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d018      	beq.n	8006df6 <HAL_ADC_IRQHandler+0x426>
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d013      	beq.n	8006df6 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dd2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dde:	f043 0208 	orr.w	r2, r3, #8
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006dee:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fd33 	bl	800785c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006df6:	bf00      	nop
 8006df8:	3728      	adds	r7, #40	; 0x28
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	50000300 	.word	0x50000300

08006e04 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b0b6      	sub	sp, #216	; 0xd8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006e50:	2300      	movs	r3, #0
 8006e52:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d101      	bne.n	8006e62 <HAL_ADC_ConfigChannel+0x22>
 8006e5e:	2302      	movs	r3, #2
 8006e60:	e3c7      	b.n	80075f2 <HAL_ADC_ConfigChannel+0x7b2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7ff fb4b 	bl	800650a <LL_ADC_REG_IsConversionOngoing>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f040 83ac 	bne.w	80075d4 <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6818      	ldr	r0, [r3, #0]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	6859      	ldr	r1, [r3, #4]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	461a      	mov	r2, r3
 8006e8a:	f7ff fa0a 	bl	80062a2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7ff fb39 	bl	800650a <LL_ADC_REG_IsConversionOngoing>
 8006e98:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7ff fb45 	bl	8006530 <LL_ADC_INJ_IsConversionOngoing>
 8006ea6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006eaa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f040 81d9 	bne.w	8007266 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006eb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f040 81d4 	bne.w	8007266 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ec6:	d10f      	bne.n	8006ee8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6818      	ldr	r0, [r3, #0]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	f7ff fa24 	bl	8006320 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff f9b8 	bl	8006256 <LL_ADC_SetSamplingTimeCommonConfig>
 8006ee6:	e00e      	b.n	8006f06 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6818      	ldr	r0, [r3, #0]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	6819      	ldr	r1, [r3, #0]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	f7ff fa13 	bl	8006320 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2100      	movs	r1, #0
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7ff f9a8 	bl	8006256 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	695a      	ldr	r2, [r3, #20]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	08db      	lsrs	r3, r3, #3
 8006f12:	f003 0303 	and.w	r3, r3, #3
 8006f16:	005b      	lsls	r3, r3, #1
 8006f18:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	2b04      	cmp	r3, #4
 8006f26:	d022      	beq.n	8006f6e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6818      	ldr	r0, [r3, #0]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	6919      	ldr	r1, [r3, #16]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f38:	f7ff f902 	bl	8006140 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6818      	ldr	r0, [r3, #0]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	6919      	ldr	r1, [r3, #16]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	461a      	mov	r2, r3
 8006f4a:	f7ff f94e 	bl	80061ea <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6818      	ldr	r0, [r3, #0]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	6919      	ldr	r1, [r3, #16]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	7f1b      	ldrb	r3, [r3, #28]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d102      	bne.n	8006f64 <HAL_ADC_ConfigChannel+0x124>
 8006f5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f62:	e000      	b.n	8006f66 <HAL_ADC_ConfigChannel+0x126>
 8006f64:	2300      	movs	r3, #0
 8006f66:	461a      	mov	r2, r3
 8006f68:	f7ff f95a 	bl	8006220 <LL_ADC_SetOffsetSaturation>
 8006f6c:	e17b      	b.n	8007266 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2100      	movs	r1, #0
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7ff f907 	bl	8006188 <LL_ADC_GetOffsetChannel>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10a      	bne.n	8006f9a <HAL_ADC_ConfigChannel+0x15a>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2100      	movs	r1, #0
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7ff f8fc 	bl	8006188 <LL_ADC_GetOffsetChannel>
 8006f90:	4603      	mov	r3, r0
 8006f92:	0e9b      	lsrs	r3, r3, #26
 8006f94:	f003 021f 	and.w	r2, r3, #31
 8006f98:	e01e      	b.n	8006fd8 <HAL_ADC_ConfigChannel+0x198>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7ff f8f1 	bl	8006188 <LL_ADC_GetOffsetChannel>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006fb0:	fa93 f3a3 	rbit	r3, r3
 8006fb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006fb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006fc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8006fc8:	2320      	movs	r3, #32
 8006fca:	e004      	b.n	8006fd6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8006fcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006fd0:	fab3 f383 	clz	r3, r3
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d105      	bne.n	8006ff0 <HAL_ADC_ConfigChannel+0x1b0>
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	0e9b      	lsrs	r3, r3, #26
 8006fea:	f003 031f 	and.w	r3, r3, #31
 8006fee:	e018      	b.n	8007022 <HAL_ADC_ConfigChannel+0x1e2>
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ff8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ffc:	fa93 f3a3 	rbit	r3, r3
 8007000:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8007004:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007008:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800700c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007010:	2b00      	cmp	r3, #0
 8007012:	d101      	bne.n	8007018 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8007014:	2320      	movs	r3, #32
 8007016:	e004      	b.n	8007022 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8007018:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800701c:	fab3 f383 	clz	r3, r3
 8007020:	b2db      	uxtb	r3, r3
 8007022:	429a      	cmp	r2, r3
 8007024:	d106      	bne.n	8007034 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2200      	movs	r2, #0
 800702c:	2100      	movs	r1, #0
 800702e:	4618      	mov	r0, r3
 8007030:	f7ff f8c0 	bl	80061b4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2101      	movs	r1, #1
 800703a:	4618      	mov	r0, r3
 800703c:	f7ff f8a4 	bl	8006188 <LL_ADC_GetOffsetChannel>
 8007040:	4603      	mov	r3, r0
 8007042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10a      	bne.n	8007060 <HAL_ADC_ConfigChannel+0x220>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2101      	movs	r1, #1
 8007050:	4618      	mov	r0, r3
 8007052:	f7ff f899 	bl	8006188 <LL_ADC_GetOffsetChannel>
 8007056:	4603      	mov	r3, r0
 8007058:	0e9b      	lsrs	r3, r3, #26
 800705a:	f003 021f 	and.w	r2, r3, #31
 800705e:	e01e      	b.n	800709e <HAL_ADC_ConfigChannel+0x25e>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2101      	movs	r1, #1
 8007066:	4618      	mov	r0, r3
 8007068:	f7ff f88e 	bl	8006188 <LL_ADC_GetOffsetChannel>
 800706c:	4603      	mov	r3, r0
 800706e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007072:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007076:	fa93 f3a3 	rbit	r3, r3
 800707a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800707e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007082:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8007086:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800708e:	2320      	movs	r3, #32
 8007090:	e004      	b.n	800709c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8007092:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007096:	fab3 f383 	clz	r3, r3
 800709a:	b2db      	uxtb	r3, r3
 800709c:	461a      	mov	r2, r3
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d105      	bne.n	80070b6 <HAL_ADC_ConfigChannel+0x276>
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	0e9b      	lsrs	r3, r3, #26
 80070b0:	f003 031f 	and.w	r3, r3, #31
 80070b4:	e018      	b.n	80070e8 <HAL_ADC_ConfigChannel+0x2a8>
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070c2:	fa93 f3a3 	rbit	r3, r3
 80070c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80070ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80070d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80070da:	2320      	movs	r3, #32
 80070dc:	e004      	b.n	80070e8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80070de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070e2:	fab3 f383 	clz	r3, r3
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d106      	bne.n	80070fa <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2200      	movs	r2, #0
 80070f2:	2101      	movs	r1, #1
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7ff f85d 	bl	80061b4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2102      	movs	r1, #2
 8007100:	4618      	mov	r0, r3
 8007102:	f7ff f841 	bl	8006188 <LL_ADC_GetOffsetChannel>
 8007106:	4603      	mov	r3, r0
 8007108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10a      	bne.n	8007126 <HAL_ADC_ConfigChannel+0x2e6>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2102      	movs	r1, #2
 8007116:	4618      	mov	r0, r3
 8007118:	f7ff f836 	bl	8006188 <LL_ADC_GetOffsetChannel>
 800711c:	4603      	mov	r3, r0
 800711e:	0e9b      	lsrs	r3, r3, #26
 8007120:	f003 021f 	and.w	r2, r3, #31
 8007124:	e01e      	b.n	8007164 <HAL_ADC_ConfigChannel+0x324>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2102      	movs	r1, #2
 800712c:	4618      	mov	r0, r3
 800712e:	f7ff f82b 	bl	8006188 <LL_ADC_GetOffsetChannel>
 8007132:	4603      	mov	r3, r0
 8007134:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007138:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800713c:	fa93 f3a3 	rbit	r3, r3
 8007140:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8007144:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007148:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800714c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8007154:	2320      	movs	r3, #32
 8007156:	e004      	b.n	8007162 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8007158:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800715c:	fab3 f383 	clz	r3, r3
 8007160:	b2db      	uxtb	r3, r3
 8007162:	461a      	mov	r2, r3
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800716c:	2b00      	cmp	r3, #0
 800716e:	d105      	bne.n	800717c <HAL_ADC_ConfigChannel+0x33c>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	0e9b      	lsrs	r3, r3, #26
 8007176:	f003 031f 	and.w	r3, r3, #31
 800717a:	e016      	b.n	80071aa <HAL_ADC_ConfigChannel+0x36a>
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007184:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007188:	fa93 f3a3 	rbit	r3, r3
 800718c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800718e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007190:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8007194:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800719c:	2320      	movs	r3, #32
 800719e:	e004      	b.n	80071aa <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80071a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071a4:	fab3 f383 	clz	r3, r3
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d106      	bne.n	80071bc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2200      	movs	r2, #0
 80071b4:	2102      	movs	r1, #2
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fe fffc 	bl	80061b4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2103      	movs	r1, #3
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7fe ffe0 	bl	8006188 <LL_ADC_GetOffsetChannel>
 80071c8:	4603      	mov	r3, r0
 80071ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10a      	bne.n	80071e8 <HAL_ADC_ConfigChannel+0x3a8>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2103      	movs	r1, #3
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fe ffd5 	bl	8006188 <LL_ADC_GetOffsetChannel>
 80071de:	4603      	mov	r3, r0
 80071e0:	0e9b      	lsrs	r3, r3, #26
 80071e2:	f003 021f 	and.w	r2, r3, #31
 80071e6:	e017      	b.n	8007218 <HAL_ADC_ConfigChannel+0x3d8>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2103      	movs	r1, #3
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fe ffca 	bl	8006188 <LL_ADC_GetOffsetChannel>
 80071f4:	4603      	mov	r3, r0
 80071f6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071fa:	fa93 f3a3 	rbit	r3, r3
 80071fe:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8007200:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007202:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8007204:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007206:	2b00      	cmp	r3, #0
 8007208:	d101      	bne.n	800720e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800720a:	2320      	movs	r3, #32
 800720c:	e003      	b.n	8007216 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800720e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007210:	fab3 f383 	clz	r3, r3
 8007214:	b2db      	uxtb	r3, r3
 8007216:	461a      	mov	r2, r3
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007220:	2b00      	cmp	r3, #0
 8007222:	d105      	bne.n	8007230 <HAL_ADC_ConfigChannel+0x3f0>
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	0e9b      	lsrs	r3, r3, #26
 800722a:	f003 031f 	and.w	r3, r3, #31
 800722e:	e011      	b.n	8007254 <HAL_ADC_ConfigChannel+0x414>
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007236:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007238:	fa93 f3a3 	rbit	r3, r3
 800723c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800723e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007240:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8007242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8007248:	2320      	movs	r3, #32
 800724a:	e003      	b.n	8007254 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800724c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800724e:	fab3 f383 	clz	r3, r3
 8007252:	b2db      	uxtb	r3, r3
 8007254:	429a      	cmp	r2, r3
 8007256:	d106      	bne.n	8007266 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2200      	movs	r2, #0
 800725e:	2103      	movs	r1, #3
 8007260:	4618      	mov	r0, r3
 8007262:	f7fe ffa7 	bl	80061b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4618      	mov	r0, r3
 800726c:	f7ff f926 	bl	80064bc <LL_ADC_IsEnabled>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	f040 8140 	bne.w	80074f8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6818      	ldr	r0, [r3, #0]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	6819      	ldr	r1, [r3, #0]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	461a      	mov	r2, r3
 8007286:	f7ff f877 	bl	8006378 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	4a8f      	ldr	r2, [pc, #572]	; (80074cc <HAL_ADC_ConfigChannel+0x68c>)
 8007290:	4293      	cmp	r3, r2
 8007292:	f040 8131 	bne.w	80074f8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10b      	bne.n	80072be <HAL_ADC_ConfigChannel+0x47e>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	0e9b      	lsrs	r3, r3, #26
 80072ac:	3301      	adds	r3, #1
 80072ae:	f003 031f 	and.w	r3, r3, #31
 80072b2:	2b09      	cmp	r3, #9
 80072b4:	bf94      	ite	ls
 80072b6:	2301      	movls	r3, #1
 80072b8:	2300      	movhi	r3, #0
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	e019      	b.n	80072f2 <HAL_ADC_ConfigChannel+0x4b2>
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072c6:	fa93 f3a3 	rbit	r3, r3
 80072ca:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80072cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072ce:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80072d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80072d6:	2320      	movs	r3, #32
 80072d8:	e003      	b.n	80072e2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80072da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072dc:	fab3 f383 	clz	r3, r3
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	3301      	adds	r3, #1
 80072e4:	f003 031f 	and.w	r3, r3, #31
 80072e8:	2b09      	cmp	r3, #9
 80072ea:	bf94      	ite	ls
 80072ec:	2301      	movls	r3, #1
 80072ee:	2300      	movhi	r3, #0
 80072f0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d079      	beq.n	80073ea <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d107      	bne.n	8007312 <HAL_ADC_ConfigChannel+0x4d2>
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	0e9b      	lsrs	r3, r3, #26
 8007308:	3301      	adds	r3, #1
 800730a:	069b      	lsls	r3, r3, #26
 800730c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007310:	e015      	b.n	800733e <HAL_ADC_ConfigChannel+0x4fe>
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800731a:	fa93 f3a3 	rbit	r3, r3
 800731e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007322:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8007324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007326:	2b00      	cmp	r3, #0
 8007328:	d101      	bne.n	800732e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800732a:	2320      	movs	r3, #32
 800732c:	e003      	b.n	8007336 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800732e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007330:	fab3 f383 	clz	r3, r3
 8007334:	b2db      	uxtb	r3, r3
 8007336:	3301      	adds	r3, #1
 8007338:	069b      	lsls	r3, r3, #26
 800733a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007346:	2b00      	cmp	r3, #0
 8007348:	d109      	bne.n	800735e <HAL_ADC_ConfigChannel+0x51e>
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	0e9b      	lsrs	r3, r3, #26
 8007350:	3301      	adds	r3, #1
 8007352:	f003 031f 	and.w	r3, r3, #31
 8007356:	2101      	movs	r1, #1
 8007358:	fa01 f303 	lsl.w	r3, r1, r3
 800735c:	e017      	b.n	800738e <HAL_ADC_ConfigChannel+0x54e>
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007366:	fa93 f3a3 	rbit	r3, r3
 800736a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800736c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800736e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8007370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8007376:	2320      	movs	r3, #32
 8007378:	e003      	b.n	8007382 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800737a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800737c:	fab3 f383 	clz	r3, r3
 8007380:	b2db      	uxtb	r3, r3
 8007382:	3301      	adds	r3, #1
 8007384:	f003 031f 	and.w	r3, r3, #31
 8007388:	2101      	movs	r1, #1
 800738a:	fa01 f303 	lsl.w	r3, r1, r3
 800738e:	ea42 0103 	orr.w	r1, r2, r3
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10a      	bne.n	80073b4 <HAL_ADC_ConfigChannel+0x574>
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	0e9b      	lsrs	r3, r3, #26
 80073a4:	3301      	adds	r3, #1
 80073a6:	f003 021f 	and.w	r2, r3, #31
 80073aa:	4613      	mov	r3, r2
 80073ac:	005b      	lsls	r3, r3, #1
 80073ae:	4413      	add	r3, r2
 80073b0:	051b      	lsls	r3, r3, #20
 80073b2:	e018      	b.n	80073e6 <HAL_ADC_ConfigChannel+0x5a6>
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073bc:	fa93 f3a3 	rbit	r3, r3
 80073c0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80073c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80073c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d101      	bne.n	80073d0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80073cc:	2320      	movs	r3, #32
 80073ce:	e003      	b.n	80073d8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80073d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d2:	fab3 f383 	clz	r3, r3
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	3301      	adds	r3, #1
 80073da:	f003 021f 	and.w	r2, r3, #31
 80073de:	4613      	mov	r3, r2
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	4413      	add	r3, r2
 80073e4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80073e6:	430b      	orrs	r3, r1
 80073e8:	e081      	b.n	80074ee <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d107      	bne.n	8007406 <HAL_ADC_ConfigChannel+0x5c6>
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	0e9b      	lsrs	r3, r3, #26
 80073fc:	3301      	adds	r3, #1
 80073fe:	069b      	lsls	r3, r3, #26
 8007400:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007404:	e015      	b.n	8007432 <HAL_ADC_ConfigChannel+0x5f2>
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800740c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740e:	fa93 f3a3 	rbit	r3, r3
 8007412:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8007414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007416:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800741e:	2320      	movs	r3, #32
 8007420:	e003      	b.n	800742a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	fab3 f383 	clz	r3, r3
 8007428:	b2db      	uxtb	r3, r3
 800742a:	3301      	adds	r3, #1
 800742c:	069b      	lsls	r3, r3, #26
 800742e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800743a:	2b00      	cmp	r3, #0
 800743c:	d109      	bne.n	8007452 <HAL_ADC_ConfigChannel+0x612>
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	0e9b      	lsrs	r3, r3, #26
 8007444:	3301      	adds	r3, #1
 8007446:	f003 031f 	and.w	r3, r3, #31
 800744a:	2101      	movs	r1, #1
 800744c:	fa01 f303 	lsl.w	r3, r1, r3
 8007450:	e017      	b.n	8007482 <HAL_ADC_ConfigChannel+0x642>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	fa93 f3a3 	rbit	r3, r3
 800745e:	61fb      	str	r3, [r7, #28]
  return result;
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	2b00      	cmp	r3, #0
 8007468:	d101      	bne.n	800746e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800746a:	2320      	movs	r3, #32
 800746c:	e003      	b.n	8007476 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007470:	fab3 f383 	clz	r3, r3
 8007474:	b2db      	uxtb	r3, r3
 8007476:	3301      	adds	r3, #1
 8007478:	f003 031f 	and.w	r3, r3, #31
 800747c:	2101      	movs	r1, #1
 800747e:	fa01 f303 	lsl.w	r3, r1, r3
 8007482:	ea42 0103 	orr.w	r1, r2, r3
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10d      	bne.n	80074ae <HAL_ADC_ConfigChannel+0x66e>
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	0e9b      	lsrs	r3, r3, #26
 8007498:	3301      	adds	r3, #1
 800749a:	f003 021f 	and.w	r2, r3, #31
 800749e:	4613      	mov	r3, r2
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	4413      	add	r3, r2
 80074a4:	3b1e      	subs	r3, #30
 80074a6:	051b      	lsls	r3, r3, #20
 80074a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80074ac:	e01e      	b.n	80074ec <HAL_ADC_ConfigChannel+0x6ac>
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	fa93 f3a3 	rbit	r3, r3
 80074ba:	613b      	str	r3, [r7, #16]
  return result;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d104      	bne.n	80074d0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80074c6:	2320      	movs	r3, #32
 80074c8:	e006      	b.n	80074d8 <HAL_ADC_ConfigChannel+0x698>
 80074ca:	bf00      	nop
 80074cc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	fab3 f383 	clz	r3, r3
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	3301      	adds	r3, #1
 80074da:	f003 021f 	and.w	r2, r3, #31
 80074de:	4613      	mov	r3, r2
 80074e0:	005b      	lsls	r3, r3, #1
 80074e2:	4413      	add	r3, r2
 80074e4:	3b1e      	subs	r3, #30
 80074e6:	051b      	lsls	r3, r3, #20
 80074e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80074ec:	430b      	orrs	r3, r1
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	6892      	ldr	r2, [r2, #8]
 80074f2:	4619      	mov	r1, r3
 80074f4:	f7fe ff14 	bl	8006320 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	4b3f      	ldr	r3, [pc, #252]	; (80075fc <HAL_ADC_ConfigChannel+0x7bc>)
 80074fe:	4013      	ands	r3, r2
 8007500:	2b00      	cmp	r3, #0
 8007502:	d070      	beq.n	80075e6 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007504:	483e      	ldr	r0, [pc, #248]	; (8007600 <HAL_ADC_ConfigChannel+0x7c0>)
 8007506:	f7fe fe0d 	bl	8006124 <LL_ADC_GetCommonPathInternalCh>
 800750a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a3c      	ldr	r2, [pc, #240]	; (8007604 <HAL_ADC_ConfigChannel+0x7c4>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d004      	beq.n	8007522 <HAL_ADC_ConfigChannel+0x6e2>
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a3a      	ldr	r2, [pc, #232]	; (8007608 <HAL_ADC_ConfigChannel+0x7c8>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d126      	bne.n	8007570 <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007522:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007526:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d120      	bne.n	8007570 <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007536:	d156      	bne.n	80075e6 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007538:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800753c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007540:	4619      	mov	r1, r3
 8007542:	482f      	ldr	r0, [pc, #188]	; (8007600 <HAL_ADC_ConfigChannel+0x7c0>)
 8007544:	f7fe fddb 	bl	80060fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007548:	4b30      	ldr	r3, [pc, #192]	; (800760c <HAL_ADC_ConfigChannel+0x7cc>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	099b      	lsrs	r3, r3, #6
 800754e:	4a30      	ldr	r2, [pc, #192]	; (8007610 <HAL_ADC_ConfigChannel+0x7d0>)
 8007550:	fba2 2303 	umull	r2, r3, r2, r3
 8007554:	099a      	lsrs	r2, r3, #6
 8007556:	4613      	mov	r3, r2
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	4413      	add	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007560:	e002      	b.n	8007568 <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	3b01      	subs	r3, #1
 8007566:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1f9      	bne.n	8007562 <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800756e:	e03a      	b.n	80075e6 <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a27      	ldr	r2, [pc, #156]	; (8007614 <HAL_ADC_ConfigChannel+0x7d4>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d113      	bne.n	80075a2 <HAL_ADC_ConfigChannel+0x762>
 800757a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800757e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10d      	bne.n	80075a2 <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a23      	ldr	r2, [pc, #140]	; (8007618 <HAL_ADC_ConfigChannel+0x7d8>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d02a      	beq.n	80075e6 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007590:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007594:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007598:	4619      	mov	r1, r3
 800759a:	4819      	ldr	r0, [pc, #100]	; (8007600 <HAL_ADC_ConfigChannel+0x7c0>)
 800759c:	f7fe fdaf 	bl	80060fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80075a0:	e021      	b.n	80075e6 <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a1d      	ldr	r2, [pc, #116]	; (800761c <HAL_ADC_ConfigChannel+0x7dc>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d11c      	bne.n	80075e6 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80075ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80075b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d116      	bne.n	80075e6 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a16      	ldr	r2, [pc, #88]	; (8007618 <HAL_ADC_ConfigChannel+0x7d8>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d011      	beq.n	80075e6 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80075c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80075c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80075ca:	4619      	mov	r1, r3
 80075cc:	480c      	ldr	r0, [pc, #48]	; (8007600 <HAL_ADC_ConfigChannel+0x7c0>)
 80075ce:	f7fe fd96 	bl	80060fe <LL_ADC_SetCommonPathInternalCh>
 80075d2:	e008      	b.n	80075e6 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075d8:	f043 0220 	orr.w	r2, r3, #32
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80075ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	37d8      	adds	r7, #216	; 0xd8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	80080000 	.word	0x80080000
 8007600:	50000300 	.word	0x50000300
 8007604:	c3210000 	.word	0xc3210000
 8007608:	90c00010 	.word	0x90c00010
 800760c:	20000018 	.word	0x20000018
 8007610:	053e2d63 	.word	0x053e2d63
 8007614:	c7520000 	.word	0xc7520000
 8007618:	50000100 	.word	0x50000100
 800761c:	cb840000 	.word	0xcb840000

08007620 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4618      	mov	r0, r3
 800762e:	f7fe ff45 	bl	80064bc <LL_ADC_IsEnabled>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d146      	bne.n	80076c6 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689a      	ldr	r2, [r3, #8]
 800763e:	4b24      	ldr	r3, [pc, #144]	; (80076d0 <ADC_Enable+0xb0>)
 8007640:	4013      	ands	r3, r2
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00d      	beq.n	8007662 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800764a:	f043 0210 	orr.w	r2, r3, #16
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007656:	f043 0201 	orr.w	r2, r3, #1
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e032      	b.n	80076c8 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4618      	mov	r0, r3
 8007668:	f7fe ff14 	bl	8006494 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800766c:	f7fe fd06 	bl	800607c <HAL_GetTick>
 8007670:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007672:	e021      	b.n	80076b8 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4618      	mov	r0, r3
 800767a:	f7fe ff1f 	bl	80064bc <LL_ADC_IsEnabled>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d104      	bne.n	800768e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4618      	mov	r0, r3
 800768a:	f7fe ff03 	bl	8006494 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800768e:	f7fe fcf5 	bl	800607c <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	2b02      	cmp	r3, #2
 800769a:	d90d      	bls.n	80076b8 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a0:	f043 0210 	orr.w	r2, r3, #16
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076ac:	f043 0201 	orr.w	r2, r3, #1
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e007      	b.n	80076c8 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d1d6      	bne.n	8007674 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	8000003f 	.word	0x8000003f

080076d4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d14b      	bne.n	8007786 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0308 	and.w	r3, r3, #8
 8007704:	2b00      	cmp	r3, #0
 8007706:	d021      	beq.n	800774c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4618      	mov	r0, r3
 800770e:	f7fe fdb5 	bl	800627c <LL_ADC_REG_IsTriggerSourceSWStart>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d032      	beq.n	800777e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d12b      	bne.n	800777e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800772a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007736:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d11f      	bne.n	800777e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007742:	f043 0201 	orr.w	r2, r3, #1
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	65da      	str	r2, [r3, #92]	; 0x5c
 800774a:	e018      	b.n	800777e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	f003 0302 	and.w	r3, r3, #2
 8007756:	2b00      	cmp	r3, #0
 8007758:	d111      	bne.n	800777e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800775e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800776a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d105      	bne.n	800777e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007776:	f043 0201 	orr.w	r2, r3, #1
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f7fa fdb7 	bl	80022f2 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007784:	e00e      	b.n	80077a4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800778a:	f003 0310 	and.w	r3, r3, #16
 800778e:	2b00      	cmp	r3, #0
 8007790:	d003      	beq.n	800779a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f7ff fb4a 	bl	8006e2c <HAL_ADC_ErrorCallback>
}
 8007798:	e004      	b.n	80077a4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800779e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	4798      	blx	r3
}
 80077a4:	bf00      	nop
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f7ff fb22 	bl	8006e04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80077c0:	bf00      	nop
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077e6:	f043 0204 	orr.w	r2, r3, #4
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f7ff fb1c 	bl	8006e2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80077f4:	bf00      	nop
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <LL_ADC_IsEnabled>:
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b01      	cmp	r3, #1
 800780e:	d101      	bne.n	8007814 <LL_ADC_IsEnabled+0x18>
 8007810:	2301      	movs	r3, #1
 8007812:	e000      	b.n	8007816 <LL_ADC_IsEnabled+0x1a>
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <LL_ADC_REG_IsConversionOngoing>:
{
 8007822:	b480      	push	{r7}
 8007824:	b083      	sub	sp, #12
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f003 0304 	and.w	r3, r3, #4
 8007832:	2b04      	cmp	r3, #4
 8007834:	d101      	bne.n	800783a <LL_ADC_REG_IsConversionOngoing+0x18>
 8007836:	2301      	movs	r3, #1
 8007838:	e000      	b.n	800783c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80078ac:	b590      	push	{r4, r7, lr}
 80078ae:	b0a1      	sub	sp, #132	; 0x84
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d101      	bne.n	80078ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80078c6:	2302      	movs	r3, #2
 80078c8:	e087      	b.n	80079da <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078da:	d102      	bne.n	80078e2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80078dc:	4b41      	ldr	r3, [pc, #260]	; (80079e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80078de:	60bb      	str	r3, [r7, #8]
 80078e0:	e001      	b.n	80078e6 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80078e2:	2300      	movs	r3, #0
 80078e4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10b      	bne.n	8007904 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078f0:	f043 0220 	orr.w	r2, r3, #32
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	e06a      	b.n	80079da <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	4618      	mov	r0, r3
 8007908:	f7ff ff8b 	bl	8007822 <LL_ADC_REG_IsConversionOngoing>
 800790c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4618      	mov	r0, r3
 8007914:	f7ff ff85 	bl	8007822 <LL_ADC_REG_IsConversionOngoing>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d14c      	bne.n	80079b8 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800791e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007920:	2b00      	cmp	r3, #0
 8007922:	d149      	bne.n	80079b8 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007924:	4b30      	ldr	r3, [pc, #192]	; (80079e8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8007926:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d028      	beq.n	8007982 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007930:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	6859      	ldr	r1, [r3, #4]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007942:	035b      	lsls	r3, r3, #13
 8007944:	430b      	orrs	r3, r1
 8007946:	431a      	orrs	r2, r3
 8007948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800794a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800794c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007950:	f7ff ff54 	bl	80077fc <LL_ADC_IsEnabled>
 8007954:	4604      	mov	r4, r0
 8007956:	4823      	ldr	r0, [pc, #140]	; (80079e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8007958:	f7ff ff50 	bl	80077fc <LL_ADC_IsEnabled>
 800795c:	4603      	mov	r3, r0
 800795e:	4323      	orrs	r3, r4
 8007960:	2b00      	cmp	r3, #0
 8007962:	d133      	bne.n	80079cc <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007964:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800796c:	f023 030f 	bic.w	r3, r3, #15
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	6811      	ldr	r1, [r2, #0]
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	6892      	ldr	r2, [r2, #8]
 8007978:	430a      	orrs	r2, r1
 800797a:	431a      	orrs	r2, r3
 800797c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800797e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007980:	e024      	b.n	80079cc <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800798a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800798c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800798e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007992:	f7ff ff33 	bl	80077fc <LL_ADC_IsEnabled>
 8007996:	4604      	mov	r4, r0
 8007998:	4812      	ldr	r0, [pc, #72]	; (80079e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800799a:	f7ff ff2f 	bl	80077fc <LL_ADC_IsEnabled>
 800799e:	4603      	mov	r3, r0
 80079a0:	4323      	orrs	r3, r4
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d112      	bne.n	80079cc <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80079a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80079ae:	f023 030f 	bic.w	r3, r3, #15
 80079b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80079b4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80079b6:	e009      	b.n	80079cc <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079bc:	f043 0220 	orr.w	r2, r3, #32
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80079ca:	e000      	b.n	80079ce <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80079cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80079d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3784      	adds	r7, #132	; 0x84
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd90      	pop	{r4, r7, pc}
 80079e2:	bf00      	nop
 80079e4:	50000100 	.word	0x50000100
 80079e8:	50000300 	.word	0x50000300

080079ec <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e023      	b.n	8007a46 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d106      	bne.n	8007a18 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7fd ff76 	bl	8005904 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
	...

08007a50 <HAL_CORDIC_Configure>:
  * @param  sConfig pointer to a CORDIC_ConfigTypeDef structure that
  *         contains the CORDIC configuration information.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Configure(CORDIC_HandleTypeDef *hcordic, CORDIC_ConfigTypeDef *sConfig)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CORDIC_NBREAD(sConfig->NbRead));
  assert_param(IS_CORDIC_INSIZE(sConfig->InSize));
  assert_param(IS_CORDIC_OUTSIZE(sConfig->OutSize));

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d11d      	bne.n	8007aa6 <HAL_CORDIC_Configure+0x56>
  {
    /* Apply all configuration parameters in CORDIC control register */
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	4b14      	ldr	r3, [pc, #80]	; (8007ac4 <HAL_CORDIC_Configure+0x74>)
 8007a72:	4013      	ands	r3, r2
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	6811      	ldr	r1, [r2, #0]
 8007a78:	683a      	ldr	r2, [r7, #0]
 8007a7a:	6992      	ldr	r2, [r2, #24]
 8007a7c:	4311      	orrs	r1, r2
 8007a7e:	683a      	ldr	r2, [r7, #0]
 8007a80:	6852      	ldr	r2, [r2, #4]
 8007a82:	4311      	orrs	r1, r2
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	6912      	ldr	r2, [r2, #16]
 8007a88:	4311      	orrs	r1, r2
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	6952      	ldr	r2, [r2, #20]
 8007a8e:	4311      	orrs	r1, r2
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	6892      	ldr	r2, [r2, #8]
 8007a94:	4311      	orrs	r1, r2
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	68d2      	ldr	r2, [r2, #12]
 8007a9a:	4311      	orrs	r1, r2
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	6812      	ldr	r2, [r2, #0]
 8007aa0:	430b      	orrs	r3, r1
 8007aa2:	6013      	str	r3, [r2, #0]
 8007aa4:	e007      	b.n	8007ab6 <HAL_CORDIC_Configure+0x66>
                sConfig->NbWrite | sConfig->NbRead | sConfig->InSize | sConfig->OutSize));
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aaa:	f043 0202 	orr.w	r2, r3, #2
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	ff87f800 	.word	0xff87f800

08007ac8 <HAL_CORDIC_Calculate>:
  * @param  NbCalc Number of CORDIC calculation to process.
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Calculate(CORDIC_HandleTypeDef *hcordic, int32_t *pInBuff, int32_t *pOutBuff, uint32_t NbCalc, uint32_t Timeout)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b088      	sub	sp, #32
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	607a      	str	r2, [r7, #4]
 8007ad4:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t index;
  int32_t *p_tmp_in_buff = pInBuff;
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	617b      	str	r3, [r7, #20]
  int32_t *p_tmp_out_buff = pOutBuff;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	613b      	str	r3, [r7, #16]

  /* Check parameters setting */
  if ((pInBuff == NULL) || (pOutBuff == NULL) || (NbCalc == 0U))
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d005      	beq.n	8007af0 <HAL_CORDIC_Calculate+0x28>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d002      	beq.n	8007af0 <HAL_CORDIC_Calculate+0x28>
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d107      	bne.n	8007b00 <HAL_CORDIC_Calculate+0x38>
  {
    /* Update the error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_PARAM;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af4:	f043 0201 	orr.w	r2, r3, #1
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return error status */
    return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e058      	b.n	8007bb2 <HAL_CORDIC_Calculate+0xea>
  }

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d14b      	bne.n	8007ba4 <HAL_CORDIC_Calculate+0xdc>
  {
    /* Reset CORDIC error code */
    hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_BUSY;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2202      	movs	r2, #2
 8007b16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b1a:	f7fe faaf 	bl	800607c <HAL_GetTick>
 8007b1e:	61b8      	str	r0, [r7, #24]

    /* Write of input data in Write Data register, and increment input buffer pointer */
    CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 8007b20:	f107 0314 	add.w	r3, r7, #20
 8007b24:	4619      	mov	r1, r3
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f000 f89a 	bl	8007c60 <CORDIC_WriteInDataIncrementPtr>

    /* Calculation is started.
       Provide next set of input data, until number of calculation is achieved */
    for (index = (NbCalc - 1U); index > 0U; index--)
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	61fb      	str	r3, [r7, #28]
 8007b32:	e028      	b.n	8007b86 <HAL_CORDIC_Calculate+0xbe>
    {
      /* Write of input data in Write Data register, and increment input buffer pointer */
      CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 8007b34:	f107 0314 	add.w	r3, r7, #20
 8007b38:	4619      	mov	r1, r3
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f000 f890 	bl	8007c60 <CORDIC_WriteInDataIncrementPtr>

      /* Wait for RRDY flag to be raised */
      do
      {
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY)
 8007b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b46:	d010      	beq.n	8007b6a <HAL_CORDIC_Calculate+0xa2>
        {
          if ((HAL_GetTick() - tickstart) > Timeout)
 8007b48:	f7fe fa98 	bl	800607c <HAL_GetTick>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d208      	bcs.n	8007b6a <HAL_CORDIC_Calculate+0xa2>
          {
            /* Set CORDIC error code */
            hcordic->ErrorCode = HAL_CORDIC_ERROR_TIMEOUT;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2204      	movs	r2, #4
 8007b5c:	625a      	str	r2, [r3, #36]	; 0x24

            /* Change the CORDIC state */
            hcordic->State = HAL_CORDIC_STATE_READY;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

            /* Return function status */
            return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e023      	b.n	8007bb2 <HAL_CORDIC_Calculate+0xea>
          }
        }
      }
      while (HAL_IS_BIT_CLR(hcordic->Instance->CSR, CORDIC_CSR_RRDY));
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	dae5      	bge.n	8007b40 <HAL_CORDIC_Calculate+0x78>

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 8007b74:	f107 0310 	add.w	r3, r7, #16
 8007b78:	4619      	mov	r1, r3
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f000 f899 	bl	8007cb2 <CORDIC_ReadOutDataIncrementPtr>
    for (index = (NbCalc - 1U); index > 0U; index--)
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	3b01      	subs	r3, #1
 8007b84:	61fb      	str	r3, [r7, #28]
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1d3      	bne.n	8007b34 <HAL_CORDIC_Calculate+0x6c>
    }

    /* Read output data from Read Data register, and increment output buffer pointer */
    CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 8007b8c:	f107 0310 	add.w	r3, r7, #16
 8007b90:	4619      	mov	r1, r3
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f000 f88d 	bl	8007cb2 <CORDIC_ReadOutDataIncrementPtr>

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_READY;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Return function status */
    return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	e006      	b.n	8007bb2 <HAL_CORDIC_Calculate+0xea>
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba8:	f043 0202 	orr.w	r2, r3, #2
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
  }
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3720      	adds	r7, #32
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <HAL_CORDIC_CalculateCpltCallback>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
__weak void HAL_CORDIC_CalculateCpltCallback(CORDIC_HandleTypeDef *hcordic)
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b083      	sub	sp, #12
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  UNUSED(hcordic);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CORDIC_CalculateCpltCallback can be implemented in the user file
   */
}
 8007bc2:	bf00      	nop
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <HAL_CORDIC_IRQHandler>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
void HAL_CORDIC_IRQHandler(CORDIC_HandleTypeDef *hcordic)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b082      	sub	sp, #8
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  /* Check if calculation complete interrupt is enabled and if result ready
     flag is raised */
  if (__HAL_CORDIC_GET_IT_SOURCE(hcordic, CORDIC_IT_IEN) != 0U)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d039      	beq.n	8007c58 <HAL_CORDIC_IRQHandler+0x8a>
  {
    if (__HAL_CORDIC_GET_FLAG(hcordic, CORDIC_FLAG_RRDY) != 0U)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bf2:	d101      	bne.n	8007bf8 <HAL_CORDIC_IRQHandler+0x2a>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e000      	b.n	8007bfa <HAL_CORDIC_IRQHandler+0x2c>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d02c      	beq.n	8007c58 <HAL_CORDIC_IRQHandler+0x8a>
    {
      /* Decrement number of calculations to get */
      hcordic->NbCalcToGet--;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	1e5a      	subs	r2, r3, #1
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	611a      	str	r2, [r3, #16]

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &(hcordic->pOutBuff));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	3308      	adds	r3, #8
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f84f 	bl	8007cb2 <CORDIC_ReadOutDataIncrementPtr>

      /* Check if calculations are still to be ordered */
      if (hcordic->NbCalcToOrder > 0U)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00a      	beq.n	8007c32 <HAL_CORDIC_IRQHandler+0x64>
      {
        /* Decrement number of calculations to order */
        hcordic->NbCalcToOrder--;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	1e5a      	subs	r2, r3, #1
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	60da      	str	r2, [r3, #12]

        /* Continue the processing by providing another write of input data
           in the Write Data register, and increment input buffer pointer */
        CORDIC_WriteInDataIncrementPtr(hcordic, &(hcordic->pInBuff));
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	3304      	adds	r3, #4
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 f817 	bl	8007c60 <CORDIC_WriteInDataIncrementPtr>
      }

      /* Check if all calculations results are got */
      if (hcordic->NbCalcToGet == 0U)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10e      	bne.n	8007c58 <HAL_CORDIC_IRQHandler+0x8a>
      {
        /* Disable Result Ready Interrupt */
        __HAL_CORDIC_DISABLE_IT(hcordic, CORDIC_IT_IEN);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007c48:	601a      	str	r2, [r3, #0]

        /* Change the CORDIC state */
        hcordic->State = HAL_CORDIC_STATE_READY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
#if USE_HAL_CORDIC_REGISTER_CALLBACKS == 1
        /*Call registered callback*/
        hcordic->CalculateCpltCallback(hcordic);
#else
        /*Call legacy weak (surcharged) callback*/
        HAL_CORDIC_CalculateCpltCallback(hcordic);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f7ff ffb1 	bl	8007bba <HAL_CORDIC_CalculateCpltCallback>
#endif /* USE_HAL_CORDIC_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007c58:	bf00      	nop
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <CORDIC_WriteInDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(CORDIC_HandleTypeDef *hcordic, int32_t **ppInBuff)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	1d1a      	adds	r2, r3, #4
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c8e:	d10a      	bne.n	8007ca6 <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	1d1a      	adds	r2, r3, #4
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	601a      	str	r2, [r3, #0]
  }
}
 8007ca6:	bf00      	nop
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <CORDIC_ReadOutDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b083      	sub	sp, #12
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689a      	ldr	r2, [r3, #8]
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	1d1a      	adds	r2, r3, #4
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cdc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007ce0:	d10a      	bne.n	8007cf8 <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	689a      	ldr	r2, [r3, #8]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	1d1a      	adds	r2, r3, #4
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	601a      	str	r2, [r3, #0]
  }
}
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f003 0307 	and.w	r3, r3, #7
 8007d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007d14:	4b0c      	ldr	r3, [pc, #48]	; (8007d48 <__NVIC_SetPriorityGrouping+0x44>)
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007d20:	4013      	ands	r3, r2
 8007d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007d36:	4a04      	ldr	r2, [pc, #16]	; (8007d48 <__NVIC_SetPriorityGrouping+0x44>)
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	60d3      	str	r3, [r2, #12]
}
 8007d3c:	bf00      	nop
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	e000ed00 	.word	0xe000ed00

08007d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007d50:	4b04      	ldr	r3, [pc, #16]	; (8007d64 <__NVIC_GetPriorityGrouping+0x18>)
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	0a1b      	lsrs	r3, r3, #8
 8007d56:	f003 0307 	and.w	r3, r3, #7
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	e000ed00 	.word	0xe000ed00

08007d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	4603      	mov	r3, r0
 8007d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	db0b      	blt.n	8007d92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007d7a:	79fb      	ldrb	r3, [r7, #7]
 8007d7c:	f003 021f 	and.w	r2, r3, #31
 8007d80:	4907      	ldr	r1, [pc, #28]	; (8007da0 <__NVIC_EnableIRQ+0x38>)
 8007d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d86:	095b      	lsrs	r3, r3, #5
 8007d88:	2001      	movs	r0, #1
 8007d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8007d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007d92:	bf00      	nop
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	e000e100 	.word	0xe000e100

08007da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	4603      	mov	r3, r0
 8007dac:	6039      	str	r1, [r7, #0]
 8007dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	db0a      	blt.n	8007dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	b2da      	uxtb	r2, r3
 8007dbc:	490c      	ldr	r1, [pc, #48]	; (8007df0 <__NVIC_SetPriority+0x4c>)
 8007dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dc2:	0112      	lsls	r2, r2, #4
 8007dc4:	b2d2      	uxtb	r2, r2
 8007dc6:	440b      	add	r3, r1
 8007dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007dcc:	e00a      	b.n	8007de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	4908      	ldr	r1, [pc, #32]	; (8007df4 <__NVIC_SetPriority+0x50>)
 8007dd4:	79fb      	ldrb	r3, [r7, #7]
 8007dd6:	f003 030f 	and.w	r3, r3, #15
 8007dda:	3b04      	subs	r3, #4
 8007ddc:	0112      	lsls	r2, r2, #4
 8007dde:	b2d2      	uxtb	r2, r2
 8007de0:	440b      	add	r3, r1
 8007de2:	761a      	strb	r2, [r3, #24]
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr
 8007df0:	e000e100 	.word	0xe000e100
 8007df4:	e000ed00 	.word	0xe000ed00

08007df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b089      	sub	sp, #36	; 0x24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f003 0307 	and.w	r3, r3, #7
 8007e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	f1c3 0307 	rsb	r3, r3, #7
 8007e12:	2b04      	cmp	r3, #4
 8007e14:	bf28      	it	cs
 8007e16:	2304      	movcs	r3, #4
 8007e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	2b06      	cmp	r3, #6
 8007e20:	d902      	bls.n	8007e28 <NVIC_EncodePriority+0x30>
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	3b03      	subs	r3, #3
 8007e26:	e000      	b.n	8007e2a <NVIC_EncodePriority+0x32>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	fa02 f303 	lsl.w	r3, r2, r3
 8007e36:	43da      	mvns	r2, r3
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	401a      	ands	r2, r3
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007e40:	f04f 31ff 	mov.w	r1, #4294967295
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	fa01 f303 	lsl.w	r3, r1, r3
 8007e4a:	43d9      	mvns	r1, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e50:	4313      	orrs	r3, r2
         );
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3724      	adds	r7, #36	; 0x24
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
	...

08007e60 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007e60:	b480      	push	{r7}
 8007e62:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8007e64:	f3bf 8f4f 	dsb	sy
}
 8007e68:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007e6a:	4b06      	ldr	r3, [pc, #24]	; (8007e84 <__NVIC_SystemReset+0x24>)
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007e72:	4904      	ldr	r1, [pc, #16]	; (8007e84 <__NVIC_SystemReset+0x24>)
 8007e74:	4b04      	ldr	r3, [pc, #16]	; (8007e88 <__NVIC_SystemReset+0x28>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007e7a:	f3bf 8f4f 	dsb	sy
}
 8007e7e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007e80:	bf00      	nop
 8007e82:	e7fd      	b.n	8007e80 <__NVIC_SystemReset+0x20>
 8007e84:	e000ed00 	.word	0xe000ed00
 8007e88:	05fa0004 	.word	0x05fa0004

08007e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	3b01      	subs	r3, #1
 8007e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e9c:	d301      	bcc.n	8007ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e00f      	b.n	8007ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007ea2:	4a0a      	ldr	r2, [pc, #40]	; (8007ecc <SysTick_Config+0x40>)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007eaa:	210f      	movs	r1, #15
 8007eac:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb0:	f7ff ff78 	bl	8007da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007eb4:	4b05      	ldr	r3, [pc, #20]	; (8007ecc <SysTick_Config+0x40>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007eba:	4b04      	ldr	r3, [pc, #16]	; (8007ecc <SysTick_Config+0x40>)
 8007ebc:	2207      	movs	r2, #7
 8007ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	e000e010 	.word	0xe000e010

08007ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7ff ff13 	bl	8007d04 <__NVIC_SetPriorityGrouping>
}
 8007ede:	bf00      	nop
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b086      	sub	sp, #24
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	4603      	mov	r3, r0
 8007eee:	60b9      	str	r1, [r7, #8]
 8007ef0:	607a      	str	r2, [r7, #4]
 8007ef2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007ef4:	f7ff ff2a 	bl	8007d4c <__NVIC_GetPriorityGrouping>
 8007ef8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	68b9      	ldr	r1, [r7, #8]
 8007efe:	6978      	ldr	r0, [r7, #20]
 8007f00:	f7ff ff7a 	bl	8007df8 <NVIC_EncodePriority>
 8007f04:	4602      	mov	r2, r0
 8007f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f0a:	4611      	mov	r1, r2
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7ff ff49 	bl	8007da4 <__NVIC_SetPriority>
}
 8007f12:	bf00      	nop
 8007f14:	3718      	adds	r7, #24
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b082      	sub	sp, #8
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	4603      	mov	r3, r0
 8007f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7ff ff1d 	bl	8007d68 <__NVIC_EnableIRQ>
}
 8007f2e:	bf00      	nop
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8007f3a:	f7ff ff91 	bl	8007e60 <__NVIC_SystemReset>

08007f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b082      	sub	sp, #8
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7ff ffa0 	bl	8007e8c <SysTick_Config>
 8007f4c:	4603      	mov	r3, r0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
	...

08007f58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d101      	bne.n	8007f6a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e08d      	b.n	8008086 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	4b47      	ldr	r3, [pc, #284]	; (8008090 <HAL_DMA_Init+0x138>)
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d80f      	bhi.n	8007f96 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	4b45      	ldr	r3, [pc, #276]	; (8008094 <HAL_DMA_Init+0x13c>)
 8007f7e:	4413      	add	r3, r2
 8007f80:	4a45      	ldr	r2, [pc, #276]	; (8008098 <HAL_DMA_Init+0x140>)
 8007f82:	fba2 2303 	umull	r2, r3, r2, r3
 8007f86:	091b      	lsrs	r3, r3, #4
 8007f88:	009a      	lsls	r2, r3, #2
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a42      	ldr	r2, [pc, #264]	; (800809c <HAL_DMA_Init+0x144>)
 8007f92:	641a      	str	r2, [r3, #64]	; 0x40
 8007f94:	e00e      	b.n	8007fb4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	4b40      	ldr	r3, [pc, #256]	; (80080a0 <HAL_DMA_Init+0x148>)
 8007f9e:	4413      	add	r3, r2
 8007fa0:	4a3d      	ldr	r2, [pc, #244]	; (8008098 <HAL_DMA_Init+0x140>)
 8007fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa6:	091b      	lsrs	r3, r3, #4
 8007fa8:	009a      	lsls	r2, r3, #2
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a3c      	ldr	r2, [pc, #240]	; (80080a4 <HAL_DMA_Init+0x14c>)
 8007fb2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ff0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 fa1e 	bl	8008448 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008014:	d102      	bne.n	800801c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685a      	ldr	r2, [r3, #4]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008024:	b2d2      	uxtb	r2, r2
 8008026:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008030:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d010      	beq.n	800805c <HAL_DMA_Init+0x104>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	2b04      	cmp	r3, #4
 8008040:	d80c      	bhi.n	800805c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 fa3e 	bl	80084c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800804c:	2200      	movs	r2, #0
 800804e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008058:	605a      	str	r2, [r3, #4]
 800805a:	e008      	b.n	800806e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	40020407 	.word	0x40020407
 8008094:	bffdfff8 	.word	0xbffdfff8
 8008098:	cccccccd 	.word	0xcccccccd
 800809c:	40020000 	.word	0x40020000
 80080a0:	bffdfbf8 	.word	0xbffdfbf8
 80080a4:	40020400 	.word	0x40020400

080080a8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
 80080b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d101      	bne.n	80080c8 <HAL_DMA_Start_IT+0x20>
 80080c4:	2302      	movs	r3, #2
 80080c6:	e066      	b.n	8008196 <HAL_DMA_Start_IT+0xee>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d155      	bne.n	8008188 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2202      	movs	r2, #2
 80080e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f022 0201 	bic.w	r2, r2, #1
 80080f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	68b9      	ldr	r1, [r7, #8]
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 f962 	bl	80083ca <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810a:	2b00      	cmp	r3, #0
 800810c:	d008      	beq.n	8008120 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f042 020e 	orr.w	r2, r2, #14
 800811c:	601a      	str	r2, [r3, #0]
 800811e:	e00f      	b.n	8008140 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f022 0204 	bic.w	r2, r2, #4
 800812e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f042 020a 	orr.w	r2, r2, #10
 800813e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d007      	beq.n	800815e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800815c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008162:	2b00      	cmp	r3, #0
 8008164:	d007      	beq.n	8008176 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008174:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f042 0201 	orr.w	r2, r2, #1
 8008184:	601a      	str	r2, [r3, #0]
 8008186:	e005      	b.n	8008194 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008190:	2302      	movs	r3, #2
 8008192:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008194:	7dfb      	ldrb	r3, [r7, #23]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b084      	sub	sp, #16
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d00d      	beq.n	80081d2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2204      	movs	r2, #4
 80081ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	73fb      	strb	r3, [r7, #15]
 80081d0:	e047      	b.n	8008262 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f022 020e 	bic.w	r2, r2, #14
 80081e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f022 0201 	bic.w	r2, r2, #1
 80081f0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008200:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008206:	f003 021f 	and.w	r2, r3, #31
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820e:	2101      	movs	r1, #1
 8008210:	fa01 f202 	lsl.w	r2, r1, r2
 8008214:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800821e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00c      	beq.n	8008242 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008232:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008236:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008240:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	4798      	blx	r3
    }
  }
  return status;
 8008262:	7bfb      	ldrb	r3, [r7, #15]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008288:	f003 031f 	and.w	r3, r3, #31
 800828c:	2204      	movs	r2, #4
 800828e:	409a      	lsls	r2, r3
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	4013      	ands	r3, r2
 8008294:	2b00      	cmp	r3, #0
 8008296:	d026      	beq.n	80082e6 <HAL_DMA_IRQHandler+0x7a>
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	f003 0304 	and.w	r3, r3, #4
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d021      	beq.n	80082e6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 0320 	and.w	r3, r3, #32
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d107      	bne.n	80082c0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f022 0204 	bic.w	r2, r2, #4
 80082be:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c4:	f003 021f 	and.w	r2, r3, #31
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082cc:	2104      	movs	r1, #4
 80082ce:	fa01 f202 	lsl.w	r2, r1, r2
 80082d2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d071      	beq.n	80083c0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80082e4:	e06c      	b.n	80083c0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ea:	f003 031f 	and.w	r3, r3, #31
 80082ee:	2202      	movs	r2, #2
 80082f0:	409a      	lsls	r2, r3
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	4013      	ands	r3, r2
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d02e      	beq.n	8008358 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	f003 0302 	and.w	r3, r3, #2
 8008300:	2b00      	cmp	r3, #0
 8008302:	d029      	beq.n	8008358 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0320 	and.w	r3, r3, #32
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10b      	bne.n	800832a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f022 020a 	bic.w	r2, r2, #10
 8008320:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2201      	movs	r2, #1
 8008326:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800832e:	f003 021f 	and.w	r2, r3, #31
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008336:	2102      	movs	r1, #2
 8008338:	fa01 f202 	lsl.w	r2, r1, r2
 800833c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834a:	2b00      	cmp	r3, #0
 800834c:	d038      	beq.n	80083c0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008356:	e033      	b.n	80083c0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800835c:	f003 031f 	and.w	r3, r3, #31
 8008360:	2208      	movs	r2, #8
 8008362:	409a      	lsls	r2, r3
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	4013      	ands	r3, r2
 8008368:	2b00      	cmp	r3, #0
 800836a:	d02a      	beq.n	80083c2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	f003 0308 	and.w	r3, r3, #8
 8008372:	2b00      	cmp	r3, #0
 8008374:	d025      	beq.n	80083c2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f022 020e 	bic.w	r2, r2, #14
 8008384:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800838a:	f003 021f 	and.w	r2, r3, #31
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008392:	2101      	movs	r1, #1
 8008394:	fa01 f202 	lsl.w	r2, r1, r2
 8008398:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d004      	beq.n	80083c2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80083c0:	bf00      	nop
 80083c2:	bf00      	nop
}
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b085      	sub	sp, #20
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	60f8      	str	r0, [r7, #12]
 80083d2:	60b9      	str	r1, [r7, #8]
 80083d4:	607a      	str	r2, [r7, #4]
 80083d6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80083e0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d004      	beq.n	80083f4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80083f2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083f8:	f003 021f 	and.w	r2, r3, #31
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008400:	2101      	movs	r1, #1
 8008402:	fa01 f202 	lsl.w	r2, r1, r2
 8008406:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	2b10      	cmp	r3, #16
 8008416:	d108      	bne.n	800842a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008428:	e007      	b.n	800843a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	60da      	str	r2, [r3, #12]
}
 800843a:	bf00      	nop
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
	...

08008448 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008448:	b480      	push	{r7}
 800844a:	b087      	sub	sp, #28
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	461a      	mov	r2, r3
 8008456:	4b16      	ldr	r3, [pc, #88]	; (80084b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8008458:	429a      	cmp	r2, r3
 800845a:	d802      	bhi.n	8008462 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800845c:	4b15      	ldr	r3, [pc, #84]	; (80084b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800845e:	617b      	str	r3, [r7, #20]
 8008460:	e001      	b.n	8008466 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8008462:	4b15      	ldr	r3, [pc, #84]	; (80084b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008464:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	b2db      	uxtb	r3, r3
 8008470:	3b08      	subs	r3, #8
 8008472:	4a12      	ldr	r2, [pc, #72]	; (80084bc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008474:	fba2 2303 	umull	r2, r3, r2, r3
 8008478:	091b      	lsrs	r3, r3, #4
 800847a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008480:	089b      	lsrs	r3, r3, #2
 8008482:	009a      	lsls	r2, r3, #2
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	4413      	add	r3, r2
 8008488:	461a      	mov	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a0b      	ldr	r2, [pc, #44]	; (80084c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008492:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f003 031f 	and.w	r3, r3, #31
 800849a:	2201      	movs	r2, #1
 800849c:	409a      	lsls	r2, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80084a2:	bf00      	nop
 80084a4:	371c      	adds	r7, #28
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	40020407 	.word	0x40020407
 80084b4:	40020800 	.word	0x40020800
 80084b8:	40020820 	.word	0x40020820
 80084bc:	cccccccd 	.word	0xcccccccd
 80084c0:	40020880 	.word	0x40020880

080084c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	4b0b      	ldr	r3, [pc, #44]	; (8008504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80084d8:	4413      	add	r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	461a      	mov	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a08      	ldr	r2, [pc, #32]	; (8008508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80084e6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	3b01      	subs	r3, #1
 80084ec:	f003 031f 	and.w	r3, r3, #31
 80084f0:	2201      	movs	r2, #1
 80084f2:	409a      	lsls	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80084f8:	bf00      	nop
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr
 8008504:	1000823f 	.word	0x1000823f
 8008508:	40020940 	.word	0x40020940

0800850c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d101      	bne.n	800851e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e147      	b.n	80087ae <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008524:	b2db      	uxtb	r3, r3
 8008526:	2b00      	cmp	r3, #0
 8008528:	d106      	bne.n	8008538 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7fd fa0c 	bl	8005950 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	699a      	ldr	r2, [r3, #24]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f022 0210 	bic.w	r2, r2, #16
 8008546:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008548:	f7fd fd98 	bl	800607c <HAL_GetTick>
 800854c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800854e:	e012      	b.n	8008576 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008550:	f7fd fd94 	bl	800607c <HAL_GetTick>
 8008554:	4602      	mov	r2, r0
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	2b0a      	cmp	r3, #10
 800855c:	d90b      	bls.n	8008576 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008562:	f043 0201 	orr.w	r2, r3, #1
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2203      	movs	r2, #3
 800856e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e11b      	b.n	80087ae <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	f003 0308 	and.w	r3, r3, #8
 8008580:	2b08      	cmp	r3, #8
 8008582:	d0e5      	beq.n	8008550 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	699a      	ldr	r2, [r3, #24]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f042 0201 	orr.w	r2, r2, #1
 8008592:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008594:	f7fd fd72 	bl	800607c <HAL_GetTick>
 8008598:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800859a:	e012      	b.n	80085c2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800859c:	f7fd fd6e 	bl	800607c <HAL_GetTick>
 80085a0:	4602      	mov	r2, r0
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	2b0a      	cmp	r3, #10
 80085a8:	d90b      	bls.n	80085c2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085ae:	f043 0201 	orr.w	r2, r3, #1
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2203      	movs	r2, #3
 80085ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e0f5      	b.n	80087ae <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	f003 0301 	and.w	r3, r3, #1
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d0e5      	beq.n	800859c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	699a      	ldr	r2, [r3, #24]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f042 0202 	orr.w	r2, r2, #2
 80085de:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a74      	ldr	r2, [pc, #464]	; (80087b8 <HAL_FDCAN_Init+0x2ac>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d103      	bne.n	80085f2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80085ea:	4a74      	ldr	r2, [pc, #464]	; (80087bc <HAL_FDCAN_Init+0x2b0>)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	7c1b      	ldrb	r3, [r3, #16]
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d108      	bne.n	800860c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	699a      	ldr	r2, [r3, #24]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008608:	619a      	str	r2, [r3, #24]
 800860a:	e007      	b.n	800861c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	699a      	ldr	r2, [r3, #24]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800861a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	7c5b      	ldrb	r3, [r3, #17]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d108      	bne.n	8008636 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	699a      	ldr	r2, [r3, #24]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008632:	619a      	str	r2, [r3, #24]
 8008634:	e007      	b.n	8008646 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	699a      	ldr	r2, [r3, #24]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008644:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	7c9b      	ldrb	r3, [r3, #18]
 800864a:	2b01      	cmp	r3, #1
 800864c:	d108      	bne.n	8008660 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	699a      	ldr	r2, [r3, #24]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800865c:	619a      	str	r2, [r3, #24]
 800865e:	e007      	b.n	8008670 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	699a      	ldr	r2, [r3, #24]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800866e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	689a      	ldr	r2, [r3, #8]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	430a      	orrs	r2, r1
 8008684:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	699a      	ldr	r2, [r3, #24]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8008694:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	691a      	ldr	r2, [r3, #16]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f022 0210 	bic.w	r2, r2, #16
 80086a4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d108      	bne.n	80086c0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	699a      	ldr	r2, [r3, #24]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f042 0204 	orr.w	r2, r2, #4
 80086bc:	619a      	str	r2, [r3, #24]
 80086be:	e02c      	b.n	800871a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d028      	beq.n	800871a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d01c      	beq.n	800870a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	699a      	ldr	r2, [r3, #24]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80086de:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	691a      	ldr	r2, [r3, #16]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f042 0210 	orr.w	r2, r2, #16
 80086ee:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	d110      	bne.n	800871a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	699a      	ldr	r2, [r3, #24]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f042 0220 	orr.w	r2, r2, #32
 8008706:	619a      	str	r2, [r3, #24]
 8008708:	e007      	b.n	800871a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	699a      	ldr	r2, [r3, #24]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f042 0220 	orr.w	r2, r2, #32
 8008718:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	3b01      	subs	r3, #1
 8008720:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	69db      	ldr	r3, [r3, #28]
 8008726:	3b01      	subs	r3, #1
 8008728:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800872a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a1b      	ldr	r3, [r3, #32]
 8008730:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008732:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	695b      	ldr	r3, [r3, #20]
 800873a:	3b01      	subs	r3, #1
 800873c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008742:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008744:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800874e:	d115      	bne.n	800877c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008754:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875a:	3b01      	subs	r3, #1
 800875c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800875e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008764:	3b01      	subs	r3, #1
 8008766:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008768:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008770:	3b01      	subs	r3, #1
 8008772:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008778:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800877a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	430a      	orrs	r2, r1
 800878e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 faea 	bl	8008d6c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	40006400 	.word	0x40006400
 80087bc:	40006500 	.word	0x40006500

080087c0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b087      	sub	sp, #28
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80087d0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80087d2:	7dfb      	ldrb	r3, [r7, #23]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d002      	beq.n	80087de <HAL_FDCAN_ConfigFilter+0x1e>
 80087d8:	7dfb      	ldrb	r3, [r7, #23]
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d13d      	bne.n	800885a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d119      	bne.n	800881a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80087f2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80087fa:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008800:	4313      	orrs	r3, r2
 8008802:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	4413      	add	r3, r2
 8008810:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	601a      	str	r2, [r3, #0]
 8008818:	e01d      	b.n	8008856 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	075a      	lsls	r2, r3, #29
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	691b      	ldr	r3, [r3, #16]
 8008824:	4313      	orrs	r3, r2
 8008826:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	079a      	lsls	r2, r3, #30
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	4313      	orrs	r3, r2
 8008834:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	00db      	lsls	r3, r3, #3
 8008840:	4413      	add	r3, r2
 8008842:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	693a      	ldr	r2, [r7, #16]
 8008848:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	3304      	adds	r3, #4
 800884e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8008856:	2300      	movs	r3, #0
 8008858:	e006      	b.n	8008868 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800885e:	f043 0202 	orr.w	r2, r3, #2
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
  }
}
 8008868:	4618      	mov	r0, r3
 800886a:	371c      	adds	r7, #28
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
 8008880:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b01      	cmp	r3, #1
 800888c:	d116      	bne.n	80088bc <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008896:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	011a      	lsls	r2, r3, #4
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	431a      	orrs	r2, r3
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	005b      	lsls	r3, r3, #1
 80088a8:	431a      	orrs	r2, r3
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	431a      	orrs	r2, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	430a      	orrs	r2, r1
 80088b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80088b8:	2300      	movs	r3, #0
 80088ba:	e006      	b.n	80088ca <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088c0:	f043 0204 	orr.w	r2, r3, #4
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
  }
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3714      	adds	r7, #20
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b083      	sub	sp, #12
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d110      	bne.n	800890c <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2202      	movs	r2, #2
 80088ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	699a      	ldr	r2, [r3, #24]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f022 0201 	bic.w	r2, r2, #1
 8008900:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8008908:	2300      	movs	r3, #0
 800890a:	e006      	b.n	800891a <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008910:	f043 0204 	orr.w	r2, r3, #4
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
  }
}
 800891a:	4618      	mov	r0, r3
 800891c:	370c      	adds	r7, #12
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr

08008926 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b086      	sub	sp, #24
 800892a:	af00      	add	r7, sp, #0
 800892c:	60f8      	str	r0, [r7, #12]
 800892e:	60b9      	str	r1, [r7, #8]
 8008930:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b02      	cmp	r3, #2
 800893c:	d12c      	bne.n	8008998 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d007      	beq.n	800895e <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008952:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e023      	b.n	80089a6 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008966:	0c1b      	lsrs	r3, r3, #16
 8008968:	f003 0303 	and.w	r3, r3, #3
 800896c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	68b9      	ldr	r1, [r7, #8]
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f000 fa4f 	bl	8008e18 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2101      	movs	r1, #1
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	fa01 f202 	lsl.w	r2, r1, r2
 8008986:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800898a:	2201      	movs	r2, #1
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	409a      	lsls	r2, r3
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	e006      	b.n	80089a6 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800899c:	f043 0208 	orr.w	r2, r3, #8
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
  }
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3718      	adds	r7, #24
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
	...

080089b0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b08b      	sub	sp, #44	; 0x2c
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
 80089bc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80089c4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80089c6:	7efb      	ldrb	r3, [r7, #27]
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	f040 80bc 	bne.w	8008b46 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	2b40      	cmp	r3, #64	; 0x40
 80089d2:	d121      	bne.n	8008a18 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089dc:	f003 030f 	and.w	r3, r3, #15
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d107      	bne.n	80089f4 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e0af      	b.n	8008b54 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089fc:	0a1b      	lsrs	r3, r3, #8
 80089fe:	f003 0303 	and.w	r3, r3, #3
 8008a02:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8008a08:	69fa      	ldr	r2, [r7, #28]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	00db      	lsls	r3, r3, #3
 8008a0e:	4413      	add	r3, r2
 8008a10:	00db      	lsls	r3, r3, #3
 8008a12:	440b      	add	r3, r1
 8008a14:	627b      	str	r3, [r7, #36]	; 0x24
 8008a16:	e020      	b.n	8008a5a <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a20:	f003 030f 	and.w	r3, r3, #15
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d107      	bne.n	8008a38 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	e08d      	b.n	8008b54 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a40:	0a1b      	lsrs	r3, r3, #8
 8008a42:	f003 0303 	and.w	r3, r3, #3
 8008a46:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008a4c:	69fa      	ldr	r2, [r7, #28]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	00db      	lsls	r3, r3, #3
 8008a52:	4413      	add	r3, r2
 8008a54:	00db      	lsls	r3, r3, #3
 8008a56:	440b      	add	r3, r1
 8008a58:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8008a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d107      	bne.n	8008a7e <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	0c9b      	lsrs	r3, r3, #18
 8008a74:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	601a      	str	r2, [r3, #0]
 8008a7c:	e005      	b.n	8008a8a <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8008a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	0e1b      	lsrs	r3, r3, #24
 8008adc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	0fda      	lsrs	r2, r3, #31
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8008aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af0:	3304      	adds	r3, #4
 8008af2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8008af8:	2300      	movs	r3, #0
 8008afa:	623b      	str	r3, [r7, #32]
 8008afc:	e00a      	b.n	8008b14 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8008afe:	697a      	ldr	r2, [r7, #20]
 8008b00:	6a3b      	ldr	r3, [r7, #32]
 8008b02:	441a      	add	r2, r3
 8008b04:	6839      	ldr	r1, [r7, #0]
 8008b06:	6a3b      	ldr	r3, [r7, #32]
 8008b08:	440b      	add	r3, r1
 8008b0a:	7812      	ldrb	r2, [r2, #0]
 8008b0c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8008b0e:	6a3b      	ldr	r3, [r7, #32]
 8008b10:	3301      	adds	r3, #1
 8008b12:	623b      	str	r3, [r7, #32]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	0c1b      	lsrs	r3, r3, #16
 8008b1a:	4a11      	ldr	r2, [pc, #68]	; (8008b60 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8008b1c:	5cd3      	ldrb	r3, [r2, r3]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	6a3b      	ldr	r3, [r7, #32]
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d3eb      	bcc.n	8008afe <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	2b40      	cmp	r3, #64	; 0x40
 8008b2a:	d105      	bne.n	8008b38 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	69fa      	ldr	r2, [r7, #28]
 8008b32:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8008b36:	e004      	b.n	8008b42 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	69fa      	ldr	r2, [r7, #28]
 8008b3e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8008b42:	2300      	movs	r3, #0
 8008b44:	e006      	b.n	8008b54 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b4a:	f043 0208 	orr.w	r2, r3, #8
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
  }
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	372c      	adds	r7, #44	; 0x2c
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr
 8008b60:	0800e730 	.word	0x0800e730

08008b64 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	2b40      	cmp	r3, #64	; 0x40
 8008b72:	d107      	bne.n	8008b84 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b7c:	f003 030f 	and.w	r3, r3, #15
 8008b80:	60fb      	str	r3, [r7, #12]
 8008b82:	e006      	b.n	8008b92 <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b8c:	f003 030f 	and.w	r3, r3, #15
 8008b90:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8008b92:	68fb      	ldr	r3, [r7, #12]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b087      	sub	sp, #28
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008bb2:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8008bb4:	7dfb      	ldrb	r3, [r7, #23]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d003      	beq.n	8008bc2 <HAL_FDCAN_ActivateNotification+0x22>
 8008bba:	7dfb      	ldrb	r3, [r7, #23]
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	f040 80c8 	bne.w	8008d52 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bc8:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	f003 0307 	and.w	r3, r3, #7
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d004      	beq.n	8008bde <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	f003 0301 	and.w	r3, r3, #1
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d03b      	beq.n	8008c56 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d004      	beq.n	8008bf2 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	f003 0302 	and.w	r3, r3, #2
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d031      	beq.n	8008c56 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d004      	beq.n	8008c06 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	f003 0304 	and.w	r3, r3, #4
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d027      	beq.n	8008c56 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d004      	beq.n	8008c1a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	f003 0308 	and.w	r3, r3, #8
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d01d      	beq.n	8008c56 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d004      	beq.n	8008c2e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	f003 0310 	and.w	r3, r3, #16
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d013      	beq.n	8008c56 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d004      	beq.n	8008c42 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	f003 0320 	and.w	r3, r3, #32
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d009      	beq.n	8008c56 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00c      	beq.n	8008c66 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d107      	bne.n	8008c66 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f042 0201 	orr.w	r2, r2, #1
 8008c64:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	f003 0307 	and.w	r3, r3, #7
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d004      	beq.n	8008c7a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d13b      	bne.n	8008cf2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d004      	beq.n	8008c8e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	f003 0302 	and.w	r3, r3, #2
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d131      	bne.n	8008cf2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d004      	beq.n	8008ca2 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	f003 0304 	and.w	r3, r3, #4
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d127      	bne.n	8008cf2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d004      	beq.n	8008cb6 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	f003 0308 	and.w	r3, r3, #8
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d11d      	bne.n	8008cf2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d004      	beq.n	8008cca <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	f003 0310 	and.w	r3, r3, #16
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d113      	bne.n	8008cf2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d004      	beq.n	8008cde <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	f003 0320 	and.w	r3, r3, #32
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d109      	bne.n	8008cf2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00c      	beq.n	8008d02 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d007      	beq.n	8008d02 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f042 0202 	orr.w	r2, r2, #2
 8008d00:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d009      	beq.n	8008d20 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	430a      	orrs	r2, r1
 8008d1c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d009      	beq.n	8008d3e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	430a      	orrs	r2, r1
 8008d3a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	430a      	orrs	r2, r1
 8008d4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	e006      	b.n	8008d60 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d56:	f043 0202 	orr.w	r2, r3, #2
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
  }
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	371c      	adds	r7, #28
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8008d74:	4b27      	ldr	r3, [pc, #156]	; (8008e14 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8008d76:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d86:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d8e:	041a      	lsls	r2, r3, #16
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	430a      	orrs	r2, r1
 8008d96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dac:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db4:	061a      	lsls	r2, r3, #24
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	430a      	orrs	r2, r1
 8008dbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	60fb      	str	r3, [r7, #12]
 8008dec:	e005      	b.n	8008dfa <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	3304      	adds	r3, #4
 8008df8:	60fb      	str	r3, [r7, #12]
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d3f3      	bcc.n	8008dee <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8008e06:	bf00      	nop
 8008e08:	bf00      	nop
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr
 8008e14:	4000a400 	.word	0x4000a400

08008e18 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b089      	sub	sp, #36	; 0x24
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	607a      	str	r2, [r7, #4]
 8008e24:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d10a      	bne.n	8008e44 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8008e36:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	61fb      	str	r3, [r7, #28]
 8008e42:	e00a      	b.n	8008e5a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008e4c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8008e52:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008e54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e58:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008e64:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8008e6a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8008e70:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008e76:	4313      	orrs	r3, r2
 8008e78:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	4613      	mov	r3, r2
 8008e82:	00db      	lsls	r3, r3, #3
 8008e84:	4413      	add	r3, r2
 8008e86:	00db      	lsls	r3, r3, #3
 8008e88:	440b      	add	r3, r1
 8008e8a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	69fa      	ldr	r2, [r7, #28]
 8008e90:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	3304      	adds	r3, #4
 8008e96:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	693a      	ldr	r2, [r7, #16]
 8008e9c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	3304      	adds	r3, #4
 8008ea2:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	617b      	str	r3, [r7, #20]
 8008ea8:	e020      	b.n	8008eec <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	3303      	adds	r3, #3
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	3302      	adds	r3, #2
 8008eba:	6879      	ldr	r1, [r7, #4]
 8008ebc:	440b      	add	r3, r1
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008ec2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	6879      	ldr	r1, [r7, #4]
 8008eca:	440b      	add	r3, r1
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008ed0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8008ed2:	6879      	ldr	r1, [r7, #4]
 8008ed4:	697a      	ldr	r2, [r7, #20]
 8008ed6:	440a      	add	r2, r1
 8008ed8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008eda:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	3304      	adds	r3, #4
 8008ee4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	3304      	adds	r3, #4
 8008eea:	617b      	str	r3, [r7, #20]
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	0c1b      	lsrs	r3, r3, #16
 8008ef2:	4a06      	ldr	r2, [pc, #24]	; (8008f0c <FDCAN_CopyMessageToRAM+0xf4>)
 8008ef4:	5cd3      	ldrb	r3, [r2, r3]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d3d5      	bcc.n	8008eaa <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8008efe:	bf00      	nop
 8008f00:	bf00      	nop
 8008f02:	3724      	adds	r7, #36	; 0x24
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	0800e730 	.word	0x0800e730

08008f10 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008f22:	4b24      	ldr	r3, [pc, #144]	; (8008fb4 <HAL_FLASH_Program+0xa4>)
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d101      	bne.n	8008f2e <HAL_FLASH_Program+0x1e>
 8008f2a:	2302      	movs	r3, #2
 8008f2c:	e03e      	b.n	8008fac <HAL_FLASH_Program+0x9c>
 8008f2e:	4b21      	ldr	r3, [pc, #132]	; (8008fb4 <HAL_FLASH_Program+0xa4>)
 8008f30:	2201      	movs	r2, #1
 8008f32:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008f34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008f38:	f000 f888 	bl	800904c <FLASH_WaitForLastOperation>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8008f40:	7dfb      	ldrb	r3, [r7, #23]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d12e      	bne.n	8008fa4 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008f46:	4b1b      	ldr	r3, [pc, #108]	; (8008fb4 <HAL_FLASH_Program+0xa4>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d107      	bne.n	8008f62 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8008f52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f56:	68b8      	ldr	r0, [r7, #8]
 8008f58:	f000 f8cc 	bl	80090f4 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	613b      	str	r3, [r7, #16]
 8008f60:	e010      	b.n	8008f84 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d002      	beq.n	8008f6e <HAL_FLASH_Program+0x5e>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d10a      	bne.n	8008f84 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	4619      	mov	r1, r3
 8008f72:	68b8      	ldr	r0, [r7, #8]
 8008f74:	f000 f8e4 	bl	8009140 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	d102      	bne.n	8008f84 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8008f7e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008f82:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008f84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008f88:	f000 f860 	bl	800904c <FLASH_WaitForLastOperation>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d006      	beq.n	8008fa4 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8008f96:	4b08      	ldr	r3, [pc, #32]	; (8008fb8 <HAL_FLASH_Program+0xa8>)
 8008f98:	695a      	ldr	r2, [r3, #20]
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	43db      	mvns	r3, r3
 8008f9e:	4906      	ldr	r1, [pc, #24]	; (8008fb8 <HAL_FLASH_Program+0xa8>)
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008fa4:	4b03      	ldr	r3, [pc, #12]	; (8008fb4 <HAL_FLASH_Program+0xa4>)
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8008faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3718      	adds	r7, #24
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	20000024 	.word	0x20000024
 8008fb8:	40022000 	.word	0x40022000

08008fbc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8008fc6:	4b0b      	ldr	r3, [pc, #44]	; (8008ff4 <HAL_FLASH_Unlock+0x38>)
 8008fc8:	695b      	ldr	r3, [r3, #20]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	da0b      	bge.n	8008fe6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008fce:	4b09      	ldr	r3, [pc, #36]	; (8008ff4 <HAL_FLASH_Unlock+0x38>)
 8008fd0:	4a09      	ldr	r2, [pc, #36]	; (8008ff8 <HAL_FLASH_Unlock+0x3c>)
 8008fd2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008fd4:	4b07      	ldr	r3, [pc, #28]	; (8008ff4 <HAL_FLASH_Unlock+0x38>)
 8008fd6:	4a09      	ldr	r2, [pc, #36]	; (8008ffc <HAL_FLASH_Unlock+0x40>)
 8008fd8:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8008fda:	4b06      	ldr	r3, [pc, #24]	; (8008ff4 <HAL_FLASH_Unlock+0x38>)
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	da01      	bge.n	8008fe6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8008fe6:	79fb      	ldrb	r3, [r7, #7]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr
 8008ff4:	40022000 	.word	0x40022000
 8008ff8:	45670123 	.word	0x45670123
 8008ffc:	cdef89ab 	.word	0xcdef89ab

08009000 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800900a:	4b09      	ldr	r3, [pc, #36]	; (8009030 <HAL_FLASH_Lock+0x30>)
 800900c:	695b      	ldr	r3, [r3, #20]
 800900e:	4a08      	ldr	r2, [pc, #32]	; (8009030 <HAL_FLASH_Lock+0x30>)
 8009010:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009014:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009016:	4b06      	ldr	r3, [pc, #24]	; (8009030 <HAL_FLASH_Lock+0x30>)
 8009018:	695b      	ldr	r3, [r3, #20]
 800901a:	2b00      	cmp	r3, #0
 800901c:	da01      	bge.n	8009022 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 800901e:	2300      	movs	r3, #0
 8009020:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009022:	79fb      	ldrb	r3, [r7, #7]
}
 8009024:	4618      	mov	r0, r3
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr
 8009030:	40022000 	.word	0x40022000

08009034 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 8009034:	b480      	push	{r7}
 8009036:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8009038:	4b03      	ldr	r3, [pc, #12]	; (8009048 <HAL_FLASH_GetError+0x14>)
 800903a:	685b      	ldr	r3, [r3, #4]
}
 800903c:	4618      	mov	r0, r3
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	20000024 	.word	0x20000024

0800904c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8009054:	f7fd f812 	bl	800607c <HAL_GetTick>
 8009058:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800905a:	e009      	b.n	8009070 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 800905c:	f7fd f80e 	bl	800607c <HAL_GetTick>
 8009060:	4602      	mov	r2, r0
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	429a      	cmp	r2, r3
 800906a:	d201      	bcs.n	8009070 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800906c:	2303      	movs	r3, #3
 800906e:	e038      	b.n	80090e2 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8009070:	4b1e      	ldr	r3, [pc, #120]	; (80090ec <FLASH_WaitForLastOperation+0xa0>)
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800907c:	d0ee      	beq.n	800905c <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800907e:	4b1b      	ldr	r3, [pc, #108]	; (80090ec <FLASH_WaitForLastOperation+0xa0>)
 8009080:	691a      	ldr	r2, [r3, #16]
 8009082:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8009086:	4013      	ands	r3, r2
 8009088:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d01e      	beq.n	80090ce <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8009090:	4b17      	ldr	r3, [pc, #92]	; (80090f0 <FLASH_WaitForLastOperation+0xa4>)
 8009092:	685a      	ldr	r2, [r3, #4]
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	4313      	orrs	r3, r2
 8009098:	4a15      	ldr	r2, [pc, #84]	; (80090f0 <FLASH_WaitForLastOperation+0xa4>)
 800909a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d007      	beq.n	80090b6 <FLASH_WaitForLastOperation+0x6a>
 80090a6:	4b11      	ldr	r3, [pc, #68]	; (80090ec <FLASH_WaitForLastOperation+0xa0>)
 80090a8:	699a      	ldr	r2, [r3, #24]
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80090b0:	490e      	ldr	r1, [pc, #56]	; (80090ec <FLASH_WaitForLastOperation+0xa0>)
 80090b2:	4313      	orrs	r3, r2
 80090b4:	618b      	str	r3, [r1, #24]
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d004      	beq.n	80090ca <FLASH_WaitForLastOperation+0x7e>
 80090c0:	4a0a      	ldr	r2, [pc, #40]	; (80090ec <FLASH_WaitForLastOperation+0xa0>)
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80090c8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	e009      	b.n	80090e2 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80090ce:	4b07      	ldr	r3, [pc, #28]	; (80090ec <FLASH_WaitForLastOperation+0xa0>)
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	f003 0301 	and.w	r3, r3, #1
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d102      	bne.n	80090e0 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80090da:	4b04      	ldr	r3, [pc, #16]	; (80090ec <FLASH_WaitForLastOperation+0xa0>)
 80090dc:	2201      	movs	r2, #1
 80090de:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	40022000 	.word	0x40022000
 80090f0:	20000024 	.word	0x20000024

080090f4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009100:	4b0e      	ldr	r3, [pc, #56]	; (800913c <FLASH_Program_DoubleWord+0x48>)
 8009102:	695b      	ldr	r3, [r3, #20]
 8009104:	4a0d      	ldr	r2, [pc, #52]	; (800913c <FLASH_Program_DoubleWord+0x48>)
 8009106:	f043 0301 	orr.w	r3, r3, #1
 800910a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	683a      	ldr	r2, [r7, #0]
 8009110:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8009112:	f3bf 8f6f 	isb	sy
}
 8009116:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8009118:	e9d7 0100 	ldrd	r0, r1, [r7]
 800911c:	f04f 0200 	mov.w	r2, #0
 8009120:	f04f 0300 	mov.w	r3, #0
 8009124:	000a      	movs	r2, r1
 8009126:	2300      	movs	r3, #0
 8009128:	68f9      	ldr	r1, [r7, #12]
 800912a:	3104      	adds	r1, #4
 800912c:	4613      	mov	r3, r2
 800912e:	600b      	str	r3, [r1, #0]
}
 8009130:	bf00      	nop
 8009132:	3714      	adds	r7, #20
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	40022000 	.word	0x40022000

08009140 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8009140:	b480      	push	{r7}
 8009142:	b089      	sub	sp, #36	; 0x24
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800914a:	2340      	movs	r3, #64	; 0x40
 800914c:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8009156:	4b14      	ldr	r3, [pc, #80]	; (80091a8 <FLASH_Program_Fast+0x68>)
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	4a13      	ldr	r2, [pc, #76]	; (80091a8 <FLASH_Program_Fast+0x68>)
 800915c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009160:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009162:	f3ef 8310 	mrs	r3, PRIMASK
 8009166:	60fb      	str	r3, [r7, #12]
  return(result);
 8009168:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800916a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800916c:	b672      	cpsid	i
}
 800916e:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	3304      	adds	r3, #4
 800917c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	3304      	adds	r3, #4
 8009182:	617b      	str	r3, [r7, #20]
    row_index--;
 8009184:	7ffb      	ldrb	r3, [r7, #31]
 8009186:	3b01      	subs	r3, #1
 8009188:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800918a:	7ffb      	ldrb	r3, [r7, #31]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1ef      	bne.n	8009170 <FLASH_Program_Fast+0x30>
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	f383 8810 	msr	PRIMASK, r3
}
 800919a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800919c:	bf00      	nop
 800919e:	3724      	adds	r7, #36	; 0x24
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr
 80091a8:	40022000 	.word	0x40022000

080091ac <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80091b6:	4b4a      	ldr	r3, [pc, #296]	; (80092e0 <HAL_FLASHEx_Erase+0x134>)
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d101      	bne.n	80091c2 <HAL_FLASHEx_Erase+0x16>
 80091be:	2302      	movs	r3, #2
 80091c0:	e089      	b.n	80092d6 <HAL_FLASHEx_Erase+0x12a>
 80091c2:	4b47      	ldr	r3, [pc, #284]	; (80092e0 <HAL_FLASHEx_Erase+0x134>)
 80091c4:	2201      	movs	r2, #1
 80091c6:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80091c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80091cc:	f7ff ff3e 	bl	800904c <FLASH_WaitForLastOperation>
 80091d0:	4603      	mov	r3, r0
 80091d2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d179      	bne.n	80092ce <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80091da:	4b41      	ldr	r3, [pc, #260]	; (80092e0 <HAL_FLASHEx_Erase+0x134>)
 80091dc:	2200      	movs	r2, #0
 80091de:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80091e0:	4b40      	ldr	r3, [pc, #256]	; (80092e4 <HAL_FLASHEx_Erase+0x138>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d019      	beq.n	8009220 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80091ec:	4b3d      	ldr	r3, [pc, #244]	; (80092e4 <HAL_FLASHEx_Erase+0x138>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a3c      	ldr	r2, [pc, #240]	; (80092e4 <HAL_FLASHEx_Erase+0x138>)
 80091f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091f6:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80091f8:	4b3a      	ldr	r3, [pc, #232]	; (80092e4 <HAL_FLASHEx_Erase+0x138>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009200:	2b00      	cmp	r3, #0
 8009202:	d009      	beq.n	8009218 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8009204:	4b37      	ldr	r3, [pc, #220]	; (80092e4 <HAL_FLASHEx_Erase+0x138>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a36      	ldr	r2, [pc, #216]	; (80092e4 <HAL_FLASHEx_Erase+0x138>)
 800920a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800920e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8009210:	4b33      	ldr	r3, [pc, #204]	; (80092e0 <HAL_FLASHEx_Erase+0x134>)
 8009212:	2203      	movs	r2, #3
 8009214:	771a      	strb	r2, [r3, #28]
 8009216:	e016      	b.n	8009246 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8009218:	4b31      	ldr	r3, [pc, #196]	; (80092e0 <HAL_FLASHEx_Erase+0x134>)
 800921a:	2201      	movs	r2, #1
 800921c:	771a      	strb	r2, [r3, #28]
 800921e:	e012      	b.n	8009246 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009220:	4b30      	ldr	r3, [pc, #192]	; (80092e4 <HAL_FLASHEx_Erase+0x138>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009228:	2b00      	cmp	r3, #0
 800922a:	d009      	beq.n	8009240 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800922c:	4b2d      	ldr	r3, [pc, #180]	; (80092e4 <HAL_FLASHEx_Erase+0x138>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a2c      	ldr	r2, [pc, #176]	; (80092e4 <HAL_FLASHEx_Erase+0x138>)
 8009232:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009236:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8009238:	4b29      	ldr	r3, [pc, #164]	; (80092e0 <HAL_FLASHEx_Erase+0x134>)
 800923a:	2202      	movs	r2, #2
 800923c:	771a      	strb	r2, [r3, #28]
 800923e:	e002      	b.n	8009246 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009240:	4b27      	ldr	r3, [pc, #156]	; (80092e0 <HAL_FLASHEx_Erase+0x134>)
 8009242:	2200      	movs	r2, #0
 8009244:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d111      	bne.n	8009272 <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	4618      	mov	r0, r3
 8009254:	f000 f848 	bl	80092e8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009258:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800925c:	f7ff fef6 	bl	800904c <FLASH_WaitForLastOperation>
 8009260:	4603      	mov	r3, r0
 8009262:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8009264:	4b1f      	ldr	r3, [pc, #124]	; (80092e4 <HAL_FLASHEx_Erase+0x138>)
 8009266:	695b      	ldr	r3, [r3, #20]
 8009268:	4a1e      	ldr	r2, [pc, #120]	; (80092e4 <HAL_FLASHEx_Erase+0x138>)
 800926a:	f023 0304 	bic.w	r3, r3, #4
 800926e:	6153      	str	r3, [r2, #20]
 8009270:	e02b      	b.n	80092ca <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	f04f 32ff 	mov.w	r2, #4294967295
 8009278:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	60bb      	str	r3, [r7, #8]
 8009280:	e01b      	b.n	80092ba <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	4619      	mov	r1, r3
 8009288:	68b8      	ldr	r0, [r7, #8]
 800928a:	f000 f84b 	bl	8009324 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800928e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009292:	f7ff fedb 	bl	800904c <FLASH_WaitForLastOperation>
 8009296:	4603      	mov	r3, r0
 8009298:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800929a:	4b12      	ldr	r3, [pc, #72]	; (80092e4 <HAL_FLASHEx_Erase+0x138>)
 800929c:	695b      	ldr	r3, [r3, #20]
 800929e:	4a11      	ldr	r2, [pc, #68]	; (80092e4 <HAL_FLASHEx_Erase+0x138>)
 80092a0:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 80092a4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80092a6:	7bfb      	ldrb	r3, [r7, #15]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d003      	beq.n	80092b4 <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	68ba      	ldr	r2, [r7, #8]
 80092b0:	601a      	str	r2, [r3, #0]
          break;
 80092b2:	e00a      	b.n	80092ca <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	3301      	adds	r3, #1
 80092b8:	60bb      	str	r3, [r7, #8]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	689a      	ldr	r2, [r3, #8]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	4413      	add	r3, r2
 80092c4:	68ba      	ldr	r2, [r7, #8]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d3db      	bcc.n	8009282 <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80092ca:	f000 f84f 	bl	800936c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80092ce:	4b04      	ldr	r3, [pc, #16]	; (80092e0 <HAL_FLASHEx_Erase+0x134>)
 80092d0:	2200      	movs	r2, #0
 80092d2:	701a      	strb	r2, [r3, #0]

  return status;
 80092d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	20000024 	.word	0x20000024
 80092e4:	40022000 	.word	0x40022000

080092e8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d005      	beq.n	8009306 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80092fa:	4b09      	ldr	r3, [pc, #36]	; (8009320 <FLASH_MassErase+0x38>)
 80092fc:	695b      	ldr	r3, [r3, #20]
 80092fe:	4a08      	ldr	r2, [pc, #32]	; (8009320 <FLASH_MassErase+0x38>)
 8009300:	f043 0304 	orr.w	r3, r3, #4
 8009304:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009306:	4b06      	ldr	r3, [pc, #24]	; (8009320 <FLASH_MassErase+0x38>)
 8009308:	695b      	ldr	r3, [r3, #20]
 800930a:	4a05      	ldr	r2, [pc, #20]	; (8009320 <FLASH_MassErase+0x38>)
 800930c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009310:	6153      	str	r3, [r2, #20]
}
 8009312:	bf00      	nop
 8009314:	370c      	adds	r7, #12
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	40022000 	.word	0x40022000

08009324 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800932e:	4b0e      	ldr	r3, [pc, #56]	; (8009368 <FLASH_PageErase+0x44>)
 8009330:	695b      	ldr	r3, [r3, #20]
 8009332:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	00db      	lsls	r3, r3, #3
 800933a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800933e:	490a      	ldr	r1, [pc, #40]	; (8009368 <FLASH_PageErase+0x44>)
 8009340:	4313      	orrs	r3, r2
 8009342:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8009344:	4b08      	ldr	r3, [pc, #32]	; (8009368 <FLASH_PageErase+0x44>)
 8009346:	695b      	ldr	r3, [r3, #20]
 8009348:	4a07      	ldr	r2, [pc, #28]	; (8009368 <FLASH_PageErase+0x44>)
 800934a:	f043 0302 	orr.w	r3, r3, #2
 800934e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009350:	4b05      	ldr	r3, [pc, #20]	; (8009368 <FLASH_PageErase+0x44>)
 8009352:	695b      	ldr	r3, [r3, #20]
 8009354:	4a04      	ldr	r2, [pc, #16]	; (8009368 <FLASH_PageErase+0x44>)
 8009356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800935a:	6153      	str	r3, [r2, #20]
}
 800935c:	bf00      	nop
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	40022000 	.word	0x40022000

0800936c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8009372:	4b1e      	ldr	r3, [pc, #120]	; (80093ec <FLASH_FlushCaches+0x80>)
 8009374:	7f1b      	ldrb	r3, [r3, #28]
 8009376:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8009378:	79fb      	ldrb	r3, [r7, #7]
 800937a:	2b01      	cmp	r3, #1
 800937c:	d002      	beq.n	8009384 <FLASH_FlushCaches+0x18>
 800937e:	79fb      	ldrb	r3, [r7, #7]
 8009380:	2b03      	cmp	r3, #3
 8009382:	d111      	bne.n	80093a8 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8009384:	4b1a      	ldr	r3, [pc, #104]	; (80093f0 <FLASH_FlushCaches+0x84>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a19      	ldr	r2, [pc, #100]	; (80093f0 <FLASH_FlushCaches+0x84>)
 800938a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800938e:	6013      	str	r3, [r2, #0]
 8009390:	4b17      	ldr	r3, [pc, #92]	; (80093f0 <FLASH_FlushCaches+0x84>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a16      	ldr	r2, [pc, #88]	; (80093f0 <FLASH_FlushCaches+0x84>)
 8009396:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800939a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800939c:	4b14      	ldr	r3, [pc, #80]	; (80093f0 <FLASH_FlushCaches+0x84>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a13      	ldr	r2, [pc, #76]	; (80093f0 <FLASH_FlushCaches+0x84>)
 80093a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80093a6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80093a8:	79fb      	ldrb	r3, [r7, #7]
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d002      	beq.n	80093b4 <FLASH_FlushCaches+0x48>
 80093ae:	79fb      	ldrb	r3, [r7, #7]
 80093b0:	2b03      	cmp	r3, #3
 80093b2:	d111      	bne.n	80093d8 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80093b4:	4b0e      	ldr	r3, [pc, #56]	; (80093f0 <FLASH_FlushCaches+0x84>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a0d      	ldr	r2, [pc, #52]	; (80093f0 <FLASH_FlushCaches+0x84>)
 80093ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80093be:	6013      	str	r3, [r2, #0]
 80093c0:	4b0b      	ldr	r3, [pc, #44]	; (80093f0 <FLASH_FlushCaches+0x84>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a0a      	ldr	r2, [pc, #40]	; (80093f0 <FLASH_FlushCaches+0x84>)
 80093c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093ca:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80093cc:	4b08      	ldr	r3, [pc, #32]	; (80093f0 <FLASH_FlushCaches+0x84>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a07      	ldr	r2, [pc, #28]	; (80093f0 <FLASH_FlushCaches+0x84>)
 80093d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80093d6:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80093d8:	4b04      	ldr	r3, [pc, #16]	; (80093ec <FLASH_FlushCaches+0x80>)
 80093da:	2200      	movs	r2, #0
 80093dc:	771a      	strb	r2, [r3, #28]
}
 80093de:	bf00      	nop
 80093e0:	370c      	adds	r7, #12
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop
 80093ec:	20000024 	.word	0x20000024
 80093f0:	40022000 	.word	0x40022000

080093f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b087      	sub	sp, #28
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80093fe:	2300      	movs	r3, #0
 8009400:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009402:	e15a      	b.n	80096ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	2101      	movs	r1, #1
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	fa01 f303 	lsl.w	r3, r1, r3
 8009410:	4013      	ands	r3, r2
 8009412:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2b00      	cmp	r3, #0
 8009418:	f000 814c 	beq.w	80096b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	2b01      	cmp	r3, #1
 8009422:	d00b      	beq.n	800943c <HAL_GPIO_Init+0x48>
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	2b02      	cmp	r3, #2
 800942a:	d007      	beq.n	800943c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009430:	2b11      	cmp	r3, #17
 8009432:	d003      	beq.n	800943c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	2b12      	cmp	r3, #18
 800943a:	d130      	bne.n	800949e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	005b      	lsls	r3, r3, #1
 8009446:	2203      	movs	r2, #3
 8009448:	fa02 f303 	lsl.w	r3, r2, r3
 800944c:	43db      	mvns	r3, r3
 800944e:	693a      	ldr	r2, [r7, #16]
 8009450:	4013      	ands	r3, r2
 8009452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	68da      	ldr	r2, [r3, #12]
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	005b      	lsls	r3, r3, #1
 800945c:	fa02 f303 	lsl.w	r3, r2, r3
 8009460:	693a      	ldr	r2, [r7, #16]
 8009462:	4313      	orrs	r3, r2
 8009464:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	693a      	ldr	r2, [r7, #16]
 800946a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009472:	2201      	movs	r2, #1
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	fa02 f303 	lsl.w	r3, r2, r3
 800947a:	43db      	mvns	r3, r3
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	4013      	ands	r3, r2
 8009480:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	091b      	lsrs	r3, r3, #4
 8009488:	f003 0201 	and.w	r2, r3, #1
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	fa02 f303 	lsl.w	r3, r2, r3
 8009492:	693a      	ldr	r2, [r7, #16]
 8009494:	4313      	orrs	r3, r2
 8009496:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	693a      	ldr	r2, [r7, #16]
 800949c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	005b      	lsls	r3, r3, #1
 80094a8:	2203      	movs	r2, #3
 80094aa:	fa02 f303 	lsl.w	r3, r2, r3
 80094ae:	43db      	mvns	r3, r3
 80094b0:	693a      	ldr	r2, [r7, #16]
 80094b2:	4013      	ands	r3, r2
 80094b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	689a      	ldr	r2, [r3, #8]
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	005b      	lsls	r3, r3, #1
 80094be:	fa02 f303 	lsl.w	r3, r2, r3
 80094c2:	693a      	ldr	r2, [r7, #16]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	693a      	ldr	r2, [r7, #16]
 80094cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	d003      	beq.n	80094de <HAL_GPIO_Init+0xea>
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	2b12      	cmp	r3, #18
 80094dc:	d123      	bne.n	8009526 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	08da      	lsrs	r2, r3, #3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	3208      	adds	r2, #8
 80094e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	f003 0307 	and.w	r3, r3, #7
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	220f      	movs	r2, #15
 80094f6:	fa02 f303 	lsl.w	r3, r2, r3
 80094fa:	43db      	mvns	r3, r3
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	4013      	ands	r3, r2
 8009500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	691a      	ldr	r2, [r3, #16]
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	f003 0307 	and.w	r3, r3, #7
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	fa02 f303 	lsl.w	r3, r2, r3
 8009512:	693a      	ldr	r2, [r7, #16]
 8009514:	4313      	orrs	r3, r2
 8009516:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	08da      	lsrs	r2, r3, #3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	3208      	adds	r2, #8
 8009520:	6939      	ldr	r1, [r7, #16]
 8009522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	005b      	lsls	r3, r3, #1
 8009530:	2203      	movs	r2, #3
 8009532:	fa02 f303 	lsl.w	r3, r2, r3
 8009536:	43db      	mvns	r3, r3
 8009538:	693a      	ldr	r2, [r7, #16]
 800953a:	4013      	ands	r3, r2
 800953c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	f003 0203 	and.w	r2, r3, #3
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	005b      	lsls	r3, r3, #1
 800954a:	fa02 f303 	lsl.w	r3, r2, r3
 800954e:	693a      	ldr	r2, [r7, #16]
 8009550:	4313      	orrs	r3, r2
 8009552:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	693a      	ldr	r2, [r7, #16]
 8009558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009562:	2b00      	cmp	r3, #0
 8009564:	f000 80a6 	beq.w	80096b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009568:	4b5b      	ldr	r3, [pc, #364]	; (80096d8 <HAL_GPIO_Init+0x2e4>)
 800956a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800956c:	4a5a      	ldr	r2, [pc, #360]	; (80096d8 <HAL_GPIO_Init+0x2e4>)
 800956e:	f043 0301 	orr.w	r3, r3, #1
 8009572:	6613      	str	r3, [r2, #96]	; 0x60
 8009574:	4b58      	ldr	r3, [pc, #352]	; (80096d8 <HAL_GPIO_Init+0x2e4>)
 8009576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	60bb      	str	r3, [r7, #8]
 800957e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009580:	4a56      	ldr	r2, [pc, #344]	; (80096dc <HAL_GPIO_Init+0x2e8>)
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	089b      	lsrs	r3, r3, #2
 8009586:	3302      	adds	r3, #2
 8009588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800958c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	f003 0303 	and.w	r3, r3, #3
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	220f      	movs	r2, #15
 8009598:	fa02 f303 	lsl.w	r3, r2, r3
 800959c:	43db      	mvns	r3, r3
 800959e:	693a      	ldr	r2, [r7, #16]
 80095a0:	4013      	ands	r3, r2
 80095a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80095aa:	d01f      	beq.n	80095ec <HAL_GPIO_Init+0x1f8>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a4c      	ldr	r2, [pc, #304]	; (80096e0 <HAL_GPIO_Init+0x2ec>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d019      	beq.n	80095e8 <HAL_GPIO_Init+0x1f4>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a4b      	ldr	r2, [pc, #300]	; (80096e4 <HAL_GPIO_Init+0x2f0>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d013      	beq.n	80095e4 <HAL_GPIO_Init+0x1f0>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a4a      	ldr	r2, [pc, #296]	; (80096e8 <HAL_GPIO_Init+0x2f4>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d00d      	beq.n	80095e0 <HAL_GPIO_Init+0x1ec>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a49      	ldr	r2, [pc, #292]	; (80096ec <HAL_GPIO_Init+0x2f8>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d007      	beq.n	80095dc <HAL_GPIO_Init+0x1e8>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a48      	ldr	r2, [pc, #288]	; (80096f0 <HAL_GPIO_Init+0x2fc>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d101      	bne.n	80095d8 <HAL_GPIO_Init+0x1e4>
 80095d4:	2305      	movs	r3, #5
 80095d6:	e00a      	b.n	80095ee <HAL_GPIO_Init+0x1fa>
 80095d8:	2306      	movs	r3, #6
 80095da:	e008      	b.n	80095ee <HAL_GPIO_Init+0x1fa>
 80095dc:	2304      	movs	r3, #4
 80095de:	e006      	b.n	80095ee <HAL_GPIO_Init+0x1fa>
 80095e0:	2303      	movs	r3, #3
 80095e2:	e004      	b.n	80095ee <HAL_GPIO_Init+0x1fa>
 80095e4:	2302      	movs	r3, #2
 80095e6:	e002      	b.n	80095ee <HAL_GPIO_Init+0x1fa>
 80095e8:	2301      	movs	r3, #1
 80095ea:	e000      	b.n	80095ee <HAL_GPIO_Init+0x1fa>
 80095ec:	2300      	movs	r3, #0
 80095ee:	697a      	ldr	r2, [r7, #20]
 80095f0:	f002 0203 	and.w	r2, r2, #3
 80095f4:	0092      	lsls	r2, r2, #2
 80095f6:	4093      	lsls	r3, r2
 80095f8:	693a      	ldr	r2, [r7, #16]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80095fe:	4937      	ldr	r1, [pc, #220]	; (80096dc <HAL_GPIO_Init+0x2e8>)
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	089b      	lsrs	r3, r3, #2
 8009604:	3302      	adds	r3, #2
 8009606:	693a      	ldr	r2, [r7, #16]
 8009608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800960c:	4b39      	ldr	r3, [pc, #228]	; (80096f4 <HAL_GPIO_Init+0x300>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	43db      	mvns	r3, r3
 8009616:	693a      	ldr	r2, [r7, #16]
 8009618:	4013      	ands	r3, r2
 800961a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d003      	beq.n	8009630 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009628:	693a      	ldr	r2, [r7, #16]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	4313      	orrs	r3, r2
 800962e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009630:	4a30      	ldr	r2, [pc, #192]	; (80096f4 <HAL_GPIO_Init+0x300>)
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8009636:	4b2f      	ldr	r3, [pc, #188]	; (80096f4 <HAL_GPIO_Init+0x300>)
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	43db      	mvns	r3, r3
 8009640:	693a      	ldr	r2, [r7, #16]
 8009642:	4013      	ands	r3, r2
 8009644:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800964e:	2b00      	cmp	r3, #0
 8009650:	d003      	beq.n	800965a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	4313      	orrs	r3, r2
 8009658:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800965a:	4a26      	ldr	r2, [pc, #152]	; (80096f4 <HAL_GPIO_Init+0x300>)
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009660:	4b24      	ldr	r3, [pc, #144]	; (80096f4 <HAL_GPIO_Init+0x300>)
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	43db      	mvns	r3, r3
 800966a:	693a      	ldr	r2, [r7, #16]
 800966c:	4013      	ands	r3, r2
 800966e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009678:	2b00      	cmp	r3, #0
 800967a:	d003      	beq.n	8009684 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800967c:	693a      	ldr	r2, [r7, #16]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	4313      	orrs	r3, r2
 8009682:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009684:	4a1b      	ldr	r2, [pc, #108]	; (80096f4 <HAL_GPIO_Init+0x300>)
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800968a:	4b1a      	ldr	r3, [pc, #104]	; (80096f4 <HAL_GPIO_Init+0x300>)
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	43db      	mvns	r3, r3
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	4013      	ands	r3, r2
 8009698:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d003      	beq.n	80096ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80096ae:	4a11      	ldr	r2, [pc, #68]	; (80096f4 <HAL_GPIO_Init+0x300>)
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	3301      	adds	r3, #1
 80096b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	fa22 f303 	lsr.w	r3, r2, r3
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f47f ae9d 	bne.w	8009404 <HAL_GPIO_Init+0x10>
  }
}
 80096ca:	bf00      	nop
 80096cc:	bf00      	nop
 80096ce:	371c      	adds	r7, #28
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr
 80096d8:	40021000 	.word	0x40021000
 80096dc:	40010000 	.word	0x40010000
 80096e0:	48000400 	.word	0x48000400
 80096e4:	48000800 	.word	0x48000800
 80096e8:	48000c00 	.word	0x48000c00
 80096ec:	48001000 	.word	0x48001000
 80096f0:	48001400 	.word	0x48001400
 80096f4:	40010400 	.word	0x40010400

080096f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	460b      	mov	r3, r1
 8009702:	807b      	strh	r3, [r7, #2]
 8009704:	4613      	mov	r3, r2
 8009706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009708:	787b      	ldrb	r3, [r7, #1]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d003      	beq.n	8009716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800970e:	887a      	ldrh	r2, [r7, #2]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009714:	e002      	b.n	800971c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009716:	887a      	ldrh	r2, [r7, #2]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800971c:	bf00      	nop
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009730:	2300      	movs	r3, #0
 8009732:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d101      	bne.n	800973e <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	e0bb      	b.n	80098b6 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009744:	b2db      	uxtb	r3, r3
 8009746:	2b05      	cmp	r3, #5
 8009748:	d101      	bne.n	800974e <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	e0b3      	b.n	80098b6 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b02      	cmp	r3, #2
 8009758:	d101      	bne.n	800975e <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e0ab      	b.n	80098b6 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800975e:	4b58      	ldr	r3, [pc, #352]	; (80098c0 <HAL_OPAMP_Init+0x198>)
 8009760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009762:	4a57      	ldr	r2, [pc, #348]	; (80098c0 <HAL_OPAMP_Init+0x198>)
 8009764:	f043 0301 	orr.w	r3, r3, #1
 8009768:	6613      	str	r3, [r2, #96]	; 0x60
 800976a:	4b55      	ldr	r3, [pc, #340]	; (80098c0 <HAL_OPAMP_Init+0x198>)
 800976c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800976e:	f003 0301 	and.w	r3, r3, #1
 8009772:	60bb      	str	r3, [r7, #8]
 8009774:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800977c:	b2db      	uxtb	r3, r3
 800977e:	2b00      	cmp	r3, #0
 8009780:	d103      	bne.n	800978a <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f7fc f942 	bl	8005a14 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	2b40      	cmp	r3, #64	; 0x40
 8009796:	d003      	beq.n	80097a0 <HAL_OPAMP_Init+0x78>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	2b60      	cmp	r3, #96	; 0x60
 800979e:	d133      	bne.n	8009808 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f023 0110 	bic.w	r1, r3, #16
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	430a      	orrs	r2, r1
 80097b4:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	4b41      	ldr	r3, [pc, #260]	; (80098c4 <HAL_OPAMP_Init+0x19c>)
 80097be:	4013      	ands	r3, r2
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	6851      	ldr	r1, [r2, #4]
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	6892      	ldr	r2, [r2, #8]
 80097c8:	4311      	orrs	r1, r2
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	6912      	ldr	r2, [r2, #16]
 80097ce:	430a      	orrs	r2, r1
 80097d0:	6879      	ldr	r1, [r7, #4]
 80097d2:	7d09      	ldrb	r1, [r1, #20]
 80097d4:	2901      	cmp	r1, #1
 80097d6:	d102      	bne.n	80097de <HAL_OPAMP_Init+0xb6>
 80097d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80097dc:	e000      	b.n	80097e0 <HAL_OPAMP_Init+0xb8>
 80097de:	2100      	movs	r1, #0
 80097e0:	4311      	orrs	r1, r2
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80097e6:	4311      	orrs	r1, r2
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80097ec:	4311      	orrs	r1, r2
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80097f2:	04d2      	lsls	r2, r2, #19
 80097f4:	4311      	orrs	r1, r2
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80097fa:	0612      	lsls	r2, r2, #24
 80097fc:	4311      	orrs	r1, r2
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	6812      	ldr	r2, [r2, #0]
 8009802:	430b      	orrs	r3, r1
 8009804:	6013      	str	r3, [r2, #0]
 8009806:	e035      	b.n	8009874 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f023 0110 	bic.w	r1, r3, #16
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	430a      	orrs	r2, r1
 800981c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	4b27      	ldr	r3, [pc, #156]	; (80098c4 <HAL_OPAMP_Init+0x19c>)
 8009826:	4013      	ands	r3, r2
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	6851      	ldr	r1, [r2, #4]
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	6892      	ldr	r2, [r2, #8]
 8009830:	4311      	orrs	r1, r2
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	68d2      	ldr	r2, [r2, #12]
 8009836:	4311      	orrs	r1, r2
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	6912      	ldr	r2, [r2, #16]
 800983c:	430a      	orrs	r2, r1
 800983e:	6879      	ldr	r1, [r7, #4]
 8009840:	7d09      	ldrb	r1, [r1, #20]
 8009842:	2901      	cmp	r1, #1
 8009844:	d102      	bne.n	800984c <HAL_OPAMP_Init+0x124>
 8009846:	f44f 7180 	mov.w	r1, #256	; 0x100
 800984a:	e000      	b.n	800984e <HAL_OPAMP_Init+0x126>
 800984c:	2100      	movs	r1, #0
 800984e:	4311      	orrs	r1, r2
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009854:	4311      	orrs	r1, r2
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800985a:	4311      	orrs	r1, r2
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009860:	04d2      	lsls	r2, r2, #19
 8009862:	4311      	orrs	r1, r2
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009868:	0612      	lsls	r2, r2, #24
 800986a:	4311      	orrs	r1, r2
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	6812      	ldr	r2, [r2, #0]
 8009870:	430b      	orrs	r3, r1
 8009872:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	699b      	ldr	r3, [r3, #24]
 800987a:	2b00      	cmp	r3, #0
 800987c:	db10      	blt.n	80098a0 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	699b      	ldr	r3, [r3, #24]
 8009884:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	699a      	ldr	r2, [r3, #24]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	69db      	ldr	r3, [r3, #28]
 8009890:	431a      	orrs	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a1b      	ldr	r3, [r3, #32]
 8009896:	431a      	orrs	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	430a      	orrs	r2, r1
 800989e:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d103      	bne.n	80098b4 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80098b4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	40021000 	.word	0x40021000
 80098c4:	e0003e11 	.word	0xe0003e11

080098c8 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098d0:	2300      	movs	r3, #0
 80098d2:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d102      	bne.n	80098e0 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	73fb      	strb	r3, [r7, #15]
 80098de:	e01d      	b.n	800991c <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	2b05      	cmp	r3, #5
 80098ea:	d102      	bne.n	80098f2 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80098ec:	2301      	movs	r3, #1
 80098ee:	73fb      	strb	r3, [r7, #15]
 80098f0:	e014      	b.n	800991c <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d10c      	bne.n	8009918 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f042 0201 	orr.w	r2, r2, #1
 800990c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2204      	movs	r2, #4
 8009912:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8009916:	e001      	b.n	800991c <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 800991c:	7bfb      	ldrb	r3, [r7, #15]
}
 800991e:	4618      	mov	r0, r3
 8009920:	3714      	adds	r7, #20
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr
	...

0800992c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800992c:	b480      	push	{r7}
 800992e:	b085      	sub	sp, #20
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d141      	bne.n	80099be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800993a:	4b4b      	ldr	r3, [pc, #300]	; (8009a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009946:	d131      	bne.n	80099ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009948:	4b47      	ldr	r3, [pc, #284]	; (8009a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800994a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800994e:	4a46      	ldr	r2, [pc, #280]	; (8009a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009954:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009958:	4b43      	ldr	r3, [pc, #268]	; (8009a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009960:	4a41      	ldr	r2, [pc, #260]	; (8009a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009966:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009968:	4b40      	ldr	r3, [pc, #256]	; (8009a6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2232      	movs	r2, #50	; 0x32
 800996e:	fb02 f303 	mul.w	r3, r2, r3
 8009972:	4a3f      	ldr	r2, [pc, #252]	; (8009a70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009974:	fba2 2303 	umull	r2, r3, r2, r3
 8009978:	0c9b      	lsrs	r3, r3, #18
 800997a:	3301      	adds	r3, #1
 800997c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800997e:	e002      	b.n	8009986 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	3b01      	subs	r3, #1
 8009984:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009986:	4b38      	ldr	r3, [pc, #224]	; (8009a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009988:	695b      	ldr	r3, [r3, #20]
 800998a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800998e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009992:	d102      	bne.n	800999a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1f2      	bne.n	8009980 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800999a:	4b33      	ldr	r3, [pc, #204]	; (8009a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800999c:	695b      	ldr	r3, [r3, #20]
 800999e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099a6:	d158      	bne.n	8009a5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80099a8:	2303      	movs	r3, #3
 80099aa:	e057      	b.n	8009a5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80099ac:	4b2e      	ldr	r3, [pc, #184]	; (8009a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099b2:	4a2d      	ldr	r2, [pc, #180]	; (8009a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80099bc:	e04d      	b.n	8009a5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099c4:	d141      	bne.n	8009a4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80099c6:	4b28      	ldr	r3, [pc, #160]	; (8009a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80099ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099d2:	d131      	bne.n	8009a38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80099d4:	4b24      	ldr	r3, [pc, #144]	; (8009a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099da:	4a23      	ldr	r2, [pc, #140]	; (8009a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80099e4:	4b20      	ldr	r3, [pc, #128]	; (8009a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80099ec:	4a1e      	ldr	r2, [pc, #120]	; (8009a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80099f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80099f4:	4b1d      	ldr	r3, [pc, #116]	; (8009a6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2232      	movs	r2, #50	; 0x32
 80099fa:	fb02 f303 	mul.w	r3, r2, r3
 80099fe:	4a1c      	ldr	r2, [pc, #112]	; (8009a70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009a00:	fba2 2303 	umull	r2, r3, r2, r3
 8009a04:	0c9b      	lsrs	r3, r3, #18
 8009a06:	3301      	adds	r3, #1
 8009a08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009a0a:	e002      	b.n	8009a12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009a12:	4b15      	ldr	r3, [pc, #84]	; (8009a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a14:	695b      	ldr	r3, [r3, #20]
 8009a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a1e:	d102      	bne.n	8009a26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d1f2      	bne.n	8009a0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009a26:	4b10      	ldr	r3, [pc, #64]	; (8009a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a32:	d112      	bne.n	8009a5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009a34:	2303      	movs	r3, #3
 8009a36:	e011      	b.n	8009a5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009a38:	4b0b      	ldr	r3, [pc, #44]	; (8009a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a3e:	4a0a      	ldr	r2, [pc, #40]	; (8009a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009a48:	e007      	b.n	8009a5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009a4a:	4b07      	ldr	r3, [pc, #28]	; (8009a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009a52:	4a05      	ldr	r2, [pc, #20]	; (8009a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009a58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3714      	adds	r7, #20
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr
 8009a68:	40007000 	.word	0x40007000
 8009a6c:	20000018 	.word	0x20000018
 8009a70:	431bde83 	.word	0x431bde83

08009a74 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009a74:	b480      	push	{r7}
 8009a76:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009a78:	4b05      	ldr	r3, [pc, #20]	; (8009a90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	4a04      	ldr	r2, [pc, #16]	; (8009a90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a82:	6093      	str	r3, [r2, #8]
}
 8009a84:	bf00      	nop
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	40007000 	.word	0x40007000

08009a94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b088      	sub	sp, #32
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d101      	bne.n	8009aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e308      	b.n	800a0b8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f003 0301 	and.w	r3, r3, #1
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d075      	beq.n	8009b9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ab2:	4ba3      	ldr	r3, [pc, #652]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	f003 030c 	and.w	r3, r3, #12
 8009aba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009abc:	4ba0      	ldr	r3, [pc, #640]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	f003 0303 	and.w	r3, r3, #3
 8009ac4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	2b0c      	cmp	r3, #12
 8009aca:	d102      	bne.n	8009ad2 <HAL_RCC_OscConfig+0x3e>
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	2b03      	cmp	r3, #3
 8009ad0:	d002      	beq.n	8009ad8 <HAL_RCC_OscConfig+0x44>
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	2b08      	cmp	r3, #8
 8009ad6:	d10b      	bne.n	8009af0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ad8:	4b99      	ldr	r3, [pc, #612]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d05b      	beq.n	8009b9c <HAL_RCC_OscConfig+0x108>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d157      	bne.n	8009b9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009aec:	2301      	movs	r3, #1
 8009aee:	e2e3      	b.n	800a0b8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009af8:	d106      	bne.n	8009b08 <HAL_RCC_OscConfig+0x74>
 8009afa:	4b91      	ldr	r3, [pc, #580]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a90      	ldr	r2, [pc, #576]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b04:	6013      	str	r3, [r2, #0]
 8009b06:	e01d      	b.n	8009b44 <HAL_RCC_OscConfig+0xb0>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b10:	d10c      	bne.n	8009b2c <HAL_RCC_OscConfig+0x98>
 8009b12:	4b8b      	ldr	r3, [pc, #556]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a8a      	ldr	r2, [pc, #552]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b1c:	6013      	str	r3, [r2, #0]
 8009b1e:	4b88      	ldr	r3, [pc, #544]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a87      	ldr	r2, [pc, #540]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b28:	6013      	str	r3, [r2, #0]
 8009b2a:	e00b      	b.n	8009b44 <HAL_RCC_OscConfig+0xb0>
 8009b2c:	4b84      	ldr	r3, [pc, #528]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a83      	ldr	r2, [pc, #524]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b36:	6013      	str	r3, [r2, #0]
 8009b38:	4b81      	ldr	r3, [pc, #516]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a80      	ldr	r2, [pc, #512]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d013      	beq.n	8009b74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b4c:	f7fc fa96 	bl	800607c <HAL_GetTick>
 8009b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009b52:	e008      	b.n	8009b66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b54:	f7fc fa92 	bl	800607c <HAL_GetTick>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	1ad3      	subs	r3, r2, r3
 8009b5e:	2b64      	cmp	r3, #100	; 0x64
 8009b60:	d901      	bls.n	8009b66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009b62:	2303      	movs	r3, #3
 8009b64:	e2a8      	b.n	800a0b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009b66:	4b76      	ldr	r3, [pc, #472]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d0f0      	beq.n	8009b54 <HAL_RCC_OscConfig+0xc0>
 8009b72:	e014      	b.n	8009b9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b74:	f7fc fa82 	bl	800607c <HAL_GetTick>
 8009b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009b7a:	e008      	b.n	8009b8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b7c:	f7fc fa7e 	bl	800607c <HAL_GetTick>
 8009b80:	4602      	mov	r2, r0
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	2b64      	cmp	r3, #100	; 0x64
 8009b88:	d901      	bls.n	8009b8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e294      	b.n	800a0b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009b8e:	4b6c      	ldr	r3, [pc, #432]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d1f0      	bne.n	8009b7c <HAL_RCC_OscConfig+0xe8>
 8009b9a:	e000      	b.n	8009b9e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f003 0302 	and.w	r3, r3, #2
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d075      	beq.n	8009c96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009baa:	4b65      	ldr	r3, [pc, #404]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	f003 030c 	and.w	r3, r3, #12
 8009bb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009bb4:	4b62      	ldr	r3, [pc, #392]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	f003 0303 	and.w	r3, r3, #3
 8009bbc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	2b0c      	cmp	r3, #12
 8009bc2:	d102      	bne.n	8009bca <HAL_RCC_OscConfig+0x136>
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	d002      	beq.n	8009bd0 <HAL_RCC_OscConfig+0x13c>
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	2b04      	cmp	r3, #4
 8009bce:	d11f      	bne.n	8009c10 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009bd0:	4b5b      	ldr	r3, [pc, #364]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d005      	beq.n	8009be8 <HAL_RCC_OscConfig+0x154>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d101      	bne.n	8009be8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	e267      	b.n	800a0b8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009be8:	4b55      	ldr	r3, [pc, #340]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	061b      	lsls	r3, r3, #24
 8009bf6:	4952      	ldr	r1, [pc, #328]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009bfc:	4b51      	ldr	r3, [pc, #324]	; (8009d44 <HAL_RCC_OscConfig+0x2b0>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7fc f9ef 	bl	8005fe4 <HAL_InitTick>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d043      	beq.n	8009c94 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e253      	b.n	800a0b8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d023      	beq.n	8009c60 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009c18:	4b49      	ldr	r3, [pc, #292]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a48      	ldr	r2, [pc, #288]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c24:	f7fc fa2a 	bl	800607c <HAL_GetTick>
 8009c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009c2a:	e008      	b.n	8009c3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c2c:	f7fc fa26 	bl	800607c <HAL_GetTick>
 8009c30:	4602      	mov	r2, r0
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	1ad3      	subs	r3, r2, r3
 8009c36:	2b02      	cmp	r3, #2
 8009c38:	d901      	bls.n	8009c3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009c3a:	2303      	movs	r3, #3
 8009c3c:	e23c      	b.n	800a0b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009c3e:	4b40      	ldr	r3, [pc, #256]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d0f0      	beq.n	8009c2c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c4a:	4b3d      	ldr	r3, [pc, #244]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	061b      	lsls	r3, r3, #24
 8009c58:	4939      	ldr	r1, [pc, #228]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	604b      	str	r3, [r1, #4]
 8009c5e:	e01a      	b.n	8009c96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c60:	4b37      	ldr	r3, [pc, #220]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a36      	ldr	r2, [pc, #216]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009c66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c6c:	f7fc fa06 	bl	800607c <HAL_GetTick>
 8009c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009c72:	e008      	b.n	8009c86 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c74:	f7fc fa02 	bl	800607c <HAL_GetTick>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	2b02      	cmp	r3, #2
 8009c80:	d901      	bls.n	8009c86 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009c82:	2303      	movs	r3, #3
 8009c84:	e218      	b.n	800a0b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009c86:	4b2e      	ldr	r3, [pc, #184]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1f0      	bne.n	8009c74 <HAL_RCC_OscConfig+0x1e0>
 8009c92:	e000      	b.n	8009c96 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f003 0308 	and.w	r3, r3, #8
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d03c      	beq.n	8009d1c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	695b      	ldr	r3, [r3, #20]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d01c      	beq.n	8009ce4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009caa:	4b25      	ldr	r3, [pc, #148]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009cb0:	4a23      	ldr	r2, [pc, #140]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009cb2:	f043 0301 	orr.w	r3, r3, #1
 8009cb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cba:	f7fc f9df 	bl	800607c <HAL_GetTick>
 8009cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009cc0:	e008      	b.n	8009cd4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009cc2:	f7fc f9db 	bl	800607c <HAL_GetTick>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	1ad3      	subs	r3, r2, r3
 8009ccc:	2b02      	cmp	r3, #2
 8009cce:	d901      	bls.n	8009cd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009cd0:	2303      	movs	r3, #3
 8009cd2:	e1f1      	b.n	800a0b8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009cd4:	4b1a      	ldr	r3, [pc, #104]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009cda:	f003 0302 	and.w	r3, r3, #2
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d0ef      	beq.n	8009cc2 <HAL_RCC_OscConfig+0x22e>
 8009ce2:	e01b      	b.n	8009d1c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ce4:	4b16      	ldr	r3, [pc, #88]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009cea:	4a15      	ldr	r2, [pc, #84]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009cec:	f023 0301 	bic.w	r3, r3, #1
 8009cf0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cf4:	f7fc f9c2 	bl	800607c <HAL_GetTick>
 8009cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009cfa:	e008      	b.n	8009d0e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009cfc:	f7fc f9be 	bl	800607c <HAL_GetTick>
 8009d00:	4602      	mov	r2, r0
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	d901      	bls.n	8009d0e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8009d0a:	2303      	movs	r3, #3
 8009d0c:	e1d4      	b.n	800a0b8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009d0e:	4b0c      	ldr	r3, [pc, #48]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d14:	f003 0302 	and.w	r3, r3, #2
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d1ef      	bne.n	8009cfc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f003 0304 	and.w	r3, r3, #4
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f000 80ab 	beq.w	8009e80 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009d2e:	4b04      	ldr	r3, [pc, #16]	; (8009d40 <HAL_RCC_OscConfig+0x2ac>)
 8009d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d106      	bne.n	8009d48 <HAL_RCC_OscConfig+0x2b4>
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e005      	b.n	8009d4a <HAL_RCC_OscConfig+0x2b6>
 8009d3e:	bf00      	nop
 8009d40:	40021000 	.word	0x40021000
 8009d44:	2000001c 	.word	0x2000001c
 8009d48:	2300      	movs	r3, #0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00d      	beq.n	8009d6a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d4e:	4baf      	ldr	r3, [pc, #700]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d52:	4aae      	ldr	r2, [pc, #696]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d58:	6593      	str	r3, [r2, #88]	; 0x58
 8009d5a:	4bac      	ldr	r3, [pc, #688]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d62:	60fb      	str	r3, [r7, #12]
 8009d64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009d66:	2301      	movs	r3, #1
 8009d68:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009d6a:	4ba9      	ldr	r3, [pc, #676]	; (800a010 <HAL_RCC_OscConfig+0x57c>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d118      	bne.n	8009da8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d76:	4ba6      	ldr	r3, [pc, #664]	; (800a010 <HAL_RCC_OscConfig+0x57c>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4aa5      	ldr	r2, [pc, #660]	; (800a010 <HAL_RCC_OscConfig+0x57c>)
 8009d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d82:	f7fc f97b 	bl	800607c <HAL_GetTick>
 8009d86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009d88:	e008      	b.n	8009d9c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d8a:	f7fc f977 	bl	800607c <HAL_GetTick>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	1ad3      	subs	r3, r2, r3
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d901      	bls.n	8009d9c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	e18d      	b.n	800a0b8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009d9c:	4b9c      	ldr	r3, [pc, #624]	; (800a010 <HAL_RCC_OscConfig+0x57c>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d0f0      	beq.n	8009d8a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d108      	bne.n	8009dc2 <HAL_RCC_OscConfig+0x32e>
 8009db0:	4b96      	ldr	r3, [pc, #600]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009db6:	4a95      	ldr	r2, [pc, #596]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009db8:	f043 0301 	orr.w	r3, r3, #1
 8009dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009dc0:	e024      	b.n	8009e0c <HAL_RCC_OscConfig+0x378>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	2b05      	cmp	r3, #5
 8009dc8:	d110      	bne.n	8009dec <HAL_RCC_OscConfig+0x358>
 8009dca:	4b90      	ldr	r3, [pc, #576]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dd0:	4a8e      	ldr	r2, [pc, #568]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009dd2:	f043 0304 	orr.w	r3, r3, #4
 8009dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009dda:	4b8c      	ldr	r3, [pc, #560]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009de0:	4a8a      	ldr	r2, [pc, #552]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009de2:	f043 0301 	orr.w	r3, r3, #1
 8009de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009dea:	e00f      	b.n	8009e0c <HAL_RCC_OscConfig+0x378>
 8009dec:	4b87      	ldr	r3, [pc, #540]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009df2:	4a86      	ldr	r2, [pc, #536]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009df4:	f023 0301 	bic.w	r3, r3, #1
 8009df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009dfc:	4b83      	ldr	r3, [pc, #524]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e02:	4a82      	ldr	r2, [pc, #520]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009e04:	f023 0304 	bic.w	r3, r3, #4
 8009e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d016      	beq.n	8009e42 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e14:	f7fc f932 	bl	800607c <HAL_GetTick>
 8009e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009e1a:	e00a      	b.n	8009e32 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e1c:	f7fc f92e 	bl	800607c <HAL_GetTick>
 8009e20:	4602      	mov	r2, r0
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	1ad3      	subs	r3, r2, r3
 8009e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d901      	bls.n	8009e32 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009e2e:	2303      	movs	r3, #3
 8009e30:	e142      	b.n	800a0b8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009e32:	4b76      	ldr	r3, [pc, #472]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e38:	f003 0302 	and.w	r3, r3, #2
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d0ed      	beq.n	8009e1c <HAL_RCC_OscConfig+0x388>
 8009e40:	e015      	b.n	8009e6e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e42:	f7fc f91b 	bl	800607c <HAL_GetTick>
 8009e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009e48:	e00a      	b.n	8009e60 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e4a:	f7fc f917 	bl	800607c <HAL_GetTick>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	1ad3      	subs	r3, r2, r3
 8009e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d901      	bls.n	8009e60 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009e5c:	2303      	movs	r3, #3
 8009e5e:	e12b      	b.n	800a0b8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009e60:	4b6a      	ldr	r3, [pc, #424]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e66:	f003 0302 	and.w	r3, r3, #2
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1ed      	bne.n	8009e4a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009e6e:	7ffb      	ldrb	r3, [r7, #31]
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d105      	bne.n	8009e80 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e74:	4b65      	ldr	r3, [pc, #404]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e78:	4a64      	ldr	r2, [pc, #400]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f003 0320 	and.w	r3, r3, #32
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d03c      	beq.n	8009f06 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	699b      	ldr	r3, [r3, #24]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d01c      	beq.n	8009ece <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009e94:	4b5d      	ldr	r3, [pc, #372]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009e96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009e9a:	4a5c      	ldr	r2, [pc, #368]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009e9c:	f043 0301 	orr.w	r3, r3, #1
 8009ea0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ea4:	f7fc f8ea 	bl	800607c <HAL_GetTick>
 8009ea8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009eaa:	e008      	b.n	8009ebe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009eac:	f7fc f8e6 	bl	800607c <HAL_GetTick>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	1ad3      	subs	r3, r2, r3
 8009eb6:	2b02      	cmp	r3, #2
 8009eb8:	d901      	bls.n	8009ebe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009eba:	2303      	movs	r3, #3
 8009ebc:	e0fc      	b.n	800a0b8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009ebe:	4b53      	ldr	r3, [pc, #332]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009ec0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ec4:	f003 0302 	and.w	r3, r3, #2
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d0ef      	beq.n	8009eac <HAL_RCC_OscConfig+0x418>
 8009ecc:	e01b      	b.n	8009f06 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009ece:	4b4f      	ldr	r3, [pc, #316]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009ed0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ed4:	4a4d      	ldr	r2, [pc, #308]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009ed6:	f023 0301 	bic.w	r3, r3, #1
 8009eda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ede:	f7fc f8cd 	bl	800607c <HAL_GetTick>
 8009ee2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009ee4:	e008      	b.n	8009ef8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009ee6:	f7fc f8c9 	bl	800607c <HAL_GetTick>
 8009eea:	4602      	mov	r2, r0
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	1ad3      	subs	r3, r2, r3
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d901      	bls.n	8009ef8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	e0df      	b.n	800a0b8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009ef8:	4b44      	ldr	r3, [pc, #272]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009efa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009efe:	f003 0302 	and.w	r3, r3, #2
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1ef      	bne.n	8009ee6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	69db      	ldr	r3, [r3, #28]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	f000 80d3 	beq.w	800a0b6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009f10:	4b3e      	ldr	r3, [pc, #248]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	f003 030c 	and.w	r3, r3, #12
 8009f18:	2b0c      	cmp	r3, #12
 8009f1a:	f000 808d 	beq.w	800a038 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	69db      	ldr	r3, [r3, #28]
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d15a      	bne.n	8009fdc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f26:	4b39      	ldr	r3, [pc, #228]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a38      	ldr	r2, [pc, #224]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009f2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f32:	f7fc f8a3 	bl	800607c <HAL_GetTick>
 8009f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f38:	e008      	b.n	8009f4c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f3a:	f7fc f89f 	bl	800607c <HAL_GetTick>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	d901      	bls.n	8009f4c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8009f48:	2303      	movs	r3, #3
 8009f4a:	e0b5      	b.n	800a0b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f4c:	4b2f      	ldr	r3, [pc, #188]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d1f0      	bne.n	8009f3a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009f58:	4b2c      	ldr	r3, [pc, #176]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009f5a:	68da      	ldr	r2, [r3, #12]
 8009f5c:	4b2d      	ldr	r3, [pc, #180]	; (800a014 <HAL_RCC_OscConfig+0x580>)
 8009f5e:	4013      	ands	r3, r2
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	6a11      	ldr	r1, [r2, #32]
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009f68:	3a01      	subs	r2, #1
 8009f6a:	0112      	lsls	r2, r2, #4
 8009f6c:	4311      	orrs	r1, r2
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009f72:	0212      	lsls	r2, r2, #8
 8009f74:	4311      	orrs	r1, r2
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009f7a:	0852      	lsrs	r2, r2, #1
 8009f7c:	3a01      	subs	r2, #1
 8009f7e:	0552      	lsls	r2, r2, #21
 8009f80:	4311      	orrs	r1, r2
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009f86:	0852      	lsrs	r2, r2, #1
 8009f88:	3a01      	subs	r2, #1
 8009f8a:	0652      	lsls	r2, r2, #25
 8009f8c:	4311      	orrs	r1, r2
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009f92:	06d2      	lsls	r2, r2, #27
 8009f94:	430a      	orrs	r2, r1
 8009f96:	491d      	ldr	r1, [pc, #116]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f9c:	4b1b      	ldr	r3, [pc, #108]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a1a      	ldr	r2, [pc, #104]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009fa6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009fa8:	4b18      	ldr	r3, [pc, #96]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	4a17      	ldr	r2, [pc, #92]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009fb2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fb4:	f7fc f862 	bl	800607c <HAL_GetTick>
 8009fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009fba:	e008      	b.n	8009fce <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fbc:	f7fc f85e 	bl	800607c <HAL_GetTick>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	1ad3      	subs	r3, r2, r3
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d901      	bls.n	8009fce <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	e074      	b.n	800a0b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009fce:	4b0f      	ldr	r3, [pc, #60]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d0f0      	beq.n	8009fbc <HAL_RCC_OscConfig+0x528>
 8009fda:	e06c      	b.n	800a0b6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fdc:	4b0b      	ldr	r3, [pc, #44]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a0a      	ldr	r2, [pc, #40]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009fe2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009fe6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8009fe8:	4b08      	ldr	r3, [pc, #32]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	4a07      	ldr	r2, [pc, #28]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009fee:	f023 0303 	bic.w	r3, r3, #3
 8009ff2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009ff4:	4b05      	ldr	r3, [pc, #20]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	4a04      	ldr	r2, [pc, #16]	; (800a00c <HAL_RCC_OscConfig+0x578>)
 8009ffa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8009ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a002:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a004:	f7fc f83a 	bl	800607c <HAL_GetTick>
 800a008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a00a:	e00e      	b.n	800a02a <HAL_RCC_OscConfig+0x596>
 800a00c:	40021000 	.word	0x40021000
 800a010:	40007000 	.word	0x40007000
 800a014:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a018:	f7fc f830 	bl	800607c <HAL_GetTick>
 800a01c:	4602      	mov	r2, r0
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	2b02      	cmp	r3, #2
 800a024:	d901      	bls.n	800a02a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800a026:	2303      	movs	r3, #3
 800a028:	e046      	b.n	800a0b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a02a:	4b25      	ldr	r3, [pc, #148]	; (800a0c0 <HAL_RCC_OscConfig+0x62c>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1f0      	bne.n	800a018 <HAL_RCC_OscConfig+0x584>
 800a036:	e03e      	b.n	800a0b6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	69db      	ldr	r3, [r3, #28]
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d101      	bne.n	800a044 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	e039      	b.n	800a0b8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a044:	4b1e      	ldr	r3, [pc, #120]	; (800a0c0 <HAL_RCC_OscConfig+0x62c>)
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	f003 0203 	and.w	r2, r3, #3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6a1b      	ldr	r3, [r3, #32]
 800a054:	429a      	cmp	r2, r3
 800a056:	d12c      	bne.n	800a0b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a062:	3b01      	subs	r3, #1
 800a064:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a066:	429a      	cmp	r2, r3
 800a068:	d123      	bne.n	800a0b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a074:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a076:	429a      	cmp	r2, r3
 800a078:	d11b      	bne.n	800a0b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a084:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a086:	429a      	cmp	r2, r3
 800a088:	d113      	bne.n	800a0b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a094:	085b      	lsrs	r3, r3, #1
 800a096:	3b01      	subs	r3, #1
 800a098:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d109      	bne.n	800a0b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0a8:	085b      	lsrs	r3, r3, #1
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d001      	beq.n	800a0b6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e000      	b.n	800a0b8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3720      	adds	r7, #32
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	40021000 	.word	0x40021000

0800a0c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b086      	sub	sp, #24
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d101      	bne.n	800a0dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e11e      	b.n	800a31a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a0dc:	4b91      	ldr	r3, [pc, #580]	; (800a324 <HAL_RCC_ClockConfig+0x260>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f003 030f 	and.w	r3, r3, #15
 800a0e4:	683a      	ldr	r2, [r7, #0]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d910      	bls.n	800a10c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0ea:	4b8e      	ldr	r3, [pc, #568]	; (800a324 <HAL_RCC_ClockConfig+0x260>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f023 020f 	bic.w	r2, r3, #15
 800a0f2:	498c      	ldr	r1, [pc, #560]	; (800a324 <HAL_RCC_ClockConfig+0x260>)
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0fa:	4b8a      	ldr	r3, [pc, #552]	; (800a324 <HAL_RCC_ClockConfig+0x260>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 030f 	and.w	r3, r3, #15
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	429a      	cmp	r2, r3
 800a106:	d001      	beq.n	800a10c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	e106      	b.n	800a31a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f003 0301 	and.w	r3, r3, #1
 800a114:	2b00      	cmp	r3, #0
 800a116:	d073      	beq.n	800a200 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	2b03      	cmp	r3, #3
 800a11e:	d129      	bne.n	800a174 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a120:	4b81      	ldr	r3, [pc, #516]	; (800a328 <HAL_RCC_ClockConfig+0x264>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d101      	bne.n	800a130 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	e0f4      	b.n	800a31a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a130:	f000 f99e 	bl	800a470 <RCC_GetSysClockFreqFromPLLSource>
 800a134:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	4a7c      	ldr	r2, [pc, #496]	; (800a32c <HAL_RCC_ClockConfig+0x268>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d93f      	bls.n	800a1be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a13e:	4b7a      	ldr	r3, [pc, #488]	; (800a328 <HAL_RCC_ClockConfig+0x264>)
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d009      	beq.n	800a15e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a152:	2b00      	cmp	r3, #0
 800a154:	d033      	beq.n	800a1be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d12f      	bne.n	800a1be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a15e:	4b72      	ldr	r3, [pc, #456]	; (800a328 <HAL_RCC_ClockConfig+0x264>)
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a166:	4a70      	ldr	r2, [pc, #448]	; (800a328 <HAL_RCC_ClockConfig+0x264>)
 800a168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a16c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a16e:	2380      	movs	r3, #128	; 0x80
 800a170:	617b      	str	r3, [r7, #20]
 800a172:	e024      	b.n	800a1be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d107      	bne.n	800a18c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a17c:	4b6a      	ldr	r3, [pc, #424]	; (800a328 <HAL_RCC_ClockConfig+0x264>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a184:	2b00      	cmp	r3, #0
 800a186:	d109      	bne.n	800a19c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a188:	2301      	movs	r3, #1
 800a18a:	e0c6      	b.n	800a31a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a18c:	4b66      	ldr	r3, [pc, #408]	; (800a328 <HAL_RCC_ClockConfig+0x264>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a194:	2b00      	cmp	r3, #0
 800a196:	d101      	bne.n	800a19c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	e0be      	b.n	800a31a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a19c:	f000 f8ce 	bl	800a33c <HAL_RCC_GetSysClockFreq>
 800a1a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	4a61      	ldr	r2, [pc, #388]	; (800a32c <HAL_RCC_ClockConfig+0x268>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d909      	bls.n	800a1be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a1aa:	4b5f      	ldr	r3, [pc, #380]	; (800a328 <HAL_RCC_ClockConfig+0x264>)
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1b2:	4a5d      	ldr	r2, [pc, #372]	; (800a328 <HAL_RCC_ClockConfig+0x264>)
 800a1b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a1ba:	2380      	movs	r3, #128	; 0x80
 800a1bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a1be:	4b5a      	ldr	r3, [pc, #360]	; (800a328 <HAL_RCC_ClockConfig+0x264>)
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	f023 0203 	bic.w	r2, r3, #3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	4957      	ldr	r1, [pc, #348]	; (800a328 <HAL_RCC_ClockConfig+0x264>)
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1d0:	f7fb ff54 	bl	800607c <HAL_GetTick>
 800a1d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1d6:	e00a      	b.n	800a1ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1d8:	f7fb ff50 	bl	800607c <HAL_GetTick>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	1ad3      	subs	r3, r2, r3
 800a1e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d901      	bls.n	800a1ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	e095      	b.n	800a31a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1ee:	4b4e      	ldr	r3, [pc, #312]	; (800a328 <HAL_RCC_ClockConfig+0x264>)
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	f003 020c 	and.w	r2, r3, #12
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d1eb      	bne.n	800a1d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f003 0302 	and.w	r3, r3, #2
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d023      	beq.n	800a254 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f003 0304 	and.w	r3, r3, #4
 800a214:	2b00      	cmp	r3, #0
 800a216:	d005      	beq.n	800a224 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a218:	4b43      	ldr	r3, [pc, #268]	; (800a328 <HAL_RCC_ClockConfig+0x264>)
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	4a42      	ldr	r2, [pc, #264]	; (800a328 <HAL_RCC_ClockConfig+0x264>)
 800a21e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a222:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f003 0308 	and.w	r3, r3, #8
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d007      	beq.n	800a240 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a230:	4b3d      	ldr	r3, [pc, #244]	; (800a328 <HAL_RCC_ClockConfig+0x264>)
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a238:	4a3b      	ldr	r2, [pc, #236]	; (800a328 <HAL_RCC_ClockConfig+0x264>)
 800a23a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a23e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a240:	4b39      	ldr	r3, [pc, #228]	; (800a328 <HAL_RCC_ClockConfig+0x264>)
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	4936      	ldr	r1, [pc, #216]	; (800a328 <HAL_RCC_ClockConfig+0x264>)
 800a24e:	4313      	orrs	r3, r2
 800a250:	608b      	str	r3, [r1, #8]
 800a252:	e008      	b.n	800a266 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	2b80      	cmp	r3, #128	; 0x80
 800a258:	d105      	bne.n	800a266 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a25a:	4b33      	ldr	r3, [pc, #204]	; (800a328 <HAL_RCC_ClockConfig+0x264>)
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	4a32      	ldr	r2, [pc, #200]	; (800a328 <HAL_RCC_ClockConfig+0x264>)
 800a260:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a264:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a266:	4b2f      	ldr	r3, [pc, #188]	; (800a324 <HAL_RCC_ClockConfig+0x260>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f003 030f 	and.w	r3, r3, #15
 800a26e:	683a      	ldr	r2, [r7, #0]
 800a270:	429a      	cmp	r2, r3
 800a272:	d21d      	bcs.n	800a2b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a274:	4b2b      	ldr	r3, [pc, #172]	; (800a324 <HAL_RCC_ClockConfig+0x260>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f023 020f 	bic.w	r2, r3, #15
 800a27c:	4929      	ldr	r1, [pc, #164]	; (800a324 <HAL_RCC_ClockConfig+0x260>)
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	4313      	orrs	r3, r2
 800a282:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a284:	f7fb fefa 	bl	800607c <HAL_GetTick>
 800a288:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a28a:	e00a      	b.n	800a2a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a28c:	f7fb fef6 	bl	800607c <HAL_GetTick>
 800a290:	4602      	mov	r2, r0
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	1ad3      	subs	r3, r2, r3
 800a296:	f241 3288 	movw	r2, #5000	; 0x1388
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d901      	bls.n	800a2a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a29e:	2303      	movs	r3, #3
 800a2a0:	e03b      	b.n	800a31a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2a2:	4b20      	ldr	r3, [pc, #128]	; (800a324 <HAL_RCC_ClockConfig+0x260>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f003 030f 	and.w	r3, r3, #15
 800a2aa:	683a      	ldr	r2, [r7, #0]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d1ed      	bne.n	800a28c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f003 0304 	and.w	r3, r3, #4
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d008      	beq.n	800a2ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a2bc:	4b1a      	ldr	r3, [pc, #104]	; (800a328 <HAL_RCC_ClockConfig+0x264>)
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	4917      	ldr	r1, [pc, #92]	; (800a328 <HAL_RCC_ClockConfig+0x264>)
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f003 0308 	and.w	r3, r3, #8
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d009      	beq.n	800a2ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a2da:	4b13      	ldr	r3, [pc, #76]	; (800a328 <HAL_RCC_ClockConfig+0x264>)
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	691b      	ldr	r3, [r3, #16]
 800a2e6:	00db      	lsls	r3, r3, #3
 800a2e8:	490f      	ldr	r1, [pc, #60]	; (800a328 <HAL_RCC_ClockConfig+0x264>)
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a2ee:	f000 f825 	bl	800a33c <HAL_RCC_GetSysClockFreq>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	4b0c      	ldr	r3, [pc, #48]	; (800a328 <HAL_RCC_ClockConfig+0x264>)
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	091b      	lsrs	r3, r3, #4
 800a2fa:	f003 030f 	and.w	r3, r3, #15
 800a2fe:	490c      	ldr	r1, [pc, #48]	; (800a330 <HAL_RCC_ClockConfig+0x26c>)
 800a300:	5ccb      	ldrb	r3, [r1, r3]
 800a302:	f003 031f 	and.w	r3, r3, #31
 800a306:	fa22 f303 	lsr.w	r3, r2, r3
 800a30a:	4a0a      	ldr	r2, [pc, #40]	; (800a334 <HAL_RCC_ClockConfig+0x270>)
 800a30c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a30e:	4b0a      	ldr	r3, [pc, #40]	; (800a338 <HAL_RCC_ClockConfig+0x274>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4618      	mov	r0, r3
 800a314:	f7fb fe66 	bl	8005fe4 <HAL_InitTick>
 800a318:	4603      	mov	r3, r0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3718      	adds	r7, #24
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	40022000 	.word	0x40022000
 800a328:	40021000 	.word	0x40021000
 800a32c:	04c4b400 	.word	0x04c4b400
 800a330:	0800e718 	.word	0x0800e718
 800a334:	20000018 	.word	0x20000018
 800a338:	2000001c 	.word	0x2000001c

0800a33c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b087      	sub	sp, #28
 800a340:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a342:	4b2c      	ldr	r3, [pc, #176]	; (800a3f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	f003 030c 	and.w	r3, r3, #12
 800a34a:	2b04      	cmp	r3, #4
 800a34c:	d102      	bne.n	800a354 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a34e:	4b2a      	ldr	r3, [pc, #168]	; (800a3f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a350:	613b      	str	r3, [r7, #16]
 800a352:	e047      	b.n	800a3e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a354:	4b27      	ldr	r3, [pc, #156]	; (800a3f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	f003 030c 	and.w	r3, r3, #12
 800a35c:	2b08      	cmp	r3, #8
 800a35e:	d102      	bne.n	800a366 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a360:	4b26      	ldr	r3, [pc, #152]	; (800a3fc <HAL_RCC_GetSysClockFreq+0xc0>)
 800a362:	613b      	str	r3, [r7, #16]
 800a364:	e03e      	b.n	800a3e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a366:	4b23      	ldr	r3, [pc, #140]	; (800a3f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	f003 030c 	and.w	r3, r3, #12
 800a36e:	2b0c      	cmp	r3, #12
 800a370:	d136      	bne.n	800a3e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a372:	4b20      	ldr	r3, [pc, #128]	; (800a3f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	f003 0303 	and.w	r3, r3, #3
 800a37a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a37c:	4b1d      	ldr	r3, [pc, #116]	; (800a3f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	091b      	lsrs	r3, r3, #4
 800a382:	f003 030f 	and.w	r3, r3, #15
 800a386:	3301      	adds	r3, #1
 800a388:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2b03      	cmp	r3, #3
 800a38e:	d10c      	bne.n	800a3aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a390:	4a1a      	ldr	r2, [pc, #104]	; (800a3fc <HAL_RCC_GetSysClockFreq+0xc0>)
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	fbb2 f3f3 	udiv	r3, r2, r3
 800a398:	4a16      	ldr	r2, [pc, #88]	; (800a3f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a39a:	68d2      	ldr	r2, [r2, #12]
 800a39c:	0a12      	lsrs	r2, r2, #8
 800a39e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a3a2:	fb02 f303 	mul.w	r3, r2, r3
 800a3a6:	617b      	str	r3, [r7, #20]
      break;
 800a3a8:	e00c      	b.n	800a3c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a3aa:	4a13      	ldr	r2, [pc, #76]	; (800a3f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3b2:	4a10      	ldr	r2, [pc, #64]	; (800a3f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a3b4:	68d2      	ldr	r2, [r2, #12]
 800a3b6:	0a12      	lsrs	r2, r2, #8
 800a3b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a3bc:	fb02 f303 	mul.w	r3, r2, r3
 800a3c0:	617b      	str	r3, [r7, #20]
      break;
 800a3c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a3c4:	4b0b      	ldr	r3, [pc, #44]	; (800a3f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	0e5b      	lsrs	r3, r3, #25
 800a3ca:	f003 0303 	and.w	r3, r3, #3
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	005b      	lsls	r3, r3, #1
 800a3d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a3d4:	697a      	ldr	r2, [r7, #20]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3dc:	613b      	str	r3, [r7, #16]
 800a3de:	e001      	b.n	800a3e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a3e4:	693b      	ldr	r3, [r7, #16]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	371c      	adds	r7, #28
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	40021000 	.word	0x40021000
 800a3f8:	00f42400 	.word	0x00f42400
 800a3fc:	007a1200 	.word	0x007a1200

0800a400 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a400:	b480      	push	{r7}
 800a402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a404:	4b03      	ldr	r3, [pc, #12]	; (800a414 <HAL_RCC_GetHCLKFreq+0x14>)
 800a406:	681b      	ldr	r3, [r3, #0]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop
 800a414:	20000018 	.word	0x20000018

0800a418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a41c:	f7ff fff0 	bl	800a400 <HAL_RCC_GetHCLKFreq>
 800a420:	4602      	mov	r2, r0
 800a422:	4b06      	ldr	r3, [pc, #24]	; (800a43c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	0a1b      	lsrs	r3, r3, #8
 800a428:	f003 0307 	and.w	r3, r3, #7
 800a42c:	4904      	ldr	r1, [pc, #16]	; (800a440 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a42e:	5ccb      	ldrb	r3, [r1, r3]
 800a430:	f003 031f 	and.w	r3, r3, #31
 800a434:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a438:	4618      	mov	r0, r3
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	40021000 	.word	0x40021000
 800a440:	0800e728 	.word	0x0800e728

0800a444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a448:	f7ff ffda 	bl	800a400 <HAL_RCC_GetHCLKFreq>
 800a44c:	4602      	mov	r2, r0
 800a44e:	4b06      	ldr	r3, [pc, #24]	; (800a468 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	0adb      	lsrs	r3, r3, #11
 800a454:	f003 0307 	and.w	r3, r3, #7
 800a458:	4904      	ldr	r1, [pc, #16]	; (800a46c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a45a:	5ccb      	ldrb	r3, [r1, r3]
 800a45c:	f003 031f 	and.w	r3, r3, #31
 800a460:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a464:	4618      	mov	r0, r3
 800a466:	bd80      	pop	{r7, pc}
 800a468:	40021000 	.word	0x40021000
 800a46c:	0800e728 	.word	0x0800e728

0800a470 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a470:	b480      	push	{r7}
 800a472:	b087      	sub	sp, #28
 800a474:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a476:	4b1e      	ldr	r3, [pc, #120]	; (800a4f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	f003 0303 	and.w	r3, r3, #3
 800a47e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a480:	4b1b      	ldr	r3, [pc, #108]	; (800a4f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	091b      	lsrs	r3, r3, #4
 800a486:	f003 030f 	and.w	r3, r3, #15
 800a48a:	3301      	adds	r3, #1
 800a48c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	2b03      	cmp	r3, #3
 800a492:	d10c      	bne.n	800a4ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a494:	4a17      	ldr	r2, [pc, #92]	; (800a4f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	fbb2 f3f3 	udiv	r3, r2, r3
 800a49c:	4a14      	ldr	r2, [pc, #80]	; (800a4f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a49e:	68d2      	ldr	r2, [r2, #12]
 800a4a0:	0a12      	lsrs	r2, r2, #8
 800a4a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a4a6:	fb02 f303 	mul.w	r3, r2, r3
 800a4aa:	617b      	str	r3, [r7, #20]
    break;
 800a4ac:	e00c      	b.n	800a4c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a4ae:	4a12      	ldr	r2, [pc, #72]	; (800a4f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4b6:	4a0e      	ldr	r2, [pc, #56]	; (800a4f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a4b8:	68d2      	ldr	r2, [r2, #12]
 800a4ba:	0a12      	lsrs	r2, r2, #8
 800a4bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a4c0:	fb02 f303 	mul.w	r3, r2, r3
 800a4c4:	617b      	str	r3, [r7, #20]
    break;
 800a4c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a4c8:	4b09      	ldr	r3, [pc, #36]	; (800a4f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	0e5b      	lsrs	r3, r3, #25
 800a4ce:	f003 0303 	and.w	r3, r3, #3
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	005b      	lsls	r3, r3, #1
 800a4d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a4d8:	697a      	ldr	r2, [r7, #20]
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a4e2:	687b      	ldr	r3, [r7, #4]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	371c      	adds	r7, #28
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr
 800a4f0:	40021000 	.word	0x40021000
 800a4f4:	007a1200 	.word	0x007a1200
 800a4f8:	00f42400 	.word	0x00f42400

0800a4fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b086      	sub	sp, #24
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a504:	2300      	movs	r3, #0
 800a506:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a508:	2300      	movs	r3, #0
 800a50a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a514:	2b00      	cmp	r3, #0
 800a516:	f000 8098 	beq.w	800a64a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a51a:	2300      	movs	r3, #0
 800a51c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a51e:	4b43      	ldr	r3, [pc, #268]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a526:	2b00      	cmp	r3, #0
 800a528:	d10d      	bne.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a52a:	4b40      	ldr	r3, [pc, #256]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a52c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a52e:	4a3f      	ldr	r2, [pc, #252]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a534:	6593      	str	r3, [r2, #88]	; 0x58
 800a536:	4b3d      	ldr	r3, [pc, #244]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a53a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a53e:	60bb      	str	r3, [r7, #8]
 800a540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a542:	2301      	movs	r3, #1
 800a544:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a546:	4b3a      	ldr	r3, [pc, #232]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a39      	ldr	r2, [pc, #228]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a54c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a550:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a552:	f7fb fd93 	bl	800607c <HAL_GetTick>
 800a556:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a558:	e009      	b.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a55a:	f7fb fd8f 	bl	800607c <HAL_GetTick>
 800a55e:	4602      	mov	r2, r0
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	1ad3      	subs	r3, r2, r3
 800a564:	2b02      	cmp	r3, #2
 800a566:	d902      	bls.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a568:	2303      	movs	r3, #3
 800a56a:	74fb      	strb	r3, [r7, #19]
        break;
 800a56c:	e005      	b.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a56e:	4b30      	ldr	r3, [pc, #192]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a576:	2b00      	cmp	r3, #0
 800a578:	d0ef      	beq.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a57a:	7cfb      	ldrb	r3, [r7, #19]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d159      	bne.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a580:	4b2a      	ldr	r3, [pc, #168]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a58a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d01e      	beq.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a596:	697a      	ldr	r2, [r7, #20]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d019      	beq.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a59c:	4b23      	ldr	r3, [pc, #140]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a59e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a5a8:	4b20      	ldr	r3, [pc, #128]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a5aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5ae:	4a1f      	ldr	r2, [pc, #124]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a5b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a5b8:	4b1c      	ldr	r3, [pc, #112]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a5ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5be:	4a1b      	ldr	r2, [pc, #108]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a5c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a5c8:	4a18      	ldr	r2, [pc, #96]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	f003 0301 	and.w	r3, r3, #1
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d016      	beq.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5da:	f7fb fd4f 	bl	800607c <HAL_GetTick>
 800a5de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a5e0:	e00b      	b.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5e2:	f7fb fd4b 	bl	800607c <HAL_GetTick>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	1ad3      	subs	r3, r2, r3
 800a5ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d902      	bls.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	74fb      	strb	r3, [r7, #19]
            break;
 800a5f8:	e006      	b.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a5fa:	4b0c      	ldr	r3, [pc, #48]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a5fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a600:	f003 0302 	and.w	r3, r3, #2
 800a604:	2b00      	cmp	r3, #0
 800a606:	d0ec      	beq.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a608:	7cfb      	ldrb	r3, [r7, #19]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d10b      	bne.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a60e:	4b07      	ldr	r3, [pc, #28]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a614:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61c:	4903      	ldr	r1, [pc, #12]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a61e:	4313      	orrs	r3, r2
 800a620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a624:	e008      	b.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a626:	7cfb      	ldrb	r3, [r7, #19]
 800a628:	74bb      	strb	r3, [r7, #18]
 800a62a:	e005      	b.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a62c:	40021000 	.word	0x40021000
 800a630:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a634:	7cfb      	ldrb	r3, [r7, #19]
 800a636:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a638:	7c7b      	ldrb	r3, [r7, #17]
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d105      	bne.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a63e:	4ba6      	ldr	r3, [pc, #664]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a642:	4aa5      	ldr	r2, [pc, #660]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a648:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f003 0301 	and.w	r3, r3, #1
 800a652:	2b00      	cmp	r3, #0
 800a654:	d00a      	beq.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a656:	4ba0      	ldr	r3, [pc, #640]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a65c:	f023 0203 	bic.w	r2, r3, #3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	499c      	ldr	r1, [pc, #624]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a666:	4313      	orrs	r3, r2
 800a668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f003 0302 	and.w	r3, r3, #2
 800a674:	2b00      	cmp	r3, #0
 800a676:	d00a      	beq.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a678:	4b97      	ldr	r3, [pc, #604]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a67a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a67e:	f023 020c 	bic.w	r2, r3, #12
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	4994      	ldr	r1, [pc, #592]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a688:	4313      	orrs	r3, r2
 800a68a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f003 0304 	and.w	r3, r3, #4
 800a696:	2b00      	cmp	r3, #0
 800a698:	d00a      	beq.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a69a:	4b8f      	ldr	r3, [pc, #572]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a69c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	498b      	ldr	r1, [pc, #556]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 0308 	and.w	r3, r3, #8
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00a      	beq.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a6bc:	4b86      	ldr	r3, [pc, #536]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	691b      	ldr	r3, [r3, #16]
 800a6ca:	4983      	ldr	r1, [pc, #524]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f003 0320 	and.w	r3, r3, #32
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00a      	beq.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a6de:	4b7e      	ldr	r3, [pc, #504]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	695b      	ldr	r3, [r3, #20]
 800a6ec:	497a      	ldr	r1, [pc, #488]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00a      	beq.n	800a716 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a700:	4b75      	ldr	r3, [pc, #468]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a706:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	699b      	ldr	r3, [r3, #24]
 800a70e:	4972      	ldr	r1, [pc, #456]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a710:	4313      	orrs	r3, r2
 800a712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00a      	beq.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a722:	4b6d      	ldr	r3, [pc, #436]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a728:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	69db      	ldr	r3, [r3, #28]
 800a730:	4969      	ldr	r1, [pc, #420]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a732:	4313      	orrs	r3, r2
 800a734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a740:	2b00      	cmp	r3, #0
 800a742:	d00a      	beq.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a744:	4b64      	ldr	r3, [pc, #400]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a74a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a1b      	ldr	r3, [r3, #32]
 800a752:	4961      	ldr	r1, [pc, #388]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a754:	4313      	orrs	r3, r2
 800a756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00a      	beq.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a766:	4b5c      	ldr	r3, [pc, #368]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a76c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a774:	4958      	ldr	r1, [pc, #352]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a776:	4313      	orrs	r3, r2
 800a778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a784:	2b00      	cmp	r3, #0
 800a786:	d015      	beq.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a788:	4b53      	ldr	r3, [pc, #332]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a78a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a78e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a796:	4950      	ldr	r1, [pc, #320]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a798:	4313      	orrs	r3, r2
 800a79a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7a6:	d105      	bne.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a7a8:	4b4b      	ldr	r3, [pc, #300]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	4a4a      	ldr	r2, [pc, #296]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d015      	beq.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a7c0:	4b45      	ldr	r3, [pc, #276]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ce:	4942      	ldr	r1, [pc, #264]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7de:	d105      	bne.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a7e0:	4b3d      	ldr	r3, [pc, #244]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	4a3c      	ldr	r2, [pc, #240]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7ea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d015      	beq.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a7f8:	4b37      	ldr	r3, [pc, #220]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a806:	4934      	ldr	r1, [pc, #208]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a808:	4313      	orrs	r3, r2
 800a80a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a812:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a816:	d105      	bne.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a818:	4b2f      	ldr	r3, [pc, #188]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	4a2e      	ldr	r2, [pc, #184]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a81e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a822:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d015      	beq.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a830:	4b29      	ldr	r3, [pc, #164]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a836:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a83e:	4926      	ldr	r1, [pc, #152]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a840:	4313      	orrs	r3, r2
 800a842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a84a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a84e:	d105      	bne.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a850:	4b21      	ldr	r3, [pc, #132]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	4a20      	ldr	r2, [pc, #128]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a856:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a85a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a864:	2b00      	cmp	r3, #0
 800a866:	d015      	beq.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a868:	4b1b      	ldr	r3, [pc, #108]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a86a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a86e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a876:	4918      	ldr	r1, [pc, #96]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a878:	4313      	orrs	r3, r2
 800a87a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a882:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a886:	d105      	bne.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a888:	4b13      	ldr	r3, [pc, #76]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	4a12      	ldr	r2, [pc, #72]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a88e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a892:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d015      	beq.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a8a0:	4b0d      	ldr	r3, [pc, #52]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ae:	490a      	ldr	r1, [pc, #40]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8be:	d105      	bne.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a8c0:	4b05      	ldr	r3, [pc, #20]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	4a04      	ldr	r2, [pc, #16]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a8cc:	7cbb      	ldrb	r3, [r7, #18]
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3718      	adds	r7, #24
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	40021000 	.word	0x40021000

0800a8dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d101      	bne.n	800a8ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	e049      	b.n	800a982 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d106      	bne.n	800a908 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f7fb f8fc 	bl	8005b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2202      	movs	r2, #2
 800a90c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	3304      	adds	r3, #4
 800a918:	4619      	mov	r1, r3
 800a91a:	4610      	mov	r0, r2
 800a91c:	f000 fedc 	bl	800b6d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2201      	movs	r2, #1
 800a924:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2201      	movs	r2, #1
 800a934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2201      	movs	r2, #1
 800a97c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	3708      	adds	r7, #8
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
	...

0800a98c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d001      	beq.n	800a9a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e042      	b.n	800aa2a <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2202      	movs	r2, #2
 800a9a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a21      	ldr	r2, [pc, #132]	; (800aa38 <HAL_TIM_Base_Start+0xac>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d018      	beq.n	800a9e8 <HAL_TIM_Base_Start+0x5c>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9be:	d013      	beq.n	800a9e8 <HAL_TIM_Base_Start+0x5c>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a1d      	ldr	r2, [pc, #116]	; (800aa3c <HAL_TIM_Base_Start+0xb0>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d00e      	beq.n	800a9e8 <HAL_TIM_Base_Start+0x5c>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a1c      	ldr	r2, [pc, #112]	; (800aa40 <HAL_TIM_Base_Start+0xb4>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d009      	beq.n	800a9e8 <HAL_TIM_Base_Start+0x5c>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a1a      	ldr	r2, [pc, #104]	; (800aa44 <HAL_TIM_Base_Start+0xb8>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d004      	beq.n	800a9e8 <HAL_TIM_Base_Start+0x5c>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a19      	ldr	r2, [pc, #100]	; (800aa48 <HAL_TIM_Base_Start+0xbc>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d115      	bne.n	800aa14 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	689a      	ldr	r2, [r3, #8]
 800a9ee:	4b17      	ldr	r3, [pc, #92]	; (800aa4c <HAL_TIM_Base_Start+0xc0>)
 800a9f0:	4013      	ands	r3, r2
 800a9f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2b06      	cmp	r3, #6
 800a9f8:	d015      	beq.n	800aa26 <HAL_TIM_Base_Start+0x9a>
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa00:	d011      	beq.n	800aa26 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f042 0201 	orr.w	r2, r2, #1
 800aa10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa12:	e008      	b.n	800aa26 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f042 0201 	orr.w	r2, r2, #1
 800aa22:	601a      	str	r2, [r3, #0]
 800aa24:	e000      	b.n	800aa28 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa28:	2300      	movs	r3, #0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3714      	adds	r7, #20
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr
 800aa36:	bf00      	nop
 800aa38:	40012c00 	.word	0x40012c00
 800aa3c:	40000400 	.word	0x40000400
 800aa40:	40000800 	.word	0x40000800
 800aa44:	40013400 	.word	0x40013400
 800aa48:	40014000 	.word	0x40014000
 800aa4c:	00010007 	.word	0x00010007

0800aa50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d101      	bne.n	800aa62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	e049      	b.n	800aaf6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d106      	bne.n	800aa7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2200      	movs	r2, #0
 800aa72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 f841 	bl	800aafe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2202      	movs	r2, #2
 800aa80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	3304      	adds	r3, #4
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	4610      	mov	r0, r2
 800aa90:	f000 fe22 	bl	800b6d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2201      	movs	r2, #1
 800aa98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2201      	movs	r2, #1
 800aab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2201      	movs	r2, #1
 800aab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2201      	movs	r2, #1
 800aac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2201      	movs	r2, #1
 800aac8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2201      	movs	r2, #1
 800aae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3708      	adds	r7, #8
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800aafe:	b480      	push	{r7}
 800ab00:	b083      	sub	sp, #12
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ab06:	bf00      	nop
 800ab08:	370c      	adds	r7, #12
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr
	...

0800ab14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d109      	bne.n	800ab38 <HAL_TIM_PWM_Start+0x24>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	bf14      	ite	ne
 800ab30:	2301      	movne	r3, #1
 800ab32:	2300      	moveq	r3, #0
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	e03c      	b.n	800abb2 <HAL_TIM_PWM_Start+0x9e>
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	2b04      	cmp	r3, #4
 800ab3c:	d109      	bne.n	800ab52 <HAL_TIM_PWM_Start+0x3e>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	bf14      	ite	ne
 800ab4a:	2301      	movne	r3, #1
 800ab4c:	2300      	moveq	r3, #0
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	e02f      	b.n	800abb2 <HAL_TIM_PWM_Start+0x9e>
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	2b08      	cmp	r3, #8
 800ab56:	d109      	bne.n	800ab6c <HAL_TIM_PWM_Start+0x58>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	bf14      	ite	ne
 800ab64:	2301      	movne	r3, #1
 800ab66:	2300      	moveq	r3, #0
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	e022      	b.n	800abb2 <HAL_TIM_PWM_Start+0x9e>
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	2b0c      	cmp	r3, #12
 800ab70:	d109      	bne.n	800ab86 <HAL_TIM_PWM_Start+0x72>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	bf14      	ite	ne
 800ab7e:	2301      	movne	r3, #1
 800ab80:	2300      	moveq	r3, #0
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	e015      	b.n	800abb2 <HAL_TIM_PWM_Start+0x9e>
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	2b10      	cmp	r3, #16
 800ab8a:	d109      	bne.n	800aba0 <HAL_TIM_PWM_Start+0x8c>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	bf14      	ite	ne
 800ab98:	2301      	movne	r3, #1
 800ab9a:	2300      	moveq	r3, #0
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	e008      	b.n	800abb2 <HAL_TIM_PWM_Start+0x9e>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	bf14      	ite	ne
 800abac:	2301      	movne	r3, #1
 800abae:	2300      	moveq	r3, #0
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d001      	beq.n	800abba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800abb6:	2301      	movs	r3, #1
 800abb8:	e097      	b.n	800acea <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d104      	bne.n	800abca <HAL_TIM_PWM_Start+0xb6>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2202      	movs	r2, #2
 800abc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800abc8:	e023      	b.n	800ac12 <HAL_TIM_PWM_Start+0xfe>
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	2b04      	cmp	r3, #4
 800abce:	d104      	bne.n	800abda <HAL_TIM_PWM_Start+0xc6>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2202      	movs	r2, #2
 800abd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800abd8:	e01b      	b.n	800ac12 <HAL_TIM_PWM_Start+0xfe>
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	2b08      	cmp	r3, #8
 800abde:	d104      	bne.n	800abea <HAL_TIM_PWM_Start+0xd6>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2202      	movs	r2, #2
 800abe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800abe8:	e013      	b.n	800ac12 <HAL_TIM_PWM_Start+0xfe>
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	2b0c      	cmp	r3, #12
 800abee:	d104      	bne.n	800abfa <HAL_TIM_PWM_Start+0xe6>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2202      	movs	r2, #2
 800abf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800abf8:	e00b      	b.n	800ac12 <HAL_TIM_PWM_Start+0xfe>
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	2b10      	cmp	r3, #16
 800abfe:	d104      	bne.n	800ac0a <HAL_TIM_PWM_Start+0xf6>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2202      	movs	r2, #2
 800ac04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac08:	e003      	b.n	800ac12 <HAL_TIM_PWM_Start+0xfe>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2202      	movs	r2, #2
 800ac0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2201      	movs	r2, #1
 800ac18:	6839      	ldr	r1, [r7, #0]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f001 f97e 	bl	800bf1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a33      	ldr	r2, [pc, #204]	; (800acf4 <HAL_TIM_PWM_Start+0x1e0>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d013      	beq.n	800ac52 <HAL_TIM_PWM_Start+0x13e>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a32      	ldr	r2, [pc, #200]	; (800acf8 <HAL_TIM_PWM_Start+0x1e4>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d00e      	beq.n	800ac52 <HAL_TIM_PWM_Start+0x13e>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a30      	ldr	r2, [pc, #192]	; (800acfc <HAL_TIM_PWM_Start+0x1e8>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d009      	beq.n	800ac52 <HAL_TIM_PWM_Start+0x13e>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a2f      	ldr	r2, [pc, #188]	; (800ad00 <HAL_TIM_PWM_Start+0x1ec>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d004      	beq.n	800ac52 <HAL_TIM_PWM_Start+0x13e>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a2d      	ldr	r2, [pc, #180]	; (800ad04 <HAL_TIM_PWM_Start+0x1f0>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d101      	bne.n	800ac56 <HAL_TIM_PWM_Start+0x142>
 800ac52:	2301      	movs	r3, #1
 800ac54:	e000      	b.n	800ac58 <HAL_TIM_PWM_Start+0x144>
 800ac56:	2300      	movs	r3, #0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d007      	beq.n	800ac6c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac6a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a20      	ldr	r2, [pc, #128]	; (800acf4 <HAL_TIM_PWM_Start+0x1e0>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d018      	beq.n	800aca8 <HAL_TIM_PWM_Start+0x194>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac7e:	d013      	beq.n	800aca8 <HAL_TIM_PWM_Start+0x194>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a20      	ldr	r2, [pc, #128]	; (800ad08 <HAL_TIM_PWM_Start+0x1f4>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d00e      	beq.n	800aca8 <HAL_TIM_PWM_Start+0x194>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a1f      	ldr	r2, [pc, #124]	; (800ad0c <HAL_TIM_PWM_Start+0x1f8>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d009      	beq.n	800aca8 <HAL_TIM_PWM_Start+0x194>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a17      	ldr	r2, [pc, #92]	; (800acf8 <HAL_TIM_PWM_Start+0x1e4>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d004      	beq.n	800aca8 <HAL_TIM_PWM_Start+0x194>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4a16      	ldr	r2, [pc, #88]	; (800acfc <HAL_TIM_PWM_Start+0x1e8>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d115      	bne.n	800acd4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	689a      	ldr	r2, [r3, #8]
 800acae:	4b18      	ldr	r3, [pc, #96]	; (800ad10 <HAL_TIM_PWM_Start+0x1fc>)
 800acb0:	4013      	ands	r3, r2
 800acb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2b06      	cmp	r3, #6
 800acb8:	d015      	beq.n	800ace6 <HAL_TIM_PWM_Start+0x1d2>
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acc0:	d011      	beq.n	800ace6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f042 0201 	orr.w	r2, r2, #1
 800acd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acd2:	e008      	b.n	800ace6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f042 0201 	orr.w	r2, r2, #1
 800ace2:	601a      	str	r2, [r3, #0]
 800ace4:	e000      	b.n	800ace8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ace6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	40012c00 	.word	0x40012c00
 800acf8:	40013400 	.word	0x40013400
 800acfc:	40014000 	.word	0x40014000
 800ad00:	40014400 	.word	0x40014400
 800ad04:	40014800 	.word	0x40014800
 800ad08:	40000400 	.word	0x40000400
 800ad0c:	40000800 	.word	0x40000800
 800ad10:	00010007 	.word	0x00010007

0800ad14 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b086      	sub	sp, #24
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d101      	bne.n	800ad28 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ad24:	2301      	movs	r3, #1
 800ad26:	e097      	b.n	800ae58 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d106      	bne.n	800ad42 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f7fa ff13 	bl	8005b68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2202      	movs	r2, #2
 800ad46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	6812      	ldr	r2, [r2, #0]
 800ad54:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800ad58:	f023 0307 	bic.w	r3, r3, #7
 800ad5c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	3304      	adds	r3, #4
 800ad66:	4619      	mov	r1, r3
 800ad68:	4610      	mov	r0, r2
 800ad6a:	f000 fcb5 	bl	800b6d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	689b      	ldr	r3, [r3, #8]
 800ad74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	699b      	ldr	r3, [r3, #24]
 800ad7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	6a1b      	ldr	r3, [r3, #32]
 800ad84:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	697a      	ldr	r2, [r7, #20]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad96:	f023 0303 	bic.w	r3, r3, #3
 800ad9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	689a      	ldr	r2, [r3, #8]
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	699b      	ldr	r3, [r3, #24]
 800ada4:	021b      	lsls	r3, r3, #8
 800ada6:	4313      	orrs	r3, r2
 800ada8:	693a      	ldr	r2, [r7, #16]
 800adaa:	4313      	orrs	r3, r2
 800adac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800adb4:	f023 030c 	bic.w	r3, r3, #12
 800adb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800adc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800adc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	68da      	ldr	r2, [r3, #12]
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	69db      	ldr	r3, [r3, #28]
 800adce:	021b      	lsls	r3, r3, #8
 800add0:	4313      	orrs	r3, r2
 800add2:	693a      	ldr	r2, [r7, #16]
 800add4:	4313      	orrs	r3, r2
 800add6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	691b      	ldr	r3, [r3, #16]
 800addc:	011a      	lsls	r2, r3, #4
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	6a1b      	ldr	r3, [r3, #32]
 800ade2:	031b      	lsls	r3, r3, #12
 800ade4:	4313      	orrs	r3, r2
 800ade6:	693a      	ldr	r2, [r7, #16]
 800ade8:	4313      	orrs	r3, r2
 800adea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800adf2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800adfa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	685a      	ldr	r2, [r3, #4]
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	695b      	ldr	r3, [r3, #20]
 800ae04:	011b      	lsls	r3, r3, #4
 800ae06:	4313      	orrs	r3, r2
 800ae08:	68fa      	ldr	r2, [r7, #12]
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	697a      	ldr	r2, [r7, #20]
 800ae14:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	693a      	ldr	r2, [r7, #16]
 800ae1c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	68fa      	ldr	r2, [r7, #12]
 800ae24:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2201      	movs	r2, #1
 800ae2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2201      	movs	r2, #1
 800ae32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2201      	movs	r2, #1
 800ae3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2201      	movs	r2, #1
 800ae42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2201      	movs	r2, #1
 800ae4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2201      	movs	r2, #1
 800ae52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae56:	2300      	movs	r3, #0
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3718      	adds	r7, #24
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae70:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ae78:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae80:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae88:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d110      	bne.n	800aeb2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae90:	7bfb      	ldrb	r3, [r7, #15]
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d102      	bne.n	800ae9c <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ae96:	7b7b      	ldrb	r3, [r7, #13]
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d001      	beq.n	800aea0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e069      	b.n	800af74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2202      	movs	r2, #2
 800aea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2202      	movs	r2, #2
 800aeac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aeb0:	e031      	b.n	800af16 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	2b04      	cmp	r3, #4
 800aeb6:	d110      	bne.n	800aeda <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800aeb8:	7bbb      	ldrb	r3, [r7, #14]
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d102      	bne.n	800aec4 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800aebe:	7b3b      	ldrb	r3, [r7, #12]
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d001      	beq.n	800aec8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	e055      	b.n	800af74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2202      	movs	r2, #2
 800aecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2202      	movs	r2, #2
 800aed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aed8:	e01d      	b.n	800af16 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aeda:	7bfb      	ldrb	r3, [r7, #15]
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d108      	bne.n	800aef2 <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800aee0:	7bbb      	ldrb	r3, [r7, #14]
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d105      	bne.n	800aef2 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aee6:	7b7b      	ldrb	r3, [r7, #13]
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d102      	bne.n	800aef2 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800aeec:	7b3b      	ldrb	r3, [r7, #12]
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d001      	beq.n	800aef6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	e03e      	b.n	800af74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2202      	movs	r2, #2
 800aefa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2202      	movs	r2, #2
 800af02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2202      	movs	r2, #2
 800af0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2202      	movs	r2, #2
 800af12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d003      	beq.n	800af24 <HAL_TIM_Encoder_Start+0xc4>
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	2b04      	cmp	r3, #4
 800af20:	d008      	beq.n	800af34 <HAL_TIM_Encoder_Start+0xd4>
 800af22:	e00f      	b.n	800af44 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2201      	movs	r2, #1
 800af2a:	2100      	movs	r1, #0
 800af2c:	4618      	mov	r0, r3
 800af2e:	f000 fff5 	bl	800bf1c <TIM_CCxChannelCmd>
      break;
 800af32:	e016      	b.n	800af62 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2201      	movs	r2, #1
 800af3a:	2104      	movs	r1, #4
 800af3c:	4618      	mov	r0, r3
 800af3e:	f000 ffed 	bl	800bf1c <TIM_CCxChannelCmd>
      break;
 800af42:	e00e      	b.n	800af62 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	2201      	movs	r2, #1
 800af4a:	2100      	movs	r1, #0
 800af4c:	4618      	mov	r0, r3
 800af4e:	f000 ffe5 	bl	800bf1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2201      	movs	r2, #1
 800af58:	2104      	movs	r1, #4
 800af5a:	4618      	mov	r0, r3
 800af5c:	f000 ffde 	bl	800bf1c <TIM_CCxChannelCmd>
      break;
 800af60:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	681a      	ldr	r2, [r3, #0]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f042 0201 	orr.w	r2, r2, #1
 800af70:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	691b      	ldr	r3, [r3, #16]
 800af8a:	f003 0302 	and.w	r3, r3, #2
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d122      	bne.n	800afd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	68db      	ldr	r3, [r3, #12]
 800af98:	f003 0302 	and.w	r3, r3, #2
 800af9c:	2b02      	cmp	r3, #2
 800af9e:	d11b      	bne.n	800afd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f06f 0202 	mvn.w	r2, #2
 800afa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2201      	movs	r2, #1
 800afae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	699b      	ldr	r3, [r3, #24]
 800afb6:	f003 0303 	and.w	r3, r3, #3
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d003      	beq.n	800afc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7f7 f98c 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 800afc4:	e005      	b.n	800afd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 fb68 	bl	800b69c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 fb6f 	bl	800b6b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	691b      	ldr	r3, [r3, #16]
 800afde:	f003 0304 	and.w	r3, r3, #4
 800afe2:	2b04      	cmp	r3, #4
 800afe4:	d122      	bne.n	800b02c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	f003 0304 	and.w	r3, r3, #4
 800aff0:	2b04      	cmp	r3, #4
 800aff2:	d11b      	bne.n	800b02c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f06f 0204 	mvn.w	r2, #4
 800affc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2202      	movs	r2, #2
 800b002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	699b      	ldr	r3, [r3, #24]
 800b00a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d003      	beq.n	800b01a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f7f7 f962 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 800b018:	e005      	b.n	800b026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 fb3e 	bl	800b69c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f000 fb45 	bl	800b6b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	f003 0308 	and.w	r3, r3, #8
 800b036:	2b08      	cmp	r3, #8
 800b038:	d122      	bne.n	800b080 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	f003 0308 	and.w	r3, r3, #8
 800b044:	2b08      	cmp	r3, #8
 800b046:	d11b      	bne.n	800b080 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f06f 0208 	mvn.w	r2, #8
 800b050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2204      	movs	r2, #4
 800b056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	69db      	ldr	r3, [r3, #28]
 800b05e:	f003 0303 	and.w	r3, r3, #3
 800b062:	2b00      	cmp	r3, #0
 800b064:	d003      	beq.n	800b06e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f7f7 f938 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 800b06c:	e005      	b.n	800b07a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fb14 	bl	800b69c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 fb1b 	bl	800b6b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	691b      	ldr	r3, [r3, #16]
 800b086:	f003 0310 	and.w	r3, r3, #16
 800b08a:	2b10      	cmp	r3, #16
 800b08c:	d122      	bne.n	800b0d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	68db      	ldr	r3, [r3, #12]
 800b094:	f003 0310 	and.w	r3, r3, #16
 800b098:	2b10      	cmp	r3, #16
 800b09a:	d11b      	bne.n	800b0d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f06f 0210 	mvn.w	r2, #16
 800b0a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2208      	movs	r2, #8
 800b0aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	69db      	ldr	r3, [r3, #28]
 800b0b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d003      	beq.n	800b0c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f7f7 f90e 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 800b0c0:	e005      	b.n	800b0ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 faea 	bl	800b69c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 faf1 	bl	800b6b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	691b      	ldr	r3, [r3, #16]
 800b0da:	f003 0301 	and.w	r3, r3, #1
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d10e      	bne.n	800b100 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	f003 0301 	and.w	r3, r3, #1
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d107      	bne.n	800b100 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f06f 0201 	mvn.w	r2, #1
 800b0f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 fac4 	bl	800b688 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b10a:	2b80      	cmp	r3, #128	; 0x80
 800b10c:	d10e      	bne.n	800b12c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	68db      	ldr	r3, [r3, #12]
 800b114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b118:	2b80      	cmp	r3, #128	; 0x80
 800b11a:	d107      	bne.n	800b12c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f001 f8fe 	bl	800c328 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	691b      	ldr	r3, [r3, #16]
 800b132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b13a:	d10e      	bne.n	800b15a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b146:	2b80      	cmp	r3, #128	; 0x80
 800b148:	d107      	bne.n	800b15a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f001 f8f1 	bl	800c33c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	691b      	ldr	r3, [r3, #16]
 800b160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b164:	2b40      	cmp	r3, #64	; 0x40
 800b166:	d10e      	bne.n	800b186 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b172:	2b40      	cmp	r3, #64	; 0x40
 800b174:	d107      	bne.n	800b186 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b17e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 fa9f 	bl	800b6c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	691b      	ldr	r3, [r3, #16]
 800b18c:	f003 0320 	and.w	r3, r3, #32
 800b190:	2b20      	cmp	r3, #32
 800b192:	d10e      	bne.n	800b1b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	f003 0320 	and.w	r3, r3, #32
 800b19e:	2b20      	cmp	r3, #32
 800b1a0:	d107      	bne.n	800b1b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f06f 0220 	mvn.w	r2, #32
 800b1aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f001 f8b1 	bl	800c314 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	691b      	ldr	r3, [r3, #16]
 800b1b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b1bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1c0:	d10f      	bne.n	800b1e2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b1cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1d0:	d107      	bne.n	800b1e2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800b1da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f001 f8b7 	bl	800c350 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	691b      	ldr	r3, [r3, #16]
 800b1e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b1ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1f0:	d10f      	bne.n	800b212 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b1fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b200:	d107      	bne.n	800b212 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800b20a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f001 f8a9 	bl	800c364 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	691b      	ldr	r3, [r3, #16]
 800b218:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b21c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b220:	d10f      	bne.n	800b242 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b22c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b230:	d107      	bne.n	800b242 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800b23a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f001 f89b 	bl	800c378 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	691b      	ldr	r3, [r3, #16]
 800b248:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b24c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b250:	d10f      	bne.n	800b272 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	68db      	ldr	r3, [r3, #12]
 800b258:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b25c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b260:	d107      	bne.n	800b272 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800b26a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f001 f88d 	bl	800c38c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b272:	bf00      	nop
 800b274:	3708      	adds	r7, #8
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
	...

0800b27c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b28e:	2b01      	cmp	r3, #1
 800b290:	d101      	bne.n	800b296 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b292:	2302      	movs	r3, #2
 800b294:	e0fd      	b.n	800b492 <HAL_TIM_PWM_ConfigChannel+0x216>
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2201      	movs	r2, #1
 800b29a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2b14      	cmp	r3, #20
 800b2a2:	f200 80f0 	bhi.w	800b486 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800b2a6:	a201      	add	r2, pc, #4	; (adr r2, 800b2ac <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ac:	0800b301 	.word	0x0800b301
 800b2b0:	0800b487 	.word	0x0800b487
 800b2b4:	0800b487 	.word	0x0800b487
 800b2b8:	0800b487 	.word	0x0800b487
 800b2bc:	0800b341 	.word	0x0800b341
 800b2c0:	0800b487 	.word	0x0800b487
 800b2c4:	0800b487 	.word	0x0800b487
 800b2c8:	0800b487 	.word	0x0800b487
 800b2cc:	0800b383 	.word	0x0800b383
 800b2d0:	0800b487 	.word	0x0800b487
 800b2d4:	0800b487 	.word	0x0800b487
 800b2d8:	0800b487 	.word	0x0800b487
 800b2dc:	0800b3c3 	.word	0x0800b3c3
 800b2e0:	0800b487 	.word	0x0800b487
 800b2e4:	0800b487 	.word	0x0800b487
 800b2e8:	0800b487 	.word	0x0800b487
 800b2ec:	0800b405 	.word	0x0800b405
 800b2f0:	0800b487 	.word	0x0800b487
 800b2f4:	0800b487 	.word	0x0800b487
 800b2f8:	0800b487 	.word	0x0800b487
 800b2fc:	0800b445 	.word	0x0800b445
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	68b9      	ldr	r1, [r7, #8]
 800b306:	4618      	mov	r0, r3
 800b308:	f000 fa76 	bl	800b7f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	699a      	ldr	r2, [r3, #24]
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f042 0208 	orr.w	r2, r2, #8
 800b31a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	699a      	ldr	r2, [r3, #24]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f022 0204 	bic.w	r2, r2, #4
 800b32a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	6999      	ldr	r1, [r3, #24]
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	691a      	ldr	r2, [r3, #16]
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	430a      	orrs	r2, r1
 800b33c:	619a      	str	r2, [r3, #24]
      break;
 800b33e:	e0a3      	b.n	800b488 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	68b9      	ldr	r1, [r7, #8]
 800b346:	4618      	mov	r0, r3
 800b348:	f000 fae6 	bl	800b918 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	699a      	ldr	r2, [r3, #24]
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b35a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	699a      	ldr	r2, [r3, #24]
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b36a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	6999      	ldr	r1, [r3, #24]
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	691b      	ldr	r3, [r3, #16]
 800b376:	021a      	lsls	r2, r3, #8
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	430a      	orrs	r2, r1
 800b37e:	619a      	str	r2, [r3, #24]
      break;
 800b380:	e082      	b.n	800b488 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	68b9      	ldr	r1, [r7, #8]
 800b388:	4618      	mov	r0, r3
 800b38a:	f000 fb4f 	bl	800ba2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	69da      	ldr	r2, [r3, #28]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f042 0208 	orr.w	r2, r2, #8
 800b39c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	69da      	ldr	r2, [r3, #28]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f022 0204 	bic.w	r2, r2, #4
 800b3ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	69d9      	ldr	r1, [r3, #28]
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	691a      	ldr	r2, [r3, #16]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	430a      	orrs	r2, r1
 800b3be:	61da      	str	r2, [r3, #28]
      break;
 800b3c0:	e062      	b.n	800b488 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	68b9      	ldr	r1, [r7, #8]
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f000 fbb7 	bl	800bb3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	69da      	ldr	r2, [r3, #28]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b3dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	69da      	ldr	r2, [r3, #28]
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b3ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	69d9      	ldr	r1, [r3, #28]
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	691b      	ldr	r3, [r3, #16]
 800b3f8:	021a      	lsls	r2, r3, #8
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	430a      	orrs	r2, r1
 800b400:	61da      	str	r2, [r3, #28]
      break;
 800b402:	e041      	b.n	800b488 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	68b9      	ldr	r1, [r7, #8]
 800b40a:	4618      	mov	r0, r3
 800b40c:	f000 fc20 	bl	800bc50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f042 0208 	orr.w	r2, r2, #8
 800b41e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f022 0204 	bic.w	r2, r2, #4
 800b42e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	691a      	ldr	r2, [r3, #16]
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	430a      	orrs	r2, r1
 800b440:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b442:	e021      	b.n	800b488 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	68b9      	ldr	r1, [r7, #8]
 800b44a:	4618      	mov	r0, r3
 800b44c:	f000 fc64 	bl	800bd18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b45e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b46e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	691b      	ldr	r3, [r3, #16]
 800b47a:	021a      	lsls	r2, r3, #8
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	430a      	orrs	r2, r1
 800b482:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b484:	e000      	b.n	800b488 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b486:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b490:	2300      	movs	r3, #0
}
 800b492:	4618      	mov	r0, r3
 800b494:	3710      	adds	r7, #16
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop

0800b49c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d101      	bne.n	800b4b4 <HAL_TIM_ConfigClockSource+0x18>
 800b4b0:	2302      	movs	r3, #2
 800b4b2:	e0dd      	b.n	800b670 <HAL_TIM_ConfigClockSource+0x1d4>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2202      	movs	r2, #2
 800b4c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800b4d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b4d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b4de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	68fa      	ldr	r2, [r7, #12]
 800b4e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a62      	ldr	r2, [pc, #392]	; (800b678 <HAL_TIM_ConfigClockSource+0x1dc>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	f000 80a9 	beq.w	800b646 <HAL_TIM_ConfigClockSource+0x1aa>
 800b4f4:	4a60      	ldr	r2, [pc, #384]	; (800b678 <HAL_TIM_ConfigClockSource+0x1dc>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	f200 80ae 	bhi.w	800b658 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4fc:	4a5f      	ldr	r2, [pc, #380]	; (800b67c <HAL_TIM_ConfigClockSource+0x1e0>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	f000 80a1 	beq.w	800b646 <HAL_TIM_ConfigClockSource+0x1aa>
 800b504:	4a5d      	ldr	r2, [pc, #372]	; (800b67c <HAL_TIM_ConfigClockSource+0x1e0>)
 800b506:	4293      	cmp	r3, r2
 800b508:	f200 80a6 	bhi.w	800b658 <HAL_TIM_ConfigClockSource+0x1bc>
 800b50c:	4a5c      	ldr	r2, [pc, #368]	; (800b680 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	f000 8099 	beq.w	800b646 <HAL_TIM_ConfigClockSource+0x1aa>
 800b514:	4a5a      	ldr	r2, [pc, #360]	; (800b680 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b516:	4293      	cmp	r3, r2
 800b518:	f200 809e 	bhi.w	800b658 <HAL_TIM_ConfigClockSource+0x1bc>
 800b51c:	4a59      	ldr	r2, [pc, #356]	; (800b684 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	f000 8091 	beq.w	800b646 <HAL_TIM_ConfigClockSource+0x1aa>
 800b524:	4a57      	ldr	r2, [pc, #348]	; (800b684 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b526:	4293      	cmp	r3, r2
 800b528:	f200 8096 	bhi.w	800b658 <HAL_TIM_ConfigClockSource+0x1bc>
 800b52c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b530:	f000 8089 	beq.w	800b646 <HAL_TIM_ConfigClockSource+0x1aa>
 800b534:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b538:	f200 808e 	bhi.w	800b658 <HAL_TIM_ConfigClockSource+0x1bc>
 800b53c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b540:	d03e      	beq.n	800b5c0 <HAL_TIM_ConfigClockSource+0x124>
 800b542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b546:	f200 8087 	bhi.w	800b658 <HAL_TIM_ConfigClockSource+0x1bc>
 800b54a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b54e:	f000 8085 	beq.w	800b65c <HAL_TIM_ConfigClockSource+0x1c0>
 800b552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b556:	d87f      	bhi.n	800b658 <HAL_TIM_ConfigClockSource+0x1bc>
 800b558:	2b70      	cmp	r3, #112	; 0x70
 800b55a:	d01a      	beq.n	800b592 <HAL_TIM_ConfigClockSource+0xf6>
 800b55c:	2b70      	cmp	r3, #112	; 0x70
 800b55e:	d87b      	bhi.n	800b658 <HAL_TIM_ConfigClockSource+0x1bc>
 800b560:	2b60      	cmp	r3, #96	; 0x60
 800b562:	d050      	beq.n	800b606 <HAL_TIM_ConfigClockSource+0x16a>
 800b564:	2b60      	cmp	r3, #96	; 0x60
 800b566:	d877      	bhi.n	800b658 <HAL_TIM_ConfigClockSource+0x1bc>
 800b568:	2b50      	cmp	r3, #80	; 0x50
 800b56a:	d03c      	beq.n	800b5e6 <HAL_TIM_ConfigClockSource+0x14a>
 800b56c:	2b50      	cmp	r3, #80	; 0x50
 800b56e:	d873      	bhi.n	800b658 <HAL_TIM_ConfigClockSource+0x1bc>
 800b570:	2b40      	cmp	r3, #64	; 0x40
 800b572:	d058      	beq.n	800b626 <HAL_TIM_ConfigClockSource+0x18a>
 800b574:	2b40      	cmp	r3, #64	; 0x40
 800b576:	d86f      	bhi.n	800b658 <HAL_TIM_ConfigClockSource+0x1bc>
 800b578:	2b30      	cmp	r3, #48	; 0x30
 800b57a:	d064      	beq.n	800b646 <HAL_TIM_ConfigClockSource+0x1aa>
 800b57c:	2b30      	cmp	r3, #48	; 0x30
 800b57e:	d86b      	bhi.n	800b658 <HAL_TIM_ConfigClockSource+0x1bc>
 800b580:	2b20      	cmp	r3, #32
 800b582:	d060      	beq.n	800b646 <HAL_TIM_ConfigClockSource+0x1aa>
 800b584:	2b20      	cmp	r3, #32
 800b586:	d867      	bhi.n	800b658 <HAL_TIM_ConfigClockSource+0x1bc>
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d05c      	beq.n	800b646 <HAL_TIM_ConfigClockSource+0x1aa>
 800b58c:	2b10      	cmp	r3, #16
 800b58e:	d05a      	beq.n	800b646 <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b590:	e062      	b.n	800b658 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6818      	ldr	r0, [r3, #0]
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	6899      	ldr	r1, [r3, #8]
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	685a      	ldr	r2, [r3, #4]
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	f000 fc9b 	bl	800bedc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b5b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	68fa      	ldr	r2, [r7, #12]
 800b5bc:	609a      	str	r2, [r3, #8]
      break;
 800b5be:	e04e      	b.n	800b65e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6818      	ldr	r0, [r3, #0]
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	6899      	ldr	r1, [r3, #8]
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	685a      	ldr	r2, [r3, #4]
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	68db      	ldr	r3, [r3, #12]
 800b5d0:	f000 fc84 	bl	800bedc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	689a      	ldr	r2, [r3, #8]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b5e2:	609a      	str	r2, [r3, #8]
      break;
 800b5e4:	e03b      	b.n	800b65e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6818      	ldr	r0, [r3, #0]
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	6859      	ldr	r1, [r3, #4]
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	68db      	ldr	r3, [r3, #12]
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	f000 fbf6 	bl	800bde4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2150      	movs	r1, #80	; 0x50
 800b5fe:	4618      	mov	r0, r3
 800b600:	f000 fc4f 	bl	800bea2 <TIM_ITRx_SetConfig>
      break;
 800b604:	e02b      	b.n	800b65e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6818      	ldr	r0, [r3, #0]
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	6859      	ldr	r1, [r3, #4]
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	461a      	mov	r2, r3
 800b614:	f000 fc15 	bl	800be42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	2160      	movs	r1, #96	; 0x60
 800b61e:	4618      	mov	r0, r3
 800b620:	f000 fc3f 	bl	800bea2 <TIM_ITRx_SetConfig>
      break;
 800b624:	e01b      	b.n	800b65e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6818      	ldr	r0, [r3, #0]
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	6859      	ldr	r1, [r3, #4]
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	461a      	mov	r2, r3
 800b634:	f000 fbd6 	bl	800bde4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2140      	movs	r1, #64	; 0x40
 800b63e:	4618      	mov	r0, r3
 800b640:	f000 fc2f 	bl	800bea2 <TIM_ITRx_SetConfig>
      break;
 800b644:	e00b      	b.n	800b65e <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4619      	mov	r1, r3
 800b650:	4610      	mov	r0, r2
 800b652:	f000 fc26 	bl	800bea2 <TIM_ITRx_SetConfig>
        break;
 800b656:	e002      	b.n	800b65e <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 800b658:	bf00      	nop
 800b65a:	e000      	b.n	800b65e <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 800b65c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2201      	movs	r2, #1
 800b662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2200      	movs	r2, #0
 800b66a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b66e:	2300      	movs	r3, #0
}
 800b670:	4618      	mov	r0, r3
 800b672:	3710      	adds	r7, #16
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}
 800b678:	00100070 	.word	0x00100070
 800b67c:	00100040 	.word	0x00100040
 800b680:	00100030 	.word	0x00100030
 800b684:	00100020 	.word	0x00100020

0800b688 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b688:	b480      	push	{r7}
 800b68a:	b083      	sub	sp, #12
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b690:	bf00      	nop
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b6a4:	bf00      	nop
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b6b8:	bf00      	nop
 800b6ba:	370c      	adds	r7, #12
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr

0800b6c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b6cc:	bf00      	nop
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b085      	sub	sp, #20
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	4a3c      	ldr	r2, [pc, #240]	; (800b7dc <TIM_Base_SetConfig+0x104>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d00f      	beq.n	800b710 <TIM_Base_SetConfig+0x38>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6f6:	d00b      	beq.n	800b710 <TIM_Base_SetConfig+0x38>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	4a39      	ldr	r2, [pc, #228]	; (800b7e0 <TIM_Base_SetConfig+0x108>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d007      	beq.n	800b710 <TIM_Base_SetConfig+0x38>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	4a38      	ldr	r2, [pc, #224]	; (800b7e4 <TIM_Base_SetConfig+0x10c>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d003      	beq.n	800b710 <TIM_Base_SetConfig+0x38>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	4a37      	ldr	r2, [pc, #220]	; (800b7e8 <TIM_Base_SetConfig+0x110>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d108      	bne.n	800b722 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	685b      	ldr	r3, [r3, #4]
 800b71c:	68fa      	ldr	r2, [r7, #12]
 800b71e:	4313      	orrs	r3, r2
 800b720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4a2d      	ldr	r2, [pc, #180]	; (800b7dc <TIM_Base_SetConfig+0x104>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d01b      	beq.n	800b762 <TIM_Base_SetConfig+0x8a>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b730:	d017      	beq.n	800b762 <TIM_Base_SetConfig+0x8a>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	4a2a      	ldr	r2, [pc, #168]	; (800b7e0 <TIM_Base_SetConfig+0x108>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d013      	beq.n	800b762 <TIM_Base_SetConfig+0x8a>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	4a29      	ldr	r2, [pc, #164]	; (800b7e4 <TIM_Base_SetConfig+0x10c>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d00f      	beq.n	800b762 <TIM_Base_SetConfig+0x8a>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	4a28      	ldr	r2, [pc, #160]	; (800b7e8 <TIM_Base_SetConfig+0x110>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d00b      	beq.n	800b762 <TIM_Base_SetConfig+0x8a>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4a27      	ldr	r2, [pc, #156]	; (800b7ec <TIM_Base_SetConfig+0x114>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d007      	beq.n	800b762 <TIM_Base_SetConfig+0x8a>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	4a26      	ldr	r2, [pc, #152]	; (800b7f0 <TIM_Base_SetConfig+0x118>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d003      	beq.n	800b762 <TIM_Base_SetConfig+0x8a>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	4a25      	ldr	r2, [pc, #148]	; (800b7f4 <TIM_Base_SetConfig+0x11c>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d108      	bne.n	800b774 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	68fa      	ldr	r2, [r7, #12]
 800b770:	4313      	orrs	r3, r2
 800b772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	695b      	ldr	r3, [r3, #20]
 800b77e:	4313      	orrs	r3, r2
 800b780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	68fa      	ldr	r2, [r7, #12]
 800b786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	689a      	ldr	r2, [r3, #8]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	681a      	ldr	r2, [r3, #0]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	4a10      	ldr	r2, [pc, #64]	; (800b7dc <TIM_Base_SetConfig+0x104>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d00f      	beq.n	800b7c0 <TIM_Base_SetConfig+0xe8>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4a11      	ldr	r2, [pc, #68]	; (800b7e8 <TIM_Base_SetConfig+0x110>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d00b      	beq.n	800b7c0 <TIM_Base_SetConfig+0xe8>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	4a10      	ldr	r2, [pc, #64]	; (800b7ec <TIM_Base_SetConfig+0x114>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d007      	beq.n	800b7c0 <TIM_Base_SetConfig+0xe8>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	4a0f      	ldr	r2, [pc, #60]	; (800b7f0 <TIM_Base_SetConfig+0x118>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d003      	beq.n	800b7c0 <TIM_Base_SetConfig+0xe8>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	4a0e      	ldr	r2, [pc, #56]	; (800b7f4 <TIM_Base_SetConfig+0x11c>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d103      	bne.n	800b7c8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	691a      	ldr	r2, [r3, #16]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	615a      	str	r2, [r3, #20]
}
 800b7ce:	bf00      	nop
 800b7d0:	3714      	adds	r7, #20
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr
 800b7da:	bf00      	nop
 800b7dc:	40012c00 	.word	0x40012c00
 800b7e0:	40000400 	.word	0x40000400
 800b7e4:	40000800 	.word	0x40000800
 800b7e8:	40013400 	.word	0x40013400
 800b7ec:	40014000 	.word	0x40014000
 800b7f0:	40014400 	.word	0x40014400
 800b7f4:	40014800 	.word	0x40014800

0800b7f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b087      	sub	sp, #28
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a1b      	ldr	r3, [r3, #32]
 800b806:	f023 0201 	bic.w	r2, r3, #1
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6a1b      	ldr	r3, [r3, #32]
 800b812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	699b      	ldr	r3, [r3, #24]
 800b81e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b82a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f023 0303 	bic.w	r3, r3, #3
 800b832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	4313      	orrs	r3, r2
 800b83c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	f023 0302 	bic.w	r3, r3, #2
 800b844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	697a      	ldr	r2, [r7, #20]
 800b84c:	4313      	orrs	r3, r2
 800b84e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	4a2c      	ldr	r2, [pc, #176]	; (800b904 <TIM_OC1_SetConfig+0x10c>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d00f      	beq.n	800b878 <TIM_OC1_SetConfig+0x80>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	4a2b      	ldr	r2, [pc, #172]	; (800b908 <TIM_OC1_SetConfig+0x110>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d00b      	beq.n	800b878 <TIM_OC1_SetConfig+0x80>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	4a2a      	ldr	r2, [pc, #168]	; (800b90c <TIM_OC1_SetConfig+0x114>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d007      	beq.n	800b878 <TIM_OC1_SetConfig+0x80>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	4a29      	ldr	r2, [pc, #164]	; (800b910 <TIM_OC1_SetConfig+0x118>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d003      	beq.n	800b878 <TIM_OC1_SetConfig+0x80>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	4a28      	ldr	r2, [pc, #160]	; (800b914 <TIM_OC1_SetConfig+0x11c>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d10c      	bne.n	800b892 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	f023 0308 	bic.w	r3, r3, #8
 800b87e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	697a      	ldr	r2, [r7, #20]
 800b886:	4313      	orrs	r3, r2
 800b888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	f023 0304 	bic.w	r3, r3, #4
 800b890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	4a1b      	ldr	r2, [pc, #108]	; (800b904 <TIM_OC1_SetConfig+0x10c>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d00f      	beq.n	800b8ba <TIM_OC1_SetConfig+0xc2>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	4a1a      	ldr	r2, [pc, #104]	; (800b908 <TIM_OC1_SetConfig+0x110>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d00b      	beq.n	800b8ba <TIM_OC1_SetConfig+0xc2>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	4a19      	ldr	r2, [pc, #100]	; (800b90c <TIM_OC1_SetConfig+0x114>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d007      	beq.n	800b8ba <TIM_OC1_SetConfig+0xc2>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	4a18      	ldr	r2, [pc, #96]	; (800b910 <TIM_OC1_SetConfig+0x118>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d003      	beq.n	800b8ba <TIM_OC1_SetConfig+0xc2>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	4a17      	ldr	r2, [pc, #92]	; (800b914 <TIM_OC1_SetConfig+0x11c>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d111      	bne.n	800b8de <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b8c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	695b      	ldr	r3, [r3, #20]
 800b8ce:	693a      	ldr	r2, [r7, #16]
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	699b      	ldr	r3, [r3, #24]
 800b8d8:	693a      	ldr	r2, [r7, #16]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	693a      	ldr	r2, [r7, #16]
 800b8e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	685a      	ldr	r2, [r3, #4]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	697a      	ldr	r2, [r7, #20]
 800b8f6:	621a      	str	r2, [r3, #32]
}
 800b8f8:	bf00      	nop
 800b8fa:	371c      	adds	r7, #28
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr
 800b904:	40012c00 	.word	0x40012c00
 800b908:	40013400 	.word	0x40013400
 800b90c:	40014000 	.word	0x40014000
 800b910:	40014400 	.word	0x40014400
 800b914:	40014800 	.word	0x40014800

0800b918 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b918:	b480      	push	{r7}
 800b91a:	b087      	sub	sp, #28
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6a1b      	ldr	r3, [r3, #32]
 800b926:	f023 0210 	bic.w	r2, r3, #16
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6a1b      	ldr	r3, [r3, #32]
 800b932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	699b      	ldr	r3, [r3, #24]
 800b93e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b94a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	021b      	lsls	r3, r3, #8
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	4313      	orrs	r3, r2
 800b95e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	f023 0320 	bic.w	r3, r3, #32
 800b966:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	011b      	lsls	r3, r3, #4
 800b96e:	697a      	ldr	r2, [r7, #20]
 800b970:	4313      	orrs	r3, r2
 800b972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	4a28      	ldr	r2, [pc, #160]	; (800ba18 <TIM_OC2_SetConfig+0x100>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d003      	beq.n	800b984 <TIM_OC2_SetConfig+0x6c>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	4a27      	ldr	r2, [pc, #156]	; (800ba1c <TIM_OC2_SetConfig+0x104>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d10d      	bne.n	800b9a0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b98a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	011b      	lsls	r3, r3, #4
 800b992:	697a      	ldr	r2, [r7, #20]
 800b994:	4313      	orrs	r3, r2
 800b996:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b99e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	4a1d      	ldr	r2, [pc, #116]	; (800ba18 <TIM_OC2_SetConfig+0x100>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d00f      	beq.n	800b9c8 <TIM_OC2_SetConfig+0xb0>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	4a1c      	ldr	r2, [pc, #112]	; (800ba1c <TIM_OC2_SetConfig+0x104>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d00b      	beq.n	800b9c8 <TIM_OC2_SetConfig+0xb0>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	4a1b      	ldr	r2, [pc, #108]	; (800ba20 <TIM_OC2_SetConfig+0x108>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d007      	beq.n	800b9c8 <TIM_OC2_SetConfig+0xb0>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	4a1a      	ldr	r2, [pc, #104]	; (800ba24 <TIM_OC2_SetConfig+0x10c>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d003      	beq.n	800b9c8 <TIM_OC2_SetConfig+0xb0>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	4a19      	ldr	r2, [pc, #100]	; (800ba28 <TIM_OC2_SetConfig+0x110>)
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d113      	bne.n	800b9f0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b9ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b9d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	695b      	ldr	r3, [r3, #20]
 800b9dc:	009b      	lsls	r3, r3, #2
 800b9de:	693a      	ldr	r2, [r7, #16]
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	699b      	ldr	r3, [r3, #24]
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	693a      	ldr	r2, [r7, #16]
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	693a      	ldr	r2, [r7, #16]
 800b9f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	68fa      	ldr	r2, [r7, #12]
 800b9fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	685a      	ldr	r2, [r3, #4]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	697a      	ldr	r2, [r7, #20]
 800ba08:	621a      	str	r2, [r3, #32]
}
 800ba0a:	bf00      	nop
 800ba0c:	371c      	adds	r7, #28
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr
 800ba16:	bf00      	nop
 800ba18:	40012c00 	.word	0x40012c00
 800ba1c:	40013400 	.word	0x40013400
 800ba20:	40014000 	.word	0x40014000
 800ba24:	40014400 	.word	0x40014400
 800ba28:	40014800 	.word	0x40014800

0800ba2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b087      	sub	sp, #28
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6a1b      	ldr	r3, [r3, #32]
 800ba3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6a1b      	ldr	r3, [r3, #32]
 800ba46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	69db      	ldr	r3, [r3, #28]
 800ba52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f023 0303 	bic.w	r3, r3, #3
 800ba66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	68fa      	ldr	r2, [r7, #12]
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ba78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	021b      	lsls	r3, r3, #8
 800ba80:	697a      	ldr	r2, [r7, #20]
 800ba82:	4313      	orrs	r3, r2
 800ba84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	4a27      	ldr	r2, [pc, #156]	; (800bb28 <TIM_OC3_SetConfig+0xfc>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d003      	beq.n	800ba96 <TIM_OC3_SetConfig+0x6a>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	4a26      	ldr	r2, [pc, #152]	; (800bb2c <TIM_OC3_SetConfig+0x100>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d10d      	bne.n	800bab2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	021b      	lsls	r3, r3, #8
 800baa4:	697a      	ldr	r2, [r7, #20]
 800baa6:	4313      	orrs	r3, r2
 800baa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	4a1c      	ldr	r2, [pc, #112]	; (800bb28 <TIM_OC3_SetConfig+0xfc>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d00f      	beq.n	800bada <TIM_OC3_SetConfig+0xae>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	4a1b      	ldr	r2, [pc, #108]	; (800bb2c <TIM_OC3_SetConfig+0x100>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d00b      	beq.n	800bada <TIM_OC3_SetConfig+0xae>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	4a1a      	ldr	r2, [pc, #104]	; (800bb30 <TIM_OC3_SetConfig+0x104>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d007      	beq.n	800bada <TIM_OC3_SetConfig+0xae>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4a19      	ldr	r2, [pc, #100]	; (800bb34 <TIM_OC3_SetConfig+0x108>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d003      	beq.n	800bada <TIM_OC3_SetConfig+0xae>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4a18      	ldr	r2, [pc, #96]	; (800bb38 <TIM_OC3_SetConfig+0x10c>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d113      	bne.n	800bb02 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	695b      	ldr	r3, [r3, #20]
 800baee:	011b      	lsls	r3, r3, #4
 800baf0:	693a      	ldr	r2, [r7, #16]
 800baf2:	4313      	orrs	r3, r2
 800baf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	699b      	ldr	r3, [r3, #24]
 800bafa:	011b      	lsls	r3, r3, #4
 800bafc:	693a      	ldr	r2, [r7, #16]
 800bafe:	4313      	orrs	r3, r2
 800bb00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	693a      	ldr	r2, [r7, #16]
 800bb06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	68fa      	ldr	r2, [r7, #12]
 800bb0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	685a      	ldr	r2, [r3, #4]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	697a      	ldr	r2, [r7, #20]
 800bb1a:	621a      	str	r2, [r3, #32]
}
 800bb1c:	bf00      	nop
 800bb1e:	371c      	adds	r7, #28
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr
 800bb28:	40012c00 	.word	0x40012c00
 800bb2c:	40013400 	.word	0x40013400
 800bb30:	40014000 	.word	0x40014000
 800bb34:	40014400 	.word	0x40014400
 800bb38:	40014800 	.word	0x40014800

0800bb3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b087      	sub	sp, #28
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6a1b      	ldr	r3, [r3, #32]
 800bb4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6a1b      	ldr	r3, [r3, #32]
 800bb56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	69db      	ldr	r3, [r3, #28]
 800bb62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bb6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	021b      	lsls	r3, r3, #8
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	4313      	orrs	r3, r2
 800bb82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	689b      	ldr	r3, [r3, #8]
 800bb90:	031b      	lsls	r3, r3, #12
 800bb92:	697a      	ldr	r2, [r7, #20]
 800bb94:	4313      	orrs	r3, r2
 800bb96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	4a28      	ldr	r2, [pc, #160]	; (800bc3c <TIM_OC4_SetConfig+0x100>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d003      	beq.n	800bba8 <TIM_OC4_SetConfig+0x6c>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	4a27      	ldr	r2, [pc, #156]	; (800bc40 <TIM_OC4_SetConfig+0x104>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d10d      	bne.n	800bbc4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bbae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	031b      	lsls	r3, r3, #12
 800bbb6:	697a      	ldr	r2, [r7, #20]
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bbc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	4a1d      	ldr	r2, [pc, #116]	; (800bc3c <TIM_OC4_SetConfig+0x100>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d00f      	beq.n	800bbec <TIM_OC4_SetConfig+0xb0>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	4a1c      	ldr	r2, [pc, #112]	; (800bc40 <TIM_OC4_SetConfig+0x104>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d00b      	beq.n	800bbec <TIM_OC4_SetConfig+0xb0>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	4a1b      	ldr	r2, [pc, #108]	; (800bc44 <TIM_OC4_SetConfig+0x108>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d007      	beq.n	800bbec <TIM_OC4_SetConfig+0xb0>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4a1a      	ldr	r2, [pc, #104]	; (800bc48 <TIM_OC4_SetConfig+0x10c>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d003      	beq.n	800bbec <TIM_OC4_SetConfig+0xb0>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	4a19      	ldr	r2, [pc, #100]	; (800bc4c <TIM_OC4_SetConfig+0x110>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d113      	bne.n	800bc14 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bbf2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bbfa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	695b      	ldr	r3, [r3, #20]
 800bc00:	019b      	lsls	r3, r3, #6
 800bc02:	693a      	ldr	r2, [r7, #16]
 800bc04:	4313      	orrs	r3, r2
 800bc06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	699b      	ldr	r3, [r3, #24]
 800bc0c:	019b      	lsls	r3, r3, #6
 800bc0e:	693a      	ldr	r2, [r7, #16]
 800bc10:	4313      	orrs	r3, r2
 800bc12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	693a      	ldr	r2, [r7, #16]
 800bc18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	68fa      	ldr	r2, [r7, #12]
 800bc1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	685a      	ldr	r2, [r3, #4]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	697a      	ldr	r2, [r7, #20]
 800bc2c:	621a      	str	r2, [r3, #32]
}
 800bc2e:	bf00      	nop
 800bc30:	371c      	adds	r7, #28
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr
 800bc3a:	bf00      	nop
 800bc3c:	40012c00 	.word	0x40012c00
 800bc40:	40013400 	.word	0x40013400
 800bc44:	40014000 	.word	0x40014000
 800bc48:	40014400 	.word	0x40014400
 800bc4c:	40014800 	.word	0x40014800

0800bc50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b087      	sub	sp, #28
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6a1b      	ldr	r3, [r3, #32]
 800bc5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6a1b      	ldr	r3, [r3, #32]
 800bc6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	68fa      	ldr	r2, [r7, #12]
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bc94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	041b      	lsls	r3, r3, #16
 800bc9c:	693a      	ldr	r2, [r7, #16]
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	4a17      	ldr	r2, [pc, #92]	; (800bd04 <TIM_OC5_SetConfig+0xb4>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d00f      	beq.n	800bcca <TIM_OC5_SetConfig+0x7a>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	4a16      	ldr	r2, [pc, #88]	; (800bd08 <TIM_OC5_SetConfig+0xb8>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d00b      	beq.n	800bcca <TIM_OC5_SetConfig+0x7a>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	4a15      	ldr	r2, [pc, #84]	; (800bd0c <TIM_OC5_SetConfig+0xbc>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d007      	beq.n	800bcca <TIM_OC5_SetConfig+0x7a>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	4a14      	ldr	r2, [pc, #80]	; (800bd10 <TIM_OC5_SetConfig+0xc0>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d003      	beq.n	800bcca <TIM_OC5_SetConfig+0x7a>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	4a13      	ldr	r2, [pc, #76]	; (800bd14 <TIM_OC5_SetConfig+0xc4>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d109      	bne.n	800bcde <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bcd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	695b      	ldr	r3, [r3, #20]
 800bcd6:	021b      	lsls	r3, r3, #8
 800bcd8:	697a      	ldr	r2, [r7, #20]
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	697a      	ldr	r2, [r7, #20]
 800bce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	68fa      	ldr	r2, [r7, #12]
 800bce8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	685a      	ldr	r2, [r3, #4]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	693a      	ldr	r2, [r7, #16]
 800bcf6:	621a      	str	r2, [r3, #32]
}
 800bcf8:	bf00      	nop
 800bcfa:	371c      	adds	r7, #28
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr
 800bd04:	40012c00 	.word	0x40012c00
 800bd08:	40013400 	.word	0x40013400
 800bd0c:	40014000 	.word	0x40014000
 800bd10:	40014400 	.word	0x40014400
 800bd14:	40014800 	.word	0x40014800

0800bd18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b087      	sub	sp, #28
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6a1b      	ldr	r3, [r3, #32]
 800bd26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6a1b      	ldr	r3, [r3, #32]
 800bd32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bd46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	021b      	lsls	r3, r3, #8
 800bd52:	68fa      	ldr	r2, [r7, #12]
 800bd54:	4313      	orrs	r3, r2
 800bd56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bd5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	051b      	lsls	r3, r3, #20
 800bd66:	693a      	ldr	r2, [r7, #16]
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	4a18      	ldr	r2, [pc, #96]	; (800bdd0 <TIM_OC6_SetConfig+0xb8>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d00f      	beq.n	800bd94 <TIM_OC6_SetConfig+0x7c>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	4a17      	ldr	r2, [pc, #92]	; (800bdd4 <TIM_OC6_SetConfig+0xbc>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d00b      	beq.n	800bd94 <TIM_OC6_SetConfig+0x7c>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	4a16      	ldr	r2, [pc, #88]	; (800bdd8 <TIM_OC6_SetConfig+0xc0>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d007      	beq.n	800bd94 <TIM_OC6_SetConfig+0x7c>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	4a15      	ldr	r2, [pc, #84]	; (800bddc <TIM_OC6_SetConfig+0xc4>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d003      	beq.n	800bd94 <TIM_OC6_SetConfig+0x7c>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	4a14      	ldr	r2, [pc, #80]	; (800bde0 <TIM_OC6_SetConfig+0xc8>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d109      	bne.n	800bda8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bd9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	695b      	ldr	r3, [r3, #20]
 800bda0:	029b      	lsls	r3, r3, #10
 800bda2:	697a      	ldr	r2, [r7, #20]
 800bda4:	4313      	orrs	r3, r2
 800bda6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	697a      	ldr	r2, [r7, #20]
 800bdac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	68fa      	ldr	r2, [r7, #12]
 800bdb2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	685a      	ldr	r2, [r3, #4]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	693a      	ldr	r2, [r7, #16]
 800bdc0:	621a      	str	r2, [r3, #32]
}
 800bdc2:	bf00      	nop
 800bdc4:	371c      	adds	r7, #28
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr
 800bdce:	bf00      	nop
 800bdd0:	40012c00 	.word	0x40012c00
 800bdd4:	40013400 	.word	0x40013400
 800bdd8:	40014000 	.word	0x40014000
 800bddc:	40014400 	.word	0x40014400
 800bde0:	40014800 	.word	0x40014800

0800bde4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b087      	sub	sp, #28
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	6a1b      	ldr	r3, [r3, #32]
 800bdf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	6a1b      	ldr	r3, [r3, #32]
 800bdfa:	f023 0201 	bic.w	r2, r3, #1
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	699b      	ldr	r3, [r3, #24]
 800be06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800be0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	011b      	lsls	r3, r3, #4
 800be14:	693a      	ldr	r2, [r7, #16]
 800be16:	4313      	orrs	r3, r2
 800be18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	f023 030a 	bic.w	r3, r3, #10
 800be20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800be22:	697a      	ldr	r2, [r7, #20]
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	4313      	orrs	r3, r2
 800be28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	693a      	ldr	r2, [r7, #16]
 800be2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	697a      	ldr	r2, [r7, #20]
 800be34:	621a      	str	r2, [r3, #32]
}
 800be36:	bf00      	nop
 800be38:	371c      	adds	r7, #28
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr

0800be42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be42:	b480      	push	{r7}
 800be44:	b087      	sub	sp, #28
 800be46:	af00      	add	r7, sp, #0
 800be48:	60f8      	str	r0, [r7, #12]
 800be4a:	60b9      	str	r1, [r7, #8]
 800be4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	6a1b      	ldr	r3, [r3, #32]
 800be52:	f023 0210 	bic.w	r2, r3, #16
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	699b      	ldr	r3, [r3, #24]
 800be5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	6a1b      	ldr	r3, [r3, #32]
 800be64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800be6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	031b      	lsls	r3, r3, #12
 800be72:	697a      	ldr	r2, [r7, #20]
 800be74:	4313      	orrs	r3, r2
 800be76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800be7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	011b      	lsls	r3, r3, #4
 800be84:	693a      	ldr	r2, [r7, #16]
 800be86:	4313      	orrs	r3, r2
 800be88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	697a      	ldr	r2, [r7, #20]
 800be8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	693a      	ldr	r2, [r7, #16]
 800be94:	621a      	str	r2, [r3, #32]
}
 800be96:	bf00      	nop
 800be98:	371c      	adds	r7, #28
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr

0800bea2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bea2:	b480      	push	{r7}
 800bea4:	b085      	sub	sp, #20
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
 800beaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	689b      	ldr	r3, [r3, #8]
 800beb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800beb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bebc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bebe:	683a      	ldr	r2, [r7, #0]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	4313      	orrs	r3, r2
 800bec4:	f043 0307 	orr.w	r3, r3, #7
 800bec8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	68fa      	ldr	r2, [r7, #12]
 800bece:	609a      	str	r2, [r3, #8]
}
 800bed0:	bf00      	nop
 800bed2:	3714      	adds	r7, #20
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr

0800bedc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bedc:	b480      	push	{r7}
 800bede:	b087      	sub	sp, #28
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	60f8      	str	r0, [r7, #12]
 800bee4:	60b9      	str	r1, [r7, #8]
 800bee6:	607a      	str	r2, [r7, #4]
 800bee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	689b      	ldr	r3, [r3, #8]
 800beee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bef6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	021a      	lsls	r2, r3, #8
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	431a      	orrs	r2, r3
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	4313      	orrs	r3, r2
 800bf04:	697a      	ldr	r2, [r7, #20]
 800bf06:	4313      	orrs	r3, r2
 800bf08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	697a      	ldr	r2, [r7, #20]
 800bf0e:	609a      	str	r2, [r3, #8]
}
 800bf10:	bf00      	nop
 800bf12:	371c      	adds	r7, #28
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b087      	sub	sp, #28
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	f003 031f 	and.w	r3, r3, #31
 800bf2e:	2201      	movs	r2, #1
 800bf30:	fa02 f303 	lsl.w	r3, r2, r3
 800bf34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	6a1a      	ldr	r2, [r3, #32]
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	43db      	mvns	r3, r3
 800bf3e:	401a      	ands	r2, r3
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6a1a      	ldr	r2, [r3, #32]
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	f003 031f 	and.w	r3, r3, #31
 800bf4e:	6879      	ldr	r1, [r7, #4]
 800bf50:	fa01 f303 	lsl.w	r3, r1, r3
 800bf54:	431a      	orrs	r2, r3
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	621a      	str	r2, [r3, #32]
}
 800bf5a:	bf00      	nop
 800bf5c:	371c      	adds	r7, #28
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr
	...

0800bf68 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d109      	bne.n	800bf8c <HAL_TIMEx_PWMN_Start+0x24>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf7e:	b2db      	uxtb	r3, r3
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	bf14      	ite	ne
 800bf84:	2301      	movne	r3, #1
 800bf86:	2300      	moveq	r3, #0
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	e022      	b.n	800bfd2 <HAL_TIMEx_PWMN_Start+0x6a>
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	2b04      	cmp	r3, #4
 800bf90:	d109      	bne.n	800bfa6 <HAL_TIMEx_PWMN_Start+0x3e>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf98:	b2db      	uxtb	r3, r3
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	bf14      	ite	ne
 800bf9e:	2301      	movne	r3, #1
 800bfa0:	2300      	moveq	r3, #0
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	e015      	b.n	800bfd2 <HAL_TIMEx_PWMN_Start+0x6a>
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	2b08      	cmp	r3, #8
 800bfaa:	d109      	bne.n	800bfc0 <HAL_TIMEx_PWMN_Start+0x58>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	bf14      	ite	ne
 800bfb8:	2301      	movne	r3, #1
 800bfba:	2300      	moveq	r3, #0
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	e008      	b.n	800bfd2 <HAL_TIMEx_PWMN_Start+0x6a>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	bf14      	ite	ne
 800bfcc:	2301      	movne	r3, #1
 800bfce:	2300      	moveq	r3, #0
 800bfd0:	b2db      	uxtb	r3, r3
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d001      	beq.n	800bfda <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e069      	b.n	800c0ae <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d104      	bne.n	800bfea <HAL_TIMEx_PWMN_Start+0x82>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2202      	movs	r2, #2
 800bfe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfe8:	e013      	b.n	800c012 <HAL_TIMEx_PWMN_Start+0xaa>
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	2b04      	cmp	r3, #4
 800bfee:	d104      	bne.n	800bffa <HAL_TIMEx_PWMN_Start+0x92>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2202      	movs	r2, #2
 800bff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bff8:	e00b      	b.n	800c012 <HAL_TIMEx_PWMN_Start+0xaa>
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	2b08      	cmp	r3, #8
 800bffe:	d104      	bne.n	800c00a <HAL_TIMEx_PWMN_Start+0xa2>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2202      	movs	r2, #2
 800c004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c008:	e003      	b.n	800c012 <HAL_TIMEx_PWMN_Start+0xaa>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2202      	movs	r2, #2
 800c00e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2204      	movs	r2, #4
 800c018:	6839      	ldr	r1, [r7, #0]
 800c01a:	4618      	mov	r0, r3
 800c01c:	f000 f9c0 	bl	800c3a0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c02e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4a20      	ldr	r2, [pc, #128]	; (800c0b8 <HAL_TIMEx_PWMN_Start+0x150>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d018      	beq.n	800c06c <HAL_TIMEx_PWMN_Start+0x104>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c042:	d013      	beq.n	800c06c <HAL_TIMEx_PWMN_Start+0x104>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	4a1c      	ldr	r2, [pc, #112]	; (800c0bc <HAL_TIMEx_PWMN_Start+0x154>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d00e      	beq.n	800c06c <HAL_TIMEx_PWMN_Start+0x104>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4a1b      	ldr	r2, [pc, #108]	; (800c0c0 <HAL_TIMEx_PWMN_Start+0x158>)
 800c054:	4293      	cmp	r3, r2
 800c056:	d009      	beq.n	800c06c <HAL_TIMEx_PWMN_Start+0x104>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4a19      	ldr	r2, [pc, #100]	; (800c0c4 <HAL_TIMEx_PWMN_Start+0x15c>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d004      	beq.n	800c06c <HAL_TIMEx_PWMN_Start+0x104>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	4a18      	ldr	r2, [pc, #96]	; (800c0c8 <HAL_TIMEx_PWMN_Start+0x160>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d115      	bne.n	800c098 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	689a      	ldr	r2, [r3, #8]
 800c072:	4b16      	ldr	r3, [pc, #88]	; (800c0cc <HAL_TIMEx_PWMN_Start+0x164>)
 800c074:	4013      	ands	r3, r2
 800c076:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	2b06      	cmp	r3, #6
 800c07c:	d015      	beq.n	800c0aa <HAL_TIMEx_PWMN_Start+0x142>
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c084:	d011      	beq.n	800c0aa <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f042 0201 	orr.w	r2, r2, #1
 800c094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c096:	e008      	b.n	800c0aa <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	681a      	ldr	r2, [r3, #0]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f042 0201 	orr.w	r2, r2, #1
 800c0a6:	601a      	str	r2, [r3, #0]
 800c0a8:	e000      	b.n	800c0ac <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c0ac:	2300      	movs	r3, #0
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3710      	adds	r7, #16
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	40012c00 	.word	0x40012c00
 800c0bc:	40000400 	.word	0x40000400
 800c0c0:	40000800 	.word	0x40000800
 800c0c4:	40013400 	.word	0x40013400
 800c0c8:	40014000 	.word	0x40014000
 800c0cc:	00010007 	.word	0x00010007

0800c0d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b085      	sub	sp, #20
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d101      	bne.n	800c0e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c0e4:	2302      	movs	r3, #2
 800c0e6:	e065      	b.n	800c1b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2202      	movs	r2, #2
 800c0f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	689b      	ldr	r3, [r3, #8]
 800c106:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a2c      	ldr	r2, [pc, #176]	; (800c1c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d004      	beq.n	800c11c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4a2b      	ldr	r2, [pc, #172]	; (800c1c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d108      	bne.n	800c12e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c122:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	68fa      	ldr	r2, [r7, #12]
 800c12a:	4313      	orrs	r3, r2
 800c12c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800c134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c138:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	68fa      	ldr	r2, [r7, #12]
 800c140:	4313      	orrs	r3, r2
 800c142:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4a1b      	ldr	r2, [pc, #108]	; (800c1c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d018      	beq.n	800c188 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c15e:	d013      	beq.n	800c188 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4a18      	ldr	r2, [pc, #96]	; (800c1c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d00e      	beq.n	800c188 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	4a17      	ldr	r2, [pc, #92]	; (800c1cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d009      	beq.n	800c188 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4a12      	ldr	r2, [pc, #72]	; (800c1c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d004      	beq.n	800c188 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4a13      	ldr	r2, [pc, #76]	; (800c1d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d10c      	bne.n	800c1a2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c18e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	689b      	ldr	r3, [r3, #8]
 800c194:	68ba      	ldr	r2, [r7, #8]
 800c196:	4313      	orrs	r3, r2
 800c198:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	68ba      	ldr	r2, [r7, #8]
 800c1a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c1b2:	2300      	movs	r3, #0
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3714      	adds	r7, #20
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr
 800c1c0:	40012c00 	.word	0x40012c00
 800c1c4:	40013400 	.word	0x40013400
 800c1c8:	40000400 	.word	0x40000400
 800c1cc:	40000800 	.word	0x40000800
 800c1d0:	40014000 	.word	0x40014000

0800c1d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b085      	sub	sp, #20
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d101      	bne.n	800c1f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c1ec:	2302      	movs	r3, #2
 800c1ee:	e087      	b.n	800c300 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	68db      	ldr	r3, [r3, #12]
 800c202:	4313      	orrs	r3, r2
 800c204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	689b      	ldr	r3, [r3, #8]
 800c210:	4313      	orrs	r3, r2
 800c212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	4313      	orrs	r3, r2
 800c220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4313      	orrs	r3, r2
 800c22e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	691b      	ldr	r3, [r3, #16]
 800c23a:	4313      	orrs	r3, r2
 800c23c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	695b      	ldr	r3, [r3, #20]
 800c248:	4313      	orrs	r3, r2
 800c24a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c256:	4313      	orrs	r3, r2
 800c258:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	699b      	ldr	r3, [r3, #24]
 800c264:	041b      	lsls	r3, r3, #16
 800c266:	4313      	orrs	r3, r2
 800c268:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a27      	ldr	r2, [pc, #156]	; (800c30c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d004      	beq.n	800c27e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4a25      	ldr	r2, [pc, #148]	; (800c310 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d106      	bne.n	800c28c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	69db      	ldr	r3, [r3, #28]
 800c288:	4313      	orrs	r3, r2
 800c28a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a1e      	ldr	r2, [pc, #120]	; (800c30c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d004      	beq.n	800c2a0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a1d      	ldr	r2, [pc, #116]	; (800c310 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d126      	bne.n	800c2ee <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2aa:	051b      	lsls	r3, r3, #20
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	6a1b      	ldr	r3, [r3, #32]
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4a0e      	ldr	r2, [pc, #56]	; (800c30c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d004      	beq.n	800c2e0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a0d      	ldr	r2, [pc, #52]	; (800c310 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d106      	bne.n	800c2ee <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	68fa      	ldr	r2, [r7, #12]
 800c2f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c2fe:	2300      	movs	r3, #0
}
 800c300:	4618      	mov	r0, r3
 800c302:	3714      	adds	r7, #20
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr
 800c30c:	40012c00 	.word	0x40012c00
 800c310:	40013400 	.word	0x40013400

0800c314 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c31c:	bf00      	nop
 800c31e:	370c      	adds	r7, #12
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c330:	bf00      	nop
 800c332:	370c      	adds	r7, #12
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr

0800c33c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b083      	sub	sp, #12
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c344:	bf00      	nop
 800c346:	370c      	adds	r7, #12
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr

0800c350 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c358:	bf00      	nop
 800c35a:	370c      	adds	r7, #12
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr

0800c364 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c36c:	bf00      	nop
 800c36e:	370c      	adds	r7, #12
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c378:	b480      	push	{r7}
 800c37a:	b083      	sub	sp, #12
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c380:	bf00      	nop
 800c382:	370c      	adds	r7, #12
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr

0800c38c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b083      	sub	sp, #12
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c394:	bf00      	nop
 800c396:	370c      	adds	r7, #12
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b087      	sub	sp, #28
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	60b9      	str	r1, [r7, #8]
 800c3aa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	f003 031f 	and.w	r3, r3, #31
 800c3b2:	2204      	movs	r2, #4
 800c3b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c3b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	6a1a      	ldr	r2, [r3, #32]
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	43db      	mvns	r3, r3
 800c3c2:	401a      	ands	r2, r3
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	6a1a      	ldr	r2, [r3, #32]
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	f003 031f 	and.w	r3, r3, #31
 800c3d2:	6879      	ldr	r1, [r7, #4]
 800c3d4:	fa01 f303 	lsl.w	r3, r1, r3
 800c3d8:	431a      	orrs	r2, r3
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	621a      	str	r2, [r3, #32]
}
 800c3de:	bf00      	nop
 800c3e0:	371c      	adds	r7, #28
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e8:	4770      	bx	lr

0800c3ea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c3ea:	b580      	push	{r7, lr}
 800c3ec:	b082      	sub	sp, #8
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d101      	bne.n	800c3fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e042      	b.n	800c482 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c402:	2b00      	cmp	r3, #0
 800c404:	d106      	bne.n	800c414 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2200      	movs	r2, #0
 800c40a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f7f9 fc6c 	bl	8005cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2224      	movs	r2, #36	; 0x24
 800c418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f022 0201 	bic.w	r2, r2, #1
 800c42a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 fad1 	bl	800c9d4 <UART_SetConfig>
 800c432:	4603      	mov	r3, r0
 800c434:	2b01      	cmp	r3, #1
 800c436:	d101      	bne.n	800c43c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c438:	2301      	movs	r3, #1
 800c43a:	e022      	b.n	800c482 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c440:	2b00      	cmp	r3, #0
 800c442:	d002      	beq.n	800c44a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f000 fd69 	bl	800cf1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	685a      	ldr	r2, [r3, #4]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c458:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	689a      	ldr	r2, [r3, #8]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c468:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f042 0201 	orr.w	r2, r2, #1
 800c478:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 fdf0 	bl	800d060 <UART_CheckIdleState>
 800c480:	4603      	mov	r3, r0
}
 800c482:	4618      	mov	r0, r3
 800c484:	3708      	adds	r7, #8
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
	...

0800c48c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b084      	sub	sp, #16
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	4613      	mov	r3, r2
 800c498:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4a0:	2b20      	cmp	r3, #32
 800c4a2:	d168      	bne.n	800c576 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d002      	beq.n	800c4b0 <HAL_UART_Transmit_DMA+0x24>
 800c4aa:	88fb      	ldrh	r3, [r7, #6]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d101      	bne.n	800c4b4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	e061      	b.n	800c578 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	d101      	bne.n	800c4c2 <HAL_UART_Transmit_DMA+0x36>
 800c4be:	2302      	movs	r3, #2
 800c4c0:	e05a      	b.n	800c578 <HAL_UART_Transmit_DMA+0xec>
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	68ba      	ldr	r2, [r7, #8]
 800c4ce:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	88fa      	ldrh	r2, [r7, #6]
 800c4d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	88fa      	ldrh	r2, [r7, #6]
 800c4dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2221      	movs	r2, #33	; 0x21
 800c4ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d02c      	beq.n	800c552 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4fc:	4a20      	ldr	r2, [pc, #128]	; (800c580 <HAL_UART_Transmit_DMA+0xf4>)
 800c4fe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c504:	4a1f      	ldr	r2, [pc, #124]	; (800c584 <HAL_UART_Transmit_DMA+0xf8>)
 800c506:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c50c:	4a1e      	ldr	r2, [pc, #120]	; (800c588 <HAL_UART_Transmit_DMA+0xfc>)
 800c50e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c514:	2200      	movs	r2, #0
 800c516:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c520:	4619      	mov	r1, r3
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	3328      	adds	r3, #40	; 0x28
 800c528:	461a      	mov	r2, r3
 800c52a:	88fb      	ldrh	r3, [r7, #6]
 800c52c:	f7fb fdbc 	bl	80080a8 <HAL_DMA_Start_IT>
 800c530:	4603      	mov	r3, r0
 800c532:	2b00      	cmp	r3, #0
 800c534:	d00d      	beq.n	800c552 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2210      	movs	r2, #16
 800c53a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2200      	movs	r2, #0
 800c542:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2220      	movs	r2, #32
 800c54a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800c54e:	2301      	movs	r3, #1
 800c550:	e012      	b.n	800c578 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	2240      	movs	r2, #64	; 0x40
 800c558:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2200      	movs	r2, #0
 800c55e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	689a      	ldr	r2, [r3, #8]
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c570:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800c572:	2300      	movs	r3, #0
 800c574:	e000      	b.n	800c578 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800c576:	2302      	movs	r3, #2
  }
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3710      	adds	r7, #16
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	0800d273 	.word	0x0800d273
 800c584:	0800d2c7 	.word	0x0800d2c7
 800c588:	0800d369 	.word	0x0800d369

0800c58c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b084      	sub	sp, #16
 800c590:	af00      	add	r7, sp, #0
 800c592:	60f8      	str	r0, [r7, #12]
 800c594:	60b9      	str	r1, [r7, #8]
 800c596:	4613      	mov	r3, r2
 800c598:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5a0:	2b20      	cmp	r3, #32
 800c5a2:	d170      	bne.n	800c686 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d002      	beq.n	800c5b0 <HAL_UART_Receive_DMA+0x24>
 800c5aa:	88fb      	ldrh	r3, [r7, #6]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d101      	bne.n	800c5b4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e069      	b.n	800c688 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d101      	bne.n	800c5c2 <HAL_UART_Receive_DMA+0x36>
 800c5be:	2302      	movs	r3, #2
 800c5c0:	e062      	b.n	800c688 <HAL_UART_Receive_DMA+0xfc>
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	68ba      	ldr	r2, [r7, #8]
 800c5ce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	88fa      	ldrh	r2, [r7, #6]
 800c5d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2222      	movs	r2, #34	; 0x22
 800c5e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d02c      	beq.n	800c64a <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5f4:	4a26      	ldr	r2, [pc, #152]	; (800c690 <HAL_UART_Receive_DMA+0x104>)
 800c5f6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5fc:	4a25      	ldr	r2, [pc, #148]	; (800c694 <HAL_UART_Receive_DMA+0x108>)
 800c5fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c604:	4a24      	ldr	r2, [pc, #144]	; (800c698 <HAL_UART_Receive_DMA+0x10c>)
 800c606:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c60c:	2200      	movs	r2, #0
 800c60e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	3324      	adds	r3, #36	; 0x24
 800c61a:	4619      	mov	r1, r3
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c620:	461a      	mov	r2, r3
 800c622:	88fb      	ldrh	r3, [r7, #6]
 800c624:	f7fb fd40 	bl	80080a8 <HAL_DMA_Start_IT>
 800c628:	4603      	mov	r3, r0
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d00d      	beq.n	800c64a <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2210      	movs	r2, #16
 800c632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2200      	movs	r2, #0
 800c63a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2220      	movs	r2, #32
 800c642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800c646:	2301      	movs	r3, #1
 800c648:	e01e      	b.n	800c688 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2200      	movs	r2, #0
 800c64e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c660:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	689a      	ldr	r2, [r3, #8]
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f042 0201 	orr.w	r2, r2, #1
 800c670:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	689a      	ldr	r2, [r3, #8]
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c680:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800c682:	2300      	movs	r3, #0
 800c684:	e000      	b.n	800c688 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800c686:	2302      	movs	r3, #2
  }
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3710      	adds	r7, #16
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	0800d2e3 	.word	0x0800d2e3
 800c694:	0800d34d 	.word	0x0800d34d
 800c698:	0800d369 	.word	0x0800d369

0800c69c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b088      	sub	sp, #32
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	69db      	ldr	r3, [r3, #28]
 800c6aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	689b      	ldr	r3, [r3, #8]
 800c6ba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c6bc:	69fa      	ldr	r2, [r7, #28]
 800c6be:	f640 030f 	movw	r3, #2063	; 0x80f
 800c6c2:	4013      	ands	r3, r2
 800c6c4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d118      	bne.n	800c6fe <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c6cc:	69fb      	ldr	r3, [r7, #28]
 800c6ce:	f003 0320 	and.w	r3, r3, #32
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d013      	beq.n	800c6fe <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c6d6:	69bb      	ldr	r3, [r7, #24]
 800c6d8:	f003 0320 	and.w	r3, r3, #32
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d104      	bne.n	800c6ea <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d009      	beq.n	800c6fe <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	f000 8144 	beq.w	800c97c <HAL_UART_IRQHandler+0x2e0>
      {
        huart->RxISR(huart);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	4798      	blx	r3
      }
      return;
 800c6fc:	e13e      	b.n	800c97c <HAL_UART_IRQHandler+0x2e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	2b00      	cmp	r3, #0
 800c702:	f000 80e8 	beq.w	800c8d6 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c706:	697a      	ldr	r2, [r7, #20]
 800c708:	4ba0      	ldr	r3, [pc, #640]	; (800c98c <HAL_UART_IRQHandler+0x2f0>)
 800c70a:	4013      	ands	r3, r2
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d105      	bne.n	800c71c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c710:	69ba      	ldr	r2, [r7, #24]
 800c712:	4b9f      	ldr	r3, [pc, #636]	; (800c990 <HAL_UART_IRQHandler+0x2f4>)
 800c714:	4013      	ands	r3, r2
 800c716:	2b00      	cmp	r3, #0
 800c718:	f000 80dd 	beq.w	800c8d6 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c71c:	69fb      	ldr	r3, [r7, #28]
 800c71e:	f003 0301 	and.w	r3, r3, #1
 800c722:	2b00      	cmp	r3, #0
 800c724:	d010      	beq.n	800c748 <HAL_UART_IRQHandler+0xac>
 800c726:	69bb      	ldr	r3, [r7, #24]
 800c728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d00b      	beq.n	800c748 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	2201      	movs	r2, #1
 800c736:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c73e:	f043 0201 	orr.w	r2, r3, #1
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c748:	69fb      	ldr	r3, [r7, #28]
 800c74a:	f003 0302 	and.w	r3, r3, #2
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d010      	beq.n	800c774 <HAL_UART_IRQHandler+0xd8>
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	f003 0301 	and.w	r3, r3, #1
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d00b      	beq.n	800c774 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2202      	movs	r2, #2
 800c762:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c76a:	f043 0204 	orr.w	r2, r3, #4
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c774:	69fb      	ldr	r3, [r7, #28]
 800c776:	f003 0304 	and.w	r3, r3, #4
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d010      	beq.n	800c7a0 <HAL_UART_IRQHandler+0x104>
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	f003 0301 	and.w	r3, r3, #1
 800c784:	2b00      	cmp	r3, #0
 800c786:	d00b      	beq.n	800c7a0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	2204      	movs	r2, #4
 800c78e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c796:	f043 0202 	orr.w	r2, r3, #2
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c7a0:	69fb      	ldr	r3, [r7, #28]
 800c7a2:	f003 0308 	and.w	r3, r3, #8
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d015      	beq.n	800c7d6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c7aa:	69bb      	ldr	r3, [r7, #24]
 800c7ac:	f003 0320 	and.w	r3, r3, #32
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d104      	bne.n	800c7be <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c7b4:	697a      	ldr	r2, [r7, #20]
 800c7b6:	4b75      	ldr	r3, [pc, #468]	; (800c98c <HAL_UART_IRQHandler+0x2f0>)
 800c7b8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d00b      	beq.n	800c7d6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	2208      	movs	r2, #8
 800c7c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7cc:	f043 0208 	orr.w	r2, r3, #8
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c7d6:	69fb      	ldr	r3, [r7, #28]
 800c7d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d011      	beq.n	800c804 <HAL_UART_IRQHandler+0x168>
 800c7e0:	69bb      	ldr	r3, [r7, #24]
 800c7e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d00c      	beq.n	800c804 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c7f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7fa:	f043 0220 	orr.w	r2, r3, #32
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f000 80b8 	beq.w	800c980 <HAL_UART_IRQHandler+0x2e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c810:	69fb      	ldr	r3, [r7, #28]
 800c812:	f003 0320 	and.w	r3, r3, #32
 800c816:	2b00      	cmp	r3, #0
 800c818:	d011      	beq.n	800c83e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c81a:	69bb      	ldr	r3, [r7, #24]
 800c81c:	f003 0320 	and.w	r3, r3, #32
 800c820:	2b00      	cmp	r3, #0
 800c822:	d104      	bne.n	800c82e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d007      	beq.n	800c83e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c832:	2b00      	cmp	r3, #0
 800c834:	d003      	beq.n	800c83e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c844:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	689b      	ldr	r3, [r3, #8]
 800c84c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c850:	2b40      	cmp	r3, #64	; 0x40
 800c852:	d004      	beq.n	800c85e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d031      	beq.n	800c8c2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 fce4 	bl	800d22c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	689b      	ldr	r3, [r3, #8]
 800c86a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c86e:	2b40      	cmp	r3, #64	; 0x40
 800c870:	d123      	bne.n	800c8ba <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	689a      	ldr	r2, [r3, #8]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c880:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c886:	2b00      	cmp	r3, #0
 800c888:	d013      	beq.n	800c8b2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c88e:	4a41      	ldr	r2, [pc, #260]	; (800c994 <HAL_UART_IRQHandler+0x2f8>)
 800c890:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c896:	4618      	mov	r0, r3
 800c898:	f7fb fc81 	bl	800819e <HAL_DMA_Abort_IT>
 800c89c:	4603      	mov	r3, r0
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d017      	beq.n	800c8d2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800c8ac:	4610      	mov	r0, r2
 800c8ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8b0:	e00f      	b.n	800c8d2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f7f8 fa40 	bl	8004d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8b8:	e00b      	b.n	800c8d2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f7f8 fa3c 	bl	8004d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8c0:	e007      	b.n	800c8d2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f7f8 fa38 	bl	8004d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800c8d0:	e056      	b.n	800c980 <HAL_UART_IRQHandler+0x2e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8d2:	bf00      	nop
    return;
 800c8d4:	e054      	b.n	800c980 <HAL_UART_IRQHandler+0x2e4>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d00d      	beq.n	800c8fc <HAL_UART_IRQHandler+0x260>
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d008      	beq.n	800c8fc <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c8f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f000 fda7 	bl	800d448 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c8fa:	e044      	b.n	800c986 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c8fc:	69fb      	ldr	r3, [r7, #28]
 800c8fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c902:	2b00      	cmp	r3, #0
 800c904:	d012      	beq.n	800c92c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c906:	69bb      	ldr	r3, [r7, #24]
 800c908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d104      	bne.n	800c91a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c916:	2b00      	cmp	r3, #0
 800c918:	d008      	beq.n	800c92c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d030      	beq.n	800c984 <HAL_UART_IRQHandler+0x2e8>
    {
      huart->TxISR(huart);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	4798      	blx	r3
    }
    return;
 800c92a:	e02b      	b.n	800c984 <HAL_UART_IRQHandler+0x2e8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c92c:	69fb      	ldr	r3, [r7, #28]
 800c92e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c932:	2b00      	cmp	r3, #0
 800c934:	d008      	beq.n	800c948 <HAL_UART_IRQHandler+0x2ac>
 800c936:	69bb      	ldr	r3, [r7, #24]
 800c938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d003      	beq.n	800c948 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f000 fd67 	bl	800d414 <UART_EndTransmit_IT>
    return;
 800c946:	e01e      	b.n	800c986 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c948:	69fb      	ldr	r3, [r7, #28]
 800c94a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d008      	beq.n	800c964 <HAL_UART_IRQHandler+0x2c8>
 800c952:	69bb      	ldr	r3, [r7, #24]
 800c954:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d003      	beq.n	800c964 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 fd87 	bl	800d470 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c962:	e010      	b.n	800c986 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c964:	69fb      	ldr	r3, [r7, #28]
 800c966:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d00b      	beq.n	800c986 <HAL_UART_IRQHandler+0x2ea>
 800c96e:	69bb      	ldr	r3, [r7, #24]
 800c970:	2b00      	cmp	r3, #0
 800c972:	da08      	bge.n	800c986 <HAL_UART_IRQHandler+0x2ea>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 fd71 	bl	800d45c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c97a:	e004      	b.n	800c986 <HAL_UART_IRQHandler+0x2ea>
      return;
 800c97c:	bf00      	nop
 800c97e:	e002      	b.n	800c986 <HAL_UART_IRQHandler+0x2ea>
    return;
 800c980:	bf00      	nop
 800c982:	e000      	b.n	800c986 <HAL_UART_IRQHandler+0x2ea>
    return;
 800c984:	bf00      	nop
  }
}
 800c986:	3720      	adds	r7, #32
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}
 800c98c:	10000001 	.word	0x10000001
 800c990:	04000120 	.word	0x04000120
 800c994:	0800d3e9 	.word	0x0800d3e9

0800c998 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c998:	b480      	push	{r7}
 800c99a:	b083      	sub	sp, #12
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c9a0:	bf00      	nop
 800c9a2:	370c      	adds	r7, #12
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9aa:	4770      	bx	lr

0800c9ac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b083      	sub	sp, #12
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800c9b4:	bf00      	nop
 800c9b6:	370c      	adds	r7, #12
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr

0800c9c0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b083      	sub	sp, #12
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c9c8:	bf00      	nop
 800c9ca:	370c      	adds	r7, #12
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d2:	4770      	bx	lr

0800c9d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c9d4:	b5b0      	push	{r4, r5, r7, lr}
 800c9d6:	b088      	sub	sp, #32
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	689a      	ldr	r2, [r3, #8]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	691b      	ldr	r3, [r3, #16]
 800c9e8:	431a      	orrs	r2, r3
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	695b      	ldr	r3, [r3, #20]
 800c9ee:	431a      	orrs	r2, r3
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	69db      	ldr	r3, [r3, #28]
 800c9f4:	4313      	orrs	r3, r2
 800c9f6:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9fc:	69fa      	ldr	r2, [r7, #28]
 800c9fe:	4313      	orrs	r3, r2
 800ca00:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	681a      	ldr	r2, [r3, #0]
 800ca08:	4baf      	ldr	r3, [pc, #700]	; (800ccc8 <UART_SetConfig+0x2f4>)
 800ca0a:	4013      	ands	r3, r2
 800ca0c:	687a      	ldr	r2, [r7, #4]
 800ca0e:	6812      	ldr	r2, [r2, #0]
 800ca10:	69f9      	ldr	r1, [r7, #28]
 800ca12:	430b      	orrs	r3, r1
 800ca14:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	685b      	ldr	r3, [r3, #4]
 800ca1c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	68da      	ldr	r2, [r3, #12]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	430a      	orrs	r2, r1
 800ca2a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	699b      	ldr	r3, [r3, #24]
 800ca30:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4aa5      	ldr	r2, [pc, #660]	; (800cccc <UART_SetConfig+0x2f8>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d004      	beq.n	800ca46 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6a1b      	ldr	r3, [r3, #32]
 800ca40:	69fa      	ldr	r2, [r7, #28]
 800ca42:	4313      	orrs	r3, r2
 800ca44:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	689b      	ldr	r3, [r3, #8]
 800ca4c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ca50:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	6812      	ldr	r2, [r2, #0]
 800ca58:	69f9      	ldr	r1, [r7, #28]
 800ca5a:	430b      	orrs	r3, r1
 800ca5c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca64:	f023 010f 	bic.w	r1, r3, #15
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	430a      	orrs	r2, r1
 800ca72:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4a95      	ldr	r2, [pc, #596]	; (800ccd0 <UART_SetConfig+0x2fc>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d121      	bne.n	800cac2 <UART_SetConfig+0xee>
 800ca7e:	4b95      	ldr	r3, [pc, #596]	; (800ccd4 <UART_SetConfig+0x300>)
 800ca80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca84:	f003 0303 	and.w	r3, r3, #3
 800ca88:	2b03      	cmp	r3, #3
 800ca8a:	d817      	bhi.n	800cabc <UART_SetConfig+0xe8>
 800ca8c:	a201      	add	r2, pc, #4	; (adr r2, 800ca94 <UART_SetConfig+0xc0>)
 800ca8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca92:	bf00      	nop
 800ca94:	0800caa5 	.word	0x0800caa5
 800ca98:	0800cab1 	.word	0x0800cab1
 800ca9c:	0800caab 	.word	0x0800caab
 800caa0:	0800cab7 	.word	0x0800cab7
 800caa4:	2301      	movs	r3, #1
 800caa6:	76fb      	strb	r3, [r7, #27]
 800caa8:	e0bc      	b.n	800cc24 <UART_SetConfig+0x250>
 800caaa:	2302      	movs	r3, #2
 800caac:	76fb      	strb	r3, [r7, #27]
 800caae:	e0b9      	b.n	800cc24 <UART_SetConfig+0x250>
 800cab0:	2304      	movs	r3, #4
 800cab2:	76fb      	strb	r3, [r7, #27]
 800cab4:	e0b6      	b.n	800cc24 <UART_SetConfig+0x250>
 800cab6:	2308      	movs	r3, #8
 800cab8:	76fb      	strb	r3, [r7, #27]
 800caba:	e0b3      	b.n	800cc24 <UART_SetConfig+0x250>
 800cabc:	2310      	movs	r3, #16
 800cabe:	76fb      	strb	r3, [r7, #27]
 800cac0:	e0b0      	b.n	800cc24 <UART_SetConfig+0x250>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4a84      	ldr	r2, [pc, #528]	; (800ccd8 <UART_SetConfig+0x304>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d132      	bne.n	800cb32 <UART_SetConfig+0x15e>
 800cacc:	4b81      	ldr	r3, [pc, #516]	; (800ccd4 <UART_SetConfig+0x300>)
 800cace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cad2:	f003 030c 	and.w	r3, r3, #12
 800cad6:	2b0c      	cmp	r3, #12
 800cad8:	d828      	bhi.n	800cb2c <UART_SetConfig+0x158>
 800cada:	a201      	add	r2, pc, #4	; (adr r2, 800cae0 <UART_SetConfig+0x10c>)
 800cadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cae0:	0800cb15 	.word	0x0800cb15
 800cae4:	0800cb2d 	.word	0x0800cb2d
 800cae8:	0800cb2d 	.word	0x0800cb2d
 800caec:	0800cb2d 	.word	0x0800cb2d
 800caf0:	0800cb21 	.word	0x0800cb21
 800caf4:	0800cb2d 	.word	0x0800cb2d
 800caf8:	0800cb2d 	.word	0x0800cb2d
 800cafc:	0800cb2d 	.word	0x0800cb2d
 800cb00:	0800cb1b 	.word	0x0800cb1b
 800cb04:	0800cb2d 	.word	0x0800cb2d
 800cb08:	0800cb2d 	.word	0x0800cb2d
 800cb0c:	0800cb2d 	.word	0x0800cb2d
 800cb10:	0800cb27 	.word	0x0800cb27
 800cb14:	2300      	movs	r3, #0
 800cb16:	76fb      	strb	r3, [r7, #27]
 800cb18:	e084      	b.n	800cc24 <UART_SetConfig+0x250>
 800cb1a:	2302      	movs	r3, #2
 800cb1c:	76fb      	strb	r3, [r7, #27]
 800cb1e:	e081      	b.n	800cc24 <UART_SetConfig+0x250>
 800cb20:	2304      	movs	r3, #4
 800cb22:	76fb      	strb	r3, [r7, #27]
 800cb24:	e07e      	b.n	800cc24 <UART_SetConfig+0x250>
 800cb26:	2308      	movs	r3, #8
 800cb28:	76fb      	strb	r3, [r7, #27]
 800cb2a:	e07b      	b.n	800cc24 <UART_SetConfig+0x250>
 800cb2c:	2310      	movs	r3, #16
 800cb2e:	76fb      	strb	r3, [r7, #27]
 800cb30:	e078      	b.n	800cc24 <UART_SetConfig+0x250>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a69      	ldr	r2, [pc, #420]	; (800ccdc <UART_SetConfig+0x308>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d120      	bne.n	800cb7e <UART_SetConfig+0x1aa>
 800cb3c:	4b65      	ldr	r3, [pc, #404]	; (800ccd4 <UART_SetConfig+0x300>)
 800cb3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cb46:	2b30      	cmp	r3, #48	; 0x30
 800cb48:	d013      	beq.n	800cb72 <UART_SetConfig+0x19e>
 800cb4a:	2b30      	cmp	r3, #48	; 0x30
 800cb4c:	d814      	bhi.n	800cb78 <UART_SetConfig+0x1a4>
 800cb4e:	2b20      	cmp	r3, #32
 800cb50:	d009      	beq.n	800cb66 <UART_SetConfig+0x192>
 800cb52:	2b20      	cmp	r3, #32
 800cb54:	d810      	bhi.n	800cb78 <UART_SetConfig+0x1a4>
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d002      	beq.n	800cb60 <UART_SetConfig+0x18c>
 800cb5a:	2b10      	cmp	r3, #16
 800cb5c:	d006      	beq.n	800cb6c <UART_SetConfig+0x198>
 800cb5e:	e00b      	b.n	800cb78 <UART_SetConfig+0x1a4>
 800cb60:	2300      	movs	r3, #0
 800cb62:	76fb      	strb	r3, [r7, #27]
 800cb64:	e05e      	b.n	800cc24 <UART_SetConfig+0x250>
 800cb66:	2302      	movs	r3, #2
 800cb68:	76fb      	strb	r3, [r7, #27]
 800cb6a:	e05b      	b.n	800cc24 <UART_SetConfig+0x250>
 800cb6c:	2304      	movs	r3, #4
 800cb6e:	76fb      	strb	r3, [r7, #27]
 800cb70:	e058      	b.n	800cc24 <UART_SetConfig+0x250>
 800cb72:	2308      	movs	r3, #8
 800cb74:	76fb      	strb	r3, [r7, #27]
 800cb76:	e055      	b.n	800cc24 <UART_SetConfig+0x250>
 800cb78:	2310      	movs	r3, #16
 800cb7a:	76fb      	strb	r3, [r7, #27]
 800cb7c:	e052      	b.n	800cc24 <UART_SetConfig+0x250>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	4a57      	ldr	r2, [pc, #348]	; (800cce0 <UART_SetConfig+0x30c>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d120      	bne.n	800cbca <UART_SetConfig+0x1f6>
 800cb88:	4b52      	ldr	r3, [pc, #328]	; (800ccd4 <UART_SetConfig+0x300>)
 800cb8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800cb92:	2bc0      	cmp	r3, #192	; 0xc0
 800cb94:	d013      	beq.n	800cbbe <UART_SetConfig+0x1ea>
 800cb96:	2bc0      	cmp	r3, #192	; 0xc0
 800cb98:	d814      	bhi.n	800cbc4 <UART_SetConfig+0x1f0>
 800cb9a:	2b80      	cmp	r3, #128	; 0x80
 800cb9c:	d009      	beq.n	800cbb2 <UART_SetConfig+0x1de>
 800cb9e:	2b80      	cmp	r3, #128	; 0x80
 800cba0:	d810      	bhi.n	800cbc4 <UART_SetConfig+0x1f0>
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d002      	beq.n	800cbac <UART_SetConfig+0x1d8>
 800cba6:	2b40      	cmp	r3, #64	; 0x40
 800cba8:	d006      	beq.n	800cbb8 <UART_SetConfig+0x1e4>
 800cbaa:	e00b      	b.n	800cbc4 <UART_SetConfig+0x1f0>
 800cbac:	2300      	movs	r3, #0
 800cbae:	76fb      	strb	r3, [r7, #27]
 800cbb0:	e038      	b.n	800cc24 <UART_SetConfig+0x250>
 800cbb2:	2302      	movs	r3, #2
 800cbb4:	76fb      	strb	r3, [r7, #27]
 800cbb6:	e035      	b.n	800cc24 <UART_SetConfig+0x250>
 800cbb8:	2304      	movs	r3, #4
 800cbba:	76fb      	strb	r3, [r7, #27]
 800cbbc:	e032      	b.n	800cc24 <UART_SetConfig+0x250>
 800cbbe:	2308      	movs	r3, #8
 800cbc0:	76fb      	strb	r3, [r7, #27]
 800cbc2:	e02f      	b.n	800cc24 <UART_SetConfig+0x250>
 800cbc4:	2310      	movs	r3, #16
 800cbc6:	76fb      	strb	r3, [r7, #27]
 800cbc8:	e02c      	b.n	800cc24 <UART_SetConfig+0x250>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4a3f      	ldr	r2, [pc, #252]	; (800cccc <UART_SetConfig+0x2f8>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d125      	bne.n	800cc20 <UART_SetConfig+0x24c>
 800cbd4:	4b3f      	ldr	r3, [pc, #252]	; (800ccd4 <UART_SetConfig+0x300>)
 800cbd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbda:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cbde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cbe2:	d017      	beq.n	800cc14 <UART_SetConfig+0x240>
 800cbe4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cbe8:	d817      	bhi.n	800cc1a <UART_SetConfig+0x246>
 800cbea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cbee:	d00b      	beq.n	800cc08 <UART_SetConfig+0x234>
 800cbf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cbf4:	d811      	bhi.n	800cc1a <UART_SetConfig+0x246>
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d003      	beq.n	800cc02 <UART_SetConfig+0x22e>
 800cbfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cbfe:	d006      	beq.n	800cc0e <UART_SetConfig+0x23a>
 800cc00:	e00b      	b.n	800cc1a <UART_SetConfig+0x246>
 800cc02:	2300      	movs	r3, #0
 800cc04:	76fb      	strb	r3, [r7, #27]
 800cc06:	e00d      	b.n	800cc24 <UART_SetConfig+0x250>
 800cc08:	2302      	movs	r3, #2
 800cc0a:	76fb      	strb	r3, [r7, #27]
 800cc0c:	e00a      	b.n	800cc24 <UART_SetConfig+0x250>
 800cc0e:	2304      	movs	r3, #4
 800cc10:	76fb      	strb	r3, [r7, #27]
 800cc12:	e007      	b.n	800cc24 <UART_SetConfig+0x250>
 800cc14:	2308      	movs	r3, #8
 800cc16:	76fb      	strb	r3, [r7, #27]
 800cc18:	e004      	b.n	800cc24 <UART_SetConfig+0x250>
 800cc1a:	2310      	movs	r3, #16
 800cc1c:	76fb      	strb	r3, [r7, #27]
 800cc1e:	e001      	b.n	800cc24 <UART_SetConfig+0x250>
 800cc20:	2310      	movs	r3, #16
 800cc22:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a28      	ldr	r2, [pc, #160]	; (800cccc <UART_SetConfig+0x2f8>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	f040 809e 	bne.w	800cd6c <UART_SetConfig+0x398>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cc30:	7efb      	ldrb	r3, [r7, #27]
 800cc32:	2b08      	cmp	r3, #8
 800cc34:	d823      	bhi.n	800cc7e <UART_SetConfig+0x2aa>
 800cc36:	a201      	add	r2, pc, #4	; (adr r2, 800cc3c <UART_SetConfig+0x268>)
 800cc38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc3c:	0800cc61 	.word	0x0800cc61
 800cc40:	0800cc7f 	.word	0x0800cc7f
 800cc44:	0800cc69 	.word	0x0800cc69
 800cc48:	0800cc7f 	.word	0x0800cc7f
 800cc4c:	0800cc6f 	.word	0x0800cc6f
 800cc50:	0800cc7f 	.word	0x0800cc7f
 800cc54:	0800cc7f 	.word	0x0800cc7f
 800cc58:	0800cc7f 	.word	0x0800cc7f
 800cc5c:	0800cc77 	.word	0x0800cc77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc60:	f7fd fbda 	bl	800a418 <HAL_RCC_GetPCLK1Freq>
 800cc64:	6178      	str	r0, [r7, #20]
        break;
 800cc66:	e00f      	b.n	800cc88 <UART_SetConfig+0x2b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cc68:	4b1e      	ldr	r3, [pc, #120]	; (800cce4 <UART_SetConfig+0x310>)
 800cc6a:	617b      	str	r3, [r7, #20]
        break;
 800cc6c:	e00c      	b.n	800cc88 <UART_SetConfig+0x2b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cc6e:	f7fd fb65 	bl	800a33c <HAL_RCC_GetSysClockFreq>
 800cc72:	6178      	str	r0, [r7, #20]
        break;
 800cc74:	e008      	b.n	800cc88 <UART_SetConfig+0x2b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc7a:	617b      	str	r3, [r7, #20]
        break;
 800cc7c:	e004      	b.n	800cc88 <UART_SetConfig+0x2b4>
      default:
        pclk = 0U;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800cc82:	2301      	movs	r3, #1
 800cc84:	76bb      	strb	r3, [r7, #26]
        break;
 800cc86:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	f000 812e 	beq.w	800ceec <UART_SetConfig+0x518>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc94:	4a14      	ldr	r2, [pc, #80]	; (800cce8 <UART_SetConfig+0x314>)
 800cc96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	fbb3 f3f2 	udiv	r3, r3, r2
 800cca2:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	685a      	ldr	r2, [r3, #4]
 800cca8:	4613      	mov	r3, r2
 800ccaa:	005b      	lsls	r3, r3, #1
 800ccac:	4413      	add	r3, r2
 800ccae:	68ba      	ldr	r2, [r7, #8]
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d305      	bcc.n	800ccc0 <UART_SetConfig+0x2ec>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	685b      	ldr	r3, [r3, #4]
 800ccb8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ccba:	68ba      	ldr	r2, [r7, #8]
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d915      	bls.n	800ccec <UART_SetConfig+0x318>
      {
        ret = HAL_ERROR;
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	76bb      	strb	r3, [r7, #26]
 800ccc4:	e112      	b.n	800ceec <UART_SetConfig+0x518>
 800ccc6:	bf00      	nop
 800ccc8:	cfff69f3 	.word	0xcfff69f3
 800cccc:	40008000 	.word	0x40008000
 800ccd0:	40013800 	.word	0x40013800
 800ccd4:	40021000 	.word	0x40021000
 800ccd8:	40004400 	.word	0x40004400
 800ccdc:	40004800 	.word	0x40004800
 800cce0:	40004c00 	.word	0x40004c00
 800cce4:	00f42400 	.word	0x00f42400
 800cce8:	0800e740 	.word	0x0800e740
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f04f 0100 	mov.w	r1, #0
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccf8:	4a86      	ldr	r2, [pc, #536]	; (800cf14 <UART_SetConfig+0x540>)
 800ccfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccfe:	b29a      	uxth	r2, r3
 800cd00:	f04f 0300 	mov.w	r3, #0
 800cd04:	f7f3 ff56 	bl	8000bb4 <__aeabi_uldivmod>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	460b      	mov	r3, r1
 800cd0c:	4610      	mov	r0, r2
 800cd0e:	4619      	mov	r1, r3
 800cd10:	f04f 0200 	mov.w	r2, #0
 800cd14:	f04f 0300 	mov.w	r3, #0
 800cd18:	020b      	lsls	r3, r1, #8
 800cd1a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cd1e:	0202      	lsls	r2, r0, #8
 800cd20:	6879      	ldr	r1, [r7, #4]
 800cd22:	6849      	ldr	r1, [r1, #4]
 800cd24:	0849      	lsrs	r1, r1, #1
 800cd26:	4608      	mov	r0, r1
 800cd28:	f04f 0100 	mov.w	r1, #0
 800cd2c:	1814      	adds	r4, r2, r0
 800cd2e:	eb43 0501 	adc.w	r5, r3, r1
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	685b      	ldr	r3, [r3, #4]
 800cd36:	461a      	mov	r2, r3
 800cd38:	f04f 0300 	mov.w	r3, #0
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	4629      	mov	r1, r5
 800cd40:	f7f3 ff38 	bl	8000bb4 <__aeabi_uldivmod>
 800cd44:	4602      	mov	r2, r0
 800cd46:	460b      	mov	r3, r1
 800cd48:	4613      	mov	r3, r2
 800cd4a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cd52:	d308      	bcc.n	800cd66 <UART_SetConfig+0x392>
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd5a:	d204      	bcs.n	800cd66 <UART_SetConfig+0x392>
        {
          huart->Instance->BRR = usartdiv;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	693a      	ldr	r2, [r7, #16]
 800cd62:	60da      	str	r2, [r3, #12]
 800cd64:	e0c2      	b.n	800ceec <UART_SetConfig+0x518>
        }
        else
        {
          ret = HAL_ERROR;
 800cd66:	2301      	movs	r3, #1
 800cd68:	76bb      	strb	r3, [r7, #26]
 800cd6a:	e0bf      	b.n	800ceec <UART_SetConfig+0x518>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	69db      	ldr	r3, [r3, #28]
 800cd70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd74:	d165      	bne.n	800ce42 <UART_SetConfig+0x46e>
  {
    switch (clocksource)
 800cd76:	7efb      	ldrb	r3, [r7, #27]
 800cd78:	2b08      	cmp	r3, #8
 800cd7a:	d828      	bhi.n	800cdce <UART_SetConfig+0x3fa>
 800cd7c:	a201      	add	r2, pc, #4	; (adr r2, 800cd84 <UART_SetConfig+0x3b0>)
 800cd7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd82:	bf00      	nop
 800cd84:	0800cda9 	.word	0x0800cda9
 800cd88:	0800cdb1 	.word	0x0800cdb1
 800cd8c:	0800cdb9 	.word	0x0800cdb9
 800cd90:	0800cdcf 	.word	0x0800cdcf
 800cd94:	0800cdbf 	.word	0x0800cdbf
 800cd98:	0800cdcf 	.word	0x0800cdcf
 800cd9c:	0800cdcf 	.word	0x0800cdcf
 800cda0:	0800cdcf 	.word	0x0800cdcf
 800cda4:	0800cdc7 	.word	0x0800cdc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cda8:	f7fd fb36 	bl	800a418 <HAL_RCC_GetPCLK1Freq>
 800cdac:	6178      	str	r0, [r7, #20]
        break;
 800cdae:	e013      	b.n	800cdd8 <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cdb0:	f7fd fb48 	bl	800a444 <HAL_RCC_GetPCLK2Freq>
 800cdb4:	6178      	str	r0, [r7, #20]
        break;
 800cdb6:	e00f      	b.n	800cdd8 <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cdb8:	4b57      	ldr	r3, [pc, #348]	; (800cf18 <UART_SetConfig+0x544>)
 800cdba:	617b      	str	r3, [r7, #20]
        break;
 800cdbc:	e00c      	b.n	800cdd8 <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cdbe:	f7fd fabd 	bl	800a33c <HAL_RCC_GetSysClockFreq>
 800cdc2:	6178      	str	r0, [r7, #20]
        break;
 800cdc4:	e008      	b.n	800cdd8 <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cdc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cdca:	617b      	str	r3, [r7, #20]
        break;
 800cdcc:	e004      	b.n	800cdd8 <UART_SetConfig+0x404>
      default:
        pclk = 0U;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	76bb      	strb	r3, [r7, #26]
        break;
 800cdd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	f000 8086 	beq.w	800ceec <UART_SetConfig+0x518>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde4:	4a4b      	ldr	r2, [pc, #300]	; (800cf14 <UART_SetConfig+0x540>)
 800cde6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdea:	461a      	mov	r2, r3
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	fbb3 f3f2 	udiv	r3, r3, r2
 800cdf2:	005a      	lsls	r2, r3, #1
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	085b      	lsrs	r3, r3, #1
 800cdfa:	441a      	add	r2, r3
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce04:	b29b      	uxth	r3, r3
 800ce06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	2b0f      	cmp	r3, #15
 800ce0c:	d916      	bls.n	800ce3c <UART_SetConfig+0x468>
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce14:	d212      	bcs.n	800ce3c <UART_SetConfig+0x468>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	f023 030f 	bic.w	r3, r3, #15
 800ce1e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	085b      	lsrs	r3, r3, #1
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	f003 0307 	and.w	r3, r3, #7
 800ce2a:	b29a      	uxth	r2, r3
 800ce2c:	89fb      	ldrh	r3, [r7, #14]
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	89fa      	ldrh	r2, [r7, #14]
 800ce38:	60da      	str	r2, [r3, #12]
 800ce3a:	e057      	b.n	800ceec <UART_SetConfig+0x518>
      }
      else
      {
        ret = HAL_ERROR;
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	76bb      	strb	r3, [r7, #26]
 800ce40:	e054      	b.n	800ceec <UART_SetConfig+0x518>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ce42:	7efb      	ldrb	r3, [r7, #27]
 800ce44:	2b08      	cmp	r3, #8
 800ce46:	d828      	bhi.n	800ce9a <UART_SetConfig+0x4c6>
 800ce48:	a201      	add	r2, pc, #4	; (adr r2, 800ce50 <UART_SetConfig+0x47c>)
 800ce4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce4e:	bf00      	nop
 800ce50:	0800ce75 	.word	0x0800ce75
 800ce54:	0800ce7d 	.word	0x0800ce7d
 800ce58:	0800ce85 	.word	0x0800ce85
 800ce5c:	0800ce9b 	.word	0x0800ce9b
 800ce60:	0800ce8b 	.word	0x0800ce8b
 800ce64:	0800ce9b 	.word	0x0800ce9b
 800ce68:	0800ce9b 	.word	0x0800ce9b
 800ce6c:	0800ce9b 	.word	0x0800ce9b
 800ce70:	0800ce93 	.word	0x0800ce93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce74:	f7fd fad0 	bl	800a418 <HAL_RCC_GetPCLK1Freq>
 800ce78:	6178      	str	r0, [r7, #20]
        break;
 800ce7a:	e013      	b.n	800cea4 <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ce7c:	f7fd fae2 	bl	800a444 <HAL_RCC_GetPCLK2Freq>
 800ce80:	6178      	str	r0, [r7, #20]
        break;
 800ce82:	e00f      	b.n	800cea4 <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ce84:	4b24      	ldr	r3, [pc, #144]	; (800cf18 <UART_SetConfig+0x544>)
 800ce86:	617b      	str	r3, [r7, #20]
        break;
 800ce88:	e00c      	b.n	800cea4 <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ce8a:	f7fd fa57 	bl	800a33c <HAL_RCC_GetSysClockFreq>
 800ce8e:	6178      	str	r0, [r7, #20]
        break;
 800ce90:	e008      	b.n	800cea4 <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce96:	617b      	str	r3, [r7, #20]
        break;
 800ce98:	e004      	b.n	800cea4 <UART_SetConfig+0x4d0>
      default:
        pclk = 0U;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	76bb      	strb	r3, [r7, #26]
        break;
 800cea2:	bf00      	nop
    }

    if (pclk != 0U)
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d020      	beq.n	800ceec <UART_SetConfig+0x518>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceae:	4a19      	ldr	r2, [pc, #100]	; (800cf14 <UART_SetConfig+0x540>)
 800ceb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	fbb3 f2f2 	udiv	r2, r3, r2
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	085b      	lsrs	r3, r3, #1
 800cec2:	441a      	add	r2, r3
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	685b      	ldr	r3, [r3, #4]
 800cec8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cecc:	b29b      	uxth	r3, r3
 800cece:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	2b0f      	cmp	r3, #15
 800ced4:	d908      	bls.n	800cee8 <UART_SetConfig+0x514>
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cedc:	d204      	bcs.n	800cee8 <UART_SetConfig+0x514>
      {
        huart->Instance->BRR = usartdiv;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	693a      	ldr	r2, [r7, #16]
 800cee4:	60da      	str	r2, [r3, #12]
 800cee6:	e001      	b.n	800ceec <UART_SetConfig+0x518>
      }
      else
      {
        ret = HAL_ERROR;
 800cee8:	2301      	movs	r3, #1
 800ceea:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2201      	movs	r2, #1
 800cef0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2201      	movs	r2, #1
 800cef8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2200      	movs	r2, #0
 800cf00:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2200      	movs	r2, #0
 800cf06:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800cf08:	7ebb      	ldrb	r3, [r7, #26]
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3720      	adds	r7, #32
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bdb0      	pop	{r4, r5, r7, pc}
 800cf12:	bf00      	nop
 800cf14:	0800e740 	.word	0x0800e740
 800cf18:	00f42400 	.word	0x00f42400

0800cf1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b083      	sub	sp, #12
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf28:	f003 0301 	and.w	r3, r3, #1
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00a      	beq.n	800cf46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	430a      	orrs	r2, r1
 800cf44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf4a:	f003 0302 	and.w	r3, r3, #2
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d00a      	beq.n	800cf68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	685b      	ldr	r3, [r3, #4]
 800cf58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	430a      	orrs	r2, r1
 800cf66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf6c:	f003 0304 	and.w	r3, r3, #4
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d00a      	beq.n	800cf8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	685b      	ldr	r3, [r3, #4]
 800cf7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	430a      	orrs	r2, r1
 800cf88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf8e:	f003 0308 	and.w	r3, r3, #8
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d00a      	beq.n	800cfac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	430a      	orrs	r2, r1
 800cfaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfb0:	f003 0310 	and.w	r3, r3, #16
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d00a      	beq.n	800cfce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	689b      	ldr	r3, [r3, #8]
 800cfbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	430a      	orrs	r2, r1
 800cfcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfd2:	f003 0320 	and.w	r3, r3, #32
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d00a      	beq.n	800cff0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	689b      	ldr	r3, [r3, #8]
 800cfe0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	430a      	orrs	r2, r1
 800cfee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d01a      	beq.n	800d032 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	685b      	ldr	r3, [r3, #4]
 800d002:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	430a      	orrs	r2, r1
 800d010:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d01a:	d10a      	bne.n	800d032 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	685b      	ldr	r3, [r3, #4]
 800d022:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	430a      	orrs	r2, r1
 800d030:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00a      	beq.n	800d054 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	685b      	ldr	r3, [r3, #4]
 800d044:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	430a      	orrs	r2, r1
 800d052:	605a      	str	r2, [r3, #4]
  }
}
 800d054:	bf00      	nop
 800d056:	370c      	adds	r7, #12
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr

0800d060 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b086      	sub	sp, #24
 800d064:	af02      	add	r7, sp, #8
 800d066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2200      	movs	r2, #0
 800d06c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d070:	f7f9 f804 	bl	800607c <HAL_GetTick>
 800d074:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f003 0308 	and.w	r3, r3, #8
 800d080:	2b08      	cmp	r3, #8
 800d082:	d10e      	bne.n	800d0a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d084:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d088:	9300      	str	r3, [sp, #0]
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2200      	movs	r2, #0
 800d08e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 f82c 	bl	800d0f0 <UART_WaitOnFlagUntilTimeout>
 800d098:	4603      	mov	r3, r0
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d001      	beq.n	800d0a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d09e:	2303      	movs	r3, #3
 800d0a0:	e022      	b.n	800d0e8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f003 0304 	and.w	r3, r3, #4
 800d0ac:	2b04      	cmp	r3, #4
 800d0ae:	d10e      	bne.n	800d0ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d0b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d0b4:	9300      	str	r3, [sp, #0]
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f000 f816 	bl	800d0f0 <UART_WaitOnFlagUntilTimeout>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d001      	beq.n	800d0ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d0ca:	2303      	movs	r3, #3
 800d0cc:	e00c      	b.n	800d0e8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2220      	movs	r2, #32
 800d0d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2220      	movs	r2, #32
 800d0da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d0e6:	2300      	movs	r3, #0
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3710      	adds	r7, #16
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}

0800d0f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b084      	sub	sp, #16
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	60f8      	str	r0, [r7, #12]
 800d0f8:	60b9      	str	r1, [r7, #8]
 800d0fa:	603b      	str	r3, [r7, #0]
 800d0fc:	4613      	mov	r3, r2
 800d0fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d100:	e062      	b.n	800d1c8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d102:	69bb      	ldr	r3, [r7, #24]
 800d104:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d108:	d05e      	beq.n	800d1c8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d10a:	f7f8 ffb7 	bl	800607c <HAL_GetTick>
 800d10e:	4602      	mov	r2, r0
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	1ad3      	subs	r3, r2, r3
 800d114:	69ba      	ldr	r2, [r7, #24]
 800d116:	429a      	cmp	r2, r3
 800d118:	d302      	bcc.n	800d120 <UART_WaitOnFlagUntilTimeout+0x30>
 800d11a:	69bb      	ldr	r3, [r7, #24]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d11d      	bne.n	800d15c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	681a      	ldr	r2, [r3, #0]
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d12e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	689a      	ldr	r2, [r3, #8]
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f022 0201 	bic.w	r2, r2, #1
 800d13e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2220      	movs	r2, #32
 800d144:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2220      	movs	r2, #32
 800d14c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	2200      	movs	r2, #0
 800d154:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800d158:	2303      	movs	r3, #3
 800d15a:	e045      	b.n	800d1e8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	f003 0304 	and.w	r3, r3, #4
 800d166:	2b00      	cmp	r3, #0
 800d168:	d02e      	beq.n	800d1c8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	69db      	ldr	r3, [r3, #28]
 800d170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d178:	d126      	bne.n	800d1c8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d182:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d192:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	689a      	ldr	r2, [r3, #8]
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f022 0201 	bic.w	r2, r2, #1
 800d1a2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2220      	movs	r2, #32
 800d1a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2220      	movs	r2, #32
 800d1b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	2220      	movs	r2, #32
 800d1b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800d1c4:	2303      	movs	r3, #3
 800d1c6:	e00f      	b.n	800d1e8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	69da      	ldr	r2, [r3, #28]
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	4013      	ands	r3, r2
 800d1d2:	68ba      	ldr	r2, [r7, #8]
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	bf0c      	ite	eq
 800d1d8:	2301      	moveq	r3, #1
 800d1da:	2300      	movne	r3, #0
 800d1dc:	b2db      	uxtb	r3, r3
 800d1de:	461a      	mov	r2, r3
 800d1e0:	79fb      	ldrb	r3, [r7, #7]
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d08d      	beq.n	800d102 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d1e6:	2300      	movs	r3, #0
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3710      	adds	r7, #16
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b083      	sub	sp, #12
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	681a      	ldr	r2, [r3, #0]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d206:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	689a      	ldr	r2, [r3, #8]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800d216:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2220      	movs	r2, #32
 800d21c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800d220:	bf00      	nop
 800d222:	370c      	adds	r7, #12
 800d224:	46bd      	mov	sp, r7
 800d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22a:	4770      	bx	lr

0800d22c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d22c:	b480      	push	{r7}
 800d22e:	b083      	sub	sp, #12
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	681a      	ldr	r2, [r3, #0]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d242:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	689b      	ldr	r3, [r3, #8]
 800d24a:	687a      	ldr	r2, [r7, #4]
 800d24c:	6812      	ldr	r2, [r2, #0]
 800d24e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d252:	f023 0301 	bic.w	r3, r3, #1
 800d256:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2220      	movs	r2, #32
 800d25c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2200      	movs	r2, #0
 800d264:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800d266:	bf00      	nop
 800d268:	370c      	adds	r7, #12
 800d26a:	46bd      	mov	sp, r7
 800d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d270:	4770      	bx	lr

0800d272 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d272:	b580      	push	{r7, lr}
 800d274:	b084      	sub	sp, #16
 800d276:	af00      	add	r7, sp, #0
 800d278:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d27e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f003 0320 	and.w	r3, r3, #32
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d114      	bne.n	800d2b8 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	2200      	movs	r2, #0
 800d292:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	689a      	ldr	r2, [r3, #8]
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d2a4:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	681a      	ldr	r2, [r3, #0]
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d2b4:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d2b6:	e002      	b.n	800d2be <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800d2b8:	68f8      	ldr	r0, [r7, #12]
 800d2ba:	f7f7 ff1f 	bl	80050fc <HAL_UART_TxCpltCallback>
}
 800d2be:	bf00      	nop
 800d2c0:	3710      	adds	r7, #16
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}

0800d2c6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d2c6:	b580      	push	{r7, lr}
 800d2c8:	b084      	sub	sp, #16
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d2d4:	68f8      	ldr	r0, [r7, #12]
 800d2d6:	f7ff fb5f 	bl	800c998 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d2da:	bf00      	nop
 800d2dc:	3710      	adds	r7, #16
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}

0800d2e2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d2e2:	b580      	push	{r7, lr}
 800d2e4:	b084      	sub	sp, #16
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ee:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f003 0320 	and.w	r3, r3, #32
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d11f      	bne.n	800d33e <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2200      	movs	r2, #0
 800d302:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	681a      	ldr	r2, [r3, #0]
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d314:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	689a      	ldr	r2, [r3, #8]
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f022 0201 	bic.w	r2, r2, #1
 800d324:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	689a      	ldr	r2, [r3, #8]
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d334:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2220      	movs	r2, #32
 800d33a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800d33e:	68f8      	ldr	r0, [r7, #12]
 800d340:	f7ff fb34 	bl	800c9ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d344:	bf00      	nop
 800d346:	3710      	adds	r7, #16
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d358:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800d35a:	68f8      	ldr	r0, [r7, #12]
 800d35c:	f7ff fb30 	bl	800c9c0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d360:	bf00      	nop
 800d362:	3710      	adds	r7, #16
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}

0800d368 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b086      	sub	sp, #24
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d374:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d37c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d384:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	689b      	ldr	r3, [r3, #8]
 800d38c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d390:	2b80      	cmp	r3, #128	; 0x80
 800d392:	d109      	bne.n	800d3a8 <UART_DMAError+0x40>
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	2b21      	cmp	r3, #33	; 0x21
 800d398:	d106      	bne.n	800d3a8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	2200      	movs	r2, #0
 800d39e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d3a2:	6978      	ldr	r0, [r7, #20]
 800d3a4:	f7ff ff24 	bl	800d1f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	689b      	ldr	r3, [r3, #8]
 800d3ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3b2:	2b40      	cmp	r3, #64	; 0x40
 800d3b4:	d109      	bne.n	800d3ca <UART_DMAError+0x62>
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	2b22      	cmp	r3, #34	; 0x22
 800d3ba:	d106      	bne.n	800d3ca <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d3c4:	6978      	ldr	r0, [r7, #20]
 800d3c6:	f7ff ff31 	bl	800d22c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3d0:	f043 0210 	orr.w	r2, r3, #16
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d3da:	6978      	ldr	r0, [r7, #20]
 800d3dc:	f7f7 fcac 	bl	8004d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d3e0:	bf00      	nop
 800d3e2:	3718      	adds	r7, #24
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2200      	movs	r2, #0
 800d402:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d406:	68f8      	ldr	r0, [r7, #12]
 800d408:	f7f7 fc96 	bl	8004d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d40c:	bf00      	nop
 800d40e:	3710      	adds	r7, #16
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}

0800d414 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b082      	sub	sp, #8
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d42a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2220      	movs	r2, #32
 800d430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2200      	movs	r2, #0
 800d438:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f7f7 fe5e 	bl	80050fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d440:	bf00      	nop
 800d442:	3708      	adds	r7, #8
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}

0800d448 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d448:	b480      	push	{r7}
 800d44a:	b083      	sub	sp, #12
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d450:	bf00      	nop
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b083      	sub	sp, #12
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d464:	bf00      	nop
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d470:	b480      	push	{r7}
 800d472:	b083      	sub	sp, #12
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d478:	bf00      	nop
 800d47a:	370c      	adds	r7, #12
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr

0800d484 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d484:	b480      	push	{r7}
 800d486:	b085      	sub	sp, #20
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d492:	2b01      	cmp	r3, #1
 800d494:	d101      	bne.n	800d49a <HAL_UARTEx_DisableFifoMode+0x16>
 800d496:	2302      	movs	r3, #2
 800d498:	e027      	b.n	800d4ea <HAL_UARTEx_DisableFifoMode+0x66>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2201      	movs	r2, #1
 800d49e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2224      	movs	r2, #36	; 0x24
 800d4a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f022 0201 	bic.w	r2, r2, #1
 800d4c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d4c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	68fa      	ldr	r2, [r7, #12]
 800d4d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2220      	movs	r2, #32
 800d4dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d4e8:	2300      	movs	r3, #0
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3714      	adds	r7, #20
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f4:	4770      	bx	lr

0800d4f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d4f6:	b580      	push	{r7, lr}
 800d4f8:	b084      	sub	sp, #16
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	6078      	str	r0, [r7, #4]
 800d4fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d506:	2b01      	cmp	r3, #1
 800d508:	d101      	bne.n	800d50e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d50a:	2302      	movs	r3, #2
 800d50c:	e02d      	b.n	800d56a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2201      	movs	r2, #1
 800d512:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2224      	movs	r2, #36	; 0x24
 800d51a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	681a      	ldr	r2, [r3, #0]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f022 0201 	bic.w	r2, r2, #1
 800d534:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	689b      	ldr	r3, [r3, #8]
 800d53c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	683a      	ldr	r2, [r7, #0]
 800d546:	430a      	orrs	r2, r1
 800d548:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f000 f850 	bl	800d5f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	68fa      	ldr	r2, [r7, #12]
 800d556:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2220      	movs	r2, #32
 800d55c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2200      	movs	r2, #0
 800d564:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d568:	2300      	movs	r3, #0
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3710      	adds	r7, #16
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}

0800d572 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d572:	b580      	push	{r7, lr}
 800d574:	b084      	sub	sp, #16
 800d576:	af00      	add	r7, sp, #0
 800d578:	6078      	str	r0, [r7, #4]
 800d57a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d582:	2b01      	cmp	r3, #1
 800d584:	d101      	bne.n	800d58a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d586:	2302      	movs	r3, #2
 800d588:	e02d      	b.n	800d5e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2201      	movs	r2, #1
 800d58e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2224      	movs	r2, #36	; 0x24
 800d596:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	681a      	ldr	r2, [r3, #0]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	f022 0201 	bic.w	r2, r2, #1
 800d5b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	689b      	ldr	r3, [r3, #8]
 800d5b8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	683a      	ldr	r2, [r7, #0]
 800d5c2:	430a      	orrs	r2, r1
 800d5c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f000 f812 	bl	800d5f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	68fa      	ldr	r2, [r7, #12]
 800d5d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2220      	movs	r2, #32
 800d5d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d5e4:	2300      	movs	r3, #0
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3710      	adds	r7, #16
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
	...

0800d5f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b089      	sub	sp, #36	; 0x24
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800d5f8:	4a2f      	ldr	r2, [pc, #188]	; (800d6b8 <UARTEx_SetNbDataToProcess+0xc8>)
 800d5fa:	f107 0314 	add.w	r3, r7, #20
 800d5fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d602:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800d606:	4a2d      	ldr	r2, [pc, #180]	; (800d6bc <UARTEx_SetNbDataToProcess+0xcc>)
 800d608:	f107 030c 	add.w	r3, r7, #12
 800d60c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d610:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d108      	bne.n	800d62e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2201      	movs	r2, #1
 800d620:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2201      	movs	r2, #1
 800d628:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d62c:	e03d      	b.n	800d6aa <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d62e:	2308      	movs	r3, #8
 800d630:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d632:	2308      	movs	r3, #8
 800d634:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	689b      	ldr	r3, [r3, #8]
 800d63c:	0e5b      	lsrs	r3, r3, #25
 800d63e:	b2db      	uxtb	r3, r3
 800d640:	f003 0307 	and.w	r3, r3, #7
 800d644:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	689b      	ldr	r3, [r3, #8]
 800d64c:	0f5b      	lsrs	r3, r3, #29
 800d64e:	b2db      	uxtb	r3, r3
 800d650:	f003 0307 	and.w	r3, r3, #7
 800d654:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d656:	7fbb      	ldrb	r3, [r7, #30]
 800d658:	7f3a      	ldrb	r2, [r7, #28]
 800d65a:	f107 0120 	add.w	r1, r7, #32
 800d65e:	440a      	add	r2, r1
 800d660:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d664:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d668:	7f3a      	ldrb	r2, [r7, #28]
 800d66a:	f107 0120 	add.w	r1, r7, #32
 800d66e:	440a      	add	r2, r1
 800d670:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d674:	fb93 f3f2 	sdiv	r3, r3, r2
 800d678:	b29a      	uxth	r2, r3
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d680:	7ffb      	ldrb	r3, [r7, #31]
 800d682:	7f7a      	ldrb	r2, [r7, #29]
 800d684:	f107 0120 	add.w	r1, r7, #32
 800d688:	440a      	add	r2, r1
 800d68a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d68e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d692:	7f7a      	ldrb	r2, [r7, #29]
 800d694:	f107 0120 	add.w	r1, r7, #32
 800d698:	440a      	add	r2, r1
 800d69a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d69e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d6a2:	b29a      	uxth	r2, r3
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d6aa:	bf00      	nop
 800d6ac:	3724      	adds	r7, #36	; 0x24
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr
 800d6b6:	bf00      	nop
 800d6b8:	0800e4dc 	.word	0x0800e4dc
 800d6bc:	0800e4e4 	.word	0x0800e4e4

0800d6c0 <__errno>:
 800d6c0:	4b01      	ldr	r3, [pc, #4]	; (800d6c8 <__errno+0x8>)
 800d6c2:	6818      	ldr	r0, [r3, #0]
 800d6c4:	4770      	bx	lr
 800d6c6:	bf00      	nop
 800d6c8:	20000044 	.word	0x20000044

0800d6cc <__libc_init_array>:
 800d6cc:	b570      	push	{r4, r5, r6, lr}
 800d6ce:	4d0d      	ldr	r5, [pc, #52]	; (800d704 <__libc_init_array+0x38>)
 800d6d0:	4c0d      	ldr	r4, [pc, #52]	; (800d708 <__libc_init_array+0x3c>)
 800d6d2:	1b64      	subs	r4, r4, r5
 800d6d4:	10a4      	asrs	r4, r4, #2
 800d6d6:	2600      	movs	r6, #0
 800d6d8:	42a6      	cmp	r6, r4
 800d6da:	d109      	bne.n	800d6f0 <__libc_init_array+0x24>
 800d6dc:	4d0b      	ldr	r5, [pc, #44]	; (800d70c <__libc_init_array+0x40>)
 800d6de:	4c0c      	ldr	r4, [pc, #48]	; (800d710 <__libc_init_array+0x44>)
 800d6e0:	f000 febe 	bl	800e460 <_init>
 800d6e4:	1b64      	subs	r4, r4, r5
 800d6e6:	10a4      	asrs	r4, r4, #2
 800d6e8:	2600      	movs	r6, #0
 800d6ea:	42a6      	cmp	r6, r4
 800d6ec:	d105      	bne.n	800d6fa <__libc_init_array+0x2e>
 800d6ee:	bd70      	pop	{r4, r5, r6, pc}
 800d6f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6f4:	4798      	blx	r3
 800d6f6:	3601      	adds	r6, #1
 800d6f8:	e7ee      	b.n	800d6d8 <__libc_init_array+0xc>
 800d6fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6fe:	4798      	blx	r3
 800d700:	3601      	adds	r6, #1
 800d702:	e7f2      	b.n	800d6ea <__libc_init_array+0x1e>
 800d704:	0800e78c 	.word	0x0800e78c
 800d708:	0800e78c 	.word	0x0800e78c
 800d70c:	0800e78c 	.word	0x0800e78c
 800d710:	0800e790 	.word	0x0800e790

0800d714 <memcpy>:
 800d714:	440a      	add	r2, r1
 800d716:	4291      	cmp	r1, r2
 800d718:	f100 33ff 	add.w	r3, r0, #4294967295
 800d71c:	d100      	bne.n	800d720 <memcpy+0xc>
 800d71e:	4770      	bx	lr
 800d720:	b510      	push	{r4, lr}
 800d722:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d726:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d72a:	4291      	cmp	r1, r2
 800d72c:	d1f9      	bne.n	800d722 <memcpy+0xe>
 800d72e:	bd10      	pop	{r4, pc}

0800d730 <memset>:
 800d730:	4402      	add	r2, r0
 800d732:	4603      	mov	r3, r0
 800d734:	4293      	cmp	r3, r2
 800d736:	d100      	bne.n	800d73a <memset+0xa>
 800d738:	4770      	bx	lr
 800d73a:	f803 1b01 	strb.w	r1, [r3], #1
 800d73e:	e7f9      	b.n	800d734 <memset+0x4>

0800d740 <fmaxf>:
 800d740:	b508      	push	{r3, lr}
 800d742:	ed2d 8b02 	vpush	{d8}
 800d746:	eeb0 8a40 	vmov.f32	s16, s0
 800d74a:	eef0 8a60 	vmov.f32	s17, s1
 800d74e:	f000 f82d 	bl	800d7ac <__fpclassifyf>
 800d752:	b148      	cbz	r0, 800d768 <fmaxf+0x28>
 800d754:	eeb0 0a68 	vmov.f32	s0, s17
 800d758:	f000 f828 	bl	800d7ac <__fpclassifyf>
 800d75c:	b130      	cbz	r0, 800d76c <fmaxf+0x2c>
 800d75e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d766:	dc01      	bgt.n	800d76c <fmaxf+0x2c>
 800d768:	eeb0 8a68 	vmov.f32	s16, s17
 800d76c:	eeb0 0a48 	vmov.f32	s0, s16
 800d770:	ecbd 8b02 	vpop	{d8}
 800d774:	bd08      	pop	{r3, pc}

0800d776 <fminf>:
 800d776:	b508      	push	{r3, lr}
 800d778:	ed2d 8b02 	vpush	{d8}
 800d77c:	eeb0 8a40 	vmov.f32	s16, s0
 800d780:	eef0 8a60 	vmov.f32	s17, s1
 800d784:	f000 f812 	bl	800d7ac <__fpclassifyf>
 800d788:	b148      	cbz	r0, 800d79e <fminf+0x28>
 800d78a:	eeb0 0a68 	vmov.f32	s0, s17
 800d78e:	f000 f80d 	bl	800d7ac <__fpclassifyf>
 800d792:	b130      	cbz	r0, 800d7a2 <fminf+0x2c>
 800d794:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d79c:	d401      	bmi.n	800d7a2 <fminf+0x2c>
 800d79e:	eeb0 8a68 	vmov.f32	s16, s17
 800d7a2:	eeb0 0a48 	vmov.f32	s0, s16
 800d7a6:	ecbd 8b02 	vpop	{d8}
 800d7aa:	bd08      	pop	{r3, pc}

0800d7ac <__fpclassifyf>:
 800d7ac:	ee10 3a10 	vmov	r3, s0
 800d7b0:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800d7b4:	d00d      	beq.n	800d7d2 <__fpclassifyf+0x26>
 800d7b6:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800d7ba:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800d7be:	d30a      	bcc.n	800d7d6 <__fpclassifyf+0x2a>
 800d7c0:	4b07      	ldr	r3, [pc, #28]	; (800d7e0 <__fpclassifyf+0x34>)
 800d7c2:	1e42      	subs	r2, r0, #1
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d908      	bls.n	800d7da <__fpclassifyf+0x2e>
 800d7c8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800d7cc:	4258      	negs	r0, r3
 800d7ce:	4158      	adcs	r0, r3
 800d7d0:	4770      	bx	lr
 800d7d2:	2002      	movs	r0, #2
 800d7d4:	4770      	bx	lr
 800d7d6:	2004      	movs	r0, #4
 800d7d8:	4770      	bx	lr
 800d7da:	2003      	movs	r0, #3
 800d7dc:	4770      	bx	lr
 800d7de:	bf00      	nop
 800d7e0:	007ffffe 	.word	0x007ffffe

0800d7e4 <fmodf>:
 800d7e4:	b508      	push	{r3, lr}
 800d7e6:	ed2d 8b02 	vpush	{d8}
 800d7ea:	eef0 8a40 	vmov.f32	s17, s0
 800d7ee:	eeb0 8a60 	vmov.f32	s16, s1
 800d7f2:	f000 f917 	bl	800da24 <__ieee754_fmodf>
 800d7f6:	4b0f      	ldr	r3, [pc, #60]	; (800d834 <fmodf+0x50>)
 800d7f8:	f993 3000 	ldrsb.w	r3, [r3]
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	d016      	beq.n	800d82e <fmodf+0x4a>
 800d800:	eeb4 8a48 	vcmp.f32	s16, s16
 800d804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d808:	d611      	bvs.n	800d82e <fmodf+0x4a>
 800d80a:	eef4 8a68 	vcmp.f32	s17, s17
 800d80e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d812:	d60c      	bvs.n	800d82e <fmodf+0x4a>
 800d814:	eddf 8a08 	vldr	s17, [pc, #32]	; 800d838 <fmodf+0x54>
 800d818:	eeb4 8a68 	vcmp.f32	s16, s17
 800d81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d820:	d105      	bne.n	800d82e <fmodf+0x4a>
 800d822:	f7ff ff4d 	bl	800d6c0 <__errno>
 800d826:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d82a:	2321      	movs	r3, #33	; 0x21
 800d82c:	6003      	str	r3, [r0, #0]
 800d82e:	ecbd 8b02 	vpop	{d8}
 800d832:	bd08      	pop	{r3, pc}
 800d834:	200000a8 	.word	0x200000a8
 800d838:	00000000 	.word	0x00000000

0800d83c <logf>:
 800d83c:	b508      	push	{r3, lr}
 800d83e:	ed2d 8b02 	vpush	{d8}
 800d842:	eeb0 8a40 	vmov.f32	s16, s0
 800d846:	f000 f96f 	bl	800db28 <__ieee754_logf>
 800d84a:	4b14      	ldr	r3, [pc, #80]	; (800d89c <logf+0x60>)
 800d84c:	f993 3000 	ldrsb.w	r3, [r3]
 800d850:	3301      	adds	r3, #1
 800d852:	d014      	beq.n	800d87e <logf+0x42>
 800d854:	eeb4 8a48 	vcmp.f32	s16, s16
 800d858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d85c:	d60f      	bvs.n	800d87e <logf+0x42>
 800d85e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d866:	dc0a      	bgt.n	800d87e <logf+0x42>
 800d868:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d86c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d870:	d108      	bne.n	800d884 <logf+0x48>
 800d872:	f7ff ff25 	bl	800d6c0 <__errno>
 800d876:	2322      	movs	r3, #34	; 0x22
 800d878:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800d8a0 <logf+0x64>
 800d87c:	6003      	str	r3, [r0, #0]
 800d87e:	ecbd 8b02 	vpop	{d8}
 800d882:	bd08      	pop	{r3, pc}
 800d884:	f7ff ff1c 	bl	800d6c0 <__errno>
 800d888:	ecbd 8b02 	vpop	{d8}
 800d88c:	2321      	movs	r3, #33	; 0x21
 800d88e:	6003      	str	r3, [r0, #0]
 800d890:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d894:	4803      	ldr	r0, [pc, #12]	; (800d8a4 <logf+0x68>)
 800d896:	f000 bd0f 	b.w	800e2b8 <nanf>
 800d89a:	bf00      	nop
 800d89c:	200000a8 	.word	0x200000a8
 800d8a0:	ff800000 	.word	0xff800000
 800d8a4:	0800e758 	.word	0x0800e758

0800d8a8 <powf>:
 800d8a8:	b508      	push	{r3, lr}
 800d8aa:	ed2d 8b04 	vpush	{d8-d9}
 800d8ae:	eeb0 9a40 	vmov.f32	s18, s0
 800d8b2:	eef0 8a60 	vmov.f32	s17, s1
 800d8b6:	f000 fa27 	bl	800dd08 <__ieee754_powf>
 800d8ba:	4b43      	ldr	r3, [pc, #268]	; (800d9c8 <powf+0x120>)
 800d8bc:	f993 3000 	ldrsb.w	r3, [r3]
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	eeb0 8a40 	vmov.f32	s16, s0
 800d8c6:	d012      	beq.n	800d8ee <powf+0x46>
 800d8c8:	eef4 8a68 	vcmp.f32	s17, s17
 800d8cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8d0:	d60d      	bvs.n	800d8ee <powf+0x46>
 800d8d2:	eeb4 9a49 	vcmp.f32	s18, s18
 800d8d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8da:	d70d      	bvc.n	800d8f8 <powf+0x50>
 800d8dc:	eef5 8a40 	vcmp.f32	s17, #0.0
 800d8e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d8e8:	bf08      	it	eq
 800d8ea:	eeb0 8a67 	vmoveq.f32	s16, s15
 800d8ee:	eeb0 0a48 	vmov.f32	s0, s16
 800d8f2:	ecbd 8b04 	vpop	{d8-d9}
 800d8f6:	bd08      	pop	{r3, pc}
 800d8f8:	eddf 9a34 	vldr	s19, [pc, #208]	; 800d9cc <powf+0x124>
 800d8fc:	eeb4 9a69 	vcmp.f32	s18, s19
 800d900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d904:	d116      	bne.n	800d934 <powf+0x8c>
 800d906:	eef4 8a69 	vcmp.f32	s17, s19
 800d90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d90e:	d057      	beq.n	800d9c0 <powf+0x118>
 800d910:	eeb0 0a68 	vmov.f32	s0, s17
 800d914:	f000 fcc2 	bl	800e29c <finitef>
 800d918:	2800      	cmp	r0, #0
 800d91a:	d0e8      	beq.n	800d8ee <powf+0x46>
 800d91c:	eef4 8ae9 	vcmpe.f32	s17, s19
 800d920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d924:	d5e3      	bpl.n	800d8ee <powf+0x46>
 800d926:	f7ff fecb 	bl	800d6c0 <__errno>
 800d92a:	2321      	movs	r3, #33	; 0x21
 800d92c:	6003      	str	r3, [r0, #0]
 800d92e:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800d9d0 <powf+0x128>
 800d932:	e7dc      	b.n	800d8ee <powf+0x46>
 800d934:	f000 fcb2 	bl	800e29c <finitef>
 800d938:	bb50      	cbnz	r0, 800d990 <powf+0xe8>
 800d93a:	eeb0 0a49 	vmov.f32	s0, s18
 800d93e:	f000 fcad 	bl	800e29c <finitef>
 800d942:	b328      	cbz	r0, 800d990 <powf+0xe8>
 800d944:	eeb0 0a68 	vmov.f32	s0, s17
 800d948:	f000 fca8 	bl	800e29c <finitef>
 800d94c:	b300      	cbz	r0, 800d990 <powf+0xe8>
 800d94e:	eeb4 8a48 	vcmp.f32	s16, s16
 800d952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d956:	d706      	bvc.n	800d966 <powf+0xbe>
 800d958:	f7ff feb2 	bl	800d6c0 <__errno>
 800d95c:	2321      	movs	r3, #33	; 0x21
 800d95e:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800d962:	6003      	str	r3, [r0, #0]
 800d964:	e7c3      	b.n	800d8ee <powf+0x46>
 800d966:	f7ff feab 	bl	800d6c0 <__errno>
 800d96a:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800d96e:	2322      	movs	r3, #34	; 0x22
 800d970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d974:	6003      	str	r3, [r0, #0]
 800d976:	d508      	bpl.n	800d98a <powf+0xe2>
 800d978:	eeb0 0a68 	vmov.f32	s0, s17
 800d97c:	f000 fca2 	bl	800e2c4 <rintf>
 800d980:	eeb4 0a68 	vcmp.f32	s0, s17
 800d984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d988:	d1d1      	bne.n	800d92e <powf+0x86>
 800d98a:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800d9d4 <powf+0x12c>
 800d98e:	e7ae      	b.n	800d8ee <powf+0x46>
 800d990:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d998:	d1a9      	bne.n	800d8ee <powf+0x46>
 800d99a:	eeb0 0a49 	vmov.f32	s0, s18
 800d99e:	f000 fc7d 	bl	800e29c <finitef>
 800d9a2:	2800      	cmp	r0, #0
 800d9a4:	d0a3      	beq.n	800d8ee <powf+0x46>
 800d9a6:	eeb0 0a68 	vmov.f32	s0, s17
 800d9aa:	f000 fc77 	bl	800e29c <finitef>
 800d9ae:	2800      	cmp	r0, #0
 800d9b0:	d09d      	beq.n	800d8ee <powf+0x46>
 800d9b2:	f7ff fe85 	bl	800d6c0 <__errno>
 800d9b6:	2322      	movs	r3, #34	; 0x22
 800d9b8:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800d9cc <powf+0x124>
 800d9bc:	6003      	str	r3, [r0, #0]
 800d9be:	e796      	b.n	800d8ee <powf+0x46>
 800d9c0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800d9c4:	e793      	b.n	800d8ee <powf+0x46>
 800d9c6:	bf00      	nop
 800d9c8:	200000a8 	.word	0x200000a8
 800d9cc:	00000000 	.word	0x00000000
 800d9d0:	ff800000 	.word	0xff800000
 800d9d4:	7f800000 	.word	0x7f800000

0800d9d8 <sqrtf>:
 800d9d8:	b508      	push	{r3, lr}
 800d9da:	ed2d 8b02 	vpush	{d8}
 800d9de:	eeb0 8a40 	vmov.f32	s16, s0
 800d9e2:	f000 fc51 	bl	800e288 <__ieee754_sqrtf>
 800d9e6:	4b0d      	ldr	r3, [pc, #52]	; (800da1c <sqrtf+0x44>)
 800d9e8:	f993 3000 	ldrsb.w	r3, [r3]
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	d011      	beq.n	800da14 <sqrtf+0x3c>
 800d9f0:	eeb4 8a48 	vcmp.f32	s16, s16
 800d9f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9f8:	d60c      	bvs.n	800da14 <sqrtf+0x3c>
 800d9fa:	eddf 8a09 	vldr	s17, [pc, #36]	; 800da20 <sqrtf+0x48>
 800d9fe:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800da02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da06:	d505      	bpl.n	800da14 <sqrtf+0x3c>
 800da08:	f7ff fe5a 	bl	800d6c0 <__errno>
 800da0c:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800da10:	2321      	movs	r3, #33	; 0x21
 800da12:	6003      	str	r3, [r0, #0]
 800da14:	ecbd 8b02 	vpop	{d8}
 800da18:	bd08      	pop	{r3, pc}
 800da1a:	bf00      	nop
 800da1c:	200000a8 	.word	0x200000a8
 800da20:	00000000 	.word	0x00000000

0800da24 <__ieee754_fmodf>:
 800da24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da26:	ee10 6a90 	vmov	r6, s1
 800da2a:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800da2e:	d009      	beq.n	800da44 <__ieee754_fmodf+0x20>
 800da30:	ee10 2a10 	vmov	r2, s0
 800da34:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800da38:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800da3c:	da02      	bge.n	800da44 <__ieee754_fmodf+0x20>
 800da3e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800da42:	dd04      	ble.n	800da4e <__ieee754_fmodf+0x2a>
 800da44:	ee60 0a20 	vmul.f32	s1, s0, s1
 800da48:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800da4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da4e:	42ab      	cmp	r3, r5
 800da50:	dbfc      	blt.n	800da4c <__ieee754_fmodf+0x28>
 800da52:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 800da56:	d106      	bne.n	800da66 <__ieee754_fmodf+0x42>
 800da58:	4a32      	ldr	r2, [pc, #200]	; (800db24 <__ieee754_fmodf+0x100>)
 800da5a:	0fe3      	lsrs	r3, r4, #31
 800da5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800da60:	ed93 0a00 	vldr	s0, [r3]
 800da64:	e7f2      	b.n	800da4c <__ieee754_fmodf+0x28>
 800da66:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800da6a:	d13f      	bne.n	800daec <__ieee754_fmodf+0xc8>
 800da6c:	0219      	lsls	r1, r3, #8
 800da6e:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800da72:	2900      	cmp	r1, #0
 800da74:	dc37      	bgt.n	800dae6 <__ieee754_fmodf+0xc2>
 800da76:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800da7a:	d13d      	bne.n	800daf8 <__ieee754_fmodf+0xd4>
 800da7c:	022f      	lsls	r7, r5, #8
 800da7e:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800da82:	2f00      	cmp	r7, #0
 800da84:	da35      	bge.n	800daf2 <__ieee754_fmodf+0xce>
 800da86:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800da8a:	bfbb      	ittet	lt
 800da8c:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800da90:	1a12      	sublt	r2, r2, r0
 800da92:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800da96:	4093      	lsllt	r3, r2
 800da98:	bfa8      	it	ge
 800da9a:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800da9e:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800daa2:	bfb5      	itete	lt
 800daa4:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800daa8:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 800daac:	1a52      	sublt	r2, r2, r1
 800daae:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 800dab2:	bfb8      	it	lt
 800dab4:	4095      	lsllt	r5, r2
 800dab6:	1a40      	subs	r0, r0, r1
 800dab8:	1b5a      	subs	r2, r3, r5
 800daba:	bb00      	cbnz	r0, 800dafe <__ieee754_fmodf+0xda>
 800dabc:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800dac0:	bf38      	it	cc
 800dac2:	4613      	movcc	r3, r2
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d0c7      	beq.n	800da58 <__ieee754_fmodf+0x34>
 800dac8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dacc:	db1f      	blt.n	800db0e <__ieee754_fmodf+0xea>
 800dace:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800dad2:	db1f      	blt.n	800db14 <__ieee754_fmodf+0xf0>
 800dad4:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800dad8:	317f      	adds	r1, #127	; 0x7f
 800dada:	4323      	orrs	r3, r4
 800dadc:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800dae0:	ee00 3a10 	vmov	s0, r3
 800dae4:	e7b2      	b.n	800da4c <__ieee754_fmodf+0x28>
 800dae6:	3801      	subs	r0, #1
 800dae8:	0049      	lsls	r1, r1, #1
 800daea:	e7c2      	b.n	800da72 <__ieee754_fmodf+0x4e>
 800daec:	15d8      	asrs	r0, r3, #23
 800daee:	387f      	subs	r0, #127	; 0x7f
 800daf0:	e7c1      	b.n	800da76 <__ieee754_fmodf+0x52>
 800daf2:	3901      	subs	r1, #1
 800daf4:	007f      	lsls	r7, r7, #1
 800daf6:	e7c4      	b.n	800da82 <__ieee754_fmodf+0x5e>
 800daf8:	15e9      	asrs	r1, r5, #23
 800dafa:	397f      	subs	r1, #127	; 0x7f
 800dafc:	e7c3      	b.n	800da86 <__ieee754_fmodf+0x62>
 800dafe:	2a00      	cmp	r2, #0
 800db00:	da02      	bge.n	800db08 <__ieee754_fmodf+0xe4>
 800db02:	005b      	lsls	r3, r3, #1
 800db04:	3801      	subs	r0, #1
 800db06:	e7d7      	b.n	800dab8 <__ieee754_fmodf+0x94>
 800db08:	d0a6      	beq.n	800da58 <__ieee754_fmodf+0x34>
 800db0a:	0053      	lsls	r3, r2, #1
 800db0c:	e7fa      	b.n	800db04 <__ieee754_fmodf+0xe0>
 800db0e:	005b      	lsls	r3, r3, #1
 800db10:	3901      	subs	r1, #1
 800db12:	e7d9      	b.n	800dac8 <__ieee754_fmodf+0xa4>
 800db14:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800db18:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800db1c:	3182      	adds	r1, #130	; 0x82
 800db1e:	410b      	asrs	r3, r1
 800db20:	4323      	orrs	r3, r4
 800db22:	e7dd      	b.n	800dae0 <__ieee754_fmodf+0xbc>
 800db24:	0800e75c 	.word	0x0800e75c

0800db28 <__ieee754_logf>:
 800db28:	ee10 3a10 	vmov	r3, s0
 800db2c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800db30:	d106      	bne.n	800db40 <__ieee754_logf+0x18>
 800db32:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800dcc8 <__ieee754_logf+0x1a0>
 800db36:	eddf 7a65 	vldr	s15, [pc, #404]	; 800dccc <__ieee754_logf+0x1a4>
 800db3a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800db3e:	4770      	bx	lr
 800db40:	2b00      	cmp	r3, #0
 800db42:	da02      	bge.n	800db4a <__ieee754_logf+0x22>
 800db44:	ee30 7a40 	vsub.f32	s14, s0, s0
 800db48:	e7f5      	b.n	800db36 <__ieee754_logf+0xe>
 800db4a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800db4e:	db02      	blt.n	800db56 <__ieee754_logf+0x2e>
 800db50:	ee30 0a00 	vadd.f32	s0, s0, s0
 800db54:	4770      	bx	lr
 800db56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800db5a:	bfb8      	it	lt
 800db5c:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800dcd0 <__ieee754_logf+0x1a8>
 800db60:	485c      	ldr	r0, [pc, #368]	; (800dcd4 <__ieee754_logf+0x1ac>)
 800db62:	bfbe      	ittt	lt
 800db64:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800db68:	f06f 0118 	mvnlt.w	r1, #24
 800db6c:	ee17 3a90 	vmovlt	r3, s15
 800db70:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800db74:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800db78:	4418      	add	r0, r3
 800db7a:	bfa8      	it	ge
 800db7c:	2100      	movge	r1, #0
 800db7e:	3a7f      	subs	r2, #127	; 0x7f
 800db80:	440a      	add	r2, r1
 800db82:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800db86:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800db8a:	4319      	orrs	r1, r3
 800db8c:	ee00 1a10 	vmov	s0, r1
 800db90:	4951      	ldr	r1, [pc, #324]	; (800dcd8 <__ieee754_logf+0x1b0>)
 800db92:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800db96:	f103 000f 	add.w	r0, r3, #15
 800db9a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800db9e:	4001      	ands	r1, r0
 800dba0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800dba4:	bb89      	cbnz	r1, 800dc0a <__ieee754_logf+0xe2>
 800dba6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800dbaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbae:	d10f      	bne.n	800dbd0 <__ieee754_logf+0xa8>
 800dbb0:	2a00      	cmp	r2, #0
 800dbb2:	f000 8085 	beq.w	800dcc0 <__ieee754_logf+0x198>
 800dbb6:	ee07 2a90 	vmov	s15, r2
 800dbba:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800dcdc <__ieee754_logf+0x1b4>
 800dbbe:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800dce0 <__ieee754_logf+0x1b8>
 800dbc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dbc6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800dbca:	eea7 0a87 	vfma.f32	s0, s15, s14
 800dbce:	4770      	bx	lr
 800dbd0:	eddf 6a44 	vldr	s13, [pc, #272]	; 800dce4 <__ieee754_logf+0x1bc>
 800dbd4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800dbd8:	eee0 7a66 	vfms.f32	s15, s0, s13
 800dbdc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800dbe0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dbe4:	b912      	cbnz	r2, 800dbec <__ieee754_logf+0xc4>
 800dbe6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800dbea:	4770      	bx	lr
 800dbec:	ee07 2a90 	vmov	s15, r2
 800dbf0:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800dcdc <__ieee754_logf+0x1b4>
 800dbf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dbf8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800dbfc:	ee37 0a40 	vsub.f32	s0, s14, s0
 800dc00:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800dce0 <__ieee754_logf+0x1b8>
 800dc04:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800dc08:	4770      	bx	lr
 800dc0a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800dc0e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800dc12:	eddf 5a35 	vldr	s11, [pc, #212]	; 800dce8 <__ieee754_logf+0x1c0>
 800dc16:	eddf 4a35 	vldr	s9, [pc, #212]	; 800dcec <__ieee754_logf+0x1c4>
 800dc1a:	4935      	ldr	r1, [pc, #212]	; (800dcf0 <__ieee754_logf+0x1c8>)
 800dc1c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800dc20:	4419      	add	r1, r3
 800dc22:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800dc26:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800dc2a:	430b      	orrs	r3, r1
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	ee07 2a90 	vmov	s15, r2
 800dc32:	ee26 5a06 	vmul.f32	s10, s12, s12
 800dc36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800dc3a:	ee25 7a05 	vmul.f32	s14, s10, s10
 800dc3e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800dcf4 <__ieee754_logf+0x1cc>
 800dc42:	eee7 7a25 	vfma.f32	s15, s14, s11
 800dc46:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800dcf8 <__ieee754_logf+0x1d0>
 800dc4a:	eee7 5a87 	vfma.f32	s11, s15, s14
 800dc4e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800dcfc <__ieee754_logf+0x1d4>
 800dc52:	eee7 7a24 	vfma.f32	s15, s14, s9
 800dc56:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800dd00 <__ieee754_logf+0x1d8>
 800dc5a:	eee7 4a87 	vfma.f32	s9, s15, s14
 800dc5e:	eddf 7a29 	vldr	s15, [pc, #164]	; 800dd04 <__ieee754_logf+0x1dc>
 800dc62:	eee4 7a87 	vfma.f32	s15, s9, s14
 800dc66:	ee67 7a85 	vmul.f32	s15, s15, s10
 800dc6a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800dc6e:	dd1c      	ble.n	800dcaa <__ieee754_logf+0x182>
 800dc70:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dc74:	ee20 7a07 	vmul.f32	s14, s0, s14
 800dc78:	ee27 7a00 	vmul.f32	s14, s14, s0
 800dc7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc80:	ee67 7a86 	vmul.f32	s15, s15, s12
 800dc84:	b922      	cbnz	r2, 800dc90 <__ieee754_logf+0x168>
 800dc86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc8a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800dc8e:	4770      	bx	lr
 800dc90:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800dcdc <__ieee754_logf+0x1b4>
 800dc94:	eee6 7a86 	vfma.f32	s15, s13, s12
 800dc98:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc9c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800dca0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800dce0 <__ieee754_logf+0x1b8>
 800dca4:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800dca8:	4770      	bx	lr
 800dcaa:	ee70 7a67 	vsub.f32	s15, s0, s15
 800dcae:	ee67 7a86 	vmul.f32	s15, s15, s12
 800dcb2:	2a00      	cmp	r2, #0
 800dcb4:	d0e9      	beq.n	800dc8a <__ieee754_logf+0x162>
 800dcb6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800dcdc <__ieee754_logf+0x1b4>
 800dcba:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dcbe:	e7ed      	b.n	800dc9c <__ieee754_logf+0x174>
 800dcc0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800dccc <__ieee754_logf+0x1a4>
 800dcc4:	4770      	bx	lr
 800dcc6:	bf00      	nop
 800dcc8:	cc000000 	.word	0xcc000000
 800dccc:	00000000 	.word	0x00000000
 800dcd0:	4c000000 	.word	0x4c000000
 800dcd4:	004afb20 	.word	0x004afb20
 800dcd8:	007ffff0 	.word	0x007ffff0
 800dcdc:	3717f7d1 	.word	0x3717f7d1
 800dce0:	3f317180 	.word	0x3f317180
 800dce4:	3eaaaaab 	.word	0x3eaaaaab
 800dce8:	3e1cd04f 	.word	0x3e1cd04f
 800dcec:	3e178897 	.word	0x3e178897
 800dcf0:	ffcf5c30 	.word	0xffcf5c30
 800dcf4:	3e638e29 	.word	0x3e638e29
 800dcf8:	3ecccccd 	.word	0x3ecccccd
 800dcfc:	3e3a3325 	.word	0x3e3a3325
 800dd00:	3e924925 	.word	0x3e924925
 800dd04:	3f2aaaab 	.word	0x3f2aaaab

0800dd08 <__ieee754_powf>:
 800dd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd0c:	ee10 5a90 	vmov	r5, s1
 800dd10:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800dd14:	ed2d 8b02 	vpush	{d8}
 800dd18:	eeb0 8a40 	vmov.f32	s16, s0
 800dd1c:	eef0 8a60 	vmov.f32	s17, s1
 800dd20:	f000 8291 	beq.w	800e246 <__ieee754_powf+0x53e>
 800dd24:	ee10 8a10 	vmov	r8, s0
 800dd28:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800dd2c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800dd30:	dc06      	bgt.n	800dd40 <__ieee754_powf+0x38>
 800dd32:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800dd36:	dd0a      	ble.n	800dd4e <__ieee754_powf+0x46>
 800dd38:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800dd3c:	f000 8283 	beq.w	800e246 <__ieee754_powf+0x53e>
 800dd40:	ecbd 8b02 	vpop	{d8}
 800dd44:	48d8      	ldr	r0, [pc, #864]	; (800e0a8 <__ieee754_powf+0x3a0>)
 800dd46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd4a:	f000 bab5 	b.w	800e2b8 <nanf>
 800dd4e:	f1b8 0f00 	cmp.w	r8, #0
 800dd52:	da1f      	bge.n	800dd94 <__ieee754_powf+0x8c>
 800dd54:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800dd58:	da2e      	bge.n	800ddb8 <__ieee754_powf+0xb0>
 800dd5a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800dd5e:	f2c0 827b 	blt.w	800e258 <__ieee754_powf+0x550>
 800dd62:	15fb      	asrs	r3, r7, #23
 800dd64:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800dd68:	fa47 f603 	asr.w	r6, r7, r3
 800dd6c:	fa06 f303 	lsl.w	r3, r6, r3
 800dd70:	42bb      	cmp	r3, r7
 800dd72:	f040 8271 	bne.w	800e258 <__ieee754_powf+0x550>
 800dd76:	f006 0601 	and.w	r6, r6, #1
 800dd7a:	f1c6 0602 	rsb	r6, r6, #2
 800dd7e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800dd82:	d120      	bne.n	800ddc6 <__ieee754_powf+0xbe>
 800dd84:	2d00      	cmp	r5, #0
 800dd86:	f280 8264 	bge.w	800e252 <__ieee754_powf+0x54a>
 800dd8a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dd8e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800dd92:	e00d      	b.n	800ddb0 <__ieee754_powf+0xa8>
 800dd94:	2600      	movs	r6, #0
 800dd96:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800dd9a:	d1f0      	bne.n	800dd7e <__ieee754_powf+0x76>
 800dd9c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800dda0:	f000 8251 	beq.w	800e246 <__ieee754_powf+0x53e>
 800dda4:	dd0a      	ble.n	800ddbc <__ieee754_powf+0xb4>
 800dda6:	2d00      	cmp	r5, #0
 800dda8:	f280 8250 	bge.w	800e24c <__ieee754_powf+0x544>
 800ddac:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800e0ac <__ieee754_powf+0x3a4>
 800ddb0:	ecbd 8b02 	vpop	{d8}
 800ddb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddb8:	2602      	movs	r6, #2
 800ddba:	e7ec      	b.n	800dd96 <__ieee754_powf+0x8e>
 800ddbc:	2d00      	cmp	r5, #0
 800ddbe:	daf5      	bge.n	800ddac <__ieee754_powf+0xa4>
 800ddc0:	eeb1 0a68 	vneg.f32	s0, s17
 800ddc4:	e7f4      	b.n	800ddb0 <__ieee754_powf+0xa8>
 800ddc6:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800ddca:	d102      	bne.n	800ddd2 <__ieee754_powf+0xca>
 800ddcc:	ee28 0a08 	vmul.f32	s0, s16, s16
 800ddd0:	e7ee      	b.n	800ddb0 <__ieee754_powf+0xa8>
 800ddd2:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800ddd6:	eeb0 0a48 	vmov.f32	s0, s16
 800ddda:	d108      	bne.n	800ddee <__ieee754_powf+0xe6>
 800dddc:	f1b8 0f00 	cmp.w	r8, #0
 800dde0:	db05      	blt.n	800ddee <__ieee754_powf+0xe6>
 800dde2:	ecbd 8b02 	vpop	{d8}
 800dde6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddea:	f000 ba4d 	b.w	800e288 <__ieee754_sqrtf>
 800ddee:	f000 fa4e 	bl	800e28e <fabsf>
 800ddf2:	b124      	cbz	r4, 800ddfe <__ieee754_powf+0xf6>
 800ddf4:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800ddf8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800ddfc:	d117      	bne.n	800de2e <__ieee754_powf+0x126>
 800ddfe:	2d00      	cmp	r5, #0
 800de00:	bfbc      	itt	lt
 800de02:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800de06:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800de0a:	f1b8 0f00 	cmp.w	r8, #0
 800de0e:	dacf      	bge.n	800ddb0 <__ieee754_powf+0xa8>
 800de10:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800de14:	ea54 0306 	orrs.w	r3, r4, r6
 800de18:	d104      	bne.n	800de24 <__ieee754_powf+0x11c>
 800de1a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800de1e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800de22:	e7c5      	b.n	800ddb0 <__ieee754_powf+0xa8>
 800de24:	2e01      	cmp	r6, #1
 800de26:	d1c3      	bne.n	800ddb0 <__ieee754_powf+0xa8>
 800de28:	eeb1 0a40 	vneg.f32	s0, s0
 800de2c:	e7c0      	b.n	800ddb0 <__ieee754_powf+0xa8>
 800de2e:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800de32:	3801      	subs	r0, #1
 800de34:	ea56 0300 	orrs.w	r3, r6, r0
 800de38:	d104      	bne.n	800de44 <__ieee754_powf+0x13c>
 800de3a:	ee38 8a48 	vsub.f32	s16, s16, s16
 800de3e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800de42:	e7b5      	b.n	800ddb0 <__ieee754_powf+0xa8>
 800de44:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800de48:	dd6b      	ble.n	800df22 <__ieee754_powf+0x21a>
 800de4a:	4b99      	ldr	r3, [pc, #612]	; (800e0b0 <__ieee754_powf+0x3a8>)
 800de4c:	429c      	cmp	r4, r3
 800de4e:	dc06      	bgt.n	800de5e <__ieee754_powf+0x156>
 800de50:	2d00      	cmp	r5, #0
 800de52:	daab      	bge.n	800ddac <__ieee754_powf+0xa4>
 800de54:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800e0b4 <__ieee754_powf+0x3ac>
 800de58:	ee20 0a00 	vmul.f32	s0, s0, s0
 800de5c:	e7a8      	b.n	800ddb0 <__ieee754_powf+0xa8>
 800de5e:	4b96      	ldr	r3, [pc, #600]	; (800e0b8 <__ieee754_powf+0x3b0>)
 800de60:	429c      	cmp	r4, r3
 800de62:	dd02      	ble.n	800de6a <__ieee754_powf+0x162>
 800de64:	2d00      	cmp	r5, #0
 800de66:	dcf5      	bgt.n	800de54 <__ieee754_powf+0x14c>
 800de68:	e7a0      	b.n	800ddac <__ieee754_powf+0xa4>
 800de6a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800de6e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800de72:	eddf 6a92 	vldr	s13, [pc, #584]	; 800e0bc <__ieee754_powf+0x3b4>
 800de76:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800de7a:	eee0 6a67 	vfms.f32	s13, s0, s15
 800de7e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800de82:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800de86:	ee20 7a00 	vmul.f32	s14, s0, s0
 800de8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de8e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800e0c0 <__ieee754_powf+0x3b8>
 800de92:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800de96:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800e0c4 <__ieee754_powf+0x3bc>
 800de9a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800de9e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800e0c8 <__ieee754_powf+0x3c0>
 800dea2:	eef0 6a67 	vmov.f32	s13, s15
 800dea6:	eee0 6a07 	vfma.f32	s13, s0, s14
 800deaa:	ee16 3a90 	vmov	r3, s13
 800deae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800deb2:	f023 030f 	bic.w	r3, r3, #15
 800deb6:	ee00 3a90 	vmov	s1, r3
 800deba:	eee0 0a47 	vfms.f32	s1, s0, s14
 800debe:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800dec2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800dec6:	f025 050f 	bic.w	r5, r5, #15
 800deca:	ee07 5a10 	vmov	s14, r5
 800dece:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800ded2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800ded6:	ee07 3a90 	vmov	s15, r3
 800deda:	eee7 0a27 	vfma.f32	s1, s14, s15
 800dede:	3e01      	subs	r6, #1
 800dee0:	ea56 0200 	orrs.w	r2, r6, r0
 800dee4:	ee07 5a10 	vmov	s14, r5
 800dee8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800deec:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800def0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800def4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800def8:	ee17 4a10 	vmov	r4, s14
 800defc:	bf08      	it	eq
 800defe:	eeb0 8a40 	vmoveq.f32	s16, s0
 800df02:	2c00      	cmp	r4, #0
 800df04:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800df08:	f340 8184 	ble.w	800e214 <__ieee754_powf+0x50c>
 800df0c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800df10:	f340 80fc 	ble.w	800e10c <__ieee754_powf+0x404>
 800df14:	eddf 7a67 	vldr	s15, [pc, #412]	; 800e0b4 <__ieee754_powf+0x3ac>
 800df18:	ee28 0a27 	vmul.f32	s0, s16, s15
 800df1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800df20:	e746      	b.n	800ddb0 <__ieee754_powf+0xa8>
 800df22:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800df26:	bf01      	itttt	eq
 800df28:	eddf 7a68 	vldreq	s15, [pc, #416]	; 800e0cc <__ieee754_powf+0x3c4>
 800df2c:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800df30:	f06f 0217 	mvneq.w	r2, #23
 800df34:	ee17 4a90 	vmoveq	r4, s15
 800df38:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800df3c:	bf18      	it	ne
 800df3e:	2200      	movne	r2, #0
 800df40:	3b7f      	subs	r3, #127	; 0x7f
 800df42:	4413      	add	r3, r2
 800df44:	4a62      	ldr	r2, [pc, #392]	; (800e0d0 <__ieee754_powf+0x3c8>)
 800df46:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800df4a:	4294      	cmp	r4, r2
 800df4c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800df50:	dd06      	ble.n	800df60 <__ieee754_powf+0x258>
 800df52:	4a60      	ldr	r2, [pc, #384]	; (800e0d4 <__ieee754_powf+0x3cc>)
 800df54:	4294      	cmp	r4, r2
 800df56:	f340 80a4 	ble.w	800e0a2 <__ieee754_powf+0x39a>
 800df5a:	3301      	adds	r3, #1
 800df5c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800df60:	2400      	movs	r4, #0
 800df62:	4a5d      	ldr	r2, [pc, #372]	; (800e0d8 <__ieee754_powf+0x3d0>)
 800df64:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800df68:	ee07 1a90 	vmov	s15, r1
 800df6c:	ed92 7a00 	vldr	s14, [r2]
 800df70:	4a5a      	ldr	r2, [pc, #360]	; (800e0dc <__ieee754_powf+0x3d4>)
 800df72:	ee37 6a27 	vadd.f32	s12, s14, s15
 800df76:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800df7a:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800df7e:	1049      	asrs	r1, r1, #1
 800df80:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800df84:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800df88:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800df8c:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800df90:	ee06 1a10 	vmov	s12, r1
 800df94:	ee65 4a26 	vmul.f32	s9, s10, s13
 800df98:	ee36 7a47 	vsub.f32	s14, s12, s14
 800df9c:	ee14 7a90 	vmov	r7, s9
 800dfa0:	4017      	ands	r7, r2
 800dfa2:	ee05 7a90 	vmov	s11, r7
 800dfa6:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800dfaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dfae:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800e0e0 <__ieee754_powf+0x3d8>
 800dfb2:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800dfb6:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800dfba:	ee25 6a26 	vmul.f32	s12, s10, s13
 800dfbe:	eddf 6a49 	vldr	s13, [pc, #292]	; 800e0e4 <__ieee754_powf+0x3dc>
 800dfc2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800dfc6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800e0e8 <__ieee754_powf+0x3e0>
 800dfca:	eee7 6a27 	vfma.f32	s13, s14, s15
 800dfce:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800e0bc <__ieee754_powf+0x3b4>
 800dfd2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dfd6:	eddf 6a45 	vldr	s13, [pc, #276]	; 800e0ec <__ieee754_powf+0x3e4>
 800dfda:	eee7 6a27 	vfma.f32	s13, s14, s15
 800dfde:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800e0f0 <__ieee754_powf+0x3e8>
 800dfe2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dfe6:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800dfea:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800dfee:	ee66 6a86 	vmul.f32	s13, s13, s12
 800dff2:	eee5 6a07 	vfma.f32	s13, s10, s14
 800dff6:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800dffa:	eef0 7a45 	vmov.f32	s15, s10
 800dffe:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800e002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e006:	ee17 1a90 	vmov	r1, s15
 800e00a:	4011      	ands	r1, r2
 800e00c:	ee07 1a90 	vmov	s15, r1
 800e010:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800e014:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800e018:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e01c:	ee27 7a24 	vmul.f32	s14, s14, s9
 800e020:	eea6 7a27 	vfma.f32	s14, s12, s15
 800e024:	eeb0 6a47 	vmov.f32	s12, s14
 800e028:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800e02c:	ee16 1a10 	vmov	r1, s12
 800e030:	4011      	ands	r1, r2
 800e032:	ee06 1a90 	vmov	s13, r1
 800e036:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800e03a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800e0f4 <__ieee754_powf+0x3ec>
 800e03e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800e0f8 <__ieee754_powf+0x3f0>
 800e042:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e046:	ee06 1a10 	vmov	s12, r1
 800e04a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e04e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e0fc <__ieee754_powf+0x3f4>
 800e052:	492b      	ldr	r1, [pc, #172]	; (800e100 <__ieee754_powf+0x3f8>)
 800e054:	eea6 7a27 	vfma.f32	s14, s12, s15
 800e058:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e05c:	edd1 7a00 	vldr	s15, [r1]
 800e060:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e064:	ee07 3a90 	vmov	s15, r3
 800e068:	4b26      	ldr	r3, [pc, #152]	; (800e104 <__ieee754_powf+0x3fc>)
 800e06a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e06e:	eef0 7a47 	vmov.f32	s15, s14
 800e072:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e076:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e07a:	edd4 0a00 	vldr	s1, [r4]
 800e07e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e086:	ee17 3a90 	vmov	r3, s15
 800e08a:	4013      	ands	r3, r2
 800e08c:	ee07 3a90 	vmov	s15, r3
 800e090:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e094:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800e098:	eee6 6a65 	vfms.f32	s13, s12, s11
 800e09c:	ee77 7a66 	vsub.f32	s15, s14, s13
 800e0a0:	e70f      	b.n	800dec2 <__ieee754_powf+0x1ba>
 800e0a2:	2401      	movs	r4, #1
 800e0a4:	e75d      	b.n	800df62 <__ieee754_powf+0x25a>
 800e0a6:	bf00      	nop
 800e0a8:	0800e758 	.word	0x0800e758
 800e0ac:	00000000 	.word	0x00000000
 800e0b0:	3f7ffff7 	.word	0x3f7ffff7
 800e0b4:	7149f2ca 	.word	0x7149f2ca
 800e0b8:	3f800007 	.word	0x3f800007
 800e0bc:	3eaaaaab 	.word	0x3eaaaaab
 800e0c0:	3fb8aa3b 	.word	0x3fb8aa3b
 800e0c4:	36eca570 	.word	0x36eca570
 800e0c8:	3fb8aa00 	.word	0x3fb8aa00
 800e0cc:	4b800000 	.word	0x4b800000
 800e0d0:	001cc471 	.word	0x001cc471
 800e0d4:	005db3d6 	.word	0x005db3d6
 800e0d8:	0800e764 	.word	0x0800e764
 800e0dc:	fffff000 	.word	0xfffff000
 800e0e0:	3e6c3255 	.word	0x3e6c3255
 800e0e4:	3e53f142 	.word	0x3e53f142
 800e0e8:	3e8ba305 	.word	0x3e8ba305
 800e0ec:	3edb6db7 	.word	0x3edb6db7
 800e0f0:	3f19999a 	.word	0x3f19999a
 800e0f4:	3f76384f 	.word	0x3f76384f
 800e0f8:	3f763800 	.word	0x3f763800
 800e0fc:	369dc3a0 	.word	0x369dc3a0
 800e100:	0800e774 	.word	0x0800e774
 800e104:	0800e76c 	.word	0x0800e76c
 800e108:	3338aa3c 	.word	0x3338aa3c
 800e10c:	f040 8092 	bne.w	800e234 <__ieee754_powf+0x52c>
 800e110:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800e108 <__ieee754_powf+0x400>
 800e114:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e118:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800e11c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800e120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e124:	f73f aef6 	bgt.w	800df14 <__ieee754_powf+0x20c>
 800e128:	15db      	asrs	r3, r3, #23
 800e12a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800e12e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e132:	4103      	asrs	r3, r0
 800e134:	4423      	add	r3, r4
 800e136:	4949      	ldr	r1, [pc, #292]	; (800e25c <__ieee754_powf+0x554>)
 800e138:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e13c:	3a7f      	subs	r2, #127	; 0x7f
 800e13e:	4111      	asrs	r1, r2
 800e140:	ea23 0101 	bic.w	r1, r3, r1
 800e144:	ee07 1a10 	vmov	s14, r1
 800e148:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800e14c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800e150:	f1c2 0217 	rsb	r2, r2, #23
 800e154:	4110      	asrs	r0, r2
 800e156:	2c00      	cmp	r4, #0
 800e158:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e15c:	bfb8      	it	lt
 800e15e:	4240      	neglt	r0, r0
 800e160:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800e164:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800e260 <__ieee754_powf+0x558>
 800e168:	ee17 3a10 	vmov	r3, s14
 800e16c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e170:	f023 030f 	bic.w	r3, r3, #15
 800e174:	ee07 3a10 	vmov	s14, r3
 800e178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e17c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800e180:	eddf 7a38 	vldr	s15, [pc, #224]	; 800e264 <__ieee754_powf+0x55c>
 800e184:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e188:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800e18c:	eddf 6a36 	vldr	s13, [pc, #216]	; 800e268 <__ieee754_powf+0x560>
 800e190:	eeb0 0a67 	vmov.f32	s0, s15
 800e194:	eea7 0a26 	vfma.f32	s0, s14, s13
 800e198:	eeb0 6a40 	vmov.f32	s12, s0
 800e19c:	eea7 6a66 	vfms.f32	s12, s14, s13
 800e1a0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e1a4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e1a8:	eddf 6a30 	vldr	s13, [pc, #192]	; 800e26c <__ieee754_powf+0x564>
 800e1ac:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800e270 <__ieee754_powf+0x568>
 800e1b0:	eea7 6a26 	vfma.f32	s12, s14, s13
 800e1b4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800e274 <__ieee754_powf+0x56c>
 800e1b8:	eee6 6a07 	vfma.f32	s13, s12, s14
 800e1bc:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800e278 <__ieee754_powf+0x570>
 800e1c0:	eea6 6a87 	vfma.f32	s12, s13, s14
 800e1c4:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800e27c <__ieee754_powf+0x574>
 800e1c8:	eee6 6a07 	vfma.f32	s13, s12, s14
 800e1cc:	eeb0 6a40 	vmov.f32	s12, s0
 800e1d0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800e1d4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e1d8:	eeb0 7a46 	vmov.f32	s14, s12
 800e1dc:	ee77 6a66 	vsub.f32	s13, s14, s13
 800e1e0:	ee20 6a06 	vmul.f32	s12, s0, s12
 800e1e4:	eee0 7a27 	vfma.f32	s15, s0, s15
 800e1e8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800e1ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e1f0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e1f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e1f8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e1fc:	ee10 3a10 	vmov	r3, s0
 800e200:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800e204:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e208:	da1a      	bge.n	800e240 <__ieee754_powf+0x538>
 800e20a:	f000 f8b7 	bl	800e37c <scalbnf>
 800e20e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800e212:	e5cd      	b.n	800ddb0 <__ieee754_powf+0xa8>
 800e214:	4a1a      	ldr	r2, [pc, #104]	; (800e280 <__ieee754_powf+0x578>)
 800e216:	4293      	cmp	r3, r2
 800e218:	dd02      	ble.n	800e220 <__ieee754_powf+0x518>
 800e21a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800e284 <__ieee754_powf+0x57c>
 800e21e:	e67b      	b.n	800df18 <__ieee754_powf+0x210>
 800e220:	d108      	bne.n	800e234 <__ieee754_powf+0x52c>
 800e222:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e226:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800e22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e22e:	f6ff af7b 	blt.w	800e128 <__ieee754_powf+0x420>
 800e232:	e7f2      	b.n	800e21a <__ieee754_powf+0x512>
 800e234:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800e238:	f73f af76 	bgt.w	800e128 <__ieee754_powf+0x420>
 800e23c:	2000      	movs	r0, #0
 800e23e:	e78f      	b.n	800e160 <__ieee754_powf+0x458>
 800e240:	ee00 3a10 	vmov	s0, r3
 800e244:	e7e3      	b.n	800e20e <__ieee754_powf+0x506>
 800e246:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e24a:	e5b1      	b.n	800ddb0 <__ieee754_powf+0xa8>
 800e24c:	eeb0 0a68 	vmov.f32	s0, s17
 800e250:	e5ae      	b.n	800ddb0 <__ieee754_powf+0xa8>
 800e252:	eeb0 0a48 	vmov.f32	s0, s16
 800e256:	e5ab      	b.n	800ddb0 <__ieee754_powf+0xa8>
 800e258:	2600      	movs	r6, #0
 800e25a:	e590      	b.n	800dd7e <__ieee754_powf+0x76>
 800e25c:	007fffff 	.word	0x007fffff
 800e260:	3f317218 	.word	0x3f317218
 800e264:	35bfbe8c 	.word	0x35bfbe8c
 800e268:	3f317200 	.word	0x3f317200
 800e26c:	3331bb4c 	.word	0x3331bb4c
 800e270:	b5ddea0e 	.word	0xb5ddea0e
 800e274:	388ab355 	.word	0x388ab355
 800e278:	bb360b61 	.word	0xbb360b61
 800e27c:	3e2aaaab 	.word	0x3e2aaaab
 800e280:	43160000 	.word	0x43160000
 800e284:	0da24260 	.word	0x0da24260

0800e288 <__ieee754_sqrtf>:
 800e288:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e28c:	4770      	bx	lr

0800e28e <fabsf>:
 800e28e:	ee10 3a10 	vmov	r3, s0
 800e292:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e296:	ee00 3a10 	vmov	s0, r3
 800e29a:	4770      	bx	lr

0800e29c <finitef>:
 800e29c:	b082      	sub	sp, #8
 800e29e:	ed8d 0a01 	vstr	s0, [sp, #4]
 800e2a2:	9801      	ldr	r0, [sp, #4]
 800e2a4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e2a8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800e2ac:	bfac      	ite	ge
 800e2ae:	2000      	movge	r0, #0
 800e2b0:	2001      	movlt	r0, #1
 800e2b2:	b002      	add	sp, #8
 800e2b4:	4770      	bx	lr
	...

0800e2b8 <nanf>:
 800e2b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e2c0 <nanf+0x8>
 800e2bc:	4770      	bx	lr
 800e2be:	bf00      	nop
 800e2c0:	7fc00000 	.word	0x7fc00000

0800e2c4 <rintf>:
 800e2c4:	ee10 2a10 	vmov	r2, s0
 800e2c8:	b513      	push	{r0, r1, r4, lr}
 800e2ca:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e2ce:	397f      	subs	r1, #127	; 0x7f
 800e2d0:	2916      	cmp	r1, #22
 800e2d2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800e2d6:	dc47      	bgt.n	800e368 <rintf+0xa4>
 800e2d8:	b32b      	cbz	r3, 800e326 <rintf+0x62>
 800e2da:	2900      	cmp	r1, #0
 800e2dc:	ee10 3a10 	vmov	r3, s0
 800e2e0:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 800e2e4:	da21      	bge.n	800e32a <rintf+0x66>
 800e2e6:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800e2ea:	425b      	negs	r3, r3
 800e2ec:	4921      	ldr	r1, [pc, #132]	; (800e374 <rintf+0xb0>)
 800e2ee:	0a5b      	lsrs	r3, r3, #9
 800e2f0:	0d12      	lsrs	r2, r2, #20
 800e2f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e2f6:	0512      	lsls	r2, r2, #20
 800e2f8:	4313      	orrs	r3, r2
 800e2fa:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800e2fe:	ee07 3a90 	vmov	s15, r3
 800e302:	edd1 6a00 	vldr	s13, [r1]
 800e306:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800e30a:	ed8d 7a01 	vstr	s14, [sp, #4]
 800e30e:	eddd 7a01 	vldr	s15, [sp, #4]
 800e312:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e316:	ee17 3a90 	vmov	r3, s15
 800e31a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e31e:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800e322:	ee00 3a10 	vmov	s0, r3
 800e326:	b002      	add	sp, #8
 800e328:	bd10      	pop	{r4, pc}
 800e32a:	4a13      	ldr	r2, [pc, #76]	; (800e378 <rintf+0xb4>)
 800e32c:	410a      	asrs	r2, r1
 800e32e:	4213      	tst	r3, r2
 800e330:	d0f9      	beq.n	800e326 <rintf+0x62>
 800e332:	0854      	lsrs	r4, r2, #1
 800e334:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 800e338:	d006      	beq.n	800e348 <rintf+0x84>
 800e33a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e33e:	ea23 0304 	bic.w	r3, r3, r4
 800e342:	fa42 f101 	asr.w	r1, r2, r1
 800e346:	430b      	orrs	r3, r1
 800e348:	4a0a      	ldr	r2, [pc, #40]	; (800e374 <rintf+0xb0>)
 800e34a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800e34e:	ed90 7a00 	vldr	s14, [r0]
 800e352:	ee07 3a90 	vmov	s15, r3
 800e356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e35a:	edcd 7a01 	vstr	s15, [sp, #4]
 800e35e:	ed9d 0a01 	vldr	s0, [sp, #4]
 800e362:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e366:	e7de      	b.n	800e326 <rintf+0x62>
 800e368:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e36c:	d3db      	bcc.n	800e326 <rintf+0x62>
 800e36e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e372:	e7d8      	b.n	800e326 <rintf+0x62>
 800e374:	0800e77c 	.word	0x0800e77c
 800e378:	007fffff 	.word	0x007fffff

0800e37c <scalbnf>:
 800e37c:	ee10 3a10 	vmov	r3, s0
 800e380:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800e384:	d025      	beq.n	800e3d2 <scalbnf+0x56>
 800e386:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e38a:	d302      	bcc.n	800e392 <scalbnf+0x16>
 800e38c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e390:	4770      	bx	lr
 800e392:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800e396:	d122      	bne.n	800e3de <scalbnf+0x62>
 800e398:	4b2a      	ldr	r3, [pc, #168]	; (800e444 <scalbnf+0xc8>)
 800e39a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e448 <scalbnf+0xcc>
 800e39e:	4298      	cmp	r0, r3
 800e3a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e3a4:	db16      	blt.n	800e3d4 <scalbnf+0x58>
 800e3a6:	ee10 3a10 	vmov	r3, s0
 800e3aa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e3ae:	3a19      	subs	r2, #25
 800e3b0:	4402      	add	r2, r0
 800e3b2:	2afe      	cmp	r2, #254	; 0xfe
 800e3b4:	dd15      	ble.n	800e3e2 <scalbnf+0x66>
 800e3b6:	ee10 3a10 	vmov	r3, s0
 800e3ba:	eddf 7a24 	vldr	s15, [pc, #144]	; 800e44c <scalbnf+0xd0>
 800e3be:	eddf 6a24 	vldr	s13, [pc, #144]	; 800e450 <scalbnf+0xd4>
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	eeb0 7a67 	vmov.f32	s14, s15
 800e3c8:	bfb8      	it	lt
 800e3ca:	eef0 7a66 	vmovlt.f32	s15, s13
 800e3ce:	ee27 0a27 	vmul.f32	s0, s14, s15
 800e3d2:	4770      	bx	lr
 800e3d4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e454 <scalbnf+0xd8>
 800e3d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e3dc:	4770      	bx	lr
 800e3de:	0dd2      	lsrs	r2, r2, #23
 800e3e0:	e7e6      	b.n	800e3b0 <scalbnf+0x34>
 800e3e2:	2a00      	cmp	r2, #0
 800e3e4:	dd06      	ble.n	800e3f4 <scalbnf+0x78>
 800e3e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e3ea:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e3ee:	ee00 3a10 	vmov	s0, r3
 800e3f2:	4770      	bx	lr
 800e3f4:	f112 0f16 	cmn.w	r2, #22
 800e3f8:	da1a      	bge.n	800e430 <scalbnf+0xb4>
 800e3fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e3fe:	4298      	cmp	r0, r3
 800e400:	ee10 3a10 	vmov	r3, s0
 800e404:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e408:	dd0a      	ble.n	800e420 <scalbnf+0xa4>
 800e40a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800e44c <scalbnf+0xd0>
 800e40e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800e450 <scalbnf+0xd4>
 800e412:	eef0 7a40 	vmov.f32	s15, s0
 800e416:	2b00      	cmp	r3, #0
 800e418:	bf18      	it	ne
 800e41a:	eeb0 0a47 	vmovne.f32	s0, s14
 800e41e:	e7db      	b.n	800e3d8 <scalbnf+0x5c>
 800e420:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800e454 <scalbnf+0xd8>
 800e424:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800e458 <scalbnf+0xdc>
 800e428:	eef0 7a40 	vmov.f32	s15, s0
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	e7f3      	b.n	800e418 <scalbnf+0x9c>
 800e430:	3219      	adds	r2, #25
 800e432:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e436:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e43a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e45c <scalbnf+0xe0>
 800e43e:	ee07 3a10 	vmov	s14, r3
 800e442:	e7c4      	b.n	800e3ce <scalbnf+0x52>
 800e444:	ffff3cb0 	.word	0xffff3cb0
 800e448:	4c000000 	.word	0x4c000000
 800e44c:	7149f2ca 	.word	0x7149f2ca
 800e450:	f149f2ca 	.word	0xf149f2ca
 800e454:	0da24260 	.word	0x0da24260
 800e458:	8da24260 	.word	0x8da24260
 800e45c:	33000000 	.word	0x33000000

0800e460 <_init>:
 800e460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e462:	bf00      	nop
 800e464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e466:	bc08      	pop	{r3}
 800e468:	469e      	mov	lr, r3
 800e46a:	4770      	bx	lr

0800e46c <_fini>:
 800e46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e46e:	bf00      	nop
 800e470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e472:	bc08      	pop	{r3}
 800e474:	469e      	mov	lr, r3
 800e476:	4770      	bx	lr
