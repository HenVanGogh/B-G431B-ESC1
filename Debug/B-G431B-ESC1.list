
B-G431B-ESC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebf8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  0800edd0  0800edd0  0001edd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0dc  0800f0dc  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800f0dc  0800f0dc  0001f0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0e4  0800f0e4  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0e4  0800f0e4  0001f0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0e8  0800f0e8  0001f0e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800f0ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003870  200000ac  0800f198  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000391c  0800f198  0002391c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026c14  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047bc  00000000  00000000  00046cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c28  00000000  00000000  0004b4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a58  00000000  00000000  0004d0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023c99  00000000  00000000  0004eb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002136b  00000000  00000000  000727c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5c99  00000000  00000000  00093b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001797cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007db0  00000000  00000000  00179820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000ac 	.word	0x200000ac
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800edb8 	.word	0x0800edb8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000b0 	.word	0x200000b0
 8000214:	0800edb8 	.word	0x0800edb8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b96e 	b.w	8000ea8 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	4604      	mov	r4, r0
 8000bec:	468c      	mov	ip, r1
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f040 8083 	bne.w	8000cfa <__udivmoddi4+0x116>
 8000bf4:	428a      	cmp	r2, r1
 8000bf6:	4617      	mov	r7, r2
 8000bf8:	d947      	bls.n	8000c8a <__udivmoddi4+0xa6>
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	b142      	cbz	r2, 8000c12 <__udivmoddi4+0x2e>
 8000c00:	f1c2 0020 	rsb	r0, r2, #32
 8000c04:	fa24 f000 	lsr.w	r0, r4, r0
 8000c08:	4091      	lsls	r1, r2
 8000c0a:	4097      	lsls	r7, r2
 8000c0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000c10:	4094      	lsls	r4, r2
 8000c12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c16:	0c23      	lsrs	r3, r4, #16
 8000c18:	fbbc f6f8 	udiv	r6, ip, r8
 8000c1c:	fa1f fe87 	uxth.w	lr, r7
 8000c20:	fb08 c116 	mls	r1, r8, r6, ip
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb06 f10e 	mul.w	r1, r6, lr
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d909      	bls.n	8000c44 <__udivmoddi4+0x60>
 8000c30:	18fb      	adds	r3, r7, r3
 8000c32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c36:	f080 8119 	bcs.w	8000e6c <__udivmoddi4+0x288>
 8000c3a:	4299      	cmp	r1, r3
 8000c3c:	f240 8116 	bls.w	8000e6c <__udivmoddi4+0x288>
 8000c40:	3e02      	subs	r6, #2
 8000c42:	443b      	add	r3, r7
 8000c44:	1a5b      	subs	r3, r3, r1
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	45a6      	cmp	lr, r4
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x8c>
 8000c5c:	193c      	adds	r4, r7, r4
 8000c5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c62:	f080 8105 	bcs.w	8000e70 <__udivmoddi4+0x28c>
 8000c66:	45a6      	cmp	lr, r4
 8000c68:	f240 8102 	bls.w	8000e70 <__udivmoddi4+0x28c>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	443c      	add	r4, r7
 8000c70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c74:	eba4 040e 	sub.w	r4, r4, lr
 8000c78:	2600      	movs	r6, #0
 8000c7a:	b11d      	cbz	r5, 8000c84 <__udivmoddi4+0xa0>
 8000c7c:	40d4      	lsrs	r4, r2
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e9c5 4300 	strd	r4, r3, [r5]
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	b902      	cbnz	r2, 8000c8e <__udivmoddi4+0xaa>
 8000c8c:	deff      	udf	#255	; 0xff
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	2a00      	cmp	r2, #0
 8000c94:	d150      	bne.n	8000d38 <__udivmoddi4+0x154>
 8000c96:	1bcb      	subs	r3, r1, r7
 8000c98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c9c:	fa1f f887 	uxth.w	r8, r7
 8000ca0:	2601      	movs	r6, #1
 8000ca2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ca6:	0c21      	lsrs	r1, r4, #16
 8000ca8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb0:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	d907      	bls.n	8000cc8 <__udivmoddi4+0xe4>
 8000cb8:	1879      	adds	r1, r7, r1
 8000cba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0xe2>
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	f200 80e9 	bhi.w	8000e98 <__udivmoddi4+0x2b4>
 8000cc6:	4684      	mov	ip, r0
 8000cc8:	1ac9      	subs	r1, r1, r3
 8000cca:	b2a3      	uxth	r3, r4
 8000ccc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cd8:	fb08 f800 	mul.w	r8, r8, r0
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	d907      	bls.n	8000cf0 <__udivmoddi4+0x10c>
 8000ce0:	193c      	adds	r4, r7, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x10a>
 8000ce8:	45a0      	cmp	r8, r4
 8000cea:	f200 80d9 	bhi.w	8000ea0 <__udivmoddi4+0x2bc>
 8000cee:	4618      	mov	r0, r3
 8000cf0:	eba4 0408 	sub.w	r4, r4, r8
 8000cf4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf8:	e7bf      	b.n	8000c7a <__udivmoddi4+0x96>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d909      	bls.n	8000d12 <__udivmoddi4+0x12e>
 8000cfe:	2d00      	cmp	r5, #0
 8000d00:	f000 80b1 	beq.w	8000e66 <__udivmoddi4+0x282>
 8000d04:	2600      	movs	r6, #0
 8000d06:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	4631      	mov	r1, r6
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	fab3 f683 	clz	r6, r3
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d14a      	bne.n	8000db0 <__udivmoddi4+0x1cc>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d302      	bcc.n	8000d24 <__udivmoddi4+0x140>
 8000d1e:	4282      	cmp	r2, r0
 8000d20:	f200 80b8 	bhi.w	8000e94 <__udivmoddi4+0x2b0>
 8000d24:	1a84      	subs	r4, r0, r2
 8000d26:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2d00      	cmp	r5, #0
 8000d30:	d0a8      	beq.n	8000c84 <__udivmoddi4+0xa0>
 8000d32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0xa0>
 8000d38:	f1c2 0320 	rsb	r3, r2, #32
 8000d3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000d40:	4097      	lsls	r7, r2
 8000d42:	fa01 f002 	lsl.w	r0, r1, r2
 8000d46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4a:	40d9      	lsrs	r1, r3
 8000d4c:	4330      	orrs	r0, r6
 8000d4e:	0c03      	lsrs	r3, r0, #16
 8000d50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d54:	fa1f f887 	uxth.w	r8, r7
 8000d58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d60:	fb06 f108 	mul.w	r1, r6, r8
 8000d64:	4299      	cmp	r1, r3
 8000d66:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6a:	d909      	bls.n	8000d80 <__udivmoddi4+0x19c>
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d72:	f080 808d 	bcs.w	8000e90 <__udivmoddi4+0x2ac>
 8000d76:	4299      	cmp	r1, r3
 8000d78:	f240 808a 	bls.w	8000e90 <__udivmoddi4+0x2ac>
 8000d7c:	3e02      	subs	r6, #2
 8000d7e:	443b      	add	r3, r7
 8000d80:	1a5b      	subs	r3, r3, r1
 8000d82:	b281      	uxth	r1, r0
 8000d84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d90:	fb00 f308 	mul.w	r3, r0, r8
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0x1c4>
 8000d98:	1879      	adds	r1, r7, r1
 8000d9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d9e:	d273      	bcs.n	8000e88 <__udivmoddi4+0x2a4>
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d971      	bls.n	8000e88 <__udivmoddi4+0x2a4>
 8000da4:	3802      	subs	r0, #2
 8000da6:	4439      	add	r1, r7
 8000da8:	1acb      	subs	r3, r1, r3
 8000daa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dae:	e778      	b.n	8000ca2 <__udivmoddi4+0xbe>
 8000db0:	f1c6 0c20 	rsb	ip, r6, #32
 8000db4:	fa03 f406 	lsl.w	r4, r3, r6
 8000db8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dbc:	431c      	orrs	r4, r3
 8000dbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000dc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	0c3b      	lsrs	r3, r7, #16
 8000dd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dd6:	fa1f f884 	uxth.w	r8, r4
 8000dda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de2:	fb09 fa08 	mul.w	sl, r9, r8
 8000de6:	458a      	cmp	sl, r1
 8000de8:	fa02 f206 	lsl.w	r2, r2, r6
 8000dec:	fa00 f306 	lsl.w	r3, r0, r6
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x220>
 8000df2:	1861      	adds	r1, r4, r1
 8000df4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df8:	d248      	bcs.n	8000e8c <__udivmoddi4+0x2a8>
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	d946      	bls.n	8000e8c <__udivmoddi4+0x2a8>
 8000dfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000e02:	4421      	add	r1, r4
 8000e04:	eba1 010a 	sub.w	r1, r1, sl
 8000e08:	b2bf      	uxth	r7, r7
 8000e0a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e0e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e12:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e16:	fb00 f808 	mul.w	r8, r0, r8
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x24a>
 8000e1e:	19e7      	adds	r7, r4, r7
 8000e20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e24:	d22e      	bcs.n	8000e84 <__udivmoddi4+0x2a0>
 8000e26:	45b8      	cmp	r8, r7
 8000e28:	d92c      	bls.n	8000e84 <__udivmoddi4+0x2a0>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	4427      	add	r7, r4
 8000e2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e32:	eba7 0708 	sub.w	r7, r7, r8
 8000e36:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3a:	454f      	cmp	r7, r9
 8000e3c:	46c6      	mov	lr, r8
 8000e3e:	4649      	mov	r1, r9
 8000e40:	d31a      	bcc.n	8000e78 <__udivmoddi4+0x294>
 8000e42:	d017      	beq.n	8000e74 <__udivmoddi4+0x290>
 8000e44:	b15d      	cbz	r5, 8000e5e <__udivmoddi4+0x27a>
 8000e46:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4a:	eb67 0701 	sbc.w	r7, r7, r1
 8000e4e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e52:	40f2      	lsrs	r2, r6
 8000e54:	ea4c 0202 	orr.w	r2, ip, r2
 8000e58:	40f7      	lsrs	r7, r6
 8000e5a:	e9c5 2700 	strd	r2, r7, [r5]
 8000e5e:	2600      	movs	r6, #0
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	462e      	mov	r6, r5
 8000e68:	4628      	mov	r0, r5
 8000e6a:	e70b      	b.n	8000c84 <__udivmoddi4+0xa0>
 8000e6c:	4606      	mov	r6, r0
 8000e6e:	e6e9      	b.n	8000c44 <__udivmoddi4+0x60>
 8000e70:	4618      	mov	r0, r3
 8000e72:	e6fd      	b.n	8000c70 <__udivmoddi4+0x8c>
 8000e74:	4543      	cmp	r3, r8
 8000e76:	d2e5      	bcs.n	8000e44 <__udivmoddi4+0x260>
 8000e78:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e7c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e80:	3801      	subs	r0, #1
 8000e82:	e7df      	b.n	8000e44 <__udivmoddi4+0x260>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e7d2      	b.n	8000e2e <__udivmoddi4+0x24a>
 8000e88:	4660      	mov	r0, ip
 8000e8a:	e78d      	b.n	8000da8 <__udivmoddi4+0x1c4>
 8000e8c:	4681      	mov	r9, r0
 8000e8e:	e7b9      	b.n	8000e04 <__udivmoddi4+0x220>
 8000e90:	4666      	mov	r6, ip
 8000e92:	e775      	b.n	8000d80 <__udivmoddi4+0x19c>
 8000e94:	4630      	mov	r0, r6
 8000e96:	e74a      	b.n	8000d2e <__udivmoddi4+0x14a>
 8000e98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e9c:	4439      	add	r1, r7
 8000e9e:	e713      	b.n	8000cc8 <__udivmoddi4+0xe4>
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	443c      	add	r4, r7
 8000ea4:	e724      	b.n	8000cf0 <__udivmoddi4+0x10c>
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <factory_reset_eeprom_regs>:
#include <string.h>

uint8_t regs[REG_MAX];

void factory_reset_eeprom_regs()
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	regs[REG_MODEL_NUMBER_L] = LOW_BYTE(REG_MODEL_NUMBER_VALUE);
 8000eb0:	4b86      	ldr	r3, [pc, #536]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000eb2:	225c      	movs	r2, #92	; 0x5c
 8000eb4:	701a      	strb	r2, [r3, #0]
	regs[REG_MODEL_NUMBER_H] = HIGH_BYTE(REG_MODEL_NUMBER_VALUE);
 8000eb6:	4b85      	ldr	r3, [pc, #532]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	705a      	strb	r2, [r3, #1]
	regs[REG_VERSION] = REG_VERSION_VALUE;
 8000ebc:	4b83      	ldr	r3, [pc, #524]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	709a      	strb	r2, [r3, #2]
	regs[REG_ID] = REG_ID_VALUE;
 8000ec2:	4b82      	ldr	r3, [pc, #520]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	70da      	strb	r2, [r3, #3]
	regs[REG_BAUD_RATE] = REG_BAUD_RATE_VALUE;
 8000ec8:	4b80      	ldr	r3, [pc, #512]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000eca:	2203      	movs	r2, #3
 8000ecc:	711a      	strb	r2, [r3, #4]
	regs[REG_RETURN_DELAY] = REG_RETURN_DELAY_VALUE;
 8000ece:	4b7f      	ldr	r3, [pc, #508]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	715a      	strb	r2, [r3, #5]

	regs[REG_MIN_POSITION_DEG_L] = LOW_BYTE(REG_MIN_POSITION_DEG_VALUE);
 8000ed4:	4b7d      	ldr	r3, [pc, #500]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	741a      	strb	r2, [r3, #16]
	regs[REG_MIN_POSITION_DEG_H] = HIGH_BYTE(REG_MIN_POSITION_DEG_VALUE);
 8000eda:	4b7c      	ldr	r3, [pc, #496]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	745a      	strb	r2, [r3, #17]
	regs[REG_MAX_POSITION_DEG_L] = LOW_BYTE(REG_MAX_POSITION_DEG_VALUE);
 8000ee0:	4b7a      	ldr	r3, [pc, #488]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000ee2:	22e8      	movs	r2, #232	; 0xe8
 8000ee4:	749a      	strb	r2, [r3, #18]
	regs[REG_MAX_POSITION_DEG_H] = HIGH_BYTE(REG_MAX_POSITION_DEG_VALUE);
 8000ee6:	4b79      	ldr	r3, [pc, #484]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000ee8:	2203      	movs	r2, #3
 8000eea:	74da      	strb	r2, [r3, #19]
	regs[REG_MAX_VELOCITY_DPS_L] = LOW_BYTE(REG_MAX_VELOCITY_DPS_VALUE);
 8000eec:	4b77      	ldr	r3, [pc, #476]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000eee:	2210      	movs	r2, #16
 8000ef0:	751a      	strb	r2, [r3, #20]
	regs[REG_MAX_VELOCITY_DPS_H] = HIGH_BYTE(REG_MAX_VELOCITY_DPS_VALUE);
 8000ef2:	4b76      	ldr	r3, [pc, #472]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000ef4:	2227      	movs	r2, #39	; 0x27
 8000ef6:	755a      	strb	r2, [r3, #21]
	regs[REG_MAX_ACCELERATION_DPSS_L] = LOW_BYTE(REG_MAX_ACCELERATION_DPSS_VALUE);
 8000ef8:	4b74      	ldr	r3, [pc, #464]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	759a      	strb	r2, [r3, #22]
	regs[REG_MAX_ACCELERATION_DPSS_H] = HIGH_BYTE(REG_MAX_ACCELERATION_DPSS_VALUE);
 8000efe:	4b73      	ldr	r3, [pc, #460]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f00:	227d      	movs	r2, #125	; 0x7d
 8000f02:	75da      	strb	r2, [r3, #23]
	regs[REG_MAX_CURRENT_MA_L] = LOW_BYTE(REG_MAX_CURRENT_MA_VALUE);
 8000f04:	4b71      	ldr	r3, [pc, #452]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f06:	22ac      	movs	r2, #172	; 0xac
 8000f08:	761a      	strb	r2, [r3, #24]
	regs[REG_MAX_CURRENT_MA_H] = HIGH_BYTE(REG_MAX_CURRENT_MA_VALUE);
 8000f0a:	4b70      	ldr	r3, [pc, #448]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f0c:	220d      	movs	r2, #13
 8000f0e:	765a      	strb	r2, [r3, #25]
	regs[REG_TEMPERATURE_LIMIT] = REG_TEMPERATURE_LIMIT_VALUE;
 8000f10:	4b6e      	ldr	r3, [pc, #440]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f12:	223c      	movs	r2, #60	; 0x3c
 8000f14:	771a      	strb	r2, [r3, #28]
	regs[REG_LOW_VOLTAGE_LIMIT] = REG_LOW_VOLTAGE_LIMIT_VALUE;
 8000f16:	4b6d      	ldr	r3, [pc, #436]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f18:	2206      	movs	r2, #6
 8000f1a:	775a      	strb	r2, [r3, #29]
	regs[REG_HIGH_VOLTAGE_LIMIT] = REG_HIGH_VOLTAGE_LIMIT_VALUE;
 8000f1c:	4b6b      	ldr	r3, [pc, #428]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f1e:	221c      	movs	r2, #28
 8000f20:	779a      	strb	r2, [r3, #30]

	regs[REG_MOVING_THRESHOLD_DPS] = REG_MOVING_THRESHOLD_DPS_VALUE;
 8000f22:	4b6a      	ldr	r3, [pc, #424]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f24:	2205      	movs	r2, #5
 8000f26:	77da      	strb	r2, [r3, #31]
	regs[REG_STATUS_RETURN_LVL] = REG_STATUS_RETURN_LVL_VALUE;
 8000f28:	4b68      	ldr	r3, [pc, #416]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	f883 2020 	strb.w	r2, [r3, #32]
	regs[REG_ALARM_LED] = REG_ALARM_LED_VALUE;
 8000f30:	4b66      	ldr	r3, [pc, #408]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f32:	2224      	movs	r2, #36	; 0x24
 8000f34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	regs[REG_ALARM_SHUTDOWN] = REG_ALARM_SHUTDOWN_VALUE;
 8000f38:	4b64      	ldr	r3, [pc, #400]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f3a:	2224      	movs	r2, #36	; 0x24
 8000f3c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	regs[REG_ENCODER_BITS] = REG_ENCODER_BITS_VALUE;
 8000f40:	4b62      	ldr	r3, [pc, #392]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f42:	220e      	movs	r2, #14
 8000f44:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	regs[REG_MOTOR_POLE_PAIRS] = REG_MOTOR_POLE_PAIRS_VALUE;
 8000f48:	4b60      	ldr	r3, [pc, #384]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f4a:	220e      	movs	r2, #14
 8000f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	regs[REG_MOTOR_SYNCHRO_L] = LOW_BYTE(REG_MOTOR_SYNCHRO_VALUE);
 8000f50:	4b5e      	ldr	r3, [pc, #376]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f52:	2225      	movs	r2, #37	; 0x25
 8000f54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	regs[REG_MOTOR_SYNCHRO_H] = HIGH_BYTE(REG_MOTOR_SYNCHRO_VALUE);
 8000f58:	4b5c      	ldr	r3, [pc, #368]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	regs[REG_INV_PHASE_MOTOR] = REG_INV_PHASE_VALUE;
 8000f60:	4b5a      	ldr	r3, [pc, #360]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	regs[REG_PID_POSITION_KP_L] = LOW_BYTE(REG_PID_POSITION_KP_VALUE);
 8000f68:	4b58      	ldr	r3, [pc, #352]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f6a:	221e      	movs	r2, #30
 8000f6c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	regs[REG_PID_POSITION_KP_H] = HIGH_BYTE(REG_PID_POSITION_KP_VALUE);
 8000f70:	4b56      	ldr	r3, [pc, #344]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	regs[REG_PID_POSITION_KI_L] = LOW_BYTE(REG_PID_POSITION_KI_VALUE);
 8000f78:	4b54      	ldr	r3, [pc, #336]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	regs[REG_PID_POSITION_KI_H] = HIGH_BYTE(REG_PID_POSITION_KI_VALUE);
 8000f80:	4b52      	ldr	r3, [pc, #328]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	regs[REG_PID_POSITION_KD_L] = LOW_BYTE(REG_PID_POSITION_KD_VALUE);
 8000f88:	4b50      	ldr	r3, [pc, #320]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f8a:	2214      	movs	r2, #20
 8000f8c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	regs[REG_PID_POSITION_KD_H] = HIGH_BYTE(REG_PID_POSITION_KD_VALUE);
 8000f90:	4b4e      	ldr	r3, [pc, #312]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	regs[REG_PID_VELOCITY_KP_L] = LOW_BYTE(REG_PID_VELOCITY_KP_VALUE);
 8000f98:	4b4c      	ldr	r3, [pc, #304]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000f9a:	2220      	movs	r2, #32
 8000f9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	regs[REG_PID_VELOCITY_KP_H] = HIGH_BYTE(REG_PID_VELOCITY_KP_VALUE);
 8000fa0:	4b4a      	ldr	r3, [pc, #296]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	regs[REG_PID_VELOCITY_KI_L] = LOW_BYTE(REG_PID_VELOCITY_KI_VALUE);
 8000fa8:	4b48      	ldr	r3, [pc, #288]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	regs[REG_PID_VELOCITY_KI_H] = HIGH_BYTE(REG_PID_VELOCITY_KI_VALUE);
 8000fb0:	4b46      	ldr	r3, [pc, #280]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	regs[REG_PID_VELOCITY_KD_L] = LOW_BYTE(REG_PID_VELOCITY_KD_VALUE);
 8000fb8:	4b44      	ldr	r3, [pc, #272]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000fba:	220a      	movs	r2, #10
 8000fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	regs[REG_PID_VELOCITY_KD_H] = HIGH_BYTE(REG_PID_VELOCITY_KD_VALUE);
 8000fc0:	4b42      	ldr	r3, [pc, #264]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	regs[REG_PID_VELOCITY_KFF_L] = LOW_BYTE(REG_PID_VELOCITY_KFF_VALUE);
 8000fc8:	4b40      	ldr	r3, [pc, #256]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000fca:	2264      	movs	r2, #100	; 0x64
 8000fcc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	regs[REG_PID_VELOCITY_KFF_H] = HIGH_BYTE(REG_PID_VELOCITY_KFF_VALUE);
 8000fd0:	4b3e      	ldr	r3, [pc, #248]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	regs[REG_PID_ACCELERATION_KFF_L] = LOW_BYTE(REG_PID_ACCELERATION_KFF_VALUE);
 8000fd8:	4b3c      	ldr	r3, [pc, #240]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	regs[REG_PID_ACCELERATION_KFF_H] = HIGH_BYTE(REG_PID_ACCELERATION_KFF_VALUE);
 8000fe0:	4b3a      	ldr	r3, [pc, #232]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	regs[REG_PID_FLUX_CURRENT_KP_L] = LOW_BYTE(REG_PID_FLUX_CURRENT_KP_VALUE);
 8000fe8:	4b38      	ldr	r3, [pc, #224]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000fea:	22b8      	movs	r2, #184	; 0xb8
 8000fec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	regs[REG_PID_FLUX_CURRENT_KP_H] = HIGH_BYTE(REG_PID_FLUX_CURRENT_KP_VALUE);
 8000ff0:	4b36      	ldr	r3, [pc, #216]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000ff2:	220b      	movs	r2, #11
 8000ff4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	regs[REG_PID_FLUX_CURRENT_KI_L] = LOW_BYTE(REG_PID_FLUX_CURRENT_KI_VALUE);
 8000ff8:	4b34      	ldr	r3, [pc, #208]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	regs[REG_PID_FLUX_CURRENT_KI_H] = HIGH_BYTE(REG_PID_FLUX_CURRENT_KI_VALUE);
 8001000:	4b32      	ldr	r3, [pc, #200]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8001002:	2200      	movs	r2, #0
 8001004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	regs[REG_PID_FLUX_CURRENT_KFF_L] = LOW_BYTE(REG_PID_FLUX_CURRENT_KFF_VALUE);
 8001008:	4b30      	ldr	r3, [pc, #192]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 800100a:	2200      	movs	r2, #0
 800100c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	regs[REG_PID_FLUX_CURRENT_KFF_H] = HIGH_BYTE(REG_PID_FLUX_CURRENT_KFF_VALUE);
 8001010:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8001012:	2200      	movs	r2, #0
 8001014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	regs[REG_PID_TORQUE_CURRENT_KP_L] = LOW_BYTE(REG_PID_TORQUE_CURRENT_KP_VALUE);
 8001018:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 800101a:	22b8      	movs	r2, #184	; 0xb8
 800101c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	regs[REG_PID_TORQUE_CURRENT_KP_H] = HIGH_BYTE(REG_PID_TORQUE_CURRENT_KP_VALUE);
 8001020:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8001022:	220b      	movs	r2, #11
 8001024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	regs[REG_PID_TORQUE_CURRENT_KI_L] = LOW_BYTE(REG_PID_TORQUE_CURRENT_KI_VALUE);
 8001028:	4b28      	ldr	r3, [pc, #160]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	regs[REG_PID_TORQUE_CURRENT_KI_H] = HIGH_BYTE(REG_PID_TORQUE_CURRENT_KI_VALUE);
 8001030:	4b26      	ldr	r3, [pc, #152]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	regs[REG_PID_TORQUE_CURRENT_KFF_L] = LOW_BYTE(REG_PID_TORQUE_CURRENT_KFF_VALUE);
 8001038:	4b24      	ldr	r3, [pc, #144]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	regs[REG_PID_TORQUE_CURRENT_KFF_H] = HIGH_BYTE(REG_PID_TORQUE_CURRENT_KFF_VALUE);
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	regs[REG_CAL_PHASE1_CURRENT_SENSE_MA_L] = LOW_BYTE(REG_CAL_PHASE1_CURRENT_SENSE_MA_VALUE);
 8001048:	4b20      	ldr	r3, [pc, #128]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 800104a:	2218      	movs	r2, #24
 800104c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	regs[REG_CAL_PHASE1_CURRENT_SENSE_MA_H] = HIGH_BYTE(REG_CAL_PHASE1_CURRENT_SENSE_MA_VALUE);
 8001050:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8001052:	2201      	movs	r2, #1
 8001054:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	regs[REG_CAL_PHASE1_CURRENT_SENSE_OFFSET_L] = LOW_BYTE(REG_CAL_PHASE1_CURRENT_SENSE_OFFSET_VALUE);
 8001058:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 800105a:	22a0      	movs	r2, #160	; 0xa0
 800105c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	regs[REG_CAL_PHASE1_CURRENT_SENSE_OFFSET_H] = HIGH_BYTE(REG_CAL_PHASE1_CURRENT_SENSE_OFFSET_VALUE);
 8001060:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8001062:	2209      	movs	r2, #9
 8001064:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	regs[REG_CAL_PHASE2_CURRENT_SENSE_MA_L] = LOW_BYTE(REG_CAL_PHASE2_CURRENT_SENSE_MA_VALUE);
 8001068:	4b18      	ldr	r3, [pc, #96]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 800106a:	2218      	movs	r2, #24
 800106c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	regs[REG_CAL_PHASE2_CURRENT_SENSE_MA_H] = HIGH_BYTE(REG_CAL_PHASE2_CURRENT_SENSE_MA_VALUE);
 8001070:	4b16      	ldr	r3, [pc, #88]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8001072:	2201      	movs	r2, #1
 8001074:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	regs[REG_CAL_PHASE2_CURRENT_SENSE_OFFSET_L] = LOW_BYTE(REG_CAL_PHASE2_CURRENT_SENSE_OFFSET_VALUE);
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 800107a:	22b2      	movs	r2, #178	; 0xb2
 800107c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	regs[REG_CAL_PHASE2_CURRENT_SENSE_OFFSET_H] = HIGH_BYTE(REG_CAL_PHASE2_CURRENT_SENSE_OFFSET_VALUE);
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8001082:	2209      	movs	r2, #9
 8001084:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	regs[REG_CAL_PHASE3_CURRENT_SENSE_MA_L] = LOW_BYTE(REG_CAL_PHASE3_CURRENT_SENSE_MA_VALUE);
 8001088:	4b10      	ldr	r3, [pc, #64]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 800108a:	2218      	movs	r2, #24
 800108c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	regs[REG_CAL_PHASE3_CURRENT_SENSE_MA_H] = HIGH_BYTE(REG_CAL_PHASE3_CURRENT_SENSE_MA_VALUE);
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 8001092:	2201      	movs	r2, #1
 8001094:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	regs[REG_CAL_PHASE3_CURRENT_SENSE_OFFSET_L] = LOW_BYTE(REG_CAL_PHASE3_CURRENT_SENSE_OFFSET_VALUE);
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 800109a:	22b5      	movs	r2, #181	; 0xb5
 800109c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	regs[REG_CAL_PHASE3_CURRENT_SENSE_OFFSET_H] = HIGH_BYTE(REG_CAL_PHASE3_CURRENT_SENSE_OFFSET_VALUE);
 80010a0:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 80010a2:	2209      	movs	r2, #9
 80010a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	regs[REG_CAL_VOLTAGE_SENSOR_L] = LOW_BYTE(REG_CAL_VOLTAGE_SENSOR_VALUE);
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 80010aa:	22e8      	movs	r2, #232	; 0xe8
 80010ac:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	regs[REG_CAL_VOLTAGE_SENSOR_H] = HIGH_BYTE(REG_CAL_VOLTAGE_SENSOR_VALUE);
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 80010b2:	2203      	movs	r2, #3
 80010b4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	regs[REG_EWMA_ENCODER] = REG_EWMA_ENCODER_VALUE;
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 80010ba:	22ff      	movs	r2, #255	; 0xff
 80010bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	eeprom_store(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 80010c0:	2180      	movs	r1, #128	; 0x80
 80010c2:	4802      	ldr	r0, [pc, #8]	; (80010cc <factory_reset_eeprom_regs+0x220>)
 80010c4:	f000 f854 	bl	8001170 <eeprom_store>
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	2000021c 	.word	0x2000021c

080010d0 <load_eeprom_regs>:


void load_eeprom_regs()
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	eeprom_restore(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 80010d4:	2180      	movs	r1, #128	; 0x80
 80010d6:	4802      	ldr	r0, [pc, #8]	; (80010e0 <load_eeprom_regs+0x10>)
 80010d8:	f000 f836 	bl	8001148 <eeprom_restore>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000021c 	.word	0x2000021c

080010e4 <store_eeprom_regs>:

void store_eeprom_regs()
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	eeprom_store(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 80010e8:	2180      	movs	r1, #128	; 0x80
 80010ea:	4802      	ldr	r0, [pc, #8]	; (80010f4 <store_eeprom_regs+0x10>)
 80010ec:	f000 f840 	bl	8001170 <eeprom_store>
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	2000021c 	.word	0x2000021c

080010f8 <reset_ram_regs>:

void reset_ram_regs()
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	memset(&regs[REG_TORQUE_ENABLE],0,REG_MAX-REG_TORQUE_ENABLE);
 80010fc:	2232      	movs	r2, #50	; 0x32
 80010fe:	2100      	movs	r1, #0
 8001100:	4806      	ldr	r0, [pc, #24]	; (800111c <reset_ram_regs+0x24>)
 8001102:	f00c ff9b 	bl	800e03c <memset>
	regs[REG_CONTROL_MODE] = REG_CONTROL_MODE_TORQUE;		// REG_CONTROL_MODE_TORQUE
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <reset_ram_regs+0x28>)
 8001108:	2203      	movs	r2, #3
 800110a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	regs[REG_GOAL_CLOSED_LOOP] = 1;		// CLOSED LOOP
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <reset_ram_regs+0x28>)
 8001110:	2201      	movs	r2, #1
 8001112:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000029c 	.word	0x2000029c
 8001120:	2000021c 	.word	0x2000021c

08001124 <eeprom_empty>:
{
	return (uint8_t*)start_address;
}

bool eeprom_empty()
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
	return *(uint32_t*)(start_address)==0xFFFFFFFF;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <eeprom_empty+0x20>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001130:	bf0c      	ite	eq
 8001132:	2301      	moveq	r3, #1
 8001134:	2300      	movne	r3, #0
 8001136:	b2db      	uxtb	r3, r3
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	0801f800 	.word	0x0801f800

08001148 <eeprom_restore>:

HAL_StatusTypeDef eeprom_restore(uint8_t * regs, uint32_t size)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	memcpy(regs,(uint8_t const*)start_address,size);
 8001152:	4b05      	ldr	r3, [pc, #20]	; (8001168 <eeprom_restore+0x20>)
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	4619      	mov	r1, r3
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f00c ff61 	bl	800e020 <memcpy>
	return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	0801f800 	.word	0x0801f800
 800116c:	00000000 	.word	0x00000000

08001170 <eeprom_store>:

HAL_StatusTypeDef eeprom_store(uint8_t const * regs, uint32_t size)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	; 0x30
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 800117a:	f007 ff9b 	bl	80090b4 <HAL_FLASH_Unlock>
	// erase the last page of bank1 (STM32G43x : 1 bank, 64 pages, 2kB per page, 64-bit data)
	{
		FLASH_EraseInitTypeDef erase =
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	2301      	movs	r3, #1
 8001184:	61bb      	str	r3, [r7, #24]
 8001186:	233f      	movs	r3, #63	; 0x3f
 8001188:	61fb      	str	r3, [r7, #28]
 800118a:	2301      	movs	r3, #1
 800118c:	623b      	str	r3, [r7, #32]
				FLASH_TYPEERASE_PAGES,
				FLASH_BANK_1,
				page_nb,
				1
			};
		uint32_t page_error = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
		HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&erase, &page_error);
 8001192:	f107 0210 	add.w	r2, r7, #16
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f008 f881 	bl	80092a4 <HAL_FLASHEx_Erase>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		if(result!=HAL_OK)
 80011a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d004      	beq.n	80011ba <eeprom_store+0x4a>
		{
			HAL_FLASH_Lock();
 80011b0:	f007 ffa2 	bl	80090f8 <HAL_FLASH_Lock>
			return result;
 80011b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80011b8:	e039      	b.n	800122e <eeprom_store+0xbe>
		}
	}
	// write the last page
	{
		uint64_t data = 0xDEADBEEF;
 80011ba:	a320      	add	r3, pc, #128	; (adr r3, 800123c <eeprom_store+0xcc>)
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	e9c7 2302 	strd	r2, r3, [r7, #8]
		for(uint32_t index=0; index<size;index+=sizeof(uint64_t)) // 64 bits
 80011c4:	2300      	movs	r3, #0
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011c8:	e02a      	b.n	8001220 <eeprom_store+0xb0>
		{
			memcpy(&data,regs+index,sizeof(uint64_t));
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ce:	18d1      	adds	r1, r2, r3
 80011d0:	f107 0308 	add.w	r3, r7, #8
 80011d4:	2208      	movs	r2, #8
 80011d6:	4618      	mov	r0, r3
 80011d8:	f00c ff22 	bl	800e020 <memcpy>
			HAL_StatusTypeDef result = HAL_FLASH_Program(
 80011dc:	4a16      	ldr	r2, [pc, #88]	; (8001238 <eeprom_store+0xc8>)
 80011de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e0:	18d1      	adds	r1, r2, r3
 80011e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011e6:	2000      	movs	r0, #0
 80011e8:	f007 ff0e 	bl	8009008 <HAL_FLASH_Program>
 80011ec:	4603      	mov	r3, r0
 80011ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
					FLASH_TYPEPROGRAM_DOUBLEWORD,
					start_address+index,
					data
				);
			if(result!=HAL_OK)
 80011f2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00f      	beq.n	800121a <eeprom_store+0xaa>
			{
				uint32_t error = HAL_FLASH_GetError();
 80011fa:	f007 ff97 	bl	800912c <HAL_FLASH_GetError>
 80011fe:	6278      	str	r0, [r7, #36]	; 0x24
				if(error)
 8001200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001202:	2b00      	cmp	r3, #0
 8001204:	d004      	beq.n	8001210 <eeprom_store+0xa0>
				{
					HAL_FLASH_Lock();
 8001206:	f007 ff77 	bl	80090f8 <HAL_FLASH_Lock>
					return error;
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	b2db      	uxtb	r3, r3
 800120e:	e00e      	b.n	800122e <eeprom_store+0xbe>
				}
				HAL_FLASH_Lock();
 8001210:	f007 ff72 	bl	80090f8 <HAL_FLASH_Lock>
				return result;
 8001214:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001218:	e009      	b.n	800122e <eeprom_store+0xbe>
		for(uint32_t index=0; index<size;index+=sizeof(uint64_t)) // 64 bits
 800121a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121c:	3308      	adds	r3, #8
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	429a      	cmp	r2, r3
 8001226:	d3d0      	bcc.n	80011ca <eeprom_store+0x5a>
			}
		}
	}
	HAL_FLASH_Lock();
 8001228:	f007 ff66 	bl	80090f8 <HAL_FLASH_Lock>
	return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3730      	adds	r7, #48	; 0x30
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	0801f800 	.word	0x0801f800
 800123c:	deadbeef 	.word	0xdeadbeef
	...

08001248 <WRAP_TO_PI>:
#define TWO_TO_POW_31 2147483648.0f
#define Q31_TO_FLOAT(x) ( (float)(x)/(TWO_TO_POW_31))
#define FLOAT_TO_Q31(x) ( (int)( (float)(x)*(float)0x7FFFFFFF ) )

float WRAP_TO_PI(float angle_radians)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (angle_radians>=0)
 8001252:	edd7 7a01 	vldr	s15, [r7, #4]
 8001256:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800125a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125e:	db26      	blt.n	80012ae <WRAP_TO_PI+0x66>
        return fmodf(angle_radians+M_PI, 2.0f*M_PI)-M_PI;
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff f93d 	bl	80004e0 <__aeabi_f2d>
 8001266:	a328      	add	r3, pc, #160	; (adr r3, 8001308 <WRAP_TO_PI+0xc0>)
 8001268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126c:	f7fe ffda 	bl	8000224 <__adddf3>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4610      	mov	r0, r2
 8001276:	4619      	mov	r1, r3
 8001278:	f7ff fc4c 	bl	8000b14 <__aeabi_d2f>
 800127c:	4603      	mov	r3, r0
 800127e:	eddf 0a24 	vldr	s1, [pc, #144]	; 8001310 <WRAP_TO_PI+0xc8>
 8001282:	ee00 3a10 	vmov	s0, r3
 8001286:	f00c ff59 	bl	800e13c <fmodf>
 800128a:	ee10 3a10 	vmov	r3, s0
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f926 	bl	80004e0 <__aeabi_f2d>
 8001294:	a31c      	add	r3, pc, #112	; (adr r3, 8001308 <WRAP_TO_PI+0xc0>)
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	f7fe ffc1 	bl	8000220 <__aeabi_dsub>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff fc35 	bl	8000b14 <__aeabi_d2f>
 80012aa:	4603      	mov	r3, r0
 80012ac:	e025      	b.n	80012fa <WRAP_TO_PI+0xb2>
    else
    	return fmodf(angle_radians-M_PI, 2.0f*M_PI)+M_PI;
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff f916 	bl	80004e0 <__aeabi_f2d>
 80012b4:	a314      	add	r3, pc, #80	; (adr r3, 8001308 <WRAP_TO_PI+0xc0>)
 80012b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ba:	f7fe ffb1 	bl	8000220 <__aeabi_dsub>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	f7ff fc25 	bl	8000b14 <__aeabi_d2f>
 80012ca:	4603      	mov	r3, r0
 80012cc:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001310 <WRAP_TO_PI+0xc8>
 80012d0:	ee00 3a10 	vmov	s0, r3
 80012d4:	f00c ff32 	bl	800e13c <fmodf>
 80012d8:	ee10 3a10 	vmov	r3, s0
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f8ff 	bl	80004e0 <__aeabi_f2d>
 80012e2:	a309      	add	r3, pc, #36	; (adr r3, 8001308 <WRAP_TO_PI+0xc0>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7fe ff9c 	bl	8000224 <__adddf3>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	f7ff fc0e 	bl	8000b14 <__aeabi_d2f>
 80012f8:	4603      	mov	r3, r0
 80012fa:	ee07 3a90 	vmov	s15, r3
}
 80012fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	54442d18 	.word	0x54442d18
 800130c:	400921fb 	.word	0x400921fb
 8001310:	40c90fdb 	.word	0x40c90fdb
 8001314:	00000000 	.word	0x00000000

08001318 <FLOAT_RADIANS_TO_Q31>:

int32_t FLOAT_RADIANS_TO_Q31(float angle_radians)  // Q31 have a scaled input with the range [-1 1] mapping to [-pi pi).
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	ed87 0a01 	vstr	s0, [r7, #4]
	return FLOAT_TO_Q31(WRAP_TO_PI(angle_radians)/M_PI);
 8001322:	ed97 0a01 	vldr	s0, [r7, #4]
 8001326:	f7ff ff8f 	bl	8001248 <WRAP_TO_PI>
 800132a:	ee10 3a10 	vmov	r3, s0
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f8d6 	bl	80004e0 <__aeabi_f2d>
 8001334:	a30d      	add	r3, pc, #52	; (adr r3, 800136c <FLOAT_RADIANS_TO_Q31+0x54>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	f7ff fa53 	bl	80007e4 <__aeabi_ddiv>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fbe5 	bl	8000b14 <__aeabi_d2f>
 800134a:	ee07 0a10 	vmov	s14, r0
 800134e:	eddf 7a06 	vldr	s15, [pc, #24]	; 8001368 <FLOAT_RADIANS_TO_Q31+0x50>
 8001352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001356:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800135a:	ee17 3a90 	vmov	r3, s15
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	4f000000 	.word	0x4f000000
 800136c:	54442d18 	.word	0x54442d18
 8001370:	400921fb 	.word	0x400921fb

08001374 <API_CORDIC_Processor_Init>:

extern CORDIC_HandleTypeDef hcordic;

HAL_StatusTypeDef API_CORDIC_Processor_Init()
{
 8001374:	b5b0      	push	{r4, r5, r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0
	CORDIC_ConfigTypeDef config = {
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <API_CORDIC_Processor_Init+0x2c>)
 800137c:	1d3c      	adds	r4, r7, #4
 800137e:	461d      	mov	r5, r3
 8001380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001384:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001388:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			CORDIC_OUTSIZE_32BITS, // q31
			CORDIC_NBWRITE_1, // ARG2 is 1 default
			CORDIC_NBREAD_2, // read cosine and sine
			CORDIC_PRECISION_6CYCLES // better than 10-3
	};
	return HAL_CORDIC_Configure(&hcordic, &config);
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	4619      	mov	r1, r3
 8001390:	4804      	ldr	r0, [pc, #16]	; (80013a4 <API_CORDIC_Processor_Init+0x30>)
 8001392:	f006 fbd9 	bl	8007b48 <HAL_CORDIC_Configure>
 8001396:	4603      	mov	r3, r0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3720      	adds	r7, #32
 800139c:	46bd      	mov	sp, r7
 800139e:	bdb0      	pop	{r4, r5, r7, pc}
 80013a0:	0800edd0 	.word	0x0800edd0
 80013a4:	20002e70 	.word	0x20002e70

080013a8 <API_CORDIC_Processor_Update>:

HAL_StatusTypeDef API_CORDIC_Processor_Update(float theta, float * c, float * s)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80013b2:	60b8      	str	r0, [r7, #8]
 80013b4:	6079      	str	r1, [r7, #4]
	static int32_t InBuff[1] = {0};
	static int32_t OutBuff[2] = {0,0};
	InBuff[0] = FLOAT_RADIANS_TO_Q31(theta);
 80013b6:	ed97 0a03 	vldr	s0, [r7, #12]
 80013ba:	f7ff ffad 	bl	8001318 <FLOAT_RADIANS_TO_Q31>
 80013be:	4603      	mov	r3, r0
 80013c0:	4a19      	ldr	r2, [pc, #100]	; (8001428 <API_CORDIC_Processor_Update+0x80>)
 80013c2:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef result = HAL_CORDIC_Calculate(&hcordic,InBuff,OutBuff,1,10);
 80013c4:	230a      	movs	r3, #10
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2301      	movs	r3, #1
 80013ca:	4a18      	ldr	r2, [pc, #96]	; (800142c <API_CORDIC_Processor_Update+0x84>)
 80013cc:	4916      	ldr	r1, [pc, #88]	; (8001428 <API_CORDIC_Processor_Update+0x80>)
 80013ce:	4818      	ldr	r0, [pc, #96]	; (8001430 <API_CORDIC_Processor_Update+0x88>)
 80013d0:	f006 fbf6 	bl	8007bc0 <HAL_CORDIC_Calculate>
 80013d4:	4603      	mov	r3, r0
 80013d6:	75fb      	strb	r3, [r7, #23]
	if(HAL_OK==result)
 80013d8:	7dfb      	ldrb	r3, [r7, #23]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d11f      	bne.n	800141e <API_CORDIC_Processor_Update+0x76>
	{
		if(c!=0)
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d00c      	beq.n	80013fe <API_CORDIC_Processor_Update+0x56>
			*c = Q31_TO_FLOAT(OutBuff[0]);
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <API_CORDIC_Processor_Update+0x84>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	ee07 3a90 	vmov	s15, r3
 80013ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f0:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001434 <API_CORDIC_Processor_Update+0x8c>
 80013f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	edc3 7a00 	vstr	s15, [r3]
		if(s!=0)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00c      	beq.n	800141e <API_CORDIC_Processor_Update+0x76>
			*s = Q31_TO_FLOAT(OutBuff[1]);
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <API_CORDIC_Processor_Update+0x84>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001410:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001434 <API_CORDIC_Processor_Update+0x8c>
 8001414:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	edc3 7a00 	vstr	s15, [r3]
	}
	return result;
 800141e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000144 	.word	0x20000144
 800142c:	20000148 	.word	0x20000148
 8001430:	20002e70 	.word	0x20002e70
 8001434:	4f000000 	.word	0x4f000000

08001438 <API_FOC_Init>:

// user API function
// this function reset state of FOC
// This function starts peripherals
void API_FOC_Init()
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	// Motor PWM init and BRAKE
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800143c:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <API_FOC_Init+0x8c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2200      	movs	r2, #0
 8001442:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001444:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <API_FOC_Init+0x8c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2200      	movs	r2, #0
 800144a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 800144c:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <API_FOC_Init+0x8c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2200      	movs	r2, #0
 8001452:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001454:	2100      	movs	r1, #0
 8001456:	481b      	ldr	r0, [pc, #108]	; (80014c4 <API_FOC_Init+0x8c>)
 8001458:	f009 fbd8 	bl	800ac0c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1) ;
 800145c:	2100      	movs	r1, #0
 800145e:	4819      	ldr	r0, [pc, #100]	; (80014c4 <API_FOC_Init+0x8c>)
 8001460:	f00b fa08 	bl	800c874 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001464:	2104      	movs	r1, #4
 8001466:	4817      	ldr	r0, [pc, #92]	; (80014c4 <API_FOC_Init+0x8c>)
 8001468:	f009 fbd0 	bl	800ac0c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2) ;
 800146c:	2104      	movs	r1, #4
 800146e:	4815      	ldr	r0, [pc, #84]	; (80014c4 <API_FOC_Init+0x8c>)
 8001470:	f00b fa00 	bl	800c874 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8001474:	2108      	movs	r1, #8
 8001476:	4813      	ldr	r0, [pc, #76]	; (80014c4 <API_FOC_Init+0x8c>)
 8001478:	f009 fbc8 	bl	800ac0c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3) ;
 800147c:	2108      	movs	r1, #8
 800147e:	4811      	ldr	r0, [pc, #68]	; (80014c4 <API_FOC_Init+0x8c>)
 8001480:	f00b f9f8 	bl	800c874 <HAL_TIMEx_PWMN_Start>
	// OPAMP and ADC init
	HAL_OPAMP_Start(&hopamp1);
 8001484:	4810      	ldr	r0, [pc, #64]	; (80014c8 <API_FOC_Init+0x90>)
 8001486:	f008 fa9b 	bl	80099c0 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp2);
 800148a:	4810      	ldr	r0, [pc, #64]	; (80014cc <API_FOC_Init+0x94>)
 800148c:	f008 fa98 	bl	80099c0 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp3);
 8001490:	480f      	ldr	r0, [pc, #60]	; (80014d0 <API_FOC_Init+0x98>)
 8001492:	f008 fa95 	bl	80099c0 <HAL_OPAMP_Start>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC1_DMA,5);
 8001496:	2205      	movs	r2, #5
 8001498:	490e      	ldr	r1, [pc, #56]	; (80014d4 <API_FOC_Init+0x9c>)
 800149a:	480f      	ldr	r0, [pc, #60]	; (80014d8 <API_FOC_Init+0xa0>)
 800149c:	f005 fa60 	bl	8006960 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2,(uint32_t*)ADC2_DMA,3);
 80014a0:	2203      	movs	r2, #3
 80014a2:	490e      	ldr	r1, [pc, #56]	; (80014dc <API_FOC_Init+0xa4>)
 80014a4:	480e      	ldr	r0, [pc, #56]	; (80014e0 <API_FOC_Init+0xa8>)
 80014a6:	f005 fa5b 	bl	8006960 <HAL_ADC_Start_DMA>
	// CORDIC init
	API_CORDIC_Processor_Init();
 80014aa:	f7ff ff63 	bl	8001374 <API_CORDIC_Processor_Init>
	// encoder init
	API_AS5048A_Position_Sensor_Init(&htim4);
 80014ae:	480d      	ldr	r0, [pc, #52]	; (80014e4 <API_FOC_Init+0xac>)
 80014b0:	f002 ff82 	bl	80043b8 <API_AS5048A_Position_Sensor_Init>
	// PID init
	pid_reset(&pid_flux);
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <API_FOC_Init+0xb0>)
 80014b6:	f002 febb 	bl	8004230 <pid_reset>
	pid_reset(&pid_torque);
 80014ba:	480c      	ldr	r0, [pc, #48]	; (80014ec <API_FOC_Init+0xb4>)
 80014bc:	f002 feb8 	bl	8004230 <pid_reset>
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20002f48 	.word	0x20002f48
 80014c8:	20000460 	.word	0x20000460
 80014cc:	20000330 	.word	0x20000330
 80014d0:	20000424 	.word	0x20000424
 80014d4:	200000cc 	.word	0x200000cc
 80014d8:	2000049c 	.word	0x2000049c
 80014dc:	200000d8 	.word	0x200000d8
 80014e0:	200003b8 	.word	0x200003b8
 80014e4:	2000036c 	.word	0x2000036c
 80014e8:	20000104 	.word	0x20000104
 80014ec:	20000110 	.word	0x20000110

080014f0 <LL_FOC_Update_Temperature>:
// this function update present_temperature_C
// this function update REG_HARDWARE_ERROR_STATUS register (set/reset HW_ERROR_BIT_OVERHEATING bit)
// this function use REG_TEMPERATURE_LIMIT register
// the temperature ADC samples are collected with phase current samples
void LL_FOC_Update_Temperature()
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	ed2d 8b02 	vpush	{d8}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
	// convert ADC sample into temperature (STM32G431-ESC1 specific)
	static float const R60 = 4700.0f; // ohm
	static float const eps = 0.1f; // epsilon (avoid divide by zero)
	float const R_NTC = R60*(4096.0f/(temperature_input_adc+eps)-1.0f); // 10kohm NTC at 25°C
 80014fa:	4b37      	ldr	r3, [pc, #220]	; (80015d8 <LL_FOC_Update_Temperature+0xe8>)
 80014fc:	ed93 7a00 	vldr	s14, [r3]
 8001500:	4b36      	ldr	r3, [pc, #216]	; (80015dc <LL_FOC_Update_Temperature+0xec>)
 8001502:	edd3 7a00 	vldr	s15, [r3]
 8001506:	ee37 7a27 	vadd.f32	s14, s14, s15
 800150a:	eddf 6a35 	vldr	s13, [pc, #212]	; 80015e0 <LL_FOC_Update_Temperature+0xf0>
 800150e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001516:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800151a:	4b32      	ldr	r3, [pc, #200]	; (80015e4 <LL_FOC_Update_Temperature+0xf4>)
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001524:	edc7 7a03 	vstr	s15, [r7, #12]
	static float const Beta = 3455.0f; // for a 10k NTC
	static float const Kelvin = 273.15f; //°C
	static float const T0 = 273.15f + 25.0f;
	static float const R0 = 10000.0f; // 10kohm at 25° for 10k NTC
	float const present_temperature_K = Beta * T0 / ( Beta - T0*logf(R0/R_NTC) );
 8001528:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <LL_FOC_Update_Temperature+0xf8>)
 800152a:	ed93 7a00 	vldr	s14, [r3]
 800152e:	4b2f      	ldr	r3, [pc, #188]	; (80015ec <LL_FOC_Update_Temperature+0xfc>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001538:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <LL_FOC_Update_Temperature+0xf8>)
 800153a:	edd3 8a00 	vldr	s17, [r3]
 800153e:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <LL_FOC_Update_Temperature+0x100>)
 8001540:	ed93 7a00 	vldr	s14, [r3]
 8001544:	edd7 7a03 	vldr	s15, [r7, #12]
 8001548:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800154c:	eeb0 0a66 	vmov.f32	s0, s13
 8001550:	f00c fe20 	bl	800e194 <logf>
 8001554:	eeb0 7a40 	vmov.f32	s14, s0
 8001558:	4b24      	ldr	r3, [pc, #144]	; (80015ec <LL_FOC_Update_Temperature+0xfc>)
 800155a:	edd3 7a00 	vldr	s15, [r3]
 800155e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001562:	ee38 7ae7 	vsub.f32	s14, s17, s15
 8001566:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800156a:	edc7 7a02 	vstr	s15, [r7, #8]
	present_temperature_C = present_temperature_K-Kelvin;
 800156e:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <LL_FOC_Update_Temperature+0x104>)
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	ed97 7a02 	vldr	s14, [r7, #8]
 8001578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800157c:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <LL_FOC_Update_Temperature+0x108>)
 800157e:	edc3 7a00 	vstr	s15, [r3]

	// apply thermal protection and update hardware error register
	float const max_temperature_C = regs[REG_TEMPERATURE_LIMIT];
 8001582:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <LL_FOC_Update_Temperature+0x10c>)
 8001584:	7f1b      	ldrb	r3, [r3, #28]
 8001586:	ee07 3a90 	vmov	s15, r3
 800158a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800158e:	edc7 7a01 	vstr	s15, [r7, #4]
	if(present_temperature_C>max_temperature_C)
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <LL_FOC_Update_Temperature+0x108>)
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	ed97 7a01 	vldr	s14, [r7, #4]
 800159c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a4:	d509      	bpl.n	80015ba <LL_FOC_Update_Temperature+0xca>
	{
		// set overheating error
		regs[REG_HARDWARE_ERROR_STATUS] |= 1UL << HW_ERROR_BIT_OVERHEATING;
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <LL_FOC_Update_Temperature+0x10c>)
 80015a8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80015ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4b12      	ldr	r3, [pc, #72]	; (80015fc <LL_FOC_Update_Temperature+0x10c>)
 80015b4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	else
	{
		// clear overheating error
		regs[REG_HARDWARE_ERROR_STATUS] &= ~(1UL << HW_ERROR_BIT_OVERHEATING);
	}
}
 80015b8:	e008      	b.n	80015cc <LL_FOC_Update_Temperature+0xdc>
		regs[REG_HARDWARE_ERROR_STATUS] &= ~(1UL << HW_ERROR_BIT_OVERHEATING);
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <LL_FOC_Update_Temperature+0x10c>)
 80015bc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80015c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <LL_FOC_Update_Temperature+0x10c>)
 80015c8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
}
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	ecbd 8b02 	vpop	{d8}
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000134 	.word	0x20000134
 80015dc:	0800ee44 	.word	0x0800ee44
 80015e0:	45800000 	.word	0x45800000
 80015e4:	0800ee48 	.word	0x0800ee48
 80015e8:	0800ee4c 	.word	0x0800ee4c
 80015ec:	0800ee50 	.word	0x0800ee50
 80015f0:	0800ee54 	.word	0x0800ee54
 80015f4:	0800ee58 	.word	0x0800ee58
 80015f8:	2000013c 	.word	0x2000013c
 80015fc:	2000021c 	.word	0x2000021c

08001600 <LL_FOC_Update_Voltage>:
// this function update present_voltage_V
// this function update REG_HARDWARE_ERROR_STATUS register (set/reset HW_ERROR_BIT_VOLTAGE bit)
// this function use REG_LOW_VOLTAGE_LIMIT and REG_HIGH_VOLTAGE_LIMIT registers
// the voltage ADC samples are collected with phase current samples
void LL_FOC_Update_Voltage()
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
	// process input voltage (STM32G431-ESC1 specific)
	{
		static float const R68 = 169.0f; // kohm
		static float const R76 = 18.0f; // kohm
		present_voltage_V = vbus_input_adc/4096.0f*3.3f*(R68+R76)/R76;
 8001606:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <LL_FOC_Update_Voltage+0xbc>)
 8001608:	ed93 7a00 	vldr	s14, [r3]
 800160c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80016c0 <LL_FOC_Update_Voltage+0xc0>
 8001610:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001614:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80016c4 <LL_FOC_Update_Voltage+0xc4>
 8001618:	ee27 7a87 	vmul.f32	s14, s15, s14
 800161c:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <LL_FOC_Update_Voltage+0xc8>)
 800161e:	edd3 6a00 	vldr	s13, [r3]
 8001622:	4b2a      	ldr	r3, [pc, #168]	; (80016cc <LL_FOC_Update_Voltage+0xcc>)
 8001624:	edd3 7a00 	vldr	s15, [r3]
 8001628:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800162c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001630:	4b26      	ldr	r3, [pc, #152]	; (80016cc <LL_FOC_Update_Voltage+0xcc>)
 8001632:	ed93 7a00 	vldr	s14, [r3]
 8001636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800163a:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <LL_FOC_Update_Voltage+0xd0>)
 800163c:	edc3 7a00 	vstr	s15, [r3]
	}

	// apply voltage protection and update
	float const min_voltage_V = regs[REG_LOW_VOLTAGE_LIMIT];
 8001640:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <LL_FOC_Update_Voltage+0xd4>)
 8001642:	7f5b      	ldrb	r3, [r3, #29]
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800164c:	edc7 7a01 	vstr	s15, [r7, #4]
	float const max_voltage_V = regs[REG_HIGH_VOLTAGE_LIMIT];
 8001650:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <LL_FOC_Update_Voltage+0xd4>)
 8001652:	7f9b      	ldrb	r3, [r3, #30]
 8001654:	ee07 3a90 	vmov	s15, r3
 8001658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800165c:	edc7 7a00 	vstr	s15, [r7]
	if((present_voltage_V>max_voltage_V)||(present_voltage_V<min_voltage_V))
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <LL_FOC_Update_Voltage+0xd0>)
 8001662:	edd3 7a00 	vldr	s15, [r3]
 8001666:	ed97 7a00 	vldr	s14, [r7]
 800166a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800166e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001672:	d409      	bmi.n	8001688 <LL_FOC_Update_Voltage+0x88>
 8001674:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <LL_FOC_Update_Voltage+0xd0>)
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	ed97 7a01 	vldr	s14, [r7, #4]
 800167e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001686:	dd09      	ble.n	800169c <LL_FOC_Update_Voltage+0x9c>
	{
		// set voltage error
		regs[REG_HARDWARE_ERROR_STATUS] |= 1UL << HW_ERROR_BIT_VOLTAGE;
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <LL_FOC_Update_Voltage+0xd4>)
 800168a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	b2da      	uxtb	r2, r3
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <LL_FOC_Update_Voltage+0xd4>)
 8001696:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 800169a:	e009      	b.n	80016b0 <LL_FOC_Update_Voltage+0xb0>
	}
	else
	{
		// clear voltage error
		regs[REG_HARDWARE_ERROR_STATUS] &= ~(1UL << HW_ERROR_BIT_VOLTAGE);
 800169c:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <LL_FOC_Update_Voltage+0xd4>)
 800169e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80016a2:	f023 0301 	bic.w	r3, r3, #1
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <LL_FOC_Update_Voltage+0xd4>)
 80016aa:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	}
}
 80016ae:	bf00      	nop
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	20000130 	.word	0x20000130
 80016c0:	45800000 	.word	0x45800000
 80016c4:	40533333 	.word	0x40533333
 80016c8:	0800ee5c 	.word	0x0800ee5c
 80016cc:	0800ee60 	.word	0x0800ee60
 80016d0:	20000138 	.word	0x20000138
 80016d4:	2000021c 	.word	0x2000021c

080016d8 <LL_FOC_Inverse_Clarke_Park_PWM_Generation>:

// low level function
// this function checks REG_HARDWARE_ERROR_STATUS register and enforce BRAKE is register not null
// this function use the present_voltage_V state variable to adjust PWM duty cycle according power supply voltage
void LL_FOC_Inverse_Clarke_Park_PWM_Generation( float Vd, float Vq, float cosine_theta, float sine_theta )
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	ed2d 8b02 	vpush	{d8}
 80016de:	b090      	sub	sp, #64	; 0x40
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80016e6:	edc7 0a02 	vstr	s1, [r7, #8]
 80016ea:	ed87 1a01 	vstr	s2, [r7, #4]
 80016ee:	edc7 1a00 	vstr	s3, [r7]
	// convert (Vd,Vq) [-max_voltage_V,max_voltage_V] to (Valpha,Vbeta) [-max_voltage_V,max_voltage_V] [Inverse Park Transformation]
	float const Valpha = Vd * cosine_theta - Vq * sine_theta;
 80016f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80016f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016fe:	edd7 6a02 	vldr	s13, [r7, #8]
 8001702:	edd7 7a00 	vldr	s15, [r7]
 8001706:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800170a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float const Vbeta = Vq * cosine_theta + Vd * sine_theta;
 8001712:	ed97 7a02 	vldr	s14, [r7, #8]
 8001716:	edd7 7a01 	vldr	s15, [r7, #4]
 800171a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800171e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001722:	edd7 7a00 	vldr	s15, [r7]
 8001726:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800172a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	// convert (Valpha,Vbeta) [-max_voltage_V,max_voltage_V] to (Va,Vb,Vc) [-max_voltage_V,max_voltage_V] [Inverse Clarke Transformation]
	static float const sqrt3 = sqrtf(3.0f);
	float Va = Valpha;
 8001732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001734:	637b      	str	r3, [r7, #52]	; 0x34
	float Vb = (-Valpha+sqrt3*Vbeta)/2.0f;
 8001736:	4b8f      	ldr	r3, [pc, #572]	; (8001974 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x29c>)
 8001738:	ed93 7a00 	vldr	s14, [r3]
 800173c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001740:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001744:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001748:	ee37 7a67 	vsub.f32	s14, s14, s15
 800174c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001750:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001754:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float Vc = (-Valpha-sqrt3*Vbeta)/2.0f;
 8001758:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800175c:	eeb1 7a67 	vneg.f32	s14, s15
 8001760:	4b84      	ldr	r3, [pc, #528]	; (8001974 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x29c>)
 8001762:	edd3 6a00 	vldr	s13, [r3]
 8001766:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800176a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800176e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001772:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001776:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800177a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	// SPWM done

#ifdef CSVPWM

	// apply CSVPWM to (Va,Vb,Vc)
	float const Vneutral = 0.5f*(fmaxf(fmaxf(Va,Vb),Vc)+fminf(fminf(Va,Vb),Vc));
 800177e:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8001782:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001786:	f00c fc61 	bl	800e04c <fmaxf>
 800178a:	eef0 7a40 	vmov.f32	s15, s0
 800178e:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8001792:	eeb0 0a67 	vmov.f32	s0, s15
 8001796:	f00c fc59 	bl	800e04c <fmaxf>
 800179a:	eeb0 8a40 	vmov.f32	s16, s0
 800179e:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 80017a2:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 80017a6:	f00c fc6c 	bl	800e082 <fminf>
 80017aa:	eef0 7a40 	vmov.f32	s15, s0
 80017ae:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 80017b2:	eeb0 0a67 	vmov.f32	s0, s15
 80017b6:	f00c fc64 	bl	800e082 <fminf>
 80017ba:	eef0 7a40 	vmov.f32	s15, s0
 80017be:	ee78 7a27 	vadd.f32	s15, s16, s15
 80017c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80017c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ca:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	Va -= Vneutral;
 80017ce:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80017d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017da:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	Vb -= Vneutral;
 80017de:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80017e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ea:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	Vc -= Vneutral;
 80017ee:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80017f2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017fa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

#endif

	// convert (Va,Vb,Vc) [-max_voltage_V,max_voltage_V] to PWM duty cycles % [0.0 1.0]
	float const duty_cycle_PWMa = fconstrain((Va/present_voltage_V+1.0f)*0.5f,MIN_PWM_DUTY_CYCLE,MAX_PWM_DUTY_CYCLE); // [0 1]
 80017fe:	4b5e      	ldr	r3, [pc, #376]	; (8001978 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2a0>)
 8001800:	ed93 7a00 	vldr	s14, [r3]
 8001804:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001810:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001814:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001818:	ee67 7a87 	vmul.f32	s15, s15, s14
 800181c:	ed9f 1a57 	vldr	s2, [pc, #348]	; 800197c <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2a4>
 8001820:	eddf 0a57 	vldr	s1, [pc, #348]	; 8001980 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2a8>
 8001824:	eeb0 0a67 	vmov.f32	s0, s15
 8001828:	f002 fcd9 	bl	80041de <fconstrain>
 800182c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float const duty_cycle_PWMb = fconstrain((Vb/present_voltage_V+1.0f)*0.5f,MIN_PWM_DUTY_CYCLE,MAX_PWM_DUTY_CYCLE); // [0 1]
 8001830:	4b51      	ldr	r3, [pc, #324]	; (8001978 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2a0>)
 8001832:	ed93 7a00 	vldr	s14, [r3]
 8001836:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800183a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800183e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001842:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001846:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800184a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800184e:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 800197c <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2a4>
 8001852:	eddf 0a4b 	vldr	s1, [pc, #300]	; 8001980 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2a8>
 8001856:	eeb0 0a67 	vmov.f32	s0, s15
 800185a:	f002 fcc0 	bl	80041de <fconstrain>
 800185e:	ed87 0a08 	vstr	s0, [r7, #32]
	float const duty_cycle_PWMc = fconstrain((Vc/present_voltage_V+1.0f)*0.5f,MIN_PWM_DUTY_CYCLE,MAX_PWM_DUTY_CYCLE); // [0 1]
 8001862:	4b45      	ldr	r3, [pc, #276]	; (8001978 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2a0>)
 8001864:	ed93 7a00 	vldr	s14, [r3]
 8001868:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800186c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001870:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001874:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001878:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800187c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001880:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 800197c <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2a4>
 8001884:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8001980 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2a8>
 8001888:	eeb0 0a67 	vmov.f32	s0, s15
 800188c:	f002 fca7 	bl	80041de <fconstrain>
 8001890:	ed87 0a07 	vstr	s0, [r7, #28]
	// convert PWM duty cycles % to TIMER1 CCR register values
	// fPWM = 16KHz
	// fTIM = 160MHz
	// in PWM centered mode, for the finest possible resolution :
	// ARR = fTIM/(2 * fPWM) -1 => ARR = 4999
	uint16_t const CCRa = (uint16_t)(duty_cycle_PWMa*(float)(__HAL_TIM_GET_AUTORELOAD(&htim1)+1))+1;
 8001894:	4b3b      	ldr	r3, [pc, #236]	; (8001984 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2ac>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189a:	3301      	adds	r3, #1
 800189c:	ee07 3a90 	vmov	s15, r3
 80018a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018b0:	ee17 3a90 	vmov	r3, s15
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	3301      	adds	r3, #1
 80018b8:	837b      	strh	r3, [r7, #26]
	uint16_t const CCRb = (uint16_t)(duty_cycle_PWMb*(float)(__HAL_TIM_GET_AUTORELOAD(&htim1)+1))+1;
 80018ba:	4b32      	ldr	r3, [pc, #200]	; (8001984 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2ac>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	3301      	adds	r3, #1
 80018c2:	ee07 3a90 	vmov	s15, r3
 80018c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80018ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018d6:	ee17 3a90 	vmov	r3, s15
 80018da:	b29b      	uxth	r3, r3
 80018dc:	3301      	adds	r3, #1
 80018de:	833b      	strh	r3, [r7, #24]
	uint16_t const CCRc = (uint16_t)(duty_cycle_PWMc*(float)(__HAL_TIM_GET_AUTORELOAD(&htim1)+1))+1;
 80018e0:	4b28      	ldr	r3, [pc, #160]	; (8001984 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2ac>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e6:	3301      	adds	r3, #1
 80018e8:	ee07 3a90 	vmov	s15, r3
 80018ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80018f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018fc:	ee17 3a90 	vmov	r3, s15
 8001900:	b29b      	uxth	r3, r3
 8001902:	3301      	adds	r3, #1
 8001904:	82fb      	strh	r3, [r7, #22]

	// update TIMER CCR registers
	//   and apply BRAKE if error
	if(regs[REG_HARDWARE_ERROR_STATUS] != 0 )
 8001906:	4b20      	ldr	r3, [pc, #128]	; (8001988 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2b0>)
 8001908:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d01f      	beq.n	8001950 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x278>
	{
		// compute a valid BRAKE value
		uint16_t const CCRx = (uint16_t)(0.5f*(float)(__HAL_TIM_GET_AUTORELOAD(&htim1)+1))+1; // note : 0 is OK too
 8001910:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2ac>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	3301      	adds	r3, #1
 8001918:	ee07 3a90 	vmov	s15, r3
 800191c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001920:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800192c:	ee17 3a90 	vmov	r3, s15
 8001930:	b29b      	uxth	r3, r3
 8001932:	3301      	adds	r3, #1
 8001934:	82bb      	strh	r3, [r7, #20]
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,CCRx);
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2ac>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	8aba      	ldrh	r2, [r7, #20]
 800193c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,CCRx);
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2ac>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	8aba      	ldrh	r2, [r7, #20]
 8001944:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,CCRx);
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2ac>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	8aba      	ldrh	r2, [r7, #20]
 800194c:	63da      	str	r2, [r3, #60]	; 0x3c
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,CCRa);
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,CCRb); // switch b and c phases
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,CCRc); // switch b and c phases
	}
}
 800194e:	e00b      	b.n	8001968 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x290>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,CCRa);
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2ac>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	8b7a      	ldrh	r2, [r7, #26]
 8001956:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,CCRb); // switch b and c phases
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2ac>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	8b3a      	ldrh	r2, [r7, #24]
 800195e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,CCRc); // switch b and c phases
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <LL_FOC_Inverse_Clarke_Park_PWM_Generation+0x2ac>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	8afa      	ldrh	r2, [r7, #22]
 8001966:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001968:	bf00      	nop
 800196a:	3740      	adds	r7, #64	; 0x40
 800196c:	46bd      	mov	sp, r7
 800196e:	ecbd 8b02 	vpop	{d8}
 8001972:	bd80      	pop	{r7, pc}
 8001974:	0800ee64 	.word	0x0800ee64
 8001978:	20000138 	.word	0x20000138
 800197c:	3f733333 	.word	0x3f733333
 8001980:	3d4ccccd 	.word	0x3d4ccccd
 8001984:	20002f48 	.word	0x20002f48
 8001988:	2000021c 	.word	0x2000021c
 800198c:	00000000 	.word	0x00000000

08001990 <API_FOC_Set_Flux_Velocity>:
void API_FOC_Set_Flux_Velocity(
		uint16_t present_time_us,
		float setpoint_electrical_velocity_dps,
		float setpoint_flux_voltage_V
)
{
 8001990:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001994:	b088      	sub	sp, #32
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	ed87 0a02 	vstr	s0, [r7, #8]
 800199e:	edc7 0a01 	vstr	s1, [r7, #4]
 80019a2:	81fb      	strh	r3, [r7, #14]
	// check temperature and voltage
	LL_FOC_Update_Temperature();
 80019a4:	f7ff fda4 	bl	80014f0 <LL_FOC_Update_Temperature>
	LL_FOC_Update_Voltage();
 80019a8:	f7ff fe2a 	bl	8001600 <LL_FOC_Update_Voltage>

	// compute theta
	static float theta_rad = 0.0f;
	static float last_time_us = 0.0f;
	uint16_t delta_t_us = last_time_us-present_time_us;
 80019ac:	4b4c      	ldr	r3, [pc, #304]	; (8001ae0 <API_FOC_Set_Flux_Velocity+0x150>)
 80019ae:	ed93 7a00 	vldr	s14, [r3]
 80019b2:	89fb      	ldrh	r3, [r7, #14]
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019c4:	ee17 3a90 	vmov	r3, s15
 80019c8:	83fb      	strh	r3, [r7, #30]
	last_time_us = present_time_us;
 80019ca:	89fb      	ldrh	r3, [r7, #14]
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d4:	4b42      	ldr	r3, [pc, #264]	; (8001ae0 <API_FOC_Set_Flux_Velocity+0x150>)
 80019d6:	edc3 7a00 	vstr	s15, [r3]
	theta_rad += DEGREES_TO_RADIANS(setpoint_electrical_velocity_dps) * (float)delta_t_us/1000000.0f;
 80019da:	4b42      	ldr	r3, [pc, #264]	; (8001ae4 <API_FOC_Set_Flux_Velocity+0x154>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fd7e 	bl	80004e0 <__aeabi_f2d>
 80019e4:	4604      	mov	r4, r0
 80019e6:	460d      	mov	r5, r1
 80019e8:	68b8      	ldr	r0, [r7, #8]
 80019ea:	f7fe fd79 	bl	80004e0 <__aeabi_f2d>
 80019ee:	a338      	add	r3, pc, #224	; (adr r3, 8001ad0 <API_FOC_Set_Flux_Velocity+0x140>)
 80019f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f4:	f7fe fdcc 	bl	8000590 <__aeabi_dmul>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	4b38      	ldr	r3, [pc, #224]	; (8001ae8 <API_FOC_Set_Flux_Velocity+0x158>)
 8001a06:	f7fe feed 	bl	80007e4 <__aeabi_ddiv>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4690      	mov	r8, r2
 8001a10:	4699      	mov	r9, r3
 8001a12:	8bfb      	ldrh	r3, [r7, #30]
 8001a14:	ee07 3a90 	vmov	s15, r3
 8001a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a1c:	ee17 0a90 	vmov	r0, s15
 8001a20:	f7fe fd5e 	bl	80004e0 <__aeabi_f2d>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4640      	mov	r0, r8
 8001a2a:	4649      	mov	r1, r9
 8001a2c:	f7fe fdb0 	bl	8000590 <__aeabi_dmul>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	a327      	add	r3, pc, #156	; (adr r3, 8001ad8 <API_FOC_Set_Flux_Velocity+0x148>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	f7fe fed1 	bl	80007e4 <__aeabi_ddiv>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4620      	mov	r0, r4
 8001a48:	4629      	mov	r1, r5
 8001a4a:	f7fe fbeb 	bl	8000224 <__adddf3>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	f7ff f85d 	bl	8000b14 <__aeabi_d2f>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4a21      	ldr	r2, [pc, #132]	; (8001ae4 <API_FOC_Set_Flux_Velocity+0x154>)
 8001a5e:	6013      	str	r3, [r2, #0]

	// compute cosine and sine
	static float cosine_theta = 0.0f;
	static float sine_theta = 0.0f;
	API_CORDIC_Processor_Update(theta_rad,&cosine_theta,&sine_theta);
 8001a60:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <API_FOC_Set_Flux_Velocity+0x154>)
 8001a62:	edd3 7a00 	vldr	s15, [r3]
 8001a66:	4921      	ldr	r1, [pc, #132]	; (8001aec <API_FOC_Set_Flux_Velocity+0x15c>)
 8001a68:	4821      	ldr	r0, [pc, #132]	; (8001af0 <API_FOC_Set_Flux_Velocity+0x160>)
 8001a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a6e:	f7ff fc9b 	bl	80013a8 <API_CORDIC_Processor_Update>

	// compute (Vd,Vq) [-max_voltage_V,max_voltage_V]
	float const Vd = fconstrain(setpoint_flux_voltage_V,-regs[REG_HIGH_VOLTAGE_LIMIT_VALUE],regs[REG_HIGH_VOLTAGE_LIMIT_VALUE]); // torque setpoint open loop
 8001a72:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <API_FOC_Set_Flux_Velocity+0x164>)
 8001a74:	7f1b      	ldrb	r3, [r3, #28]
 8001a76:	425b      	negs	r3, r3
 8001a78:	ee07 3a90 	vmov	s15, r3
 8001a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a80:	4b1c      	ldr	r3, [pc, #112]	; (8001af4 <API_FOC_Set_Flux_Velocity+0x164>)
 8001a82:	7f1b      	ldrb	r3, [r3, #28]
 8001a84:	ee07 3a10 	vmov	s14, r3
 8001a88:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001a8c:	eeb0 1a47 	vmov.f32	s2, s14
 8001a90:	eef0 0a67 	vmov.f32	s1, s15
 8001a94:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a98:	f002 fba1 	bl	80041de <fconstrain>
 8001a9c:	ed87 0a06 	vstr	s0, [r7, #24]
	float const Vq = 0.0f; // no torque
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]

	// do inverse clarke and park transformation and update TIMER1 register (3-phase PWM generation)
	LL_FOC_Inverse_Clarke_Park_PWM_Generation(Vd,Vq,cosine_theta,sine_theta);
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <API_FOC_Set_Flux_Velocity+0x160>)
 8001aa8:	edd3 7a00 	vldr	s15, [r3]
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <API_FOC_Set_Flux_Velocity+0x15c>)
 8001aae:	ed93 7a00 	vldr	s14, [r3]
 8001ab2:	eef0 1a47 	vmov.f32	s3, s14
 8001ab6:	eeb0 1a67 	vmov.f32	s2, s15
 8001aba:	edd7 0a05 	vldr	s1, [r7, #20]
 8001abe:	ed97 0a06 	vldr	s0, [r7, #24]
 8001ac2:	f7ff fe09 	bl	80016d8 <LL_FOC_Inverse_Clarke_Park_PWM_Generation>
	// this function checks REG_HARDWARE_ERROR_STATUS register and enforce BRAKE is register not null
	// this function use the present_voltage_V state variable to adjust PWM duty cycle according power supply voltage
}
 8001ac6:	bf00      	nop
 8001ac8:	3720      	adds	r7, #32
 8001aca:	46bd      	mov	sp, r7
 8001acc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ad0:	54442d18 	.word	0x54442d18
 8001ad4:	400921fb 	.word	0x400921fb
 8001ad8:	00000000 	.word	0x00000000
 8001adc:	412e8480 	.word	0x412e8480
 8001ae0:	20000150 	.word	0x20000150
 8001ae4:	20000154 	.word	0x20000154
 8001ae8:	40668000 	.word	0x40668000
 8001aec:	2000015c 	.word	0x2000015c
 8001af0:	20000158 	.word	0x20000158
 8001af4:	2000021c 	.word	0x2000021c

08001af8 <API_FOC_Torque_Update>:
		float setpoint_torque_current_mA,
		float setpoint_flux_current_mA,
		float phase_synchro_offset_rad,
		uint32_t closed_loop
)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	ed2d 8b02 	vpush	{d8}
 8001afe:	b09e      	sub	sp, #120	; 0x78
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	ed87 0a04 	vstr	s0, [r7, #16]
 8001b08:	edc7 0a03 	vstr	s1, [r7, #12]
 8001b0c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001b10:	6079      	str	r1, [r7, #4]
 8001b12:	82fb      	strh	r3, [r7, #22]
	// note : absolute position increases when turning CCW (encoder)
	// note : when Iq is positive, motor turns CW
	// note : FOC period is less than motor PWM period
	// drop phase current samples a few times between each FOC iteration
	if(current_samples>current_sample_drop_rate)
 8001b14:	4b68      	ldr	r3, [pc, #416]	; (8001cb8 <API_FOC_Torque_Update+0x1c0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	f240 82b6 	bls.w	800208e <API_FOC_Torque_Update+0x596>
	{
		current_samples-=(current_sample_drop_rate+1);
 8001b22:	4b65      	ldr	r3, [pc, #404]	; (8001cb8 <API_FOC_Torque_Update+0x1c0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	2301      	movs	r3, #1
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b61      	ldr	r3, [pc, #388]	; (8001cb8 <API_FOC_Torque_Update+0x1c0>)
 8001b32:	601a      	str	r2, [r3, #0]

		// backup 3-phase currents as soon as possible
		memcpy(motor_current_sample_adc,motor_current_input_adc,sizeof(uint16_t)*3);
 8001b34:	4b61      	ldr	r3, [pc, #388]	; (8001cbc <API_FOC_Torque_Update+0x1c4>)
 8001b36:	4a62      	ldr	r2, [pc, #392]	; (8001cc0 <API_FOC_Torque_Update+0x1c8>)
 8001b38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b3c:	6018      	str	r0, [r3, #0]
 8001b3e:	3304      	adds	r3, #4
 8001b40:	8019      	strh	r1, [r3, #0]

		// performance monitoring
		uint16_t const t_begin = __HAL_TIM_GET_COUNTER(&htim6);
 8001b42:	4b60      	ldr	r3, [pc, #384]	; (8001cc4 <API_FOC_Torque_Update+0x1cc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

		// process absolute position, and compute theta ahead using average processing time and velocity
		//absolute_position_rad = API_AS5048A_Position_Sensor_Get_Radians_Estimation(t_begin+average_processing_time);
		absolute_position_rad = API_AS5048A_Position_Sensor_Get_Radians_Estimation(t_begin); // we suppose that ADC sample have just been acquired (a few us before...)
 8001b4c:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8001b50:	4618      	mov	r0, r3
 8001b52:	f002 fdd1 	bl	80046f8 <API_AS5048A_Position_Sensor_Get_Radians_Estimation>
 8001b56:	eef0 7a40 	vmov.f32	s15, s0
 8001b5a:	4b5b      	ldr	r3, [pc, #364]	; (8001cc8 <API_FOC_Torque_Update+0x1d0>)
 8001b5c:	edc3 7a00 	vstr	s15, [r3]
		absolute_position_multi_rad = API_AS5048A_Position_Sensor_Get_Multiturn_Radians();
 8001b60:	f002 fe10 	bl	8004784 <API_AS5048A_Position_Sensor_Get_Multiturn_Radians>
 8001b64:	eef0 7a40 	vmov.f32	s15, s0
 8001b68:	4b58      	ldr	r3, [pc, #352]	; (8001ccc <API_FOC_Torque_Update+0x1d4>)
 8001b6a:	edc3 7a00 	vstr	s15, [r3]
		velocity_dps = API_AS5048A_Position_Sensor_Get_DPS();
 8001b6e:	f002 fe17 	bl	80047a0 <API_AS5048A_Position_Sensor_Get_DPS>
 8001b72:	eef0 7a40 	vmov.f32	s15, s0
 8001b76:	4b56      	ldr	r3, [pc, #344]	; (8001cd0 <API_FOC_Torque_Update+0x1d8>)
 8001b78:	edc3 7a00 	vstr	s15, [r3]

		// check temperature and voltage
		LL_FOC_Update_Temperature();
 8001b7c:	f7ff fcb8 	bl	80014f0 <LL_FOC_Update_Temperature>
		LL_FOC_Update_Voltage();
 8001b80:	f7ff fd3e 	bl	8001600 <LL_FOC_Update_Voltage>

		// if ALARM then zeroize currents setpoints
		if(regs[REG_HARDWARE_ERROR_STATUS] != 0 )
 8001b84:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <API_FOC_Torque_Update+0x1dc>)
 8001b86:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d005      	beq.n	8001b9a <API_FOC_Torque_Update+0xa2>
		{
			setpoint_torque_current_mA = 0.0f;
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
			setpoint_flux_current_mA = 0.0f;
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
		// process phase current
		// Note : when current flows inward phase, shunt voltage is negative
		// Note : when current flows outward phase, shunt voltage is positive
		// Note : The current sign is positive when flowing in to a phase
		// Note : The current sign is negative when flowing out from a phase
		for(size_t index=0;index<3;++index)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	677b      	str	r3, [r7, #116]	; 0x74
 8001b9e:	e022      	b.n	8001be6 <API_FOC_Torque_Update+0xee>
		{
			 motor_current_mA[index]= -((float)motor_current_sample_adc[index]-motor_current_input_adc_offset[index])/motor_current_input_adc_mA[index]; // note : the (-) sign here
 8001ba0:	4a46      	ldr	r2, [pc, #280]	; (8001cbc <API_FOC_Torque_Update+0x1c4>)
 8001ba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ba8:	ee07 3a90 	vmov	s15, r3
 8001bac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bb0:	4a49      	ldr	r2, [pc, #292]	; (8001cd8 <API_FOC_Torque_Update+0x1e0>)
 8001bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	edd3 7a00 	vldr	s15, [r3]
 8001bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc0:	eef1 6a67 	vneg.f32	s13, s15
 8001bc4:	4a45      	ldr	r2, [pc, #276]	; (8001cdc <API_FOC_Torque_Update+0x1e4>)
 8001bc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	ed93 7a00 	vldr	s14, [r3]
 8001bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bd4:	4a42      	ldr	r2, [pc, #264]	; (8001ce0 <API_FOC_Torque_Update+0x1e8>)
 8001bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	edc3 7a00 	vstr	s15, [r3]
		for(size_t index=0;index<3;++index)
 8001be0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001be2:	3301      	adds	r3, #1
 8001be4:	677b      	str	r3, [r7, #116]	; 0x74
 8001be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d9d9      	bls.n	8001ba0 <API_FOC_Torque_Update+0xa8>
		}
		present_current_sq = 2.0f/3.0f*(powf(motor_current_mA[0],2.0f)+powf(motor_current_mA[1],2.0f)+powf(motor_current_mA[2],2.0f));
 8001bec:	4b3c      	ldr	r3, [pc, #240]	; (8001ce0 <API_FOC_Torque_Update+0x1e8>)
 8001bee:	edd3 7a00 	vldr	s15, [r3]
 8001bf2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bfa:	f00c fb01 	bl	800e200 <powf>
 8001bfe:	eeb0 8a40 	vmov.f32	s16, s0
 8001c02:	4b37      	ldr	r3, [pc, #220]	; (8001ce0 <API_FOC_Torque_Update+0x1e8>)
 8001c04:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c08:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001c0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c10:	f00c faf6 	bl	800e200 <powf>
 8001c14:	eef0 7a40 	vmov.f32	s15, s0
 8001c18:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001c1c:	4b30      	ldr	r3, [pc, #192]	; (8001ce0 <API_FOC_Torque_Update+0x1e8>)
 8001c1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c22:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001c26:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2a:	f00c fae9 	bl	800e200 <powf>
 8001c2e:	eef0 7a40 	vmov.f32	s15, s0
 8001c32:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001c36:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001ce4 <API_FOC_Torque_Update+0x1ec>
 8001c3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ce8 <API_FOC_Torque_Update+0x1f0>)
 8001c40:	edc3 7a00 	vstr	s15, [r3]

		// process theta for Park and Clarke Transformation and compute cosine(theta) and sine(theta)
		float const phase_offset_rad = DEGREES_TO_RADIANS((int16_t)(MAKE_SHORT(regs[REG_MOTOR_SYNCHRO_L],regs[REG_MOTOR_SYNCHRO_H])));
 8001c44:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <API_FOC_Torque_Update+0x1dc>)
 8001c46:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001c4a:	021b      	lsls	r3, r3, #8
 8001c4c:	b21a      	sxth	r2, r3
 8001c4e:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <API_FOC_Torque_Update+0x1dc>)
 8001c50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	4313      	orrs	r3, r2
 8001c58:	b21b      	sxth	r3, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fc2e 	bl	80004bc <__aeabi_i2d>
 8001c60:	a313      	add	r3, pc, #76	; (adr r3, 8001cb0 <API_FOC_Torque_Update+0x1b8>)
 8001c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c66:	f7fe fc93 	bl	8000590 <__aeabi_dmul>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4610      	mov	r0, r2
 8001c70:	4619      	mov	r1, r3
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <API_FOC_Torque_Update+0x1f4>)
 8001c78:	f7fe fdb4 	bl	80007e4 <__aeabi_ddiv>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	f7fe ff46 	bl	8000b14 <__aeabi_d2f>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
		float const reg_pole_pairs = regs[REG_MOTOR_POLE_PAIRS];
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <API_FOC_Torque_Update+0x1dc>)
 8001c8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c92:	ee07 3a90 	vmov	s15, r3
 8001c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c9a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		float const reverse = regs[REG_INV_PHASE_MOTOR] == 0 ? 1.0f : -1.0f;
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <API_FOC_Torque_Update+0x1dc>)
 8001ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d123      	bne.n	8001cf0 <API_FOC_Torque_Update+0x1f8>
 8001ca8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001cac:	e021      	b.n	8001cf2 <API_FOC_Torque_Update+0x1fa>
 8001cae:	bf00      	nop
 8001cb0:	54442d18 	.word	0x54442d18
 8001cb4:	400921fb 	.word	0x400921fb
 8001cb8:	200000c8 	.word	0x200000c8
 8001cbc:	200000e8 	.word	0x200000e8
 8001cc0:	200000e0 	.word	0x200000e0
 8001cc4:	20002efc 	.word	0x20002efc
 8001cc8:	20000120 	.word	0x20000120
 8001ccc:	20000124 	.word	0x20000124
 8001cd0:	20000128 	.word	0x20000128
 8001cd4:	2000021c 	.word	0x2000021c
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	2000000c 	.word	0x2000000c
 8001ce0:	200000f0 	.word	0x200000f0
 8001ce4:	3f2aaaab 	.word	0x3f2aaaab
 8001ce8:	2000011c 	.word	0x2000011c
 8001cec:	40668000 	.word	0x40668000
 8001cf0:	4ba7      	ldr	r3, [pc, #668]	; (8001f90 <API_FOC_Torque_Update+0x498>)
 8001cf2:	667b      	str	r3, [r7, #100]	; 0x64
		float const theta_rad = fmodf(absolute_position_rad*reg_pole_pairs*reverse,M_2PI) + phase_offset_rad + phase_synchro_offset_rad; // theta
 8001cf4:	4ba7      	ldr	r3, [pc, #668]	; (8001f94 <API_FOC_Torque_Update+0x49c>)
 8001cf6:	ed93 7a00 	vldr	s14, [r3]
 8001cfa:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001cfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d02:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d0a:	eddf 0aa3 	vldr	s1, [pc, #652]	; 8001f98 <API_FOC_Torque_Update+0x4a0>
 8001d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d12:	f00c fa13 	bl	800e13c <fmodf>
 8001d16:	eeb0 7a40 	vmov.f32	s14, s0
 8001d1a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d22:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		static float cosine_theta = 0.0f;
		static float sine_theta = 0.0f;
		API_CORDIC_Processor_Update(theta_rad,&cosine_theta,&sine_theta);
 8001d2e:	499b      	ldr	r1, [pc, #620]	; (8001f9c <API_FOC_Torque_Update+0x4a4>)
 8001d30:	489b      	ldr	r0, [pc, #620]	; (8001fa0 <API_FOC_Torque_Update+0x4a8>)
 8001d32:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8001d36:	f7ff fb37 	bl	80013a8 <API_CORDIC_Processor_Update>

		// phase current (Ia,Ib,Ic) [0..xxxmA] to (Ialpha,Ibeta) [0..xxxmA] [Clarke Transformation]
		static float const sqrt3 = sqrtf(3.0f);
		float const present_Ialpha = 2.0f/3.0f*motor_current_mA[0]-1.0f/3.0f*(motor_current_mA[1]+motor_current_mA[2]);
 8001d3a:	4b9a      	ldr	r3, [pc, #616]	; (8001fa4 <API_FOC_Torque_Update+0x4ac>)
 8001d3c:	edd3 7a00 	vldr	s15, [r3]
 8001d40:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8001fa8 <API_FOC_Torque_Update+0x4b0>
 8001d44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d48:	4b96      	ldr	r3, [pc, #600]	; (8001fa4 <API_FOC_Torque_Update+0x4ac>)
 8001d4a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d4e:	4b95      	ldr	r3, [pc, #596]	; (8001fa4 <API_FOC_Torque_Update+0x4ac>)
 8001d50:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d58:	eddf 6a94 	vldr	s13, [pc, #592]	; 8001fac <API_FOC_Torque_Update+0x4b4>
 8001d5c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d64:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		float const present_Ibeta = 1.0f/sqrt3*(motor_current_mA[1]-motor_current_mA[2]);
 8001d68:	4b91      	ldr	r3, [pc, #580]	; (8001fb0 <API_FOC_Torque_Update+0x4b8>)
 8001d6a:	edd3 7a00 	vldr	s15, [r3]
 8001d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d76:	4b8b      	ldr	r3, [pc, #556]	; (8001fa4 <API_FOC_Torque_Update+0x4ac>)
 8001d78:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d7c:	4b89      	ldr	r3, [pc, #548]	; (8001fa4 <API_FOC_Torque_Update+0x4ac>)
 8001d7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d82:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d8a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		// Note Ialpha synchone de Ia et de même phase/signe
		// Note Ibeta suit Iaplha de 90°

		// (Ialpha,Ibeta) [0..xxxmA] to (Id,Iq) [0..xxxmA] [Park Transformation]
		float present_Id =  present_Ialpha*cosine_theta+present_Ibeta*sine_theta;
 8001d8e:	4b84      	ldr	r3, [pc, #528]	; (8001fa0 <API_FOC_Torque_Update+0x4a8>)
 8001d90:	ed93 7a00 	vldr	s14, [r3]
 8001d94:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001d98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d9c:	4b7f      	ldr	r3, [pc, #508]	; (8001f9c <API_FOC_Torque_Update+0x4a4>)
 8001d9e:	edd3 6a00 	vldr	s13, [r3]
 8001da2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001da6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dae:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		float present_Iq = -present_Ialpha*sine_theta+present_Ibeta*cosine_theta;
 8001db2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001db6:	eeb1 7a67 	vneg.f32	s14, s15
 8001dba:	4b78      	ldr	r3, [pc, #480]	; (8001f9c <API_FOC_Torque_Update+0x4a4>)
 8001dbc:	edd3 7a00 	vldr	s15, [r3]
 8001dc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dc4:	4b76      	ldr	r3, [pc, #472]	; (8001fa0 <API_FOC_Torque_Update+0x4a8>)
 8001dc6:	edd3 6a00 	vldr	s13, [r3]
 8001dca:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001dce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

		// (Id,Iq) filtering
		present_Id_filtered = ALPHA_CURRENT_DQ*present_Id+(1.0f-ALPHA_CURRENT_DQ)*present_Id_filtered;
 8001dda:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001dde:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001fb4 <API_FOC_Torque_Update+0x4bc>
 8001de2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001de6:	4b74      	ldr	r3, [pc, #464]	; (8001fb8 <API_FOC_Torque_Update+0x4c0>)
 8001de8:	edd3 7a00 	vldr	s15, [r3]
 8001dec:	eddf 6a73 	vldr	s13, [pc, #460]	; 8001fbc <API_FOC_Torque_Update+0x4c4>
 8001df0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df8:	4b6f      	ldr	r3, [pc, #444]	; (8001fb8 <API_FOC_Torque_Update+0x4c0>)
 8001dfa:	edc3 7a00 	vstr	s15, [r3]
		present_Iq_filtered = ALPHA_CURRENT_DQ*present_Iq+(1.0f-ALPHA_CURRENT_DQ)*present_Iq_filtered;
 8001dfe:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001e02:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001fb4 <API_FOC_Torque_Update+0x4bc>
 8001e06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e0a:	4b6d      	ldr	r3, [pc, #436]	; (8001fc0 <API_FOC_Torque_Update+0x4c8>)
 8001e0c:	edd3 7a00 	vldr	s15, [r3]
 8001e10:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8001fbc <API_FOC_Torque_Update+0x4c4>
 8001e14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e1c:	4b68      	ldr	r3, [pc, #416]	; (8001fc0 <API_FOC_Torque_Update+0x4c8>)
 8001e1e:	edc3 7a00 	vstr	s15, [r3]

		// flux controller (PI+FF) ==> Vd [-max_voltage_V,max_voltage_V]
		float const setpoint_Id = setpoint_flux_current_mA;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	64fb      	str	r3, [r7, #76]	; 0x4c
		float const Flux_Kp = (float)((int16_t)(MAKE_SHORT(regs[REG_PID_FLUX_CURRENT_KP_L],regs[REG_PID_FLUX_CURRENT_KP_H])))/100000.0f;
 8001e26:	4b67      	ldr	r3, [pc, #412]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001e28:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001e2c:	021b      	lsls	r3, r3, #8
 8001e2e:	b21a      	sxth	r2, r3
 8001e30:	4b64      	ldr	r3, [pc, #400]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001e32:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001e36:	b21b      	sxth	r3, r3
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	b21b      	sxth	r3, r3
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e44:	eddf 6a60 	vldr	s13, [pc, #384]	; 8001fc8 <API_FOC_Torque_Update+0x4d0>
 8001e48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e4c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		float const Flux_Ki = (float)((int16_t)(MAKE_SHORT(regs[REG_PID_FLUX_CURRENT_KI_L],regs[REG_PID_FLUX_CURRENT_KI_H])))/10000000.0f;
 8001e50:	4b5c      	ldr	r3, [pc, #368]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e56:	021b      	lsls	r3, r3, #8
 8001e58:	b21a      	sxth	r2, r3
 8001e5a:	4b5a      	ldr	r3, [pc, #360]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e60:	b21b      	sxth	r3, r3
 8001e62:	4313      	orrs	r3, r2
 8001e64:	b21b      	sxth	r3, r3
 8001e66:	ee07 3a90 	vmov	s15, r3
 8001e6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e6e:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001fcc <API_FOC_Torque_Update+0x4d4>
 8001e72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e76:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		float const Flux_Kff = (float)((int16_t)(MAKE_SHORT(regs[REG_PID_FLUX_CURRENT_KFF_L],regs[REG_PID_FLUX_CURRENT_KFF_H])))/100000.0f;
 8001e7a:	4b52      	ldr	r3, [pc, #328]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001e7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	b21a      	sxth	r2, r3
 8001e84:	4b4f      	ldr	r3, [pc, #316]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001e86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e8a:	b21b      	sxth	r3, r3
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	b21b      	sxth	r3, r3
 8001e90:	ee07 3a90 	vmov	s15, r3
 8001e94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e98:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8001fc8 <API_FOC_Torque_Update+0x4d0>
 8001e9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ea0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		float const error_Id = setpoint_Id-( closed_loop == 1 ? present_Id_filtered : 0.0f);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d103      	bne.n	8001eb2 <API_FOC_Torque_Update+0x3ba>
 8001eaa:	4b43      	ldr	r3, [pc, #268]	; (8001fb8 <API_FOC_Torque_Update+0x4c0>)
 8001eac:	edd3 7a00 	vldr	s15, [r3]
 8001eb0:	e001      	b.n	8001eb6 <API_FOC_Torque_Update+0x3be>
 8001eb2:	eddf 7a48 	vldr	s15, [pc, #288]	; 8001fd4 <API_FOC_Torque_Update+0x4dc>
 8001eb6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001eba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ebe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				&pid_flux,
				error_Id,
				Flux_Kp,
				Flux_Ki,
				0.0f, // no Kd
				regs[REG_HIGH_VOLTAGE_LIMIT_VALUE],
 8001ec2:	4b40      	ldr	r3, [pc, #256]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001ec4:	7f1b      	ldrb	r3, [r3, #28]
		float const Vd = pid_process_antiwindup_clamp_with_ff(
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ece:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001ed2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eda:	eeb0 3a67 	vmov.f32	s6, s15
 8001ede:	eddf 2a3d 	vldr	s5, [pc, #244]	; 8001fd4 <API_FOC_Torque_Update+0x4dc>
 8001ee2:	eeb0 2a66 	vmov.f32	s4, s13
 8001ee6:	eddf 1a3b 	vldr	s3, [pc, #236]	; 8001fd4 <API_FOC_Torque_Update+0x4dc>
 8001eea:	ed97 1a11 	vldr	s2, [r7, #68]	; 0x44
 8001eee:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 8001ef2:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001ef6:	4836      	ldr	r0, [pc, #216]	; (8001fd0 <API_FOC_Torque_Update+0x4d8>)
 8001ef8:	f002 f9b0 	bl	800425c <pid_process_antiwindup_clamp_with_ff>
 8001efc:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
				0.0f, // no derivative low pass filter
				Flux_Kff*setpoint_Id
		);

		// torque controller (PI+FF) ==> Vq [-max_voltage_V,max_voltage_V]
		float const setpoint_Iq = setpoint_torque_current_mA;
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	637b      	str	r3, [r7, #52]	; 0x34
		float const Torque_Kp = (float)((int16_t)(MAKE_SHORT(regs[REG_PID_TORQUE_CURRENT_KP_L],regs[REG_PID_TORQUE_CURRENT_KP_H])))/100000.0f;
 8001f04:	4b2f      	ldr	r3, [pc, #188]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001f06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f0a:	021b      	lsls	r3, r3, #8
 8001f0c:	b21a      	sxth	r2, r3
 8001f0e:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001f10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f14:	b21b      	sxth	r3, r3
 8001f16:	4313      	orrs	r3, r2
 8001f18:	b21b      	sxth	r3, r3
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f22:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001fc8 <API_FOC_Torque_Update+0x4d0>
 8001f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f2a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		float const Torque_Ki = (float)((int16_t)(MAKE_SHORT(regs[REG_PID_TORQUE_CURRENT_KI_L],regs[REG_PID_TORQUE_CURRENT_KI_H])))/10000000.0f;
 8001f2e:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001f30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	b21a      	sxth	r2, r3
 8001f38:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001f3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f3e:	b21b      	sxth	r3, r3
 8001f40:	4313      	orrs	r3, r2
 8001f42:	b21b      	sxth	r3, r3
 8001f44:	ee07 3a90 	vmov	s15, r3
 8001f48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f4c:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001fcc <API_FOC_Torque_Update+0x4d4>
 8001f50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f54:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		float const Torque_Kff = (float)((int16_t)(MAKE_SHORT(regs[REG_PID_TORQUE_CURRENT_KFF_L],regs[REG_PID_TORQUE_CURRENT_KFF_H])))/100000.0f;
 8001f58:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001f5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	b21a      	sxth	r2, r3
 8001f62:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <API_FOC_Torque_Update+0x4cc>)
 8001f64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f68:	b21b      	sxth	r3, r3
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	b21b      	sxth	r3, r3
 8001f6e:	ee07 3a90 	vmov	s15, r3
 8001f72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f76:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001fc8 <API_FOC_Torque_Update+0x4d0>
 8001f7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f7e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		float const error_Iq = setpoint_Iq-( closed_loop == 1 ? present_Iq_filtered : 0.0f);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d127      	bne.n	8001fd8 <API_FOC_Torque_Update+0x4e0>
 8001f88:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <API_FOC_Torque_Update+0x4c8>)
 8001f8a:	edd3 7a00 	vldr	s15, [r3]
 8001f8e:	e025      	b.n	8001fdc <API_FOC_Torque_Update+0x4e4>
 8001f90:	bf800000 	.word	0xbf800000
 8001f94:	20000120 	.word	0x20000120
 8001f98:	40c90fdb 	.word	0x40c90fdb
 8001f9c:	20000164 	.word	0x20000164
 8001fa0:	20000160 	.word	0x20000160
 8001fa4:	200000f0 	.word	0x200000f0
 8001fa8:	3f2aaaab 	.word	0x3f2aaaab
 8001fac:	3eaaaaab 	.word	0x3eaaaaab
 8001fb0:	0800ee68 	.word	0x0800ee68
 8001fb4:	3d4ccccd 	.word	0x3d4ccccd
 8001fb8:	200000fc 	.word	0x200000fc
 8001fbc:	3f733333 	.word	0x3f733333
 8001fc0:	20000100 	.word	0x20000100
 8001fc4:	2000021c 	.word	0x2000021c
 8001fc8:	47c35000 	.word	0x47c35000
 8001fcc:	4b189680 	.word	0x4b189680
 8001fd0:	20000104 	.word	0x20000104
 8001fd4:	00000000 	.word	0x00000000
 8001fd8:	ed5f 7a02 	vldr	s15, [pc, #-8]	; 8001fd4 <API_FOC_Torque_Update+0x4dc>
 8001fdc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fe4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				&pid_torque,
				error_Iq,
				Torque_Kp,
				Torque_Ki,
				0.0f, // no Kd
				regs[REG_HIGH_VOLTAGE_LIMIT_VALUE],
 8001fe8:	4b2c      	ldr	r3, [pc, #176]	; (800209c <API_FOC_Torque_Update+0x5a4>)
 8001fea:	7f1b      	ldrb	r3, [r3, #28]
		float const Vq = pid_process_antiwindup_clamp_with_ff(
 8001fec:	ee07 3a90 	vmov	s15, r3
 8001ff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ff4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001ff8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002000:	eeb0 3a67 	vmov.f32	s6, s15
 8002004:	eddf 2a26 	vldr	s5, [pc, #152]	; 80020a0 <API_FOC_Torque_Update+0x5a8>
 8002008:	eeb0 2a66 	vmov.f32	s4, s13
 800200c:	eddf 1a24 	vldr	s3, [pc, #144]	; 80020a0 <API_FOC_Torque_Update+0x5a8>
 8002010:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 8002014:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8002018:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800201c:	4821      	ldr	r0, [pc, #132]	; (80020a4 <API_FOC_Torque_Update+0x5ac>)
 800201e:	f002 f91d 	bl	800425c <pid_process_antiwindup_clamp_with_ff>
 8002022:	ed87 0a08 	vstr	s0, [r7, #32]
				0.0f, // no derivative low pass filter
				Torque_Kff*setpoint_Iq
		);

		// do inverse clarke and park transformation and update TIMER1 register (3-phase PWM generation)
		LL_FOC_Inverse_Clarke_Park_PWM_Generation(Vd,Vq,cosine_theta,sine_theta);
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <API_FOC_Torque_Update+0x5b0>)
 8002028:	edd3 7a00 	vldr	s15, [r3]
 800202c:	4b1f      	ldr	r3, [pc, #124]	; (80020ac <API_FOC_Torque_Update+0x5b4>)
 800202e:	ed93 7a00 	vldr	s14, [r3]
 8002032:	eef0 1a47 	vmov.f32	s3, s14
 8002036:	eeb0 1a67 	vmov.f32	s2, s15
 800203a:	edd7 0a08 	vldr	s1, [r7, #32]
 800203e:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8002042:	f7ff fb49 	bl	80016d8 <LL_FOC_Inverse_Clarke_Park_PWM_Generation>

		// performance monitoring
		uint16_t const t_end = __HAL_TIM_GET_COUNTER(&htim6);
 8002046:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <API_FOC_Torque_Update+0x5b8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	83fb      	strh	r3, [r7, #30]
		uint16_t const t_tp = t_end-t_begin;
 800204e:	8bfa      	ldrh	r2, [r7, #30]
 8002050:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	83bb      	strh	r3, [r7, #28]
		static const float alpha_performance_monitoring = 0.001f;
		average_processing_time_us = (1.0f-alpha_performance_monitoring)*average_processing_time_us+alpha_performance_monitoring*(float)t_tp;
 8002058:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <API_FOC_Torque_Update+0x5bc>)
 800205a:	edd3 7a00 	vldr	s15, [r3]
 800205e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002062:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002066:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <API_FOC_Torque_Update+0x5c0>)
 8002068:	edd3 7a00 	vldr	s15, [r3]
 800206c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002070:	8bbb      	ldrh	r3, [r7, #28]
 8002072:	ee07 3a90 	vmov	s15, r3
 8002076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <API_FOC_Torque_Update+0x5bc>)
 800207c:	edd3 7a00 	vldr	s15, [r3]
 8002080:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <API_FOC_Torque_Update+0x5c0>)
 800208a:	edc3 7a00 	vstr	s15, [r3]
				(int)(duty_cycle_PWMb*100.0f),
				(int)(duty_cycle_PWMc*100.0f)
			);
		}*/
	}
}
 800208e:	bf00      	nop
 8002090:	3778      	adds	r7, #120	; 0x78
 8002092:	46bd      	mov	sp, r7
 8002094:	ecbd 8b02 	vpop	{d8}
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	2000021c 	.word	0x2000021c
 80020a0:	00000000 	.word	0x00000000
 80020a4:	20000110 	.word	0x20000110
 80020a8:	20000160 	.word	0x20000160
 80020ac:	20000164 	.word	0x20000164
 80020b0:	20002efc 	.word	0x20002efc
 80020b4:	0800ee6c 	.word	0x0800ee6c
 80020b8:	20000140 	.word	0x20000140

080020bc <API_FOC_Get_Present_Velocity>:
{
	return absolute_position_multi_rad;
}

float API_FOC_Get_Present_Velocity()
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
	return velocity_dps;
 80020c0:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <API_FOC_Get_Present_Velocity+0x18>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	ee07 3a90 	vmov	s15, r3
}
 80020c8:	eeb0 0a67 	vmov.f32	s0, s15
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	20000128 	.word	0x20000128

080020d8 <API_FOC_Get_Present_Torque_Current>:

float API_FOC_Get_Present_Torque_Current()
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
	return present_Iq_filtered;
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <API_FOC_Get_Present_Torque_Current+0x18>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	ee07 3a90 	vmov	s15, r3
}
 80020e4:	eeb0 0a67 	vmov.f32	s0, s15
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	20000100 	.word	0x20000100

080020f4 <API_FOC_Get_Present_Flux_Current>:

float API_FOC_Get_Present_Flux_Current()
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
	return present_Id_filtered;
 80020f8:	4b04      	ldr	r3, [pc, #16]	; (800210c <API_FOC_Get_Present_Flux_Current+0x18>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	ee07 3a90 	vmov	s15, r3
}
 8002100:	eeb0 0a67 	vmov.f32	s0, s15
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	200000fc 	.word	0x200000fc

08002110 <API_FOC_Get_Present_Voltage>:

float API_FOC_Get_Present_Voltage()
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
	return present_voltage_V;
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <API_FOC_Get_Present_Voltage+0x18>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	ee07 3a90 	vmov	s15, r3
}
 800211c:	eeb0 0a67 	vmov.f32	s0, s15
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	20000138 	.word	0x20000138

0800212c <API_FOC_Get_Present_Temp>:

float API_FOC_Get_Present_Temp()
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
	return present_temperature_C;
 8002130:	4b04      	ldr	r3, [pc, #16]	; (8002144 <API_FOC_Get_Present_Temp+0x18>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	ee07 3a90 	vmov	s15, r3
}
 8002138:	eeb0 0a67 	vmov.f32	s0, s15
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	2000013c 	.word	0x2000013c

08002148 <API_FOC_Get_Processing_Time>:

float API_FOC_Get_Processing_Time()
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
	return average_processing_time_us;
 800214c:	4b04      	ldr	r3, [pc, #16]	; (8002160 <API_FOC_Get_Processing_Time+0x18>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	ee07 3a90 	vmov	s15, r3

}
 8002154:	eeb0 0a67 	vmov.f32	s0, s15
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	20000140 	.word	0x20000140

08002164 <API_FOC_It>:

void API_FOC_It(ADC_HandleTypeDef *hadc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	if(hadc==&hadc1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a4e      	ldr	r2, [pc, #312]	; (80022a8 <API_FOC_It+0x144>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d146      	bne.n	8002202 <API_FOC_It+0x9e>
	{
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1))
 8002174:	4b4d      	ldr	r3, [pc, #308]	; (80022ac <API_FOC_It+0x148>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	2b10      	cmp	r3, #16
 8002180:	d123      	bne.n	80021ca <API_FOC_It+0x66>
		{
			// Filter (EWMA) position and voltage ADC samples
			motor_current_input_adc[0] = ADC1_DMA[1];
 8002182:	4b4b      	ldr	r3, [pc, #300]	; (80022b0 <API_FOC_It+0x14c>)
 8002184:	885b      	ldrh	r3, [r3, #2]
 8002186:	b29a      	uxth	r2, r3
 8002188:	4b4a      	ldr	r3, [pc, #296]	; (80022b4 <API_FOC_It+0x150>)
 800218a:	801a      	strh	r2, [r3, #0]
			potentiometer_input_adc = ADC1_DMA[2];
 800218c:	4b48      	ldr	r3, [pc, #288]	; (80022b0 <API_FOC_It+0x14c>)
 800218e:	889b      	ldrh	r3, [r3, #4]
 8002190:	b29b      	uxth	r3, r3
 8002192:	ee07 3a90 	vmov	s15, r3
 8002196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800219a:	4b47      	ldr	r3, [pc, #284]	; (80022b8 <API_FOC_It+0x154>)
 800219c:	edc3 7a00 	vstr	s15, [r3]
			vbus_input_adc = ADC1_DMA[3];
 80021a0:	4b43      	ldr	r3, [pc, #268]	; (80022b0 <API_FOC_It+0x14c>)
 80021a2:	88db      	ldrh	r3, [r3, #6]
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	ee07 3a90 	vmov	s15, r3
 80021aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ae:	4b43      	ldr	r3, [pc, #268]	; (80022bc <API_FOC_It+0x158>)
 80021b0:	edc3 7a00 	vstr	s15, [r3]
			temperature_input_adc = ADC1_DMA[4];
 80021b4:	4b3e      	ldr	r3, [pc, #248]	; (80022b0 <API_FOC_It+0x14c>)
 80021b6:	891b      	ldrh	r3, [r3, #8]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	ee07 3a90 	vmov	s15, r3
 80021be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021c2:	4b3f      	ldr	r3, [pc, #252]	; (80022c0 <API_FOC_It+0x15c>)
 80021c4:	edc3 7a00 	vstr	s15, [r3]
 80021c8:	e016      	b.n	80021f8 <API_FOC_It+0x94>
		}
		else
		{
			motor_current_input_adc_offset[0] = ALPHA_CURRENT_SENSE_OFFSET*(float)(ADC1_DMA[1]) + (1.0f-ALPHA_CURRENT_SENSE_OFFSET)*motor_current_input_adc_offset[0];
 80021ca:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <API_FOC_It+0x14c>)
 80021cc:	885b      	ldrh	r3, [r3, #2]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	ee07 3a90 	vmov	s15, r3
 80021d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021d8:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80022c4 <API_FOC_It+0x160>
 80021dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021e0:	4b39      	ldr	r3, [pc, #228]	; (80022c8 <API_FOC_It+0x164>)
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	eddf 6a39 	vldr	s13, [pc, #228]	; 80022cc <API_FOC_It+0x168>
 80021ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f2:	4b35      	ldr	r3, [pc, #212]	; (80022c8 <API_FOC_It+0x164>)
 80021f4:	edc3 7a00 	vstr	s15, [r3]
		}
		// restart ADC
		HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC1_DMA,5);
 80021f8:	2205      	movs	r2, #5
 80021fa:	492d      	ldr	r1, [pc, #180]	; (80022b0 <API_FOC_It+0x14c>)
 80021fc:	482a      	ldr	r0, [pc, #168]	; (80022a8 <API_FOC_It+0x144>)
 80021fe:	f004 fbaf 	bl	8006960 <HAL_ADC_Start_DMA>
	}
	if(hadc==&hadc2)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a32      	ldr	r2, [pc, #200]	; (80022d0 <API_FOC_It+0x16c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d149      	bne.n	800229e <API_FOC_It+0x13a>
	{
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1))
 800220a:	4b28      	ldr	r3, [pc, #160]	; (80022ac <API_FOC_It+0x148>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0310 	and.w	r3, r3, #16
 8002214:	2b10      	cmp	r3, #16
 8002216:	d10f      	bne.n	8002238 <API_FOC_It+0xd4>
		{
			// Filter (EWMA) position and voltage ADC samples
			motor_current_input_adc[1] = ADC2_DMA[1];
 8002218:	4b2e      	ldr	r3, [pc, #184]	; (80022d4 <API_FOC_It+0x170>)
 800221a:	885b      	ldrh	r3, [r3, #2]
 800221c:	b29a      	uxth	r2, r3
 800221e:	4b25      	ldr	r3, [pc, #148]	; (80022b4 <API_FOC_It+0x150>)
 8002220:	805a      	strh	r2, [r3, #2]
			motor_current_input_adc[2] = ADC2_DMA[2];
 8002222:	4b2c      	ldr	r3, [pc, #176]	; (80022d4 <API_FOC_It+0x170>)
 8002224:	889b      	ldrh	r3, [r3, #4]
 8002226:	b29a      	uxth	r2, r3
 8002228:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <API_FOC_It+0x150>)
 800222a:	809a      	strh	r2, [r3, #4]
			++current_samples;
 800222c:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <API_FOC_It+0x174>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	3301      	adds	r3, #1
 8002232:	4a29      	ldr	r2, [pc, #164]	; (80022d8 <API_FOC_It+0x174>)
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e02d      	b.n	8002294 <API_FOC_It+0x130>
		}
		else
		{
			motor_current_input_adc_offset[1] = ALPHA_CURRENT_SENSE_OFFSET*(float)(ADC2_DMA[1]) + (1.0f-ALPHA_CURRENT_SENSE_OFFSET)*motor_current_input_adc_offset[1];
 8002238:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <API_FOC_It+0x170>)
 800223a:	885b      	ldrh	r3, [r3, #2]
 800223c:	b29b      	uxth	r3, r3
 800223e:	ee07 3a90 	vmov	s15, r3
 8002242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002246:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80022c4 <API_FOC_It+0x160>
 800224a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800224e:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <API_FOC_It+0x164>)
 8002250:	edd3 7a01 	vldr	s15, [r3, #4]
 8002254:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80022cc <API_FOC_It+0x168>
 8002258:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800225c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002260:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <API_FOC_It+0x164>)
 8002262:	edc3 7a01 	vstr	s15, [r3, #4]
			motor_current_input_adc_offset[2] = ALPHA_CURRENT_SENSE_OFFSET*(float)(ADC2_DMA[2]) + (1.0f-ALPHA_CURRENT_SENSE_OFFSET)*motor_current_input_adc_offset[2];
 8002266:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <API_FOC_It+0x170>)
 8002268:	889b      	ldrh	r3, [r3, #4]
 800226a:	b29b      	uxth	r3, r3
 800226c:	ee07 3a90 	vmov	s15, r3
 8002270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002274:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80022c4 <API_FOC_It+0x160>
 8002278:	ee27 7a87 	vmul.f32	s14, s15, s14
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <API_FOC_It+0x164>)
 800227e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002282:	eddf 6a12 	vldr	s13, [pc, #72]	; 80022cc <API_FOC_It+0x168>
 8002286:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800228a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <API_FOC_It+0x164>)
 8002290:	edc3 7a02 	vstr	s15, [r3, #8]
		}
		// restart ADC
		HAL_ADC_Start_DMA(&hadc2,(uint32_t*)ADC2_DMA,3);
 8002294:	2203      	movs	r2, #3
 8002296:	490f      	ldr	r1, [pc, #60]	; (80022d4 <API_FOC_It+0x170>)
 8002298:	480d      	ldr	r0, [pc, #52]	; (80022d0 <API_FOC_It+0x16c>)
 800229a:	f004 fb61 	bl	8006960 <HAL_ADC_Start_DMA>
	}
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	2000049c 	.word	0x2000049c
 80022ac:	20002f48 	.word	0x20002f48
 80022b0:	200000cc 	.word	0x200000cc
 80022b4:	200000e0 	.word	0x200000e0
 80022b8:	2000012c 	.word	0x2000012c
 80022bc:	20000130 	.word	0x20000130
 80022c0:	20000134 	.word	0x20000134
 80022c4:	3a83126f 	.word	0x3a83126f
 80022c8:	20000000 	.word	0x20000000
 80022cc:	3f7fbe77 	.word	0x3f7fbe77
 80022d0:	200003b8 	.word	0x200003b8
 80022d4:	200000d8 	.word	0x200000d8
 80022d8:	200000c8 	.word	0x200000c8

080022dc <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
	API_AS5048A_Position_Sensor_It(htim);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f002 f88f 	bl	8004408 <API_AS5048A_Position_Sensor_It>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_ADC_ConvCpltCallback>:


// current sense
// TODO: add OC4 with short pulse to start ADC en OC4 EVENT, a little time before UPDATE
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
	API_FOC_It(hadc);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff ff32 	bl	8002164 <API_FOC_It>
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <FDCAN_Config>:
  * @brief  Configures the FDCAN.
  * @param  None
  * @retval None
  */
static void FDCAN_Config(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af02      	add	r7, sp, #8
  FDCAN_FilterTypeDef sFilterConfig;

  /* Configure Rx filter */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800230e:	2300      	movs	r3, #0
 8002310:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800231a:	2301      	movs	r3, #1
 800231c:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x000;
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x100;
 8002322:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002326:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8002328:	463b      	mov	r3, r7
 800232a:	4619      	mov	r1, r3
 800232c:	4829      	ldr	r0, [pc, #164]	; (80023d4 <FDCAN_Config+0xcc>)
 800232e:	f006 fac3 	bl	80088b8 <HAL_FDCAN_ConfigFilter>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <FDCAN_Config+0x34>
  {
    Error_Handler();
 8002338:	f001 ff4c 	bl	80041d4 <Error_Handler>
  }

  /* Configure global filter:
     Filter all remote frames with STD and EXT ID
     Reject non matching frames with STD ID and EXT ID */
  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 800233c:	2300      	movs	r3, #0
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2300      	movs	r3, #0
 8002342:	2202      	movs	r2, #2
 8002344:	2102      	movs	r1, #2
 8002346:	4823      	ldr	r0, [pc, #140]	; (80023d4 <FDCAN_Config+0xcc>)
 8002348:	f006 fb10 	bl	800896c <HAL_FDCAN_ConfigGlobalFilter>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <FDCAN_Config+0x4e>
  {
    Error_Handler();
 8002352:	f001 ff3f 	bl	80041d4 <Error_Handler>
  }

  HAL_GPIO_WritePin(CAN_SHDN_GPIO_Port, CAN_SHDN_Pin, GPIO_PIN_RESET);
 8002356:	2200      	movs	r2, #0
 8002358:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800235c:	481e      	ldr	r0, [pc, #120]	; (80023d8 <FDCAN_Config+0xd0>)
 800235e:	f007 fa47 	bl	80097f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAN_TERM_GPIO_Port, CAN_TERM_Pin, GPIO_PIN_RESET); // SET means activating R120
 8002362:	2200      	movs	r2, #0
 8002364:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002368:	481b      	ldr	r0, [pc, #108]	; (80023d8 <FDCAN_Config+0xd0>)
 800236a:	f007 fa41 	bl	80097f0 <HAL_GPIO_WritePin>

  /* Start the FDCAN module */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800236e:	4819      	ldr	r0, [pc, #100]	; (80023d4 <FDCAN_Config+0xcc>)
 8002370:	f006 fb2d 	bl	80089ce <HAL_FDCAN_Start>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <FDCAN_Config+0x76>
  {
    Error_Handler();
 800237a:	f001 ff2b 	bl	80041d4 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800237e:	2200      	movs	r2, #0
 8002380:	2101      	movs	r1, #1
 8002382:	4814      	ldr	r0, [pc, #80]	; (80023d4 <FDCAN_Config+0xcc>)
 8002384:	f006 fc88 	bl	8008c98 <HAL_FDCAN_ActivateNotification>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <FDCAN_Config+0x8a>
  {
    Error_Handler();
 800238e:	f001 ff21 	bl	80041d4 <Error_Handler>
  }

  /* Prepare Tx Header */
  TxHeader.Identifier = 0x001;
 8002392:	4b12      	ldr	r3, [pc, #72]	; (80023dc <FDCAN_Config+0xd4>)
 8002394:	2201      	movs	r2, #1
 8002396:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8002398:	4b10      	ldr	r3, [pc, #64]	; (80023dc <FDCAN_Config+0xd4>)
 800239a:	2200      	movs	r2, #0
 800239c:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800239e:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <FDCAN_Config+0xd4>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80023a4:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <FDCAN_Config+0xd4>)
 80023a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80023aa:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <FDCAN_Config+0xd4>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80023b2:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <FDCAN_Config+0xd4>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <FDCAN_Config+0xd4>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80023be:	4b07      	ldr	r3, [pc, #28]	; (80023dc <FDCAN_Config+0xd4>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <FDCAN_Config+0xd4>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	621a      	str	r2, [r3, #32]
}
 80023ca:	bf00      	nop
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20002e98 	.word	0x20002e98
 80023d8:	48000800 	.word	0x48000800
 80023dc:	20000198 	.word	0x20000198

080023e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023e0:	b5b0      	push	{r4, r5, r7, lr}
 80023e2:	ed2d 8b04 	vpush	{d8-d9}
 80023e6:	b0bc      	sub	sp, #240	; 0xf0
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023ea:	f003 fe5e 	bl	80060aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023ee:	f001 f9fb 	bl	80037e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023f2:	f001 fe97 	bl	8004124 <MX_GPIO_Init>
  MX_DMA_Init();
 80023f6:	f001 fe53 	bl	80040a0 <MX_DMA_Init>
  MX_TIM4_Init();
 80023fa:	f001 fd4b 	bl	8003e94 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80023fe:	f001 fe01 	bl	8004004 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002402:	f001 fc7b 	bl	8003cfc <MX_TIM1_Init>
  MX_ADC1_Init();
 8002406:	f001 fa59 	bl	80038bc <MX_ADC1_Init>
  MX_ADC2_Init();
 800240a:	f001 fb0f 	bl	8003a2c <MX_ADC2_Init>
  MX_OPAMP1_Init();
 800240e:	f001 fbeb 	bl	8003be8 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8002412:	f001 fc17 	bl	8003c44 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8002416:	f001 fc43 	bl	8003ca0 <MX_OPAMP3_Init>
  MX_CORDIC_Init();
 800241a:	f001 fb8b 	bl	8003b34 <MX_CORDIC_Init>
  MX_TIM6_Init();
 800241e:	f001 fdbb 	bl	8003f98 <MX_TIM6_Init>
  MX_FDCAN1_Init();
 8002422:	f001 fb9b 	bl	8003b5c <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6); // 1us base timer
 8002426:	4882      	ldr	r0, [pc, #520]	; (8002630 <main+0x250>)
 8002428:	f008 fb2c 	bl	800aa84 <HAL_TIM_Base_Start>
  uint16_t present_time_us = __HAL_TIM_GET_COUNTER(&htim6);
 800242c:	4b80      	ldr	r3, [pc, #512]	; (8002630 <main+0x250>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
  uint16_t last_time_us = present_time_us;
 8002436:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800243a:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
  API_FOC_Init();
 800243e:	f7fe fffb 	bl	8001438 <API_FOC_Init>
  HAL_Serial_Init(&huart2,&serial);
 8002442:	497c      	ldr	r1, [pc, #496]	; (8002634 <main+0x254>)
 8002444:	487c      	ldr	r0, [pc, #496]	; (8002638 <main+0x258>)
 8002446:	f002 fd3f 	bl	8004ec8 <HAL_Serial_Init>
  HAL_Serial_Print(&serial,"RESET!\n");
 800244a:	497c      	ldr	r1, [pc, #496]	; (800263c <main+0x25c>)
 800244c:	4879      	ldr	r0, [pc, #484]	; (8002634 <main+0x254>)
 800244e:	f003 f973 	bl	8005738 <HAL_Serial_Print>
	if(eeprom_empty())
 8002452:	f7fe fe67 	bl	8001124 <eeprom_empty>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <main+0x80>
		factory_reset_eeprom_regs();
 800245c:	f7fe fd26 	bl	8000eac <factory_reset_eeprom_regs>
	load_eeprom_regs();
 8002460:	f7fe fe36 	bl	80010d0 <load_eeprom_regs>
	reset_ram_regs();
 8002464:	f7fe fe48 	bl	80010f8 <reset_ram_regs>
	FDCAN_Config();
 8002468:	f7ff ff4e 	bl	8002308 <FDCAN_Config>
	///////////////
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	float setpoint_position_deg = 0.0f;
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	float setpoint_velocity_dps = 0.0f;
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	float setpoint_acceleration_dpss = 0.0f;
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	float setpoint_torque_current_mA = 0.0f;
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	float setpoint_flux_current_mA = 0.0f;
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	float last_setpoint_velocity_dps = 0.0f;
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	uint16_t last_mode = regs[REG_CONTROL_MODE];
 800249c:	4b68      	ldr	r3, [pc, #416]	; (8002640 <main+0x260>)
 800249e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80024a2:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	pid_context_t pid_velocity;
	pid_context_t pid_position;
	pid_reset(&pid_position);
 80024a6:	f107 030c 	add.w	r3, r7, #12
 80024aa:	4618      	mov	r0, r3
 80024ac:	f001 fec0 	bl	8004230 <pid_reset>
	pid_reset(&pid_velocity);
 80024b0:	f107 0318 	add.w	r3, r7, #24
 80024b4:	4618      	mov	r0, r3
 80024b6:	f001 febb 	bl	8004230 <pid_reset>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// Handle CAN communication
	while( HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1,FDCAN_RX_FIFO0)!=0)
 80024ba:	e070      	b.n	800259e <main+0x1be>
	{
	  HAL_StatusTypeDef rx_result = HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0,&RxHeader,RxData);
 80024bc:	4b61      	ldr	r3, [pc, #388]	; (8002644 <main+0x264>)
 80024be:	4a62      	ldr	r2, [pc, #392]	; (8002648 <main+0x268>)
 80024c0:	2140      	movs	r1, #64	; 0x40
 80024c2:	4862      	ldr	r0, [pc, #392]	; (800264c <main+0x26c>)
 80024c4:	f006 faf0 	bl	8008aa8 <HAL_FDCAN_GetRxMessage>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  if(rx_result==HAL_OK)
 80024ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d163      	bne.n	800259e <main+0x1be>
	  {
		  // decode message ID=0x000
		  if(RxHeader.Identifier==0x000)
 80024d6:	4b5c      	ldr	r3, [pc, #368]	; (8002648 <main+0x268>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d15f      	bne.n	800259e <main+0x1be>
		  {
			  uint32_t payload_length = RxHeader.DataLength>>16U;
 80024de:	4b5a      	ldr	r3, [pc, #360]	; (8002648 <main+0x268>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	0c1b      	lsrs	r3, r3, #16
 80024e4:	62bb      	str	r3, [r7, #40]	; 0x28
			  // check payload size = 8
			  if(payload_length==8)
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d158      	bne.n	800259e <main+0x1be>
			  {
				  // decode payload filed
				  uint8_t const id = RxData[0];
 80024ec:	4b55      	ldr	r3, [pc, #340]	; (8002644 <main+0x264>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				  //uint8_t const mode = RxData[1];
				  //float const goal_position = (int16_t)(MAKE_SHORT(RxData[2],RxData[3]));;
				  //float const goal_velocity = (int16_t)(MAKE_SHORT(RxData[4],RxData[5]));;
				  //float const goal_torque = (int16_t)(MAKE_SHORT(RxData[6],RxData[7]));;
				  if(id==regs[REG_ID])
 80024f4:	4b52      	ldr	r3, [pc, #328]	; (8002640 <main+0x260>)
 80024f6:	78db      	ldrb	r3, [r3, #3]
 80024f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d122      	bne.n	8002546 <main+0x166>
				  {
					  regs[REG_CONTROL_MODE] = RxData[1];
 8002500:	4b50      	ldr	r3, [pc, #320]	; (8002644 <main+0x264>)
 8002502:	785a      	ldrb	r2, [r3, #1]
 8002504:	4b4e      	ldr	r3, [pc, #312]	; (8002640 <main+0x260>)
 8002506:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
					  regs[REG_GOAL_POSITION_DEG_L] = RxData[2];
 800250a:	4b4e      	ldr	r3, [pc, #312]	; (8002644 <main+0x264>)
 800250c:	789a      	ldrb	r2, [r3, #2]
 800250e:	4b4c      	ldr	r3, [pc, #304]	; (8002640 <main+0x260>)
 8002510:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					  regs[REG_GOAL_POSITION_DEG_H] = RxData[3];
 8002514:	4b4b      	ldr	r3, [pc, #300]	; (8002644 <main+0x264>)
 8002516:	78da      	ldrb	r2, [r3, #3]
 8002518:	4b49      	ldr	r3, [pc, #292]	; (8002640 <main+0x260>)
 800251a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
					  regs[REG_GOAL_VELOCITY_DPS_L] = RxData[4];
 800251e:	4b49      	ldr	r3, [pc, #292]	; (8002644 <main+0x264>)
 8002520:	791a      	ldrb	r2, [r3, #4]
 8002522:	4b47      	ldr	r3, [pc, #284]	; (8002640 <main+0x260>)
 8002524:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
					  regs[REG_GOAL_VELOCITY_DPS_H] = RxData[5];
 8002528:	4b46      	ldr	r3, [pc, #280]	; (8002644 <main+0x264>)
 800252a:	795a      	ldrb	r2, [r3, #5]
 800252c:	4b44      	ldr	r3, [pc, #272]	; (8002640 <main+0x260>)
 800252e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
					  regs[REG_GOAL_TORQUE_CURRENT_MA_L] = RxData[6];
 8002532:	4b44      	ldr	r3, [pc, #272]	; (8002644 <main+0x264>)
 8002534:	799a      	ldrb	r2, [r3, #6]
 8002536:	4b42      	ldr	r3, [pc, #264]	; (8002640 <main+0x260>)
 8002538:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
					  regs[REG_GOAL_TORQUE_CURRENT_MA_H] = RxData[7];
 800253c:	4b41      	ldr	r3, [pc, #260]	; (8002644 <main+0x264>)
 800253e:	79da      	ldrb	r2, [r3, #7]
 8002540:	4b3f      	ldr	r3, [pc, #252]	; (8002640 <main+0x260>)
 8002542:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				  }
				  // then reply by a status frame
				  TxData[0] = regs[REG_ID];
 8002546:	4b3e      	ldr	r3, [pc, #248]	; (8002640 <main+0x260>)
 8002548:	78da      	ldrb	r2, [r3, #3]
 800254a:	4b41      	ldr	r3, [pc, #260]	; (8002650 <main+0x270>)
 800254c:	701a      	strb	r2, [r3, #0]
				  TxData[1] = regs[REG_HARDWARE_ERROR_STATUS];
 800254e:	4b3c      	ldr	r3, [pc, #240]	; (8002640 <main+0x260>)
 8002550:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 8002554:	4b3e      	ldr	r3, [pc, #248]	; (8002650 <main+0x270>)
 8002556:	705a      	strb	r2, [r3, #1]
				  TxData[2] = regs[REG_PRESENT_POSITION_DEG_L];
 8002558:	4b39      	ldr	r3, [pc, #228]	; (8002640 <main+0x260>)
 800255a:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 800255e:	4b3c      	ldr	r3, [pc, #240]	; (8002650 <main+0x270>)
 8002560:	709a      	strb	r2, [r3, #2]
				  TxData[3] = regs[REG_PRESENT_POSITION_DEG_H];
 8002562:	4b37      	ldr	r3, [pc, #220]	; (8002640 <main+0x260>)
 8002564:	f893 2091 	ldrb.w	r2, [r3, #145]	; 0x91
 8002568:	4b39      	ldr	r3, [pc, #228]	; (8002650 <main+0x270>)
 800256a:	70da      	strb	r2, [r3, #3]
				  TxData[4] = regs[REG_PRESENT_TORQUE_CURRENT_MA_L];
 800256c:	4b34      	ldr	r3, [pc, #208]	; (8002640 <main+0x260>)
 800256e:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
 8002572:	4b37      	ldr	r3, [pc, #220]	; (8002650 <main+0x270>)
 8002574:	711a      	strb	r2, [r3, #4]
				  TxData[5] = regs[REG_PRESENT_TORQUE_CURRENT_MA_H];
 8002576:	4b32      	ldr	r3, [pc, #200]	; (8002640 <main+0x260>)
 8002578:	f893 2095 	ldrb.w	r2, [r3, #149]	; 0x95
 800257c:	4b34      	ldr	r3, [pc, #208]	; (8002650 <main+0x270>)
 800257e:	715a      	strb	r2, [r3, #5]
				  TxData[6] = regs[REG_PRESENT_VOLTAGE];
 8002580:	4b2f      	ldr	r3, [pc, #188]	; (8002640 <main+0x260>)
 8002582:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8002586:	4b32      	ldr	r3, [pc, #200]	; (8002650 <main+0x270>)
 8002588:	719a      	strb	r2, [r3, #6]
				  TxData[7] = regs[REG_PRESENT_TEMPERATURE];
 800258a:	4b2d      	ldr	r3, [pc, #180]	; (8002640 <main+0x260>)
 800258c:	f893 2099 	ldrb.w	r2, [r3, #153]	; 0x99
 8002590:	4b2f      	ldr	r3, [pc, #188]	; (8002650 <main+0x270>)
 8002592:	71da      	strb	r2, [r3, #7]
				  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1,&TxHeader,TxData);
 8002594:	4a2e      	ldr	r2, [pc, #184]	; (8002650 <main+0x270>)
 8002596:	492f      	ldr	r1, [pc, #188]	; (8002654 <main+0x274>)
 8002598:	482c      	ldr	r0, [pc, #176]	; (800264c <main+0x26c>)
 800259a:	f006 fa40 	bl	8008a1e <HAL_FDCAN_AddMessageToTxFifoQ>
	while( HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1,FDCAN_RX_FIFO0)!=0)
 800259e:	2140      	movs	r1, #64	; 0x40
 80025a0:	482a      	ldr	r0, [pc, #168]	; (800264c <main+0x26c>)
 80025a2:	f006 fb5b 	bl	8008c5c <HAL_FDCAN_GetRxFifoFillLevel>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d187      	bne.n	80024bc <main+0xdc>
	  //else
	  // CAN error handler
	}

	// Handle serial communication
	while(HAL_Serial_Available(&serial))
 80025ac:	e00a      	b.n	80025c4 <main+0x1e4>
	{
	  char c = HAL_Serial_GetChar(&serial);
 80025ae:	4821      	ldr	r0, [pc, #132]	; (8002634 <main+0x254>)
 80025b0:	f002 fd24 	bl	8004ffc <HAL_Serial_GetChar>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  packet_handler(c);
 80025ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025be:	4618      	mov	r0, r3
 80025c0:	f002 fb18 	bl	8004bf4 <packet_handler>
	while(HAL_Serial_Available(&serial))
 80025c4:	481b      	ldr	r0, [pc, #108]	; (8002634 <main+0x254>)
 80025c6:	f002 fce9 	bl	8004f9c <HAL_Serial_Available>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1ee      	bne.n	80025ae <main+0x1ce>
	}

	// 1Khz low priority process
	#define MAIN_LOO_PERIOD_US 900
	present_time_us = __HAL_TIM_GET_COUNTER(&htim6);
 80025d0:	4b17      	ldr	r3, [pc, #92]	; (8002630 <main+0x250>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	int16_t const delta_time_us = present_time_us-last_time_us;
 80025da:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 80025de:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
	if(delta_time_us>=MAIN_LOO_PERIOD_US)
 80025ea:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 80025ee:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80025f2:	f2c1 809b 	blt.w	800372c <main+0x134c>
	{
		last_time_us+=MAIN_LOO_PERIOD_US;
 80025f6:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80025fa:	f503 7361 	add.w	r3, r3, #900	; 0x384
 80025fe:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
		// make alias
		uint16_t const reg_control_mode = regs[REG_CONTROL_MODE];
 8002602:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <main+0x260>)
 8002604:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002608:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
		// process operating mode
		switch(reg_control_mode)
 800260c:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8002610:	2b04      	cmp	r3, #4
 8002612:	f200 8705 	bhi.w	8003420 <main+0x1040>
 8002616:	a201      	add	r2, pc, #4	; (adr r2, 800261c <main+0x23c>)
 8002618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261c:	08002659 	.word	0x08002659
 8002620:	08002bb5 	.word	0x08002bb5
 8002624:	0800301f 	.word	0x0800301f
 8002628:	0800327b 	.word	0x0800327b
 800262c:	08003379 	.word	0x08003379
 8002630:	20002efc 	.word	0x20002efc
 8002634:	20000568 	.word	0x20000568
 8002638:	20002f94 	.word	0x20002f94
 800263c:	0800ee2c 	.word	0x0800ee2c
 8002640:	2000021c 	.word	0x2000021c
 8002644:	20000190 	.word	0x20000190
 8002648:	20000168 	.word	0x20000168
 800264c:	20002e98 	.word	0x20002e98
 8002650:	200001bc 	.word	0x200001bc
 8002654:	20000198 	.word	0x20000198
		{
		case REG_CONTROL_MODE_POSITION_VELOCITY_TORQUE_VELOCITY_PROFIL:
			if(last_mode!=REG_CONTROL_MODE_POSITION_VELOCITY_TORQUE_VELOCITY_PROFIL)
 8002658:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 809a 	beq.w	8002796 <main+0x3b6>
			{
				pid_reset(&pid_position);
 8002662:	f107 030c 	add.w	r3, r7, #12
 8002666:	4618      	mov	r0, r3
 8002668:	f001 fde2 	bl	8004230 <pid_reset>
				pid_reset(&pid_velocity);
 800266c:	f107 0318 	add.w	r3, r7, #24
 8002670:	4618      	mov	r0, r3
 8002672:	f001 fddd 	bl	8004230 <pid_reset>
				// copy EEPROM to RAM
				regs[REG_GOAL_VELOCITY_DPS_L] = regs[REG_MAX_VELOCITY_DPS_L];
 8002676:	4b94      	ldr	r3, [pc, #592]	; (80028c8 <main+0x4e8>)
 8002678:	7d1a      	ldrb	r2, [r3, #20]
 800267a:	4b93      	ldr	r3, [pc, #588]	; (80028c8 <main+0x4e8>)
 800267c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
				regs[REG_GOAL_VELOCITY_DPS_H] = regs[REG_MAX_VELOCITY_DPS_H];
 8002680:	4b91      	ldr	r3, [pc, #580]	; (80028c8 <main+0x4e8>)
 8002682:	7d5a      	ldrb	r2, [r3, #21]
 8002684:	4b90      	ldr	r3, [pc, #576]	; (80028c8 <main+0x4e8>)
 8002686:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
				regs[REG_GOAL_TORQUE_CURRENT_MA_L] = regs[REG_MAX_CURRENT_MA_L];
 800268a:	4b8f      	ldr	r3, [pc, #572]	; (80028c8 <main+0x4e8>)
 800268c:	7e1a      	ldrb	r2, [r3, #24]
 800268e:	4b8e      	ldr	r3, [pc, #568]	; (80028c8 <main+0x4e8>)
 8002690:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
				regs[REG_GOAL_TORQUE_CURRENT_MA_H] = regs[REG_MAX_CURRENT_MA_H];
 8002694:	4b8c      	ldr	r3, [pc, #560]	; (80028c8 <main+0x4e8>)
 8002696:	7e5a      	ldrb	r2, [r3, #25]
 8002698:	4b8b      	ldr	r3, [pc, #556]	; (80028c8 <main+0x4e8>)
 800269a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				// reset unused RAM
				regs[REG_GOAL_FLUX_CURRENT_MA_L] = 0;
 800269e:	4b8a      	ldr	r3, [pc, #552]	; (80028c8 <main+0x4e8>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
				regs[REG_GOAL_FLUX_CURRENT_MA_H] = 0;
 80026a6:	4b88      	ldr	r3, [pc, #544]	; (80028c8 <main+0x4e8>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
				// set goal to current position to avoid glicth
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(10.0f*RADIANS_TO_DEGREES(API_AS5048A_Position_Sensor_Get_Multiturn_Radians())));
 80026ae:	f002 f869 	bl	8004784 <API_AS5048A_Position_Sensor_Get_Multiturn_Radians>
 80026b2:	eef0 7a40 	vmov.f32	s15, s0
 80026b6:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80028cc <main+0x4ec>
 80026ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026be:	ee17 0a90 	vmov	r0, s15
 80026c2:	f7fd ff0d 	bl	80004e0 <__aeabi_f2d>
 80026c6:	a37e      	add	r3, pc, #504	; (adr r3, 80028c0 <main+0x4e0>)
 80026c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026cc:	f7fe f88a 	bl	80007e4 <__aeabi_ddiv>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4610      	mov	r0, r2
 80026d6:	4619      	mov	r1, r3
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	4b7c      	ldr	r3, [pc, #496]	; (80028d0 <main+0x4f0>)
 80026de:	f7fd ff57 	bl	8000590 <__aeabi_dmul>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4610      	mov	r0, r2
 80026e8:	4619      	mov	r1, r3
 80026ea:	f7fe f9eb 	bl	8000ac4 <__aeabi_d2iz>
 80026ee:	4603      	mov	r3, r0
 80026f0:	b21b      	sxth	r3, r3
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	4b74      	ldr	r3, [pc, #464]	; (80028c8 <main+0x4e8>)
 80026f6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(10.0f*RADIANS_TO_DEGREES(API_AS5048A_Position_Sensor_Get_Multiturn_Radians())));
 80026fa:	f002 f843 	bl	8004784 <API_AS5048A_Position_Sensor_Get_Multiturn_Radians>
 80026fe:	eef0 7a40 	vmov.f32	s15, s0
 8002702:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80028cc <main+0x4ec>
 8002706:	ee67 7a87 	vmul.f32	s15, s15, s14
 800270a:	ee17 0a90 	vmov	r0, s15
 800270e:	f7fd fee7 	bl	80004e0 <__aeabi_f2d>
 8002712:	a36b      	add	r3, pc, #428	; (adr r3, 80028c0 <main+0x4e0>)
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	f7fe f864 	bl	80007e4 <__aeabi_ddiv>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4610      	mov	r0, r2
 8002722:	4619      	mov	r1, r3
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	4b69      	ldr	r3, [pc, #420]	; (80028d0 <main+0x4f0>)
 800272a:	f7fd ff31 	bl	8000590 <__aeabi_dmul>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	f7fe f9c5 	bl	8000ac4 <__aeabi_d2iz>
 800273a:	4603      	mov	r3, r0
 800273c:	b21b      	sxth	r3, r3
 800273e:	121b      	asrs	r3, r3, #8
 8002740:	b21b      	sxth	r3, r3
 8002742:	b2da      	uxtb	r2, r3
 8002744:	4b60      	ldr	r3, [pc, #384]	; (80028c8 <main+0x4e8>)
 8002746:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
				// reset filtered setpoint
				setpoint_velocity_dps = 0.0f;
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
				last_setpoint_velocity_dps = 0.0f;
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
				setpoint_torque_current_mA = 0.0f;
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
				// set setpoint_position_deg to avoid glitch
				setpoint_position_deg = RADIANS_TO_DEGREES(API_AS5048A_Position_Sensor_Get_Multiturn_Radians());
 8002762:	f002 f80f 	bl	8004784 <API_AS5048A_Position_Sensor_Get_Multiturn_Radians>
 8002766:	eef0 7a40 	vmov.f32	s15, s0
 800276a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80028cc <main+0x4ec>
 800276e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002772:	ee17 0a90 	vmov	r0, s15
 8002776:	f7fd feb3 	bl	80004e0 <__aeabi_f2d>
 800277a:	a351      	add	r3, pc, #324	; (adr r3, 80028c0 <main+0x4e0>)
 800277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002780:	f7fe f830 	bl	80007e4 <__aeabi_ddiv>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4610      	mov	r0, r2
 800278a:	4619      	mov	r1, r3
 800278c:	f7fe f9c2 	bl	8000b14 <__aeabi_d2f>
 8002790:	4603      	mov	r3, r0
 8002792:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			}
			{
				// compute position setpoint from goal and EEPROM velocity limit
				float const goal_position_deg = (float)((int16_t)(MAKE_SHORT(regs[REG_GOAL_POSITION_DEG_L],regs[REG_GOAL_POSITION_DEG_H])))/10.0f;
 8002796:	4b4c      	ldr	r3, [pc, #304]	; (80028c8 <main+0x4e8>)
 8002798:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800279c:	021b      	lsls	r3, r3, #8
 800279e:	b21a      	sxth	r2, r3
 80027a0:	4b49      	ldr	r3, [pc, #292]	; (80028c8 <main+0x4e8>)
 80027a2:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 80027a6:	b21b      	sxth	r3, r3
 80027a8:	4313      	orrs	r3, r2
 80027aa:	b21b      	sxth	r3, r3
 80027ac:	ee07 3a90 	vmov	s15, r3
 80027b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027b4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80027b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027bc:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
				float const reg_min_position_deg = (float)((int16_t)(MAKE_SHORT(regs[REG_MIN_POSITION_DEG_L],regs[REG_MIN_POSITION_DEG_H])));
 80027c0:	4b41      	ldr	r3, [pc, #260]	; (80028c8 <main+0x4e8>)
 80027c2:	7c5b      	ldrb	r3, [r3, #17]
 80027c4:	021b      	lsls	r3, r3, #8
 80027c6:	b21a      	sxth	r2, r3
 80027c8:	4b3f      	ldr	r3, [pc, #252]	; (80028c8 <main+0x4e8>)
 80027ca:	7c1b      	ldrb	r3, [r3, #16]
 80027cc:	b21b      	sxth	r3, r3
 80027ce:	4313      	orrs	r3, r2
 80027d0:	b21b      	sxth	r3, r3
 80027d2:	ee07 3a90 	vmov	s15, r3
 80027d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027da:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
				float const reg_max_position_deg = (float)((int16_t)(MAKE_SHORT(regs[REG_MAX_POSITION_DEG_L],regs[REG_MAX_POSITION_DEG_H])));
 80027de:	4b3a      	ldr	r3, [pc, #232]	; (80028c8 <main+0x4e8>)
 80027e0:	7cdb      	ldrb	r3, [r3, #19]
 80027e2:	021b      	lsls	r3, r3, #8
 80027e4:	b21a      	sxth	r2, r3
 80027e6:	4b38      	ldr	r3, [pc, #224]	; (80028c8 <main+0x4e8>)
 80027e8:	7c9b      	ldrb	r3, [r3, #18]
 80027ea:	b21b      	sxth	r3, r3
 80027ec:	4313      	orrs	r3, r2
 80027ee:	b21b      	sxth	r3, r3
 80027f0:	ee07 3a90 	vmov	s15, r3
 80027f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027f8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
				float const target_position_deg = fconstrain(goal_position_deg,reg_min_position_deg,reg_max_position_deg);
 80027fc:	ed97 1a1d 	vldr	s2, [r7, #116]	; 0x74
 8002800:	edd7 0a1e 	vldr	s1, [r7, #120]	; 0x78
 8002804:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8002808:	f001 fce9 	bl	80041de <fconstrain>
 800280c:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
				// compute velocity&acceleration setpoint using velocity&acceleration trapezoidal profil, RAM goal velocity  and EEPROM velocity & acceleration limit
				float const goal_velocity_dps = (int16_t)(MAKE_SHORT(regs[REG_GOAL_VELOCITY_DPS_L],regs[REG_GOAL_VELOCITY_DPS_H]));
 8002810:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <main+0x4e8>)
 8002812:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	b21a      	sxth	r2, r3
 800281a:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <main+0x4e8>)
 800281c:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8002820:	b21b      	sxth	r3, r3
 8002822:	4313      	orrs	r3, r2
 8002824:	b21b      	sxth	r3, r3
 8002826:	ee07 3a90 	vmov	s15, r3
 800282a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800282e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
				float const reg_max_velocity_dps = (uint16_t)(MAKE_SHORT(regs[REG_MAX_VELOCITY_DPS_L],regs[REG_MAX_VELOCITY_DPS_H]));
 8002832:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <main+0x4e8>)
 8002834:	7d5b      	ldrb	r3, [r3, #21]
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	b21a      	sxth	r2, r3
 800283a:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <main+0x4e8>)
 800283c:	7d1b      	ldrb	r3, [r3, #20]
 800283e:	b21b      	sxth	r3, r3
 8002840:	4313      	orrs	r3, r2
 8002842:	b21b      	sxth	r3, r3
 8002844:	b29b      	uxth	r3, r3
 8002846:	ee07 3a90 	vmov	s15, r3
 800284a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284e:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
				float const max_velocity_dps = fminf(goal_velocity_dps,reg_max_velocity_dps);
 8002852:	edd7 0a1a 	vldr	s1, [r7, #104]	; 0x68
 8002856:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 800285a:	f00b fc12 	bl	800e082 <fminf>
 800285e:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
				float const max_acceleration_dpss = (float)(MAKE_SHORT(regs[REG_MAX_ACCELERATION_DPSS_L],regs[REG_MAX_ACCELERATION_DPSS_H]));
 8002862:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <main+0x4e8>)
 8002864:	7ddb      	ldrb	r3, [r3, #23]
 8002866:	021b      	lsls	r3, r3, #8
 8002868:	4a17      	ldr	r2, [pc, #92]	; (80028c8 <main+0x4e8>)
 800286a:	7d92      	ldrb	r2, [r2, #22]
 800286c:	4313      	orrs	r3, r2
 800286e:	ee07 3a90 	vmov	s15, r3
 8002872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002876:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
				// compute remaining distance between setpoint position to target position
				float const remaining_distance_deg = target_position_deg - setpoint_position_deg;
 800287a:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800287e:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 8002882:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002886:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
				// compute maximun velocity to be able to stop at goal position
				float vmax = sqrtf( 2.0f * max_acceleration_dpss * fabsf(remaining_distance_deg) );
 800288a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800288e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002892:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002896:	eef0 7ae7 	vabs.f32	s15, s15
 800289a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289e:	eeb0 0a67 	vmov.f32	s0, s15
 80028a2:	f00b fd45 	bl	800e330 <sqrtf>
 80028a6:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
				// restore sign
				vmax = ( remaining_distance_deg>0.0f) ? vmax : -vmax;
 80028aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b6:	dd11      	ble.n	80028dc <main+0x4fc>
 80028b8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80028bc:	e012      	b.n	80028e4 <main+0x504>
 80028be:	bf00      	nop
 80028c0:	54442d18 	.word	0x54442d18
 80028c4:	400921fb 	.word	0x400921fb
 80028c8:	2000021c 	.word	0x2000021c
 80028cc:	43340000 	.word	0x43340000
 80028d0:	40240000 	.word	0x40240000
 80028d4:	49742400 	.word	0x49742400
 80028d8:	44610000 	.word	0x44610000
 80028dc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80028e0:	eef1 7a67 	vneg.f32	s15, s15
 80028e4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
				// limit maximum velocity, when far from stop
				vmax = fconstrain(vmax,-max_velocity_dps,max_velocity_dps);
 80028e8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80028ec:	eef1 7a67 	vneg.f32	s15, s15
 80028f0:	ed97 1a19 	vldr	s2, [r7, #100]	; 0x64
 80028f4:	eef0 0a67 	vmov.f32	s1, s15
 80028f8:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 80028fc:	f001 fc6f 	bl	80041de <fconstrain>
 8002900:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
				// compute distance between maximun velocity and current velocity
				float delta_v = vmax - setpoint_velocity_dps;
 8002904:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002908:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800290c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002910:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
				// now compute new velocity according acceleration
				setpoint_velocity_dps += fconstrain(delta_v, (-max_acceleration_dpss*MAIN_LOO_PERIOD_US/1000000.0f), (max_acceleration_dpss*MAIN_LOO_PERIOD_US/1000000.0f));
 8002914:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002918:	eef1 7a67 	vneg.f32	s15, s15
 800291c:	ed1f 7a12 	vldr	s14, [pc, #-72]	; 80028d8 <main+0x4f8>
 8002920:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002924:	ed5f 6a15 	vldr	s13, [pc, #-84]	; 80028d4 <main+0x4f4>
 8002928:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800292c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002930:	ed5f 6a17 	vldr	s13, [pc, #-92]	; 80028d8 <main+0x4f8>
 8002934:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002938:	ed1f 6a1a 	vldr	s12, [pc, #-104]	; 80028d4 <main+0x4f4>
 800293c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002940:	eeb0 1a66 	vmov.f32	s2, s13
 8002944:	eef0 0a47 	vmov.f32	s1, s14
 8002948:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 800294c:	f001 fc47 	bl	80041de <fconstrain>
 8002950:	eeb0 7a40 	vmov.f32	s14, s0
 8002954:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8002958:	ee77 7a87 	vadd.f32	s15, s15, s14
 800295c:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
				// compute new position setpoint
				setpoint_position_deg += (setpoint_velocity_dps*MAIN_LOO_PERIOD_US/1000000.0f);
 8002960:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8002964:	ed1f 7a24 	vldr	s14, [pc, #-144]	; 80028d8 <main+0x4f8>
 8002968:	ee27 7a87 	vmul.f32	s14, s15, s14
 800296c:	ed5f 6a27 	vldr	s13, [pc, #-156]	; 80028d4 <main+0x4f4>
 8002970:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002974:	ed97 7a3a 	vldr	s14, [r7, #232]	; 0xe8
 8002978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800297c:	edc7 7a3a 	vstr	s15, [r7, #232]	; 0xe8
				// now compute acceleration setpoint
				setpoint_acceleration_dpss = (setpoint_velocity_dps - last_setpoint_velocity_dps)*1000000.0f/MAIN_LOO_PERIOD_US;
 8002980:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 8002984:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8002988:	ee77 7a67 	vsub.f32	s15, s14, s15
 800298c:	ed1f 7a2f 	vldr	s14, [pc, #-188]	; 80028d4 <main+0x4f4>
 8002990:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002994:	ed5f 6a30 	vldr	s13, [pc, #-192]	; 80028d8 <main+0x4f8>
 8002998:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800299c:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
				last_setpoint_velocity_dps =  setpoint_velocity_dps;
 80029a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
				// compute velocity/acceleration feed forwards
				float const pid_vel_kff = (float)(MAKE_SHORT(regs[REG_PID_VELOCITY_KFF_L],regs[REG_PID_VELOCITY_KFF_H]))/1000.0f;
 80029a8:	4b79      	ldr	r3, [pc, #484]	; (8002b90 <main+0x7b0>)
 80029aa:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	4a77      	ldr	r2, [pc, #476]	; (8002b90 <main+0x7b0>)
 80029b2:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80029b6:	4313      	orrs	r3, r2
 80029b8:	ee07 3a90 	vmov	s15, r3
 80029bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029c0:	eddf 6a74 	vldr	s13, [pc, #464]	; 8002b94 <main+0x7b4>
 80029c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029c8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				float const pid_acc_kff = (float)(MAKE_SHORT(regs[REG_PID_ACCELERATION_KFF_L],regs[REG_PID_ACCELERATION_KFF_H]))/100000.0f;
 80029cc:	4b70      	ldr	r3, [pc, #448]	; (8002b90 <main+0x7b0>)
 80029ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	4a6e      	ldr	r2, [pc, #440]	; (8002b90 <main+0x7b0>)
 80029d6:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 80029da:	4313      	orrs	r3, r2
 80029dc:	ee07 3a90 	vmov	s15, r3
 80029e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029e4:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8002b98 <main+0x7b8>
 80029e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029ec:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
				float const velocity_feed_forward = pid_vel_kff * setpoint_velocity_dps;
 80029f0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80029f4:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 80029f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029fc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
				float const acceleration_feed_forward = pid_acc_kff * setpoint_acceleration_dpss;
 8002a00:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002a04:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a0c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
				// compute position error
				float const error_position_deg = setpoint_position_deg-RADIANS_TO_DEGREES(API_AS5048A_Position_Sensor_Get_Multiturn_Radians());
 8002a10:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8002a14:	f7fd fd64 	bl	80004e0 <__aeabi_f2d>
 8002a18:	4604      	mov	r4, r0
 8002a1a:	460d      	mov	r5, r1
 8002a1c:	f001 feb2 	bl	8004784 <API_AS5048A_Position_Sensor_Get_Multiturn_Radians>
 8002a20:	eef0 7a40 	vmov.f32	s15, s0
 8002a24:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8002b9c <main+0x7bc>
 8002a28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a2c:	ee17 0a90 	vmov	r0, s15
 8002a30:	f7fd fd56 	bl	80004e0 <__aeabi_f2d>
 8002a34:	a354      	add	r3, pc, #336	; (adr r3, 8002b88 <main+0x7a8>)
 8002a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3a:	f7fd fed3 	bl	80007e4 <__aeabi_ddiv>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4620      	mov	r0, r4
 8002a44:	4629      	mov	r1, r5
 8002a46:	f7fd fbeb 	bl	8000220 <__aeabi_dsub>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4610      	mov	r0, r2
 8002a50:	4619      	mov	r1, r3
 8002a52:	f7fe f85f 	bl	8000b14 <__aeabi_d2f>
 8002a56:	4603      	mov	r3, r0
 8002a58:	643b      	str	r3, [r7, #64]	; 0x40
				// compute torque current setpoint using PID position, current is limited bt goal current and EEPROM current limit
				float const goal_torque_current_mA=(int16_t)(MAKE_SHORT(regs[REG_GOAL_TORQUE_CURRENT_MA_L],regs[REG_GOAL_TORQUE_CURRENT_MA_H]));
 8002a5a:	4b4d      	ldr	r3, [pc, #308]	; (8002b90 <main+0x7b0>)
 8002a5c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8002a60:	021b      	lsls	r3, r3, #8
 8002a62:	b21a      	sxth	r2, r3
 8002a64:	4b4a      	ldr	r3, [pc, #296]	; (8002b90 <main+0x7b0>)
 8002a66:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8002a6a:	b21b      	sxth	r3, r3
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	b21b      	sxth	r3, r3
 8002a70:	ee07 3a90 	vmov	s15, r3
 8002a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a78:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				float const reg_max_current_ma = (uint16_t)(MAKE_SHORT(regs[REG_MAX_CURRENT_MA_L],regs[REG_MAX_CURRENT_MA_H]));
 8002a7c:	4b44      	ldr	r3, [pc, #272]	; (8002b90 <main+0x7b0>)
 8002a7e:	7e5b      	ldrb	r3, [r3, #25]
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	b21a      	sxth	r2, r3
 8002a84:	4b42      	ldr	r3, [pc, #264]	; (8002b90 <main+0x7b0>)
 8002a86:	7e1b      	ldrb	r3, [r3, #24]
 8002a88:	b21b      	sxth	r3, r3
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	b21b      	sxth	r3, r3
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	ee07 3a90 	vmov	s15, r3
 8002a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a98:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				float const reg_reverse = regs[REG_INV_PHASE_MOTOR] == 0 ? 1.0f : -1.0f;
 8002a9c:	4b3c      	ldr	r3, [pc, #240]	; (8002b90 <main+0x7b0>)
 8002a9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d102      	bne.n	8002aac <main+0x6cc>
 8002aa6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002aaa:	e000      	b.n	8002aae <main+0x6ce>
 8002aac:	4b3c      	ldr	r3, [pc, #240]	; (8002ba0 <main+0x7c0>)
 8002aae:	637b      	str	r3, [r7, #52]	; 0x34
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8002ab0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002ab4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002ba4 <main+0x7c4>
 8002ab8:	ee27 8a87 	vmul.f32	s16, s15, s14
						&pid_position,
						error_position_deg,
						(float)((int16_t)(MAKE_SHORT(regs[REG_PID_POSITION_KP_L],regs[REG_PID_POSITION_KP_H])))/1.0f,
 8002abc:	4b34      	ldr	r3, [pc, #208]	; (8002b90 <main+0x7b0>)
 8002abe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002ac2:	021b      	lsls	r3, r3, #8
 8002ac4:	b21a      	sxth	r2, r3
 8002ac6:	4b32      	ldr	r3, [pc, #200]	; (8002b90 <main+0x7b0>)
 8002ac8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002acc:	b21b      	sxth	r3, r3
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	b21b      	sxth	r3, r3
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8002ad2:	ee07 3a90 	vmov	s15, r3
 8002ad6:	eef8 8ae7 	vcvt.f32.s32	s17, s15
						(float)((int16_t)(MAKE_SHORT(regs[REG_PID_POSITION_KI_L],regs[REG_PID_POSITION_KI_H])))/100.0f,
 8002ada:	4b2d      	ldr	r3, [pc, #180]	; (8002b90 <main+0x7b0>)
 8002adc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002ae0:	021b      	lsls	r3, r3, #8
 8002ae2:	b21a      	sxth	r2, r3
 8002ae4:	4b2a      	ldr	r3, [pc, #168]	; (8002b90 <main+0x7b0>)
 8002ae6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002aea:	b21b      	sxth	r3, r3
 8002aec:	4313      	orrs	r3, r2
 8002aee:	b21b      	sxth	r3, r3
 8002af0:	ee07 3a90 	vmov	s15, r3
 8002af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8002af8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002ba8 <main+0x7c8>
 8002afc:	ee87 9a87 	vdiv.f32	s18, s15, s14
						(float)((int16_t)(MAKE_SHORT(regs[REG_PID_POSITION_KD_L],regs[REG_PID_POSITION_KD_H])))/1.0f,
 8002b00:	4b23      	ldr	r3, [pc, #140]	; (8002b90 <main+0x7b0>)
 8002b02:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002b06:	021b      	lsls	r3, r3, #8
 8002b08:	b21a      	sxth	r2, r3
 8002b0a:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <main+0x7b0>)
 8002b0c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002b10:	b21b      	sxth	r3, r3
 8002b12:	4313      	orrs	r3, r2
 8002b14:	b21b      	sxth	r3, r3
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8002b16:	ee07 3a90 	vmov	s15, r3
 8002b1a:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 8002b1e:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 8002b22:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8002b26:	f00b faac 	bl	800e082 <fminf>
 8002b2a:	eef0 6a40 	vmov.f32	s13, s0
 8002b2e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002b32:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3a:	f107 030c 	add.w	r3, r7, #12
 8002b3e:	eeb0 3a67 	vmov.f32	s6, s15
 8002b42:	eddf 2a1a 	vldr	s5, [pc, #104]	; 8002bac <main+0x7cc>
 8002b46:	eeb0 2a66 	vmov.f32	s4, s13
 8002b4a:	eef0 1a69 	vmov.f32	s3, s19
 8002b4e:	eeb0 1a49 	vmov.f32	s2, s18
 8002b52:	eef0 0a68 	vmov.f32	s1, s17
 8002b56:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f001 fb7e 	bl	800425c <pid_process_antiwindup_clamp_with_ff>
 8002b60:	eef0 7a40 	vmov.f32	s15, s0
 8002b64:	ee28 7a27 	vmul.f32	s14, s16, s15
						fminf(goal_torque_current_mA,reg_max_current_ma), // limit is the lowest limit from goal and EEPROM
						0.1f,// ALPHA D
						velocity_feed_forward+acceleration_feed_forward // FF
				) + (1.0f-ALPHA_CURRENT_SETPOINT)*setpoint_torque_current_mA;
 8002b68:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002b6c:	eddf 6a10 	vldr	s13, [pc, #64]	; 8002bb0 <main+0x7d0>
 8002b70:	ee67 7aa6 	vmul.f32	s15, s15, s13
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8002b74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b78:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
				// in this operating mode, flux current is forced to 0
				setpoint_flux_current_mA=0.0f;
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			}
			break;
 8002b84:	f000 bc81 	b.w	800348a <main+0x10aa>
 8002b88:	54442d18 	.word	0x54442d18
 8002b8c:	400921fb 	.word	0x400921fb
 8002b90:	2000021c 	.word	0x2000021c
 8002b94:	447a0000 	.word	0x447a0000
 8002b98:	47c35000 	.word	0x47c35000
 8002b9c:	43340000 	.word	0x43340000
 8002ba0:	bf800000 	.word	0xbf800000
 8002ba4:	3ef5c28f 	.word	0x3ef5c28f
 8002ba8:	42c80000 	.word	0x42c80000
 8002bac:	3dcccccd 	.word	0x3dcccccd
 8002bb0:	3f051eb8 	.word	0x3f051eb8
		case REG_CONTROL_MODE_POSITION_VELOCITY_TORQUE: // DEPRECATED
			// DEPRECATED
			// This mode is replaced by mode 0
			// DEPRECATED
			if(last_mode!=REG_CONTROL_MODE_POSITION_VELOCITY_TORQUE)
 8002bb4:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d07b      	beq.n	8002cb4 <main+0x8d4>
			{
				pid_reset(&pid_position);
 8002bbc:	f107 030c 	add.w	r3, r7, #12
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f001 fb35 	bl	8004230 <pid_reset>
				pid_reset(&pid_velocity);
 8002bc6:	f107 0318 	add.w	r3, r7, #24
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f001 fb30 	bl	8004230 <pid_reset>
				// copy EEPROM to RAM
				regs[REG_GOAL_VELOCITY_DPS_L] = regs[REG_MAX_VELOCITY_DPS_L];
 8002bd0:	4bc7      	ldr	r3, [pc, #796]	; (8002ef0 <main+0xb10>)
 8002bd2:	7d1a      	ldrb	r2, [r3, #20]
 8002bd4:	4bc6      	ldr	r3, [pc, #792]	; (8002ef0 <main+0xb10>)
 8002bd6:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
				regs[REG_GOAL_VELOCITY_DPS_H] = regs[REG_MAX_VELOCITY_DPS_H];
 8002bda:	4bc5      	ldr	r3, [pc, #788]	; (8002ef0 <main+0xb10>)
 8002bdc:	7d5a      	ldrb	r2, [r3, #21]
 8002bde:	4bc4      	ldr	r3, [pc, #784]	; (8002ef0 <main+0xb10>)
 8002be0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
				regs[REG_GOAL_TORQUE_CURRENT_MA_L] = regs[REG_MAX_CURRENT_MA_L];
 8002be4:	4bc2      	ldr	r3, [pc, #776]	; (8002ef0 <main+0xb10>)
 8002be6:	7e1a      	ldrb	r2, [r3, #24]
 8002be8:	4bc1      	ldr	r3, [pc, #772]	; (8002ef0 <main+0xb10>)
 8002bea:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
				regs[REG_GOAL_TORQUE_CURRENT_MA_H] = regs[REG_MAX_CURRENT_MA_H];
 8002bee:	4bc0      	ldr	r3, [pc, #768]	; (8002ef0 <main+0xb10>)
 8002bf0:	7e5a      	ldrb	r2, [r3, #25]
 8002bf2:	4bbf      	ldr	r3, [pc, #764]	; (8002ef0 <main+0xb10>)
 8002bf4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				// reset unused RAM
				regs[REG_GOAL_FLUX_CURRENT_MA_L] = 0;
 8002bf8:	4bbd      	ldr	r3, [pc, #756]	; (8002ef0 <main+0xb10>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
				regs[REG_GOAL_FLUX_CURRENT_MA_H] = 0;
 8002c00:	4bbb      	ldr	r3, [pc, #748]	; (8002ef0 <main+0xb10>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
				// set goal to current position to avoid glicth
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(10.0f*RADIANS_TO_DEGREES(API_AS5048A_Position_Sensor_Get_Multiturn_Radians())));
 8002c08:	f001 fdbc 	bl	8004784 <API_AS5048A_Position_Sensor_Get_Multiturn_Radians>
 8002c0c:	eef0 7a40 	vmov.f32	s15, s0
 8002c10:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8002ef4 <main+0xb14>
 8002c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c18:	ee17 0a90 	vmov	r0, s15
 8002c1c:	f7fd fc60 	bl	80004e0 <__aeabi_f2d>
 8002c20:	a3b1      	add	r3, pc, #708	; (adr r3, 8002ee8 <main+0xb08>)
 8002c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c26:	f7fd fddd 	bl	80007e4 <__aeabi_ddiv>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4619      	mov	r1, r3
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	4bb0      	ldr	r3, [pc, #704]	; (8002ef8 <main+0xb18>)
 8002c38:	f7fd fcaa 	bl	8000590 <__aeabi_dmul>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	f7fd ff3e 	bl	8000ac4 <__aeabi_d2iz>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	b21b      	sxth	r3, r3
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	4ba8      	ldr	r3, [pc, #672]	; (8002ef0 <main+0xb10>)
 8002c50:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(10.0f*RADIANS_TO_DEGREES(API_AS5048A_Position_Sensor_Get_Multiturn_Radians())));
 8002c54:	f001 fd96 	bl	8004784 <API_AS5048A_Position_Sensor_Get_Multiturn_Radians>
 8002c58:	eef0 7a40 	vmov.f32	s15, s0
 8002c5c:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002ef4 <main+0xb14>
 8002c60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c64:	ee17 0a90 	vmov	r0, s15
 8002c68:	f7fd fc3a 	bl	80004e0 <__aeabi_f2d>
 8002c6c:	a39e      	add	r3, pc, #632	; (adr r3, 8002ee8 <main+0xb08>)
 8002c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c72:	f7fd fdb7 	bl	80007e4 <__aeabi_ddiv>
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	4b9d      	ldr	r3, [pc, #628]	; (8002ef8 <main+0xb18>)
 8002c84:	f7fd fc84 	bl	8000590 <__aeabi_dmul>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f7fd ff18 	bl	8000ac4 <__aeabi_d2iz>
 8002c94:	4603      	mov	r3, r0
 8002c96:	b21b      	sxth	r3, r3
 8002c98:	121b      	asrs	r3, r3, #8
 8002c9a:	b21b      	sxth	r3, r3
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	4b94      	ldr	r3, [pc, #592]	; (8002ef0 <main+0xb10>)
 8002ca0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
				// reset filtered setpoint
				setpoint_velocity_dps = 0.0f;
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
				setpoint_torque_current_mA = 0.0f;
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			}
			{
				setpoint_acceleration_dpss = 0.0f;
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
				// compute position setpoint from goal and EEPROM velocity limit
				float const goal_position_deg = (float)((int16_t)(MAKE_SHORT(regs[REG_GOAL_POSITION_DEG_L],regs[REG_GOAL_POSITION_DEG_H])))/10.0f;
 8002cbc:	4b8c      	ldr	r3, [pc, #560]	; (8002ef0 <main+0xb10>)
 8002cbe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002cc2:	021b      	lsls	r3, r3, #8
 8002cc4:	b21a      	sxth	r2, r3
 8002cc6:	4b8a      	ldr	r3, [pc, #552]	; (8002ef0 <main+0xb10>)
 8002cc8:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8002ccc:	b21b      	sxth	r3, r3
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	b21b      	sxth	r3, r3
 8002cd2:	ee07 3a90 	vmov	s15, r3
 8002cd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cda:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002cde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ce2:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
				float const reg_min_position_deg = (float)((int16_t)(MAKE_SHORT(regs[REG_MIN_POSITION_DEG_L],regs[REG_MIN_POSITION_DEG_H])));
 8002ce6:	4b82      	ldr	r3, [pc, #520]	; (8002ef0 <main+0xb10>)
 8002ce8:	7c5b      	ldrb	r3, [r3, #17]
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	b21a      	sxth	r2, r3
 8002cee:	4b80      	ldr	r3, [pc, #512]	; (8002ef0 <main+0xb10>)
 8002cf0:	7c1b      	ldrb	r3, [r3, #16]
 8002cf2:	b21b      	sxth	r3, r3
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	b21b      	sxth	r3, r3
 8002cf8:	ee07 3a90 	vmov	s15, r3
 8002cfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d00:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
				float const reg_max_position_deg = (float)((int16_t)(MAKE_SHORT(regs[REG_MAX_POSITION_DEG_L],regs[REG_MAX_POSITION_DEG_H])));
 8002d04:	4b7a      	ldr	r3, [pc, #488]	; (8002ef0 <main+0xb10>)
 8002d06:	7cdb      	ldrb	r3, [r3, #19]
 8002d08:	021b      	lsls	r3, r3, #8
 8002d0a:	b21a      	sxth	r2, r3
 8002d0c:	4b78      	ldr	r3, [pc, #480]	; (8002ef0 <main+0xb10>)
 8002d0e:	7c9b      	ldrb	r3, [r3, #18]
 8002d10:	b21b      	sxth	r3, r3
 8002d12:	4313      	orrs	r3, r2
 8002d14:	b21b      	sxth	r3, r3
 8002d16:	ee07 3a90 	vmov	s15, r3
 8002d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d1e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
				setpoint_position_deg = fconstrain(goal_position_deg,reg_min_position_deg,reg_max_position_deg);
 8002d22:	ed97 1a27 	vldr	s2, [r7, #156]	; 0x9c
 8002d26:	edd7 0a28 	vldr	s1, [r7, #160]	; 0xa0
 8002d2a:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 8002d2e:	f001 fa56 	bl	80041de <fconstrain>
 8002d32:	ed87 0a3a 	vstr	s0, [r7, #232]	; 0xe8
				// compute positiony error
				float const error_position_deg = setpoint_position_deg-RADIANS_TO_DEGREES(API_AS5048A_Position_Sensor_Get_Multiturn_Radians());
 8002d36:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8002d3a:	f7fd fbd1 	bl	80004e0 <__aeabi_f2d>
 8002d3e:	4604      	mov	r4, r0
 8002d40:	460d      	mov	r5, r1
 8002d42:	f001 fd1f 	bl	8004784 <API_AS5048A_Position_Sensor_Get_Multiturn_Radians>
 8002d46:	eef0 7a40 	vmov.f32	s15, s0
 8002d4a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002ef4 <main+0xb14>
 8002d4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d52:	ee17 0a90 	vmov	r0, s15
 8002d56:	f7fd fbc3 	bl	80004e0 <__aeabi_f2d>
 8002d5a:	a363      	add	r3, pc, #396	; (adr r3, 8002ee8 <main+0xb08>)
 8002d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d60:	f7fd fd40 	bl	80007e4 <__aeabi_ddiv>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4620      	mov	r0, r4
 8002d6a:	4629      	mov	r1, r5
 8002d6c:	f7fd fa58 	bl	8000220 <__aeabi_dsub>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4610      	mov	r0, r2
 8002d76:	4619      	mov	r1, r3
 8002d78:	f7fd fecc 	bl	8000b14 <__aeabi_d2f>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				// compute velocity setpoint using PID position and EEPROM velocity limit
				float const goal_velocity_dps = (int16_t)(MAKE_SHORT(regs[REG_GOAL_VELOCITY_DPS_L],regs[REG_GOAL_VELOCITY_DPS_H]));
 8002d82:	4b5b      	ldr	r3, [pc, #364]	; (8002ef0 <main+0xb10>)
 8002d84:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002d88:	021b      	lsls	r3, r3, #8
 8002d8a:	b21a      	sxth	r2, r3
 8002d8c:	4b58      	ldr	r3, [pc, #352]	; (8002ef0 <main+0xb10>)
 8002d8e:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8002d92:	b21b      	sxth	r3, r3
 8002d94:	4313      	orrs	r3, r2
 8002d96:	b21b      	sxth	r3, r3
 8002d98:	ee07 3a90 	vmov	s15, r3
 8002d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002da0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
				float const reg_max_velocity_dps = (uint16_t)(MAKE_SHORT(regs[REG_MAX_VELOCITY_DPS_L],regs[REG_MAX_VELOCITY_DPS_H]));
 8002da4:	4b52      	ldr	r3, [pc, #328]	; (8002ef0 <main+0xb10>)
 8002da6:	7d5b      	ldrb	r3, [r3, #21]
 8002da8:	021b      	lsls	r3, r3, #8
 8002daa:	b21a      	sxth	r2, r3
 8002dac:	4b50      	ldr	r3, [pc, #320]	; (8002ef0 <main+0xb10>)
 8002dae:	7d1b      	ldrb	r3, [r3, #20]
 8002db0:	b21b      	sxth	r3, r3
 8002db2:	4313      	orrs	r3, r2
 8002db4:	b21b      	sxth	r3, r3
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	ee07 3a90 	vmov	s15, r3
 8002dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc0:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
				setpoint_velocity_dps = ALPHA_VELOCITY*pid_process_antiwindup_clamp_with_ff(
						&pid_position,
						error_position_deg,
						(float)((int16_t)(MAKE_SHORT(regs[REG_PID_POSITION_KP_L],regs[REG_PID_POSITION_KP_H])))/1.0f,
 8002dc4:	4b4a      	ldr	r3, [pc, #296]	; (8002ef0 <main+0xb10>)
 8002dc6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	b21a      	sxth	r2, r3
 8002dce:	4b48      	ldr	r3, [pc, #288]	; (8002ef0 <main+0xb10>)
 8002dd0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002dd4:	b21b      	sxth	r3, r3
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	b21b      	sxth	r3, r3
				setpoint_velocity_dps = ALPHA_VELOCITY*pid_process_antiwindup_clamp_with_ff(
 8002dda:	ee07 3a90 	vmov	s15, r3
 8002dde:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
						(float)((int16_t)(MAKE_SHORT(regs[REG_PID_POSITION_KI_L],regs[REG_PID_POSITION_KI_H])))/100.0f,
 8002de2:	4b43      	ldr	r3, [pc, #268]	; (8002ef0 <main+0xb10>)
 8002de4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002de8:	021b      	lsls	r3, r3, #8
 8002dea:	b21a      	sxth	r2, r3
 8002dec:	4b40      	ldr	r3, [pc, #256]	; (8002ef0 <main+0xb10>)
 8002dee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002df2:	b21b      	sxth	r3, r3
 8002df4:	4313      	orrs	r3, r2
 8002df6:	b21b      	sxth	r3, r3
 8002df8:	ee07 3a90 	vmov	s15, r3
 8002dfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				setpoint_velocity_dps = ALPHA_VELOCITY*pid_process_antiwindup_clamp_with_ff(
 8002e00:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002efc <main+0xb1c>
 8002e04:	eec7 8a87 	vdiv.f32	s17, s15, s14
						(float)((int16_t)(MAKE_SHORT(regs[REG_PID_POSITION_KD_L],regs[REG_PID_POSITION_KD_H])))/1.0f,
 8002e08:	4b39      	ldr	r3, [pc, #228]	; (8002ef0 <main+0xb10>)
 8002e0a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	b21a      	sxth	r2, r3
 8002e12:	4b37      	ldr	r3, [pc, #220]	; (8002ef0 <main+0xb10>)
 8002e14:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002e18:	b21b      	sxth	r3, r3
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	b21b      	sxth	r3, r3
				setpoint_velocity_dps = ALPHA_VELOCITY*pid_process_antiwindup_clamp_with_ff(
 8002e1e:	ee07 3a90 	vmov	s15, r3
 8002e22:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 8002e26:	edd7 0a24 	vldr	s1, [r7, #144]	; 0x90
 8002e2a:	ed97 0a25 	vldr	s0, [r7, #148]	; 0x94
 8002e2e:	f00b f928 	bl	800e082 <fminf>
 8002e32:	eef0 7a40 	vmov.f32	s15, s0
 8002e36:	f107 030c 	add.w	r3, r7, #12
 8002e3a:	ed9f 3a31 	vldr	s6, [pc, #196]	; 8002f00 <main+0xb20>
 8002e3e:	eddf 2a31 	vldr	s5, [pc, #196]	; 8002f04 <main+0xb24>
 8002e42:	eeb0 2a67 	vmov.f32	s4, s15
 8002e46:	eef0 1a49 	vmov.f32	s3, s18
 8002e4a:	eeb0 1a68 	vmov.f32	s2, s17
 8002e4e:	eef0 0a48 	vmov.f32	s1, s16
 8002e52:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8002e56:	4618      	mov	r0, r3
 8002e58:	f001 fa00 	bl	800425c <pid_process_antiwindup_clamp_with_ff>
 8002e5c:	eef0 7a40 	vmov.f32	s15, s0
 8002e60:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002f08 <main+0xb28>
 8002e64:	ee27 7a87 	vmul.f32	s14, s15, s14
						fminf(goal_velocity_dps,reg_max_velocity_dps), // limit is the lowest limit from goal and EEPROM
						0.1f,// ALPHA D
						0.0f // FF
				) + (1.0f-ALPHA_VELOCITY)*setpoint_velocity_dps;
 8002e68:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8002e6c:	eddf 6a27 	vldr	s13, [pc, #156]	; 8002f0c <main+0xb2c>
 8002e70:	ee67 7aa6 	vmul.f32	s15, s15, s13
				setpoint_velocity_dps = ALPHA_VELOCITY*pid_process_antiwindup_clamp_with_ff(
 8002e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e78:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
				// compute velocity error
				float const error_velocity_dps = setpoint_velocity_dps-API_FOC_Get_Present_Velocity();
 8002e7c:	f7ff f91e 	bl	80020bc <API_FOC_Get_Present_Velocity>
 8002e80:	eeb0 7a40 	vmov.f32	s14, s0
 8002e84:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8002e88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e8c:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
				// compute torque current setpoint using PID velocity, current is limited bt goal current and EEPROM current limit
				float const goal_torque_current_mA=(int16_t)(MAKE_SHORT(regs[REG_GOAL_TORQUE_CURRENT_MA_L],regs[REG_GOAL_TORQUE_CURRENT_MA_H]));
 8002e90:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <main+0xb10>)
 8002e92:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8002e96:	021b      	lsls	r3, r3, #8
 8002e98:	b21a      	sxth	r2, r3
 8002e9a:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <main+0xb10>)
 8002e9c:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8002ea0:	b21b      	sxth	r3, r3
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	b21b      	sxth	r3, r3
 8002ea6:	ee07 3a90 	vmov	s15, r3
 8002eaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eae:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
				float const reg_max_current_ma = (uint16_t)(MAKE_SHORT(regs[REG_MAX_CURRENT_MA_L],regs[REG_MAX_CURRENT_MA_H]));
 8002eb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <main+0xb10>)
 8002eb4:	7e5b      	ldrb	r3, [r3, #25]
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	b21a      	sxth	r2, r3
 8002eba:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <main+0xb10>)
 8002ebc:	7e1b      	ldrb	r3, [r3, #24]
 8002ebe:	b21b      	sxth	r3, r3
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	b21b      	sxth	r3, r3
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	ee07 3a90 	vmov	s15, r3
 8002eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ece:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
				float const reg_reverse = regs[REG_INV_PHASE_MOTOR] == 0 ? 1.0f : -1.0f;
 8002ed2:	4b07      	ldr	r3, [pc, #28]	; (8002ef0 <main+0xb10>)
 8002ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d119      	bne.n	8002f10 <main+0xb30>
 8002edc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002ee0:	e017      	b.n	8002f12 <main+0xb32>
 8002ee2:	bf00      	nop
 8002ee4:	f3af 8000 	nop.w
 8002ee8:	54442d18 	.word	0x54442d18
 8002eec:	400921fb 	.word	0x400921fb
 8002ef0:	2000021c 	.word	0x2000021c
 8002ef4:	43340000 	.word	0x43340000
 8002ef8:	40240000 	.word	0x40240000
 8002efc:	42c80000 	.word	0x42c80000
 8002f00:	00000000 	.word	0x00000000
 8002f04:	3dcccccd 	.word	0x3dcccccd
 8002f08:	3e75c28f 	.word	0x3e75c28f
 8002f0c:	3f428f5c 	.word	0x3f428f5c
 8002f10:	4b8f      	ldr	r3, [pc, #572]	; (8003150 <main+0xd70>)
 8002f12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8002f16:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002f1a:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8003154 <main+0xd74>
 8002f1e:	ee27 8a87 	vmul.f32	s16, s15, s14
						&pid_velocity,
						error_velocity_dps,
						(float)((int16_t)(MAKE_SHORT(regs[REG_PID_VELOCITY_KP_L],regs[REG_PID_VELOCITY_KP_H])))/1000.0f,
 8002f22:	4b8d      	ldr	r3, [pc, #564]	; (8003158 <main+0xd78>)
 8002f24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	b21a      	sxth	r2, r3
 8002f2c:	4b8a      	ldr	r3, [pc, #552]	; (8003158 <main+0xd78>)
 8002f2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f32:	b21b      	sxth	r3, r3
 8002f34:	4313      	orrs	r3, r2
 8002f36:	b21b      	sxth	r3, r3
 8002f38:	ee07 3a90 	vmov	s15, r3
 8002f3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8002f40:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800315c <main+0xd7c>
 8002f44:	eec7 8a87 	vdiv.f32	s17, s15, s14
						(float)((int16_t)(MAKE_SHORT(regs[REG_PID_VELOCITY_KI_L],regs[REG_PID_VELOCITY_KI_H])))/100000.0f,
 8002f48:	4b83      	ldr	r3, [pc, #524]	; (8003158 <main+0xd78>)
 8002f4a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002f4e:	021b      	lsls	r3, r3, #8
 8002f50:	b21a      	sxth	r2, r3
 8002f52:	4b81      	ldr	r3, [pc, #516]	; (8003158 <main+0xd78>)
 8002f54:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002f58:	b21b      	sxth	r3, r3
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	b21b      	sxth	r3, r3
 8002f5e:	ee07 3a90 	vmov	s15, r3
 8002f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8002f66:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8003160 <main+0xd80>
 8002f6a:	ee87 9a87 	vdiv.f32	s18, s15, s14
						(float)((int16_t)(MAKE_SHORT(regs[REG_PID_VELOCITY_KD_L],regs[REG_PID_VELOCITY_KD_H])))/1000.0f,
 8002f6e:	4b7a      	ldr	r3, [pc, #488]	; (8003158 <main+0xd78>)
 8002f70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f74:	021b      	lsls	r3, r3, #8
 8002f76:	b21a      	sxth	r2, r3
 8002f78:	4b77      	ldr	r3, [pc, #476]	; (8003158 <main+0xd78>)
 8002f7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f7e:	b21b      	sxth	r3, r3
 8002f80:	4313      	orrs	r3, r2
 8002f82:	b21b      	sxth	r3, r3
 8002f84:	ee07 3a90 	vmov	s15, r3
 8002f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8002f8c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800315c <main+0xd7c>
 8002f90:	eec7 9a87 	vdiv.f32	s19, s15, s14
 8002f94:	edd7 0a21 	vldr	s1, [r7, #132]	; 0x84
 8002f98:	ed97 0a22 	vldr	s0, [r7, #136]	; 0x88
 8002f9c:	f00b f871 	bl	800e082 <fminf>
 8002fa0:	eef0 6a40 	vmov.f32	s13, s0
						fminf(goal_torque_current_mA,reg_max_current_ma), // current limit is the lowest limit from goal and EEPROM
						0.1f,// ALPHA D
						setpoint_velocity_dps*(float)((int16_t)(MAKE_SHORT(regs[REG_PID_VELOCITY_KFF_L],regs[REG_PID_VELOCITY_KFF_H])))/1000.0f
 8002fa4:	4b6c      	ldr	r3, [pc, #432]	; (8003158 <main+0xd78>)
 8002fa6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002faa:	021b      	lsls	r3, r3, #8
 8002fac:	b21a      	sxth	r2, r3
 8002fae:	4b6a      	ldr	r3, [pc, #424]	; (8003158 <main+0xd78>)
 8002fb0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002fb4:	b21b      	sxth	r3, r3
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	b21b      	sxth	r3, r3
 8002fba:	ee07 3a90 	vmov	s15, r3
 8002fbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fc2:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8002fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8002fca:	ed9f 6a64 	vldr	s12, [pc, #400]	; 800315c <main+0xd7c>
 8002fce:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8002fd2:	f107 0318 	add.w	r3, r7, #24
 8002fd6:	eeb0 3a47 	vmov.f32	s6, s14
 8002fda:	eddf 2a62 	vldr	s5, [pc, #392]	; 8003164 <main+0xd84>
 8002fde:	eeb0 2a66 	vmov.f32	s4, s13
 8002fe2:	eef0 1a69 	vmov.f32	s3, s19
 8002fe6:	eeb0 1a49 	vmov.f32	s2, s18
 8002fea:	eef0 0a68 	vmov.f32	s1, s17
 8002fee:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f001 f932 	bl	800425c <pid_process_antiwindup_clamp_with_ff>
 8002ff8:	eef0 7a40 	vmov.f32	s15, s0
 8002ffc:	ee28 7a27 	vmul.f32	s14, s16, s15
				) + (1.0f-ALPHA_CURRENT_SETPOINT)*setpoint_torque_current_mA;
 8003000:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003004:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003168 <main+0xd88>
 8003008:	ee67 7aa6 	vmul.f32	s15, s15, s13
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 800300c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003010:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
				// in this operating mode, flux current is forced to 0
				setpoint_flux_current_mA=0.0f;
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			}
			break;
 800301c:	e235      	b.n	800348a <main+0x10aa>
		case REG_CONTROL_MODE_VELOCITY_TORQUE:
			if(last_mode!=REG_CONTROL_MODE_VELOCITY_TORQUE)
 800301e:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8003022:	2b02      	cmp	r3, #2
 8003024:	d02a      	beq.n	800307c <main+0xc9c>
			{
				pid_reset(&pid_velocity);
 8003026:	f107 0318 	add.w	r3, r7, #24
 800302a:	4618      	mov	r0, r3
 800302c:	f001 f900 	bl	8004230 <pid_reset>
				// copy EEPROM to RAM
				regs[REG_GOAL_TORQUE_CURRENT_MA_L] = regs[REG_MAX_CURRENT_MA_L];
 8003030:	4b49      	ldr	r3, [pc, #292]	; (8003158 <main+0xd78>)
 8003032:	7e1a      	ldrb	r2, [r3, #24]
 8003034:	4b48      	ldr	r3, [pc, #288]	; (8003158 <main+0xd78>)
 8003036:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
				regs[REG_GOAL_TORQUE_CURRENT_MA_H] = regs[REG_MAX_CURRENT_MA_H];
 800303a:	4b47      	ldr	r3, [pc, #284]	; (8003158 <main+0xd78>)
 800303c:	7e5a      	ldrb	r2, [r3, #25]
 800303e:	4b46      	ldr	r3, [pc, #280]	; (8003158 <main+0xd78>)
 8003040:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				// reset unused RAM
				regs[REG_GOAL_FLUX_CURRENT_MA_L] = 0;
 8003044:	4b44      	ldr	r3, [pc, #272]	; (8003158 <main+0xd78>)
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
				regs[REG_GOAL_FLUX_CURRENT_MA_H] = 0;
 800304c:	4b42      	ldr	r3, [pc, #264]	; (8003158 <main+0xd78>)
 800304e:	2200      	movs	r2, #0
 8003050:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
				regs[REG_GOAL_POSITION_DEG_L] = 0;
 8003054:	4b40      	ldr	r3, [pc, #256]	; (8003158 <main+0xd78>)
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				regs[REG_GOAL_POSITION_DEG_H] = 0;
 800305c:	4b3e      	ldr	r3, [pc, #248]	; (8003158 <main+0xd78>)
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
				// reset goal to avoid glicth
				regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 8003064:	4b3c      	ldr	r3, [pc, #240]	; (8003158 <main+0xd78>)
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
				regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 800306c:	4b3a      	ldr	r3, [pc, #232]	; (8003158 <main+0xd78>)
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
				// reset filtered setpoint
				setpoint_torque_current_mA = 0.0f;
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			}
			{
				setpoint_position_deg = 0.0f;
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
				setpoint_acceleration_dpss = 0.0f;
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
				// compute velocity setpoint from goal and EEPROM velocity limit
				float const goal_velocity_dps = (int16_t)(MAKE_SHORT(regs[REG_GOAL_VELOCITY_DPS_L],regs[REG_GOAL_VELOCITY_DPS_H]));
 800308c:	4b32      	ldr	r3, [pc, #200]	; (8003158 <main+0xd78>)
 800308e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8003092:	021b      	lsls	r3, r3, #8
 8003094:	b21a      	sxth	r2, r3
 8003096:	4b30      	ldr	r3, [pc, #192]	; (8003158 <main+0xd78>)
 8003098:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800309c:	b21b      	sxth	r3, r3
 800309e:	4313      	orrs	r3, r2
 80030a0:	b21b      	sxth	r3, r3
 80030a2:	ee07 3a90 	vmov	s15, r3
 80030a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030aa:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
				float const reg_max_velocity_dps = (uint16_t)(MAKE_SHORT(regs[REG_MAX_VELOCITY_DPS_L],regs[REG_MAX_VELOCITY_DPS_H]));
 80030ae:	4b2a      	ldr	r3, [pc, #168]	; (8003158 <main+0xd78>)
 80030b0:	7d5b      	ldrb	r3, [r3, #21]
 80030b2:	021b      	lsls	r3, r3, #8
 80030b4:	b21a      	sxth	r2, r3
 80030b6:	4b28      	ldr	r3, [pc, #160]	; (8003158 <main+0xd78>)
 80030b8:	7d1b      	ldrb	r3, [r3, #20]
 80030ba:	b21b      	sxth	r3, r3
 80030bc:	4313      	orrs	r3, r2
 80030be:	b21b      	sxth	r3, r3
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	ee07 3a90 	vmov	s15, r3
 80030c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ca:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
				setpoint_velocity_dps = fconstrain(goal_velocity_dps,-reg_max_velocity_dps,reg_max_velocity_dps);
 80030ce:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80030d2:	eef1 7a67 	vneg.f32	s15, s15
 80030d6:	ed97 1a2e 	vldr	s2, [r7, #184]	; 0xb8
 80030da:	eef0 0a67 	vmov.f32	s1, s15
 80030de:	ed97 0a2f 	vldr	s0, [r7, #188]	; 0xbc
 80030e2:	f001 f87c 	bl	80041de <fconstrain>
 80030e6:	ed87 0a39 	vstr	s0, [r7, #228]	; 0xe4
				// compute velocity error
				float const error_velocity_dps = setpoint_velocity_dps-API_FOC_Get_Present_Velocity();
 80030ea:	f7fe ffe7 	bl	80020bc <API_FOC_Get_Present_Velocity>
 80030ee:	eeb0 7a40 	vmov.f32	s14, s0
 80030f2:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 80030f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030fa:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
				// compute torque current setpoint using PID velocity, current is limited bt goal current and EEPROM current limit
				float const goal_torque_current_mA=(int16_t)(MAKE_SHORT(regs[REG_GOAL_TORQUE_CURRENT_MA_L],regs[REG_GOAL_TORQUE_CURRENT_MA_H]));
 80030fe:	4b16      	ldr	r3, [pc, #88]	; (8003158 <main+0xd78>)
 8003100:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003104:	021b      	lsls	r3, r3, #8
 8003106:	b21a      	sxth	r2, r3
 8003108:	4b13      	ldr	r3, [pc, #76]	; (8003158 <main+0xd78>)
 800310a:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 800310e:	b21b      	sxth	r3, r3
 8003110:	4313      	orrs	r3, r2
 8003112:	b21b      	sxth	r3, r3
 8003114:	ee07 3a90 	vmov	s15, r3
 8003118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800311c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
				float const reg_max_current_ma = (uint16_t)(MAKE_SHORT(regs[REG_MAX_CURRENT_MA_L],regs[REG_MAX_CURRENT_MA_H]));
 8003120:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <main+0xd78>)
 8003122:	7e5b      	ldrb	r3, [r3, #25]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	b21a      	sxth	r2, r3
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <main+0xd78>)
 800312a:	7e1b      	ldrb	r3, [r3, #24]
 800312c:	b21b      	sxth	r3, r3
 800312e:	4313      	orrs	r3, r2
 8003130:	b21b      	sxth	r3, r3
 8003132:	b29b      	uxth	r3, r3
 8003134:	ee07 3a90 	vmov	s15, r3
 8003138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
				float const reg_reverse = regs[REG_INV_PHASE_MOTOR] == 0 ? 1.0f : -1.0f;
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <main+0xd78>)
 8003142:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003146:	2b00      	cmp	r3, #0
 8003148:	d110      	bne.n	800316c <main+0xd8c>
 800314a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800314e:	e00e      	b.n	800316e <main+0xd8e>
 8003150:	bf800000 	.word	0xbf800000
 8003154:	3ef5c28f 	.word	0x3ef5c28f
 8003158:	2000021c 	.word	0x2000021c
 800315c:	447a0000 	.word	0x447a0000
 8003160:	47c35000 	.word	0x47c35000
 8003164:	3dcccccd 	.word	0x3dcccccd
 8003168:	3f051eb8 	.word	0x3f051eb8
 800316c:	4ba5      	ldr	r3, [pc, #660]	; (8003404 <main+0x1024>)
 800316e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8003172:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003176:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8003408 <main+0x1028>
 800317a:	ee27 8a87 	vmul.f32	s16, s15, s14
						&pid_velocity,
						error_velocity_dps,
						(float)((int16_t)(MAKE_SHORT(regs[REG_PID_VELOCITY_KP_L],regs[REG_PID_VELOCITY_KP_H])))/1000.0f,
 800317e:	4ba3      	ldr	r3, [pc, #652]	; (800340c <main+0x102c>)
 8003180:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	b21a      	sxth	r2, r3
 8003188:	4ba0      	ldr	r3, [pc, #640]	; (800340c <main+0x102c>)
 800318a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800318e:	b21b      	sxth	r3, r3
 8003190:	4313      	orrs	r3, r2
 8003192:	b21b      	sxth	r3, r3
 8003194:	ee07 3a90 	vmov	s15, r3
 8003198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 800319c:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8003410 <main+0x1030>
 80031a0:	eec7 8a87 	vdiv.f32	s17, s15, s14
						(float)((int16_t)(MAKE_SHORT(regs[REG_PID_VELOCITY_KI_L],regs[REG_PID_VELOCITY_KI_H])))/100000.0f,
 80031a4:	4b99      	ldr	r3, [pc, #612]	; (800340c <main+0x102c>)
 80031a6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80031aa:	021b      	lsls	r3, r3, #8
 80031ac:	b21a      	sxth	r2, r3
 80031ae:	4b97      	ldr	r3, [pc, #604]	; (800340c <main+0x102c>)
 80031b0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80031b4:	b21b      	sxth	r3, r3
 80031b6:	4313      	orrs	r3, r2
 80031b8:	b21b      	sxth	r3, r3
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 80031c2:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8003414 <main+0x1034>
 80031c6:	ee87 9a87 	vdiv.f32	s18, s15, s14
						(float)((int16_t)(MAKE_SHORT(regs[REG_PID_VELOCITY_KD_L],regs[REG_PID_VELOCITY_KD_H])))/1000.0f,
 80031ca:	4b90      	ldr	r3, [pc, #576]	; (800340c <main+0x102c>)
 80031cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031d0:	021b      	lsls	r3, r3, #8
 80031d2:	b21a      	sxth	r2, r3
 80031d4:	4b8d      	ldr	r3, [pc, #564]	; (800340c <main+0x102c>)
 80031d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031da:	b21b      	sxth	r3, r3
 80031dc:	4313      	orrs	r3, r2
 80031de:	b21b      	sxth	r3, r3
 80031e0:	ee07 3a90 	vmov	s15, r3
 80031e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 80031e8:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8003410 <main+0x1030>
 80031ec:	eec7 9a87 	vdiv.f32	s19, s15, s14
 80031f0:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 80031f4:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 80031f8:	f00a ff43 	bl	800e082 <fminf>
 80031fc:	eef0 6a40 	vmov.f32	s13, s0
						fminf(goal_torque_current_mA,reg_max_current_ma), // current limit is the lowest limit from goal and EEPROM
						0.1f,// ALPHA D
						setpoint_velocity_dps*(float)((int16_t)(MAKE_SHORT(regs[REG_PID_VELOCITY_KFF_L],regs[REG_PID_VELOCITY_KFF_H])))/1000.0f
 8003200:	4b82      	ldr	r3, [pc, #520]	; (800340c <main+0x102c>)
 8003202:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003206:	021b      	lsls	r3, r3, #8
 8003208:	b21a      	sxth	r2, r3
 800320a:	4b80      	ldr	r3, [pc, #512]	; (800340c <main+0x102c>)
 800320c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003210:	b21b      	sxth	r3, r3
 8003212:	4313      	orrs	r3, r2
 8003214:	b21b      	sxth	r3, r3
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800321e:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8003222:	ee67 7a27 	vmul.f32	s15, s14, s15
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8003226:	ed9f 6a7a 	vldr	s12, [pc, #488]	; 8003410 <main+0x1030>
 800322a:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800322e:	f107 0318 	add.w	r3, r7, #24
 8003232:	eeb0 3a47 	vmov.f32	s6, s14
 8003236:	eddf 2a78 	vldr	s5, [pc, #480]	; 8003418 <main+0x1038>
 800323a:	eeb0 2a66 	vmov.f32	s4, s13
 800323e:	eef0 1a69 	vmov.f32	s3, s19
 8003242:	eeb0 1a49 	vmov.f32	s2, s18
 8003246:	eef0 0a68 	vmov.f32	s1, s17
 800324a:	ed97 0a2d 	vldr	s0, [r7, #180]	; 0xb4
 800324e:	4618      	mov	r0, r3
 8003250:	f001 f804 	bl	800425c <pid_process_antiwindup_clamp_with_ff>
 8003254:	eef0 7a40 	vmov.f32	s15, s0
 8003258:	ee28 7a27 	vmul.f32	s14, s16, s15
				) + (1.0f-ALPHA_CURRENT_SETPOINT)*setpoint_torque_current_mA;
 800325c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8003260:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800341c <main+0x103c>
 8003264:	ee67 7aa6 	vmul.f32	s15, s15, s13
				setpoint_torque_current_mA = ALPHA_CURRENT_SETPOINT*reg_reverse*pid_process_antiwindup_clamp_with_ff(
 8003268:	ee77 7a27 	vadd.f32	s15, s14, s15
 800326c:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
				// in this operating mode, flux current is forced to 0
				setpoint_flux_current_mA=0.0f;
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			}
			break;
 8003278:	e107      	b.n	800348a <main+0x10aa>
		case REG_CONTROL_MODE_TORQUE:
			if(last_mode!=REG_CONTROL_MODE_TORQUE)
 800327a:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800327e:	2b03      	cmp	r3, #3
 8003280:	d01f      	beq.n	80032c2 <main+0xee2>
			{
				// reset unused RAM
				regs[REG_GOAL_POSITION_DEG_L] = 0;
 8003282:	4b62      	ldr	r3, [pc, #392]	; (800340c <main+0x102c>)
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				regs[REG_GOAL_POSITION_DEG_H] = 0;
 800328a:	4b60      	ldr	r3, [pc, #384]	; (800340c <main+0x102c>)
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
				regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 8003292:	4b5e      	ldr	r3, [pc, #376]	; (800340c <main+0x102c>)
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
				regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 800329a:	4b5c      	ldr	r3, [pc, #368]	; (800340c <main+0x102c>)
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
				// reset goal to avoid glicth
				regs[REG_GOAL_TORQUE_CURRENT_MA_L] = 0;
 80032a2:	4b5a      	ldr	r3, [pc, #360]	; (800340c <main+0x102c>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
				regs[REG_GOAL_TORQUE_CURRENT_MA_H] = 0;
 80032aa:	4b58      	ldr	r3, [pc, #352]	; (800340c <main+0x102c>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
				regs[REG_GOAL_FLUX_CURRENT_MA_L] = 0;
 80032b2:	4b56      	ldr	r3, [pc, #344]	; (800340c <main+0x102c>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
				regs[REG_GOAL_FLUX_CURRENT_MA_H] = 0;
 80032ba:	4b54      	ldr	r3, [pc, #336]	; (800340c <main+0x102c>)
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
			}
			{
				setpoint_position_deg = 0.0f;
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
				setpoint_velocity_dps = 0.0f;
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
				setpoint_acceleration_dpss = 0.0f;
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
				// compute flux & torque current setpoints, from goals and EEPROM current limit
				float const goal_torque_current_mA=(int16_t)(MAKE_SHORT(regs[REG_GOAL_TORQUE_CURRENT_MA_L],regs[REG_GOAL_TORQUE_CURRENT_MA_H]));
 80032da:	4b4c      	ldr	r3, [pc, #304]	; (800340c <main+0x102c>)
 80032dc:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80032e0:	021b      	lsls	r3, r3, #8
 80032e2:	b21a      	sxth	r2, r3
 80032e4:	4b49      	ldr	r3, [pc, #292]	; (800340c <main+0x102c>)
 80032e6:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80032ea:	b21b      	sxth	r3, r3
 80032ec:	4313      	orrs	r3, r2
 80032ee:	b21b      	sxth	r3, r3
 80032f0:	ee07 3a90 	vmov	s15, r3
 80032f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032f8:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
				float const goal_flux_current_mA=(int16_t)(MAKE_SHORT(regs[REG_GOAL_FLUX_CURRENT_MA_L],regs[REG_GOAL_FLUX_CURRENT_MA_H]));
 80032fc:	4b43      	ldr	r3, [pc, #268]	; (800340c <main+0x102c>)
 80032fe:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8003302:	021b      	lsls	r3, r3, #8
 8003304:	b21a      	sxth	r2, r3
 8003306:	4b41      	ldr	r3, [pc, #260]	; (800340c <main+0x102c>)
 8003308:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800330c:	b21b      	sxth	r3, r3
 800330e:	4313      	orrs	r3, r2
 8003310:	b21b      	sxth	r3, r3
 8003312:	ee07 3a90 	vmov	s15, r3
 8003316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800331a:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
				float const reg_max_current_ma = (uint16_t)(MAKE_SHORT(regs[REG_MAX_CURRENT_MA_L],regs[REG_MAX_CURRENT_MA_H]));
 800331e:	4b3b      	ldr	r3, [pc, #236]	; (800340c <main+0x102c>)
 8003320:	7e5b      	ldrb	r3, [r3, #25]
 8003322:	021b      	lsls	r3, r3, #8
 8003324:	b21a      	sxth	r2, r3
 8003326:	4b39      	ldr	r3, [pc, #228]	; (800340c <main+0x102c>)
 8003328:	7e1b      	ldrb	r3, [r3, #24]
 800332a:	b21b      	sxth	r3, r3
 800332c:	4313      	orrs	r3, r2
 800332e:	b21b      	sxth	r3, r3
 8003330:	b29b      	uxth	r3, r3
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800333a:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
				setpoint_flux_current_mA = fconstrain(goal_flux_current_mA,-reg_max_current_ma,reg_max_current_ma);
 800333e:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003342:	eef1 7a67 	vneg.f32	s15, s15
 8003346:	ed97 1a30 	vldr	s2, [r7, #192]	; 0xc0
 800334a:	eef0 0a67 	vmov.f32	s1, s15
 800334e:	ed97 0a31 	vldr	s0, [r7, #196]	; 0xc4
 8003352:	f000 ff44 	bl	80041de <fconstrain>
 8003356:	ed87 0a37 	vstr	s0, [r7, #220]	; 0xdc
				setpoint_torque_current_mA = fconstrain(goal_torque_current_mA,-reg_max_current_ma,reg_max_current_ma);
 800335a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800335e:	eef1 7a67 	vneg.f32	s15, s15
 8003362:	ed97 1a30 	vldr	s2, [r7, #192]	; 0xc0
 8003366:	eef0 0a67 	vmov.f32	s1, s15
 800336a:	ed97 0a32 	vldr	s0, [r7, #200]	; 0xc8
 800336e:	f000 ff36 	bl	80041de <fconstrain>
 8003372:	ed87 0a38 	vstr	s0, [r7, #224]	; 0xe0
			}
			break;
 8003376:	e088      	b.n	800348a <main+0x10aa>
		case REG_CONTROL_MODE_VELOCITY_TORQUE_OPEN_LOOP:
			{
				if(last_mode!=REG_CONTROL_MODE_VELOCITY_TORQUE_OPEN_LOOP)
 8003378:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800337c:	2b04      	cmp	r3, #4
 800337e:	d01f      	beq.n	80033c0 <main+0xfe0>
				{
					// reset unused RAM
					regs[REG_GOAL_POSITION_DEG_L] = 0;
 8003380:	4b22      	ldr	r3, [pc, #136]	; (800340c <main+0x102c>)
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					regs[REG_GOAL_POSITION_DEG_H] = 0;
 8003388:	4b20      	ldr	r3, [pc, #128]	; (800340c <main+0x102c>)
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
					regs[REG_GOAL_FLUX_CURRENT_MA_L] = 0;
 8003390:	4b1e      	ldr	r3, [pc, #120]	; (800340c <main+0x102c>)
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
					regs[REG_GOAL_FLUX_CURRENT_MA_H] = 0;
 8003398:	4b1c      	ldr	r3, [pc, #112]	; (800340c <main+0x102c>)
 800339a:	2200      	movs	r2, #0
 800339c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
					regs[REG_GOAL_TORQUE_CURRENT_MA_L] = 0;
 80033a0:	4b1a      	ldr	r3, [pc, #104]	; (800340c <main+0x102c>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
					regs[REG_GOAL_TORQUE_CURRENT_MA_H] = 0;
 80033a8:	4b18      	ldr	r3, [pc, #96]	; (800340c <main+0x102c>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
					// reset goal to avoid glicth
					regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 80033b0:	4b16      	ldr	r3, [pc, #88]	; (800340c <main+0x102c>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
					regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 80033b8:	4b14      	ldr	r3, [pc, #80]	; (800340c <main+0x102c>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
				}
				setpoint_position_deg = 0.0f;
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
				setpoint_velocity_dps = (int16_t)(MAKE_SHORT(regs[REG_GOAL_VELOCITY_DPS_L],regs[REG_GOAL_VELOCITY_DPS_H]));
 80033c8:	4b10      	ldr	r3, [pc, #64]	; (800340c <main+0x102c>)
 80033ca:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80033ce:	021b      	lsls	r3, r3, #8
 80033d0:	b21a      	sxth	r2, r3
 80033d2:	4b0e      	ldr	r3, [pc, #56]	; (800340c <main+0x102c>)
 80033d4:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80033d8:	b21b      	sxth	r3, r3
 80033da:	4313      	orrs	r3, r2
 80033dc:	b21b      	sxth	r3, r3
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033e6:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
				setpoint_acceleration_dpss = 0.0f;
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
				setpoint_torque_current_mA = 0.0f;
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
				setpoint_flux_current_mA = 0.0f;
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			}
			break;
 8003402:	e042      	b.n	800348a <main+0x10aa>
 8003404:	bf800000 	.word	0xbf800000
 8003408:	3ef5c28f 	.word	0x3ef5c28f
 800340c:	2000021c 	.word	0x2000021c
 8003410:	447a0000 	.word	0x447a0000
 8003414:	47c35000 	.word	0x47c35000
 8003418:	3dcccccd 	.word	0x3dcccccd
 800341c:	3f051eb8 	.word	0x3f051eb8
		default:
			// reset unused RAM
			regs[REG_GOAL_POSITION_DEG_L] = 0;
 8003420:	4bcd      	ldr	r3, [pc, #820]	; (8003758 <main+0x1378>)
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			regs[REG_GOAL_POSITION_DEG_H] = 0;
 8003428:	4bcb      	ldr	r3, [pc, #812]	; (8003758 <main+0x1378>)
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 8003430:	4bc9      	ldr	r3, [pc, #804]	; (8003758 <main+0x1378>)
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
			regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 8003438:	4bc7      	ldr	r3, [pc, #796]	; (8003758 <main+0x1378>)
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			regs[REG_GOAL_TORQUE_CURRENT_MA_L] = 0;
 8003440:	4bc5      	ldr	r3, [pc, #788]	; (8003758 <main+0x1378>)
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			regs[REG_GOAL_TORQUE_CURRENT_MA_H] = 0;
 8003448:	4bc3      	ldr	r3, [pc, #780]	; (8003758 <main+0x1378>)
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
			regs[REG_GOAL_FLUX_CURRENT_MA_L] = 0;
 8003450:	4bc1      	ldr	r3, [pc, #772]	; (8003758 <main+0x1378>)
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
			regs[REG_GOAL_FLUX_CURRENT_MA_H] = 0;
 8003458:	4bbf      	ldr	r3, [pc, #764]	; (8003758 <main+0x1378>)
 800345a:	2200      	movs	r2, #0
 800345c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
			// reset all setpoints
			setpoint_position_deg = 0.0f;
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			setpoint_velocity_dps = 0.0f;
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			setpoint_acceleration_dpss = 0.0f;
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			setpoint_torque_current_mA=0.0f;
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			setpoint_flux_current_mA=0.0f;
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			break;
 8003488:	bf00      	nop
		}
		last_mode = reg_control_mode;
 800348a:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800348e:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		// PERFORMANCE
		//uint16_t t_end = __HAL_TIM_GET_COUNTER(&htim6);

		// RAM Update
		regs[REG_PRESENT_POSITION_DEG_L] = LOW_BYTE((int16_t)(RADIANS_TO_DEGREES(API_AS5048A_Position_Sensor_Get_Multiturn_Radians())*10.0f));
 8003492:	f001 f977 	bl	8004784 <API_AS5048A_Position_Sensor_Get_Multiturn_Radians>
 8003496:	eef0 7a40 	vmov.f32	s15, s0
 800349a:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 800375c <main+0x137c>
 800349e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034a2:	ee17 0a90 	vmov	r0, s15
 80034a6:	f7fd f81b 	bl	80004e0 <__aeabi_f2d>
 80034aa:	a3a9      	add	r3, pc, #676	; (adr r3, 8003750 <main+0x1370>)
 80034ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b0:	f7fd f998 	bl	80007e4 <__aeabi_ddiv>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4610      	mov	r0, r2
 80034ba:	4619      	mov	r1, r3
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	4ba7      	ldr	r3, [pc, #668]	; (8003760 <main+0x1380>)
 80034c2:	f7fd f865 	bl	8000590 <__aeabi_dmul>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4610      	mov	r0, r2
 80034cc:	4619      	mov	r1, r3
 80034ce:	f7fd faf9 	bl	8000ac4 <__aeabi_d2iz>
 80034d2:	4603      	mov	r3, r0
 80034d4:	b21b      	sxth	r3, r3
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	4b9f      	ldr	r3, [pc, #636]	; (8003758 <main+0x1378>)
 80034da:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		regs[REG_PRESENT_POSITION_DEG_H] = HIGH_BYTE((int16_t)(RADIANS_TO_DEGREES(API_AS5048A_Position_Sensor_Get_Multiturn_Radians())*10.0f));
 80034de:	f001 f951 	bl	8004784 <API_AS5048A_Position_Sensor_Get_Multiturn_Radians>
 80034e2:	eef0 7a40 	vmov.f32	s15, s0
 80034e6:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 800375c <main+0x137c>
 80034ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034ee:	ee17 0a90 	vmov	r0, s15
 80034f2:	f7fc fff5 	bl	80004e0 <__aeabi_f2d>
 80034f6:	a396      	add	r3, pc, #600	; (adr r3, 8003750 <main+0x1370>)
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	f7fd f972 	bl	80007e4 <__aeabi_ddiv>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4610      	mov	r0, r2
 8003506:	4619      	mov	r1, r3
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	4b94      	ldr	r3, [pc, #592]	; (8003760 <main+0x1380>)
 800350e:	f7fd f83f 	bl	8000590 <__aeabi_dmul>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4610      	mov	r0, r2
 8003518:	4619      	mov	r1, r3
 800351a:	f7fd fad3 	bl	8000ac4 <__aeabi_d2iz>
 800351e:	4603      	mov	r3, r0
 8003520:	b21b      	sxth	r3, r3
 8003522:	121b      	asrs	r3, r3, #8
 8003524:	b21b      	sxth	r3, r3
 8003526:	b2da      	uxtb	r2, r3
 8003528:	4b8b      	ldr	r3, [pc, #556]	; (8003758 <main+0x1378>)
 800352a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
		regs[REG_PRESENT_VELOCITY_DPS_L] = LOW_BYTE((int16_t)(API_AS5048A_Position_Sensor_Get_DPS()*1.0f));
 800352e:	f001 f937 	bl	80047a0 <API_AS5048A_Position_Sensor_Get_DPS>
 8003532:	eef0 7a40 	vmov.f32	s15, s0
 8003536:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800353a:	ee17 3a90 	vmov	r3, s15
 800353e:	b21b      	sxth	r3, r3
 8003540:	b2da      	uxtb	r2, r3
 8003542:	4b85      	ldr	r3, [pc, #532]	; (8003758 <main+0x1378>)
 8003544:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
		regs[REG_PRESENT_VELOCITY_DPS_H] = HIGH_BYTE((int16_t)(API_AS5048A_Position_Sensor_Get_DPS()*1.0f));
 8003548:	f001 f92a 	bl	80047a0 <API_AS5048A_Position_Sensor_Get_DPS>
 800354c:	eef0 7a40 	vmov.f32	s15, s0
 8003550:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003554:	ee17 3a90 	vmov	r3, s15
 8003558:	b21b      	sxth	r3, r3
 800355a:	121b      	asrs	r3, r3, #8
 800355c:	b21b      	sxth	r3, r3
 800355e:	b2da      	uxtb	r2, r3
 8003560:	4b7d      	ldr	r3, [pc, #500]	; (8003758 <main+0x1378>)
 8003562:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		regs[REG_PRESENT_TORQUE_CURRENT_MA_L] = LOW_BYTE((int16_t)(API_FOC_Get_Present_Torque_Current()*1.0f));
 8003566:	f7fe fdb7 	bl	80020d8 <API_FOC_Get_Present_Torque_Current>
 800356a:	eef0 7a40 	vmov.f32	s15, s0
 800356e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003572:	ee17 3a90 	vmov	r3, s15
 8003576:	b21b      	sxth	r3, r3
 8003578:	b2da      	uxtb	r2, r3
 800357a:	4b77      	ldr	r3, [pc, #476]	; (8003758 <main+0x1378>)
 800357c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		regs[REG_PRESENT_TORQUE_CURRENT_MA_H] = HIGH_BYTE((int16_t)(API_FOC_Get_Present_Torque_Current()*1.0f));
 8003580:	f7fe fdaa 	bl	80020d8 <API_FOC_Get_Present_Torque_Current>
 8003584:	eef0 7a40 	vmov.f32	s15, s0
 8003588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800358c:	ee17 3a90 	vmov	r3, s15
 8003590:	b21b      	sxth	r3, r3
 8003592:	121b      	asrs	r3, r3, #8
 8003594:	b21b      	sxth	r3, r3
 8003596:	b2da      	uxtb	r2, r3
 8003598:	4b6f      	ldr	r3, [pc, #444]	; (8003758 <main+0x1378>)
 800359a:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
		regs[REG_PRESENT_FLUX_CURRENT_MA_L] = LOW_BYTE((int16_t)(API_FOC_Get_Present_Flux_Current()*1.0f));
 800359e:	f7fe fda9 	bl	80020f4 <API_FOC_Get_Present_Flux_Current>
 80035a2:	eef0 7a40 	vmov.f32	s15, s0
 80035a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035aa:	ee17 3a90 	vmov	r3, s15
 80035ae:	b21b      	sxth	r3, r3
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	4b69      	ldr	r3, [pc, #420]	; (8003758 <main+0x1378>)
 80035b4:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
		regs[REG_PRESENT_FLUX_CURRENT_MA_H] = HIGH_BYTE((int16_t)(API_FOC_Get_Present_Flux_Current()*1.0f));
 80035b8:	f7fe fd9c 	bl	80020f4 <API_FOC_Get_Present_Flux_Current>
 80035bc:	eef0 7a40 	vmov.f32	s15, s0
 80035c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035c4:	ee17 3a90 	vmov	r3, s15
 80035c8:	b21b      	sxth	r3, r3
 80035ca:	121b      	asrs	r3, r3, #8
 80035cc:	b21b      	sxth	r3, r3
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	4b61      	ldr	r3, [pc, #388]	; (8003758 <main+0x1378>)
 80035d2:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
		regs[REG_PRESENT_VOLTAGE] = (uint16_t)(API_FOC_Get_Present_Voltage());
 80035d6:	f7fe fd9b 	bl	8002110 <API_FOC_Get_Present_Voltage>
 80035da:	eef0 7a40 	vmov.f32	s15, s0
 80035de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035e2:	ee17 3a90 	vmov	r3, s15
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	4b5b      	ldr	r3, [pc, #364]	; (8003758 <main+0x1378>)
 80035ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		regs[REG_PRESENT_TEMPERATURE] = (uint16_t)(API_FOC_Get_Present_Temp());
 80035f0:	f7fe fd9c 	bl	800212c <API_FOC_Get_Present_Temp>
 80035f4:	eef0 7a40 	vmov.f32	s15, s0
 80035f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035fc:	ee17 3a90 	vmov	r3, s15
 8003600:	b29b      	uxth	r3, r3
 8003602:	b2da      	uxtb	r2, r3
 8003604:	4b54      	ldr	r3, [pc, #336]	; (8003758 <main+0x1378>)
 8003606:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		regs[REG_MOVING] = (uint16_t)(fabsf(API_AS5048A_Position_Sensor_Get_DPS())) > (uint16_t)(regs[REG_MOVING_THRESHOLD_DPS]) ? 1 : 0;
 800360a:	f001 f8c9 	bl	80047a0 <API_AS5048A_Position_Sensor_Get_DPS>
 800360e:	eef0 7a40 	vmov.f32	s15, s0
 8003612:	eef0 7ae7 	vabs.f32	s15, s15
 8003616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800361a:	ee17 3a90 	vmov	r3, s15
 800361e:	b29a      	uxth	r2, r3
 8003620:	4b4d      	ldr	r3, [pc, #308]	; (8003758 <main+0x1378>)
 8003622:	7fdb      	ldrb	r3, [r3, #31]
 8003624:	b29b      	uxth	r3, r3
 8003626:	429a      	cmp	r2, r3
 8003628:	bf8c      	ite	hi
 800362a:	2301      	movhi	r3, #1
 800362c:	2300      	movls	r3, #0
 800362e:	b2db      	uxtb	r3, r3
 8003630:	461a      	mov	r2, r3
 8003632:	4b49      	ldr	r3, [pc, #292]	; (8003758 <main+0x1378>)
 8003634:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

		// DEBUG RAM Update
		regs[REG_SETPOINT_POSITION_DEG_L] = LOW_BYTE((int16_t)(setpoint_position_deg*10.0f));
 8003638:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 800363c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003640:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003644:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003648:	ee17 3a90 	vmov	r3, s15
 800364c:	b21b      	sxth	r3, r3
 800364e:	b2da      	uxtb	r2, r3
 8003650:	4b41      	ldr	r3, [pc, #260]	; (8003758 <main+0x1378>)
 8003652:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
		regs[REG_SETPOINT_POSITION_DEG_H] = HIGH_BYTE((int16_t)(setpoint_position_deg*10.0f));
 8003656:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 800365a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800365e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003666:	ee17 3a90 	vmov	r3, s15
 800366a:	b21b      	sxth	r3, r3
 800366c:	121b      	asrs	r3, r3, #8
 800366e:	b21b      	sxth	r3, r3
 8003670:	b2da      	uxtb	r2, r3
 8003672:	4b39      	ldr	r3, [pc, #228]	; (8003758 <main+0x1378>)
 8003674:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
		regs[REG_SETPOINT_VELOCITY_DPS_L] = LOW_BYTE((int16_t)(setpoint_velocity_dps*1.0f));
 8003678:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800367c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003680:	ee17 3a90 	vmov	r3, s15
 8003684:	b21b      	sxth	r3, r3
 8003686:	b2da      	uxtb	r2, r3
 8003688:	4b33      	ldr	r3, [pc, #204]	; (8003758 <main+0x1378>)
 800368a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		regs[REG_SETPOINT_VELOCITY_DPS_H] = HIGH_BYTE((int16_t)(setpoint_velocity_dps*1.0f));
 800368e:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8003692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003696:	ee17 3a90 	vmov	r3, s15
 800369a:	b21b      	sxth	r3, r3
 800369c:	121b      	asrs	r3, r3, #8
 800369e:	b21b      	sxth	r3, r3
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	4b2d      	ldr	r3, [pc, #180]	; (8003758 <main+0x1378>)
 80036a4:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
		regs[REG_SETPOINT_TORQUE_CURRENT_MA_L] = LOW_BYTE((int16_t)(setpoint_torque_current_mA*1.0f));
 80036a8:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80036ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036b0:	ee17 3a90 	vmov	r3, s15
 80036b4:	b21b      	sxth	r3, r3
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	4b27      	ldr	r3, [pc, #156]	; (8003758 <main+0x1378>)
 80036ba:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		regs[REG_SETPOINT_TORQUE_CURRENT_MA_H] = HIGH_BYTE((int16_t)(setpoint_torque_current_mA*1.0f));
 80036be:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80036c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036c6:	ee17 3a90 	vmov	r3, s15
 80036ca:	b21b      	sxth	r3, r3
 80036cc:	121b      	asrs	r3, r3, #8
 80036ce:	b21b      	sxth	r3, r3
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	4b21      	ldr	r3, [pc, #132]	; (8003758 <main+0x1378>)
 80036d4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		regs[REG_SETPOINT_FLUX_CURRENT_MA_L] = LOW_BYTE((int16_t)(setpoint_flux_current_mA*1.0f));
 80036d8:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80036dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036e0:	ee17 3a90 	vmov	r3, s15
 80036e4:	b21b      	sxth	r3, r3
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <main+0x1378>)
 80036ea:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
		regs[REG_SETPOINT_FLUX_CURRENT_MA_H] = HIGH_BYTE((int16_t)(setpoint_flux_current_mA*1.0f));
 80036ee:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80036f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036f6:	ee17 3a90 	vmov	r3, s15
 80036fa:	b21b      	sxth	r3, r3
 80036fc:	121b      	asrs	r3, r3, #8
 80036fe:	b21b      	sxth	r3, r3
 8003700:	b2da      	uxtb	r2, r3
 8003702:	4b15      	ldr	r3, [pc, #84]	; (8003758 <main+0x1378>)
 8003704:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
		regs[REG_PROCESSING_TIME] = (uint8_t)(API_FOC_Get_Processing_Time());
 8003708:	f7fe fd1e 	bl	8002148 <API_FOC_Get_Processing_Time>
 800370c:	eef0 7a40 	vmov.f32	s15, s0
 8003710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003714:	edc7 7a01 	vstr	s15, [r7, #4]
 8003718:	793b      	ldrb	r3, [r7, #4]
 800371a:	b2da      	uxtb	r2, r3
 800371c:	4b0e      	ldr	r3, [pc, #56]	; (8003758 <main+0x1378>)
 800371e:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

		// TRACE
		static uint32_t counter = 0;
		if(((++counter)%4)==0)
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <main+0x1384>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	3301      	adds	r3, #1
 8003728:	4a0e      	ldr	r2, [pc, #56]	; (8003764 <main+0x1384>)
 800372a:	6013      	str	r3, [r2, #0]
//						(int)(API_FOC_Get_Present_Flux_Current())
//					);
		}
	}
	// synchro adjustment
	float const phase_synchro_offset_rad = DEGREES_TO_RADIANS((float)(MAKE_SHORT(regs[REG_GOAL_SYNCHRO_OFFSET_L],regs[REG_GOAL_SYNCHRO_OFFSET_H])));
 800372c:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <main+0x1378>)
 800372e:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8003732:	021b      	lsls	r3, r3, #8
 8003734:	4a08      	ldr	r2, [pc, #32]	; (8003758 <main+0x1378>)
 8003736:	f892 208d 	ldrb.w	r2, [r2, #141]	; 0x8d
 800373a:	4313      	orrs	r3, r2
 800373c:	ee07 3a90 	vmov	s15, r3
 8003740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003744:	ee17 0a90 	vmov	r0, s15
 8003748:	f7fc feca 	bl	80004e0 <__aeabi_f2d>
 800374c:	e00c      	b.n	8003768 <main+0x1388>
 800374e:	bf00      	nop
 8003750:	54442d18 	.word	0x54442d18
 8003754:	400921fb 	.word	0x400921fb
 8003758:	2000021c 	.word	0x2000021c
 800375c:	43340000 	.word	0x43340000
 8003760:	40240000 	.word	0x40240000
 8003764:	200001c4 	.word	0x200001c4
 8003768:	a31d      	add	r3, pc, #116	; (adr r3, 80037e0 <main+0x1400>)
 800376a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376e:	f7fc ff0f 	bl	8000590 <__aeabi_dmul>
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	4610      	mov	r0, r2
 8003778:	4619      	mov	r1, r3
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	4b16      	ldr	r3, [pc, #88]	; (80037d8 <main+0x13f8>)
 8003780:	f7fd f830 	bl	80007e4 <__aeabi_ddiv>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4610      	mov	r0, r2
 800378a:	4619      	mov	r1, r3
 800378c:	f7fd f9c2 	bl	8000b14 <__aeabi_d2f>
 8003790:	4603      	mov	r3, r0
 8003792:	633b      	str	r3, [r7, #48]	; 0x30
	// FOC update (every 250us when current drop rate is set to 4)
	if(regs[REG_CONTROL_MODE]==REG_CONTROL_MODE_VELOCITY_TORQUE_OPEN_LOOP)
 8003794:	4b11      	ldr	r3, [pc, #68]	; (80037dc <main+0x13fc>)
 8003796:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800379a:	2b04      	cmp	r3, #4
 800379c:	d10a      	bne.n	80037b4 <main+0x13d4>
	{
		API_FOC_Set_Flux_Velocity(
 800379e:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80037a2:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80037a6:	ed97 0a39 	vldr	s0, [r7, #228]	; 0xe4
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fe f8f0 	bl	8001990 <API_FOC_Set_Flux_Velocity>
 80037b0:	f7fe be83 	b.w	80024ba <main+0xda>
		API_FOC_Torque_Update(
			present_time_us,
			setpoint_torque_current_mA,
			setpoint_flux_current_mA,
			phase_synchro_offset_rad,
			regs[REG_GOAL_CLOSED_LOOP] // open loop if 0, closed loop if 1
 80037b4:	4b09      	ldr	r3, [pc, #36]	; (80037dc <main+0x13fc>)
 80037b6:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
		API_FOC_Torque_Update(
 80037ba:	461a      	mov	r2, r3
 80037bc:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80037c0:	4611      	mov	r1, r2
 80037c2:	ed97 1a0c 	vldr	s2, [r7, #48]	; 0x30
 80037c6:	edd7 0a37 	vldr	s1, [r7, #220]	; 0xdc
 80037ca:	ed97 0a38 	vldr	s0, [r7, #224]	; 0xe0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fe f992 	bl	8001af8 <API_FOC_Torque_Update>
  {
 80037d4:	f7fe be71 	b.w	80024ba <main+0xda>
 80037d8:	40668000 	.word	0x40668000
 80037dc:	2000021c 	.word	0x2000021c
 80037e0:	54442d18 	.word	0x54442d18
 80037e4:	400921fb 	.word	0x400921fb

080037e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b0a4      	sub	sp, #144	; 0x90
 80037ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80037f2:	2238      	movs	r2, #56	; 0x38
 80037f4:	2100      	movs	r1, #0
 80037f6:	4618      	mov	r0, r3
 80037f8:	f00a fc20 	bl	800e03c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	60da      	str	r2, [r3, #12]
 800380a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800380c:	463b      	mov	r3, r7
 800380e:	2244      	movs	r2, #68	; 0x44
 8003810:	2100      	movs	r1, #0
 8003812:	4618      	mov	r0, r3
 8003814:	f00a fc12 	bl	800e03c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003818:	2000      	movs	r0, #0
 800381a:	f006 f903 	bl	8009a24 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800381e:	2301      	movs	r3, #1
 8003820:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003822:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003826:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003828:	2302      	movs	r3, #2
 800382a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800382c:	2303      	movs	r3, #3
 800382e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003830:	2301      	movs	r3, #1
 8003832:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003834:	2328      	movs	r3, #40	; 0x28
 8003836:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800383a:	2302      	movs	r3, #2
 800383c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003840:	2302      	movs	r3, #2
 8003842:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003846:	2302      	movs	r3, #2
 8003848:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800384c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003850:	4618      	mov	r0, r3
 8003852:	f006 f99b 	bl	8009b8c <HAL_RCC_OscConfig>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800385c:	f000 fcba 	bl	80041d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003860:	230f      	movs	r3, #15
 8003862:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003864:	2303      	movs	r3, #3
 8003866:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003868:	2300      	movs	r3, #0
 800386a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800386c:	2300      	movs	r3, #0
 800386e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003870:	2300      	movs	r3, #0
 8003872:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003874:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003878:	2104      	movs	r1, #4
 800387a:	4618      	mov	r0, r3
 800387c:	f006 fc9e 	bl	800a1bc <HAL_RCC_ClockConfig>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003886:	f000 fca5 	bl	80041d4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 800388a:	f249 0302 	movw	r3, #36866	; 0x9002
 800388e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003890:	2300      	movs	r3, #0
 8003892:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8003894:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003898:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800389a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800389e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038a0:	463b      	mov	r3, r7
 80038a2:	4618      	mov	r0, r3
 80038a4:	f006 fea6 	bl	800a5f4 <HAL_RCCEx_PeriphCLKConfig>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80038ae:	f000 fc91 	bl	80041d4 <Error_Handler>
  }
}
 80038b2:	bf00      	nop
 80038b4:	3790      	adds	r7, #144	; 0x90
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08c      	sub	sp, #48	; 0x30
 80038c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80038c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	605a      	str	r2, [r3, #4]
 80038cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80038ce:	1d3b      	adds	r3, r7, #4
 80038d0:	2220      	movs	r2, #32
 80038d2:	2100      	movs	r1, #0
 80038d4:	4618      	mov	r0, r3
 80038d6:	f00a fbb1 	bl	800e03c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80038da:	4b4f      	ldr	r3, [pc, #316]	; (8003a18 <MX_ADC1_Init+0x15c>)
 80038dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80038e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80038e2:	4b4d      	ldr	r3, [pc, #308]	; (8003a18 <MX_ADC1_Init+0x15c>)
 80038e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80038e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80038ea:	4b4b      	ldr	r3, [pc, #300]	; (8003a18 <MX_ADC1_Init+0x15c>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80038f0:	4b49      	ldr	r3, [pc, #292]	; (8003a18 <MX_ADC1_Init+0x15c>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80038f6:	4b48      	ldr	r3, [pc, #288]	; (8003a18 <MX_ADC1_Init+0x15c>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80038fc:	4b46      	ldr	r3, [pc, #280]	; (8003a18 <MX_ADC1_Init+0x15c>)
 80038fe:	2201      	movs	r2, #1
 8003900:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003902:	4b45      	ldr	r3, [pc, #276]	; (8003a18 <MX_ADC1_Init+0x15c>)
 8003904:	2208      	movs	r2, #8
 8003906:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003908:	4b43      	ldr	r3, [pc, #268]	; (8003a18 <MX_ADC1_Init+0x15c>)
 800390a:	2200      	movs	r2, #0
 800390c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800390e:	4b42      	ldr	r3, [pc, #264]	; (8003a18 <MX_ADC1_Init+0x15c>)
 8003910:	2200      	movs	r2, #0
 8003912:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 5;
 8003914:	4b40      	ldr	r3, [pc, #256]	; (8003a18 <MX_ADC1_Init+0x15c>)
 8003916:	2205      	movs	r2, #5
 8003918:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800391a:	4b3f      	ldr	r3, [pc, #252]	; (8003a18 <MX_ADC1_Init+0x15c>)
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8003922:	4b3d      	ldr	r3, [pc, #244]	; (8003a18 <MX_ADC1_Init+0x15c>)
 8003924:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8003928:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800392a:	4b3b      	ldr	r3, [pc, #236]	; (8003a18 <MX_ADC1_Init+0x15c>)
 800392c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003930:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003932:	4b39      	ldr	r3, [pc, #228]	; (8003a18 <MX_ADC1_Init+0x15c>)
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800393a:	4b37      	ldr	r3, [pc, #220]	; (8003a18 <MX_ADC1_Init+0x15c>)
 800393c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003940:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003942:	4b35      	ldr	r3, [pc, #212]	; (8003a18 <MX_ADC1_Init+0x15c>)
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800394a:	4833      	ldr	r0, [pc, #204]	; (8003a18 <MX_ADC1_Init+0x15c>)
 800394c:	f002 fe80 	bl	8006650 <HAL_ADC_Init>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8003956:	f000 fc3d 	bl	80041d4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800395a:	2300      	movs	r3, #0
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800395e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003962:	4619      	mov	r1, r3
 8003964:	482c      	ldr	r0, [pc, #176]	; (8003a18 <MX_ADC1_Init+0x15c>)
 8003966:	f004 f81d 	bl	80079a4 <HAL_ADCEx_MultiModeConfigChannel>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8003970:	f000 fc30 	bl	80041d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 8003974:	4b29      	ldr	r3, [pc, #164]	; (8003a1c <MX_ADC1_Init+0x160>)
 8003976:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003978:	2306      	movs	r3, #6
 800397a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003980:	237f      	movs	r3, #127	; 0x7f
 8003982:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003984:	2304      	movs	r3, #4
 8003986:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003988:	2300      	movs	r3, #0
 800398a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800398c:	1d3b      	adds	r3, r7, #4
 800398e:	4619      	mov	r1, r3
 8003990:	4821      	ldr	r0, [pc, #132]	; (8003a18 <MX_ADC1_Init+0x15c>)
 8003992:	f003 fad1 	bl	8006f38 <HAL_ADC_ConfigChannel>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800399c:	f000 fc1a 	bl	80041d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80039a0:	230c      	movs	r3, #12
 80039a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039a4:	1d3b      	adds	r3, r7, #4
 80039a6:	4619      	mov	r1, r3
 80039a8:	481b      	ldr	r0, [pc, #108]	; (8003a18 <MX_ADC1_Init+0x15c>)
 80039aa:	f003 fac5 	bl	8006f38 <HAL_ADC_ConfigChannel>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80039b4:	f000 fc0e 	bl	80041d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80039b8:	4b19      	ldr	r3, [pc, #100]	; (8003a20 <MX_ADC1_Init+0x164>)
 80039ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80039bc:	2312      	movs	r3, #18
 80039be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039c0:	1d3b      	adds	r3, r7, #4
 80039c2:	4619      	mov	r1, r3
 80039c4:	4814      	ldr	r0, [pc, #80]	; (8003a18 <MX_ADC1_Init+0x15c>)
 80039c6:	f003 fab7 	bl	8006f38 <HAL_ADC_ConfigChannel>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80039d0:	f000 fc00 	bl	80041d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80039d4:	4b13      	ldr	r3, [pc, #76]	; (8003a24 <MX_ADC1_Init+0x168>)
 80039d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80039d8:	2318      	movs	r3, #24
 80039da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039dc:	1d3b      	adds	r3, r7, #4
 80039de:	4619      	mov	r1, r3
 80039e0:	480d      	ldr	r0, [pc, #52]	; (8003a18 <MX_ADC1_Init+0x15c>)
 80039e2:	f003 faa9 	bl	8006f38 <HAL_ADC_ConfigChannel>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80039ec:	f000 fbf2 	bl	80041d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80039f0:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <MX_ADC1_Init+0x16c>)
 80039f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80039f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039fa:	1d3b      	adds	r3, r7, #4
 80039fc:	4619      	mov	r1, r3
 80039fe:	4806      	ldr	r0, [pc, #24]	; (8003a18 <MX_ADC1_Init+0x15c>)
 8003a00:	f003 fa9a 	bl	8006f38 <HAL_ADC_ConfigChannel>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8003a0a:	f000 fbe3 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003a0e:	bf00      	nop
 8003a10:	3730      	adds	r7, #48	; 0x30
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	2000049c 	.word	0x2000049c
 8003a1c:	b6902000 	.word	0xb6902000
 8003a20:	2e300800 	.word	0x2e300800
 8003a24:	04300002 	.word	0x04300002
 8003a28:	14f00020 	.word	0x14f00020

08003a2c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003a32:	463b      	mov	r3, r7
 8003a34:	2220      	movs	r2, #32
 8003a36:	2100      	movs	r1, #0
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f00a faff 	bl	800e03c <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8003a3e:	4b39      	ldr	r3, [pc, #228]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a40:	4a39      	ldr	r2, [pc, #228]	; (8003b28 <MX_ADC2_Init+0xfc>)
 8003a42:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003a44:	4b37      	ldr	r3, [pc, #220]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a46:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003a4a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003a4c:	4b35      	ldr	r3, [pc, #212]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003a52:	4b34      	ldr	r3, [pc, #208]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8003a58:	4b32      	ldr	r3, [pc, #200]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003a5e:	4b31      	ldr	r3, [pc, #196]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003a64:	4b2f      	ldr	r3, [pc, #188]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a66:	2208      	movs	r2, #8
 8003a68:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003a6a:	4b2e      	ldr	r3, [pc, #184]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003a70:	4b2c      	ldr	r3, [pc, #176]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 3;
 8003a76:	4b2b      	ldr	r3, [pc, #172]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a78:	2203      	movs	r2, #3
 8003a7a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003a7c:	4b29      	ldr	r3, [pc, #164]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8003a84:	4b27      	ldr	r3, [pc, #156]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a86:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8003a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003a8c:	4b25      	ldr	r3, [pc, #148]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a92:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003a94:	4b23      	ldr	r3, [pc, #140]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003a9c:	4b21      	ldr	r3, [pc, #132]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003a9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003aa2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8003aa4:	4b1f      	ldr	r3, [pc, #124]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003aac:	481d      	ldr	r0, [pc, #116]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003aae:	f002 fdcf 	bl	8006650 <HAL_ADC_Init>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003ab8:	f000 fb8c 	bl	80041d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 8003abc:	4b1b      	ldr	r3, [pc, #108]	; (8003b2c <MX_ADC2_Init+0x100>)
 8003abe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003ac0:	2306      	movs	r3, #6
 8003ac2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003ac8:	237f      	movs	r3, #127	; 0x7f
 8003aca:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003acc:	2304      	movs	r3, #4
 8003ace:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ad4:	463b      	mov	r3, r7
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4812      	ldr	r0, [pc, #72]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003ada:	f003 fa2d 	bl	8006f38 <HAL_ADC_ConfigChannel>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8003ae4:	f000 fb76 	bl	80041d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003ae8:	230c      	movs	r3, #12
 8003aea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003aec:	463b      	mov	r3, r7
 8003aee:	4619      	mov	r1, r3
 8003af0:	480c      	ldr	r0, [pc, #48]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003af2:	f003 fa21 	bl	8006f38 <HAL_ADC_ConfigChannel>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8003afc:	f000 fb6a 	bl	80041d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 8003b00:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <MX_ADC2_Init+0x104>)
 8003b02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003b04:	2312      	movs	r3, #18
 8003b06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003b08:	463b      	mov	r3, r7
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4805      	ldr	r0, [pc, #20]	; (8003b24 <MX_ADC2_Init+0xf8>)
 8003b0e:	f003 fa13 	bl	8006f38 <HAL_ADC_ConfigChannel>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <MX_ADC2_Init+0xf0>
  {
    Error_Handler();
 8003b18:	f000 fb5c 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003b1c:	bf00      	nop
 8003b1e:	3720      	adds	r7, #32
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	200003b8 	.word	0x200003b8
 8003b28:	50000100 	.word	0x50000100
 8003b2c:	c3290000 	.word	0xc3290000
 8003b30:	cb8c0000 	.word	0xcb8c0000

08003b34 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8003b38:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <MX_CORDIC_Init+0x20>)
 8003b3a:	4a07      	ldr	r2, [pc, #28]	; (8003b58 <MX_CORDIC_Init+0x24>)
 8003b3c:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8003b3e:	4805      	ldr	r0, [pc, #20]	; (8003b54 <MX_CORDIC_Init+0x20>)
 8003b40:	f003 ffd0 	bl	8007ae4 <HAL_CORDIC_Init>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8003b4a:	f000 fb43 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8003b4e:	bf00      	nop
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	20002e70 	.word	0x20002e70
 8003b58:	40020c00 	.word	0x40020c00

08003b5c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003b60:	4b1f      	ldr	r3, [pc, #124]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003b62:	4a20      	ldr	r2, [pc, #128]	; (8003be4 <MX_FDCAN1_Init+0x88>)
 8003b64:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 8003b66:	4b1e      	ldr	r3, [pc, #120]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003b6c:	4b1c      	ldr	r3, [pc, #112]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003b72:	4b1b      	ldr	r3, [pc, #108]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8003b78:	4b19      	ldr	r3, [pc, #100]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8003b7e:	4b18      	ldr	r3, [pc, #96]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003b84:	4b16      	ldr	r3, [pc, #88]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8003b8a:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8003b90:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003b92:	2210      	movs	r2, #16
 8003b94:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 63;
 8003b96:	4b12      	ldr	r3, [pc, #72]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003b98:	223f      	movs	r2, #63	; 0x3f
 8003b9a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8003b9c:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003b9e:	2210      	movs	r2, #16
 8003ba0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8003ba2:	4b0f      	ldr	r3, [pc, #60]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8003ba8:	4b0d      	ldr	r3, [pc, #52]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003baa:	2204      	movs	r2, #4
 8003bac:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8003bae:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003bb0:	2205      	movs	r2, #5
 8003bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8003bb4:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8003bba:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003bc0:	4b07      	ldr	r3, [pc, #28]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003bc6:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003bcc:	4804      	ldr	r0, [pc, #16]	; (8003be0 <MX_FDCAN1_Init+0x84>)
 8003bce:	f004 fd19 	bl	8008604 <HAL_FDCAN_Init>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8003bd8:	f000 fafc 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003bdc:	bf00      	nop
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	20002e98 	.word	0x20002e98
 8003be4:	40006400 	.word	0x40006400

08003be8 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8003bec:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <MX_OPAMP1_Init+0x54>)
 8003bee:	4a14      	ldr	r2, [pc, #80]	; (8003c40 <MX_OPAMP1_Init+0x58>)
 8003bf0:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8003bf2:	4b12      	ldr	r3, [pc, #72]	; (8003c3c <MX_OPAMP1_Init+0x54>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8003bf8:	4b10      	ldr	r3, [pc, #64]	; (8003c3c <MX_OPAMP1_Init+0x54>)
 8003bfa:	2240      	movs	r2, #64	; 0x40
 8003bfc:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8003bfe:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <MX_OPAMP1_Init+0x54>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8003c04:	4b0d      	ldr	r3, [pc, #52]	; (8003c3c <MX_OPAMP1_Init+0x54>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8003c0a:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <MX_OPAMP1_Init+0x54>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8003c10:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <MX_OPAMP1_Init+0x54>)
 8003c12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c16:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8003c18:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <MX_OPAMP1_Init+0x54>)
 8003c1a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8003c1e:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8003c20:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <MX_OPAMP1_Init+0x54>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8003c26:	4805      	ldr	r0, [pc, #20]	; (8003c3c <MX_OPAMP1_Init+0x54>)
 8003c28:	f005 fdfa 	bl	8009820 <HAL_OPAMP_Init>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8003c32:	f000 facf 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8003c36:	bf00      	nop
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000460 	.word	0x20000460
 8003c40:	40010300 	.word	0x40010300

08003c44 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8003c48:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <MX_OPAMP2_Init+0x54>)
 8003c4a:	4a14      	ldr	r2, [pc, #80]	; (8003c9c <MX_OPAMP2_Init+0x58>)
 8003c4c:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8003c4e:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <MX_OPAMP2_Init+0x54>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8003c54:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <MX_OPAMP2_Init+0x54>)
 8003c56:	2240      	movs	r2, #64	; 0x40
 8003c58:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8003c5a:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <MX_OPAMP2_Init+0x54>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 8003c60:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <MX_OPAMP2_Init+0x54>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8003c66:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <MX_OPAMP2_Init+0x54>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8003c6c:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <MX_OPAMP2_Init+0x54>)
 8003c6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c72:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8003c74:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <MX_OPAMP2_Init+0x54>)
 8003c76:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8003c7c:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <MX_OPAMP2_Init+0x54>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8003c82:	4805      	ldr	r0, [pc, #20]	; (8003c98 <MX_OPAMP2_Init+0x54>)
 8003c84:	f005 fdcc 	bl	8009820 <HAL_OPAMP_Init>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 8003c8e:	f000 faa1 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8003c92:	bf00      	nop
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000330 	.word	0x20000330
 8003c9c:	40010304 	.word	0x40010304

08003ca0 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8003ca4:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <MX_OPAMP3_Init+0x54>)
 8003ca6:	4a14      	ldr	r2, [pc, #80]	; (8003cf8 <MX_OPAMP3_Init+0x58>)
 8003ca8:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8003caa:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <MX_OPAMP3_Init+0x54>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8003cb0:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <MX_OPAMP3_Init+0x54>)
 8003cb2:	2240      	movs	r2, #64	; 0x40
 8003cb4:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8003cb6:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <MX_OPAMP3_Init+0x54>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8003cbc:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <MX_OPAMP3_Init+0x54>)
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <MX_OPAMP3_Init+0x54>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8003cc8:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <MX_OPAMP3_Init+0x54>)
 8003cca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8003cd0:	4b08      	ldr	r3, [pc, #32]	; (8003cf4 <MX_OPAMP3_Init+0x54>)
 8003cd2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8003cd6:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8003cd8:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <MX_OPAMP3_Init+0x54>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8003cde:	4805      	ldr	r0, [pc, #20]	; (8003cf4 <MX_OPAMP3_Init+0x54>)
 8003ce0:	f005 fd9e 	bl	8009820 <HAL_OPAMP_Init>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8003cea:	f000 fa73 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8003cee:	bf00      	nop
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000424 	.word	0x20000424
 8003cf8:	40010308 	.word	0x40010308

08003cfc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b09c      	sub	sp, #112	; 0x70
 8003d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d02:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	605a      	str	r2, [r3, #4]
 8003d0c:	609a      	str	r2, [r3, #8]
 8003d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d10:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	605a      	str	r2, [r3, #4]
 8003d1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	605a      	str	r2, [r3, #4]
 8003d26:	609a      	str	r2, [r3, #8]
 8003d28:	60da      	str	r2, [r3, #12]
 8003d2a:	611a      	str	r2, [r3, #16]
 8003d2c:	615a      	str	r2, [r3, #20]
 8003d2e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003d30:	1d3b      	adds	r3, r7, #4
 8003d32:	2234      	movs	r2, #52	; 0x34
 8003d34:	2100      	movs	r1, #0
 8003d36:	4618      	mov	r0, r3
 8003d38:	f00a f980 	bl	800e03c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003d3c:	4b53      	ldr	r3, [pc, #332]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003d3e:	4a54      	ldr	r2, [pc, #336]	; (8003e90 <MX_TIM1_Init+0x194>)
 8003d40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003d42:	4b52      	ldr	r3, [pc, #328]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003d48:	4b50      	ldr	r3, [pc, #320]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8003d4e:	4b4f      	ldr	r3, [pc, #316]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003d50:	f241 3287 	movw	r2, #4999	; 0x1387
 8003d54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d56:	4b4d      	ldr	r3, [pc, #308]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003d5c:	4b4b      	ldr	r3, [pc, #300]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d62:	4b4a      	ldr	r3, [pc, #296]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003d68:	4848      	ldr	r0, [pc, #288]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003d6a:	f006 fe33 	bl	800a9d4 <HAL_TIM_Base_Init>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003d74:	f000 fa2e 	bl	80041d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d7c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003d7e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003d82:	4619      	mov	r1, r3
 8003d84:	4841      	ldr	r0, [pc, #260]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003d86:	f007 fdef 	bl	800b968 <HAL_TIM_ConfigClockSource>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003d90:	f000 fa20 	bl	80041d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003d94:	483d      	ldr	r0, [pc, #244]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003d96:	f006 fed7 	bl	800ab48 <HAL_TIM_PWM_Init>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003da0:	f000 fa18 	bl	80041d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003da4:	2320      	movs	r3, #32
 8003da6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003da8:	2300      	movs	r3, #0
 8003daa:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dac:	2300      	movs	r3, #0
 8003dae:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003db0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003db4:	4619      	mov	r1, r3
 8003db6:	4835      	ldr	r0, [pc, #212]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003db8:	f008 fe10 	bl	800c9dc <HAL_TIMEx_MasterConfigSynchronization>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003dc2:	f000 fa07 	bl	80041d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003dc6:	2360      	movs	r3, #96	; 0x60
 8003dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003dde:	2300      	movs	r3, #0
 8003de0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003de2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003de6:	2200      	movs	r2, #0
 8003de8:	4619      	mov	r1, r3
 8003dea:	4828      	ldr	r0, [pc, #160]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003dec:	f007 fcac 	bl	800b748 <HAL_TIM_PWM_ConfigChannel>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8003df6:	f000 f9ed 	bl	80041d4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003dfe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e02:	2204      	movs	r2, #4
 8003e04:	4619      	mov	r1, r3
 8003e06:	4821      	ldr	r0, [pc, #132]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003e08:	f007 fc9e 	bl	800b748 <HAL_TIM_PWM_ConfigChannel>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 8003e12:	f000 f9df 	bl	80041d4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e1e:	2208      	movs	r2, #8
 8003e20:	4619      	mov	r1, r3
 8003e22:	481a      	ldr	r0, [pc, #104]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003e24:	f007 fc90 	bl	800b748 <HAL_TIM_PWM_ConfigChannel>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8003e2e:	f000 f9d1 	bl	80041d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003e32:	2300      	movs	r3, #0
 8003e34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003e36:	2300      	movs	r3, #0
 8003e38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 128;
 8003e3e:	2380      	movs	r3, #128	; 0x80
 8003e40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003e46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003e50:	2300      	movs	r3, #0
 8003e52:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003e54:	2300      	movs	r3, #0
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003e58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003e62:	2300      	movs	r3, #0
 8003e64:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003e66:	2300      	movs	r3, #0
 8003e68:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003e6a:	1d3b      	adds	r3, r7, #4
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4807      	ldr	r0, [pc, #28]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003e70:	f008 fe36 	bl	800cae0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <MX_TIM1_Init+0x182>
  {
    Error_Handler();
 8003e7a:	f000 f9ab 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003e7e:	4803      	ldr	r0, [pc, #12]	; (8003e8c <MX_TIM1_Init+0x190>)
 8003e80:	f001 ff3a 	bl	8005cf8 <HAL_TIM_MspPostInit>

}
 8003e84:	bf00      	nop
 8003e86:	3770      	adds	r7, #112	; 0x70
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	20002f48 	.word	0x20002f48
 8003e90:	40012c00 	.word	0x40012c00

08003e94 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08c      	sub	sp, #48	; 0x30
 8003e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003e9a:	f107 031c 	add.w	r3, r7, #28
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	605a      	str	r2, [r3, #4]
 8003ea4:	609a      	str	r2, [r3, #8]
 8003ea6:	60da      	str	r2, [r3, #12]
 8003ea8:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003eaa:	f107 030c 	add.w	r3, r7, #12
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	605a      	str	r2, [r3, #4]
 8003eb4:	609a      	str	r2, [r3, #8]
 8003eb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003eb8:	463b      	mov	r3, r7
 8003eba:	2200      	movs	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	605a      	str	r2, [r3, #4]
 8003ec0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003ec2:	4b33      	ldr	r3, [pc, #204]	; (8003f90 <MX_TIM4_Init+0xfc>)
 8003ec4:	4a33      	ldr	r2, [pc, #204]	; (8003f94 <MX_TIM4_Init+0x100>)
 8003ec6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8003ec8:	4b31      	ldr	r3, [pc, #196]	; (8003f90 <MX_TIM4_Init+0xfc>)
 8003eca:	2202      	movs	r2, #2
 8003ecc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ece:	4b30      	ldr	r3, [pc, #192]	; (8003f90 <MX_TIM4_Init+0xfc>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003ed4:	4b2e      	ldr	r3, [pc, #184]	; (8003f90 <MX_TIM4_Init+0xfc>)
 8003ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eda:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003edc:	4b2c      	ldr	r3, [pc, #176]	; (8003f90 <MX_TIM4_Init+0xfc>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ee2:	4b2b      	ldr	r3, [pc, #172]	; (8003f90 <MX_TIM4_Init+0xfc>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8003ee8:	4829      	ldr	r0, [pc, #164]	; (8003f90 <MX_TIM4_Init+0xfc>)
 8003eea:	f006 ff8f 	bl	800ae0c <HAL_TIM_IC_Init>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8003ef4:	f000 f96e 	bl	80041d4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003ef8:	2304      	movs	r3, #4
 8003efa:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003efc:	2350      	movs	r3, #80	; 0x50
 8003efe:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003f00:	2300      	movs	r3, #0
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003f04:	2300      	movs	r3, #0
 8003f06:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8003f0c:	f107 031c 	add.w	r3, r7, #28
 8003f10:	4619      	mov	r1, r3
 8003f12:	481f      	ldr	r0, [pc, #124]	; (8003f90 <MX_TIM4_Init+0xfc>)
 8003f14:	f007 fe1e 	bl	800bb54 <HAL_TIM_SlaveConfigSynchro>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8003f1e:	f000 f959 	bl	80041d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003f26:	2301      	movs	r3, #1
 8003f28:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003f32:	f107 030c 	add.w	r3, r7, #12
 8003f36:	2200      	movs	r2, #0
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4815      	ldr	r0, [pc, #84]	; (8003f90 <MX_TIM4_Init+0xfc>)
 8003f3c:	f007 fb6f 	bl	800b61e <HAL_TIM_IC_ConfigChannel>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8003f46:	f000 f945 	bl	80041d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003f4e:	2302      	movs	r3, #2
 8003f50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003f52:	f107 030c 	add.w	r3, r7, #12
 8003f56:	2204      	movs	r2, #4
 8003f58:	4619      	mov	r1, r3
 8003f5a:	480d      	ldr	r0, [pc, #52]	; (8003f90 <MX_TIM4_Init+0xfc>)
 8003f5c:	f007 fb5f 	bl	800b61e <HAL_TIM_IC_ConfigChannel>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8003f66:	f000 f935 	bl	80041d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003f72:	463b      	mov	r3, r7
 8003f74:	4619      	mov	r1, r3
 8003f76:	4806      	ldr	r0, [pc, #24]	; (8003f90 <MX_TIM4_Init+0xfc>)
 8003f78:	f008 fd30 	bl	800c9dc <HAL_TIMEx_MasterConfigSynchronization>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 8003f82:	f000 f927 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003f86:	bf00      	nop
 8003f88:	3730      	adds	r7, #48	; 0x30
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	2000036c 	.word	0x2000036c
 8003f94:	40000800 	.word	0x40000800

08003f98 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f9e:	1d3b      	adds	r3, r7, #4
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	605a      	str	r2, [r3, #4]
 8003fa6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003fa8:	4b14      	ldr	r3, [pc, #80]	; (8003ffc <MX_TIM6_Init+0x64>)
 8003faa:	4a15      	ldr	r2, [pc, #84]	; (8004000 <MX_TIM6_Init+0x68>)
 8003fac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 159;
 8003fae:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <MX_TIM6_Init+0x64>)
 8003fb0:	229f      	movs	r2, #159	; 0x9f
 8003fb2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fb4:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <MX_TIM6_Init+0x64>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003fba:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <MX_TIM6_Init+0x64>)
 8003fbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fc0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fc2:	4b0e      	ldr	r3, [pc, #56]	; (8003ffc <MX_TIM6_Init+0x64>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003fc8:	480c      	ldr	r0, [pc, #48]	; (8003ffc <MX_TIM6_Init+0x64>)
 8003fca:	f006 fd03 	bl	800a9d4 <HAL_TIM_Base_Init>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003fd4:	f000 f8fe 	bl	80041d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003fe0:	1d3b      	adds	r3, r7, #4
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4805      	ldr	r0, [pc, #20]	; (8003ffc <MX_TIM6_Init+0x64>)
 8003fe6:	f008 fcf9 	bl	800c9dc <HAL_TIMEx_MasterConfigSynchronization>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003ff0:	f000 f8f0 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003ff4:	bf00      	nop
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	20002efc 	.word	0x20002efc
 8004000:	40001000 	.word	0x40001000

08004004 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004008:	4b22      	ldr	r3, [pc, #136]	; (8004094 <MX_USART2_UART_Init+0x90>)
 800400a:	4a23      	ldr	r2, [pc, #140]	; (8004098 <MX_USART2_UART_Init+0x94>)
 800400c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 800400e:	4b21      	ldr	r3, [pc, #132]	; (8004094 <MX_USART2_UART_Init+0x90>)
 8004010:	4a22      	ldr	r2, [pc, #136]	; (800409c <MX_USART2_UART_Init+0x98>)
 8004012:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004014:	4b1f      	ldr	r3, [pc, #124]	; (8004094 <MX_USART2_UART_Init+0x90>)
 8004016:	2200      	movs	r2, #0
 8004018:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800401a:	4b1e      	ldr	r3, [pc, #120]	; (8004094 <MX_USART2_UART_Init+0x90>)
 800401c:	2200      	movs	r2, #0
 800401e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004020:	4b1c      	ldr	r3, [pc, #112]	; (8004094 <MX_USART2_UART_Init+0x90>)
 8004022:	2200      	movs	r2, #0
 8004024:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004026:	4b1b      	ldr	r3, [pc, #108]	; (8004094 <MX_USART2_UART_Init+0x90>)
 8004028:	220c      	movs	r2, #12
 800402a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800402c:	4b19      	ldr	r3, [pc, #100]	; (8004094 <MX_USART2_UART_Init+0x90>)
 800402e:	2200      	movs	r2, #0
 8004030:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004032:	4b18      	ldr	r3, [pc, #96]	; (8004094 <MX_USART2_UART_Init+0x90>)
 8004034:	2200      	movs	r2, #0
 8004036:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004038:	4b16      	ldr	r3, [pc, #88]	; (8004094 <MX_USART2_UART_Init+0x90>)
 800403a:	2200      	movs	r2, #0
 800403c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800403e:	4b15      	ldr	r3, [pc, #84]	; (8004094 <MX_USART2_UART_Init+0x90>)
 8004040:	2200      	movs	r2, #0
 8004042:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004044:	4b13      	ldr	r3, [pc, #76]	; (8004094 <MX_USART2_UART_Init+0x90>)
 8004046:	2200      	movs	r2, #0
 8004048:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800404a:	4812      	ldr	r0, [pc, #72]	; (8004094 <MX_USART2_UART_Init+0x90>)
 800404c:	f008 fe53 	bl	800ccf6 <HAL_UART_Init>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8004056:	f000 f8bd 	bl	80041d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800405a:	2100      	movs	r1, #0
 800405c:	480d      	ldr	r0, [pc, #52]	; (8004094 <MX_USART2_UART_Init+0x90>)
 800405e:	f009 fed0 	bl	800de02 <HAL_UARTEx_SetTxFifoThreshold>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8004068:	f000 f8b4 	bl	80041d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800406c:	2100      	movs	r1, #0
 800406e:	4809      	ldr	r0, [pc, #36]	; (8004094 <MX_USART2_UART_Init+0x90>)
 8004070:	f009 ff05 	bl	800de7e <HAL_UARTEx_SetRxFifoThreshold>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 800407a:	f000 f8ab 	bl	80041d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800407e:	4805      	ldr	r0, [pc, #20]	; (8004094 <MX_USART2_UART_Init+0x90>)
 8004080:	f009 fe86 	bl	800dd90 <HAL_UARTEx_DisableFifoMode>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 800408a:	f000 f8a3 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800408e:	bf00      	nop
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	20002f94 	.word	0x20002f94
 8004098:	40004400 	.word	0x40004400
 800409c:	000f4240 	.word	0x000f4240

080040a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80040a6:	4b1e      	ldr	r3, [pc, #120]	; (8004120 <MX_DMA_Init+0x80>)
 80040a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040aa:	4a1d      	ldr	r2, [pc, #116]	; (8004120 <MX_DMA_Init+0x80>)
 80040ac:	f043 0304 	orr.w	r3, r3, #4
 80040b0:	6493      	str	r3, [r2, #72]	; 0x48
 80040b2:	4b1b      	ldr	r3, [pc, #108]	; (8004120 <MX_DMA_Init+0x80>)
 80040b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	607b      	str	r3, [r7, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80040be:	4b18      	ldr	r3, [pc, #96]	; (8004120 <MX_DMA_Init+0x80>)
 80040c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c2:	4a17      	ldr	r2, [pc, #92]	; (8004120 <MX_DMA_Init+0x80>)
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	6493      	str	r3, [r2, #72]	; 0x48
 80040ca:	4b15      	ldr	r3, [pc, #84]	; (8004120 <MX_DMA_Init+0x80>)
 80040cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	603b      	str	r3, [r7, #0]
 80040d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80040d6:	2200      	movs	r2, #0
 80040d8:	2100      	movs	r1, #0
 80040da:	200b      	movs	r0, #11
 80040dc:	f003 ff7f 	bl	8007fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80040e0:	200b      	movs	r0, #11
 80040e2:	f003 ff96 	bl	8008012 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80040e6:	2200      	movs	r2, #0
 80040e8:	2100      	movs	r1, #0
 80040ea:	200c      	movs	r0, #12
 80040ec:	f003 ff77 	bl	8007fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80040f0:	200c      	movs	r0, #12
 80040f2:	f003 ff8e 	bl	8008012 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80040f6:	2200      	movs	r2, #0
 80040f8:	2100      	movs	r1, #0
 80040fa:	200d      	movs	r0, #13
 80040fc:	f003 ff6f 	bl	8007fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004100:	200d      	movs	r0, #13
 8004102:	f003 ff86 	bl	8008012 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004106:	2200      	movs	r2, #0
 8004108:	2100      	movs	r1, #0
 800410a:	200e      	movs	r0, #14
 800410c:	f003 ff67 	bl	8007fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004110:	200e      	movs	r0, #14
 8004112:	f003 ff7e 	bl	8008012 <HAL_NVIC_EnableIRQ>

}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40021000 	.word	0x40021000

08004124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b08a      	sub	sp, #40	; 0x28
 8004128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800412a:	f107 0314 	add.w	r3, r7, #20
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	605a      	str	r2, [r3, #4]
 8004134:	609a      	str	r2, [r3, #8]
 8004136:	60da      	str	r2, [r3, #12]
 8004138:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800413a:	4b24      	ldr	r3, [pc, #144]	; (80041cc <MX_GPIO_Init+0xa8>)
 800413c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413e:	4a23      	ldr	r2, [pc, #140]	; (80041cc <MX_GPIO_Init+0xa8>)
 8004140:	f043 0304 	orr.w	r3, r3, #4
 8004144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004146:	4b21      	ldr	r3, [pc, #132]	; (80041cc <MX_GPIO_Init+0xa8>)
 8004148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	613b      	str	r3, [r7, #16]
 8004150:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004152:	4b1e      	ldr	r3, [pc, #120]	; (80041cc <MX_GPIO_Init+0xa8>)
 8004154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004156:	4a1d      	ldr	r2, [pc, #116]	; (80041cc <MX_GPIO_Init+0xa8>)
 8004158:	f043 0320 	orr.w	r3, r3, #32
 800415c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800415e:	4b1b      	ldr	r3, [pc, #108]	; (80041cc <MX_GPIO_Init+0xa8>)
 8004160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004162:	f003 0320 	and.w	r3, r3, #32
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800416a:	4b18      	ldr	r3, [pc, #96]	; (80041cc <MX_GPIO_Init+0xa8>)
 800416c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416e:	4a17      	ldr	r2, [pc, #92]	; (80041cc <MX_GPIO_Init+0xa8>)
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004176:	4b15      	ldr	r3, [pc, #84]	; (80041cc <MX_GPIO_Init+0xa8>)
 8004178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	60bb      	str	r3, [r7, #8]
 8004180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004182:	4b12      	ldr	r3, [pc, #72]	; (80041cc <MX_GPIO_Init+0xa8>)
 8004184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004186:	4a11      	ldr	r2, [pc, #68]	; (80041cc <MX_GPIO_Init+0xa8>)
 8004188:	f043 0302 	orr.w	r3, r3, #2
 800418c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800418e:	4b0f      	ldr	r3, [pc, #60]	; (80041cc <MX_GPIO_Init+0xa8>)
 8004190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	607b      	str	r3, [r7, #4]
 8004198:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CAN_TERM_Pin|STATUS_Pin|CAN_SHDN_Pin, GPIO_PIN_RESET);
 800419a:	2200      	movs	r2, #0
 800419c:	f644 0140 	movw	r1, #18496	; 0x4840
 80041a0:	480b      	ldr	r0, [pc, #44]	; (80041d0 <MX_GPIO_Init+0xac>)
 80041a2:	f005 fb25 	bl	80097f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAN_TERM_Pin STATUS_Pin CAN_SHDN_Pin */
  GPIO_InitStruct.Pin = CAN_TERM_Pin|STATUS_Pin|CAN_SHDN_Pin;
 80041a6:	f644 0340 	movw	r3, #18496	; 0x4840
 80041aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041ac:	2301      	movs	r3, #1
 80041ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b0:	2300      	movs	r3, #0
 80041b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b4:	2300      	movs	r3, #0
 80041b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041b8:	f107 0314 	add.w	r3, r7, #20
 80041bc:	4619      	mov	r1, r3
 80041be:	4804      	ldr	r0, [pc, #16]	; (80041d0 <MX_GPIO_Init+0xac>)
 80041c0:	f005 f994 	bl	80094ec <HAL_GPIO_Init>

}
 80041c4:	bf00      	nop
 80041c6:	3728      	adds	r7, #40	; 0x28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40021000 	.word	0x40021000
 80041d0:	48000800 	.word	0x48000800

080041d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80041d8:	b672      	cpsid	i
}
 80041da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80041dc:	e7fe      	b.n	80041dc <Error_Handler+0x8>

080041de <fconstrain>:
    else
        return x;
}

float fconstrain(float x, float min, float max)
{
 80041de:	b480      	push	{r7}
 80041e0:	b085      	sub	sp, #20
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	ed87 0a03 	vstr	s0, [r7, #12]
 80041e8:	edc7 0a02 	vstr	s1, [r7, #8]
 80041ec:	ed87 1a01 	vstr	s2, [r7, #4]
    if(x<min)
 80041f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80041f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80041f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004200:	d501      	bpl.n	8004206 <fconstrain+0x28>
        return min;
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	e00b      	b.n	800421e <fconstrain+0x40>
    else if(x>max)
 8004206:	ed97 7a03 	vldr	s14, [r7, #12]
 800420a:	edd7 7a01 	vldr	s15, [r7, #4]
 800420e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004216:	dd01      	ble.n	800421c <fconstrain+0x3e>
        return max;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	e000      	b.n	800421e <fconstrain+0x40>
    else
        return x;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	ee07 3a90 	vmov	s15, r3
}
 8004222:	eeb0 0a67 	vmov.f32	s0, s15
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <pid_reset>:
#include <string.h>
#include <stdbool.h>
#include "math_tool.h"

void pid_reset( pid_context_t * ctx )
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
	ctx->err_last_one = 0.0f;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
	ctx->err_integral = 0.0f;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	605a      	str	r2, [r3, #4]
	ctx->derivative_filtered = 0.0f;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	609a      	str	r2, [r3, #8]
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <pid_process_antiwindup_clamp_with_ff>:
		float kd,
		float output_limit,
		float alpha_derivative,
		float feed_forward
)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08e      	sub	sp, #56	; 0x38
 8004260:	af00      	add	r7, sp, #0
 8004262:	61f8      	str	r0, [r7, #28]
 8004264:	ed87 0a06 	vstr	s0, [r7, #24]
 8004268:	edc7 0a05 	vstr	s1, [r7, #20]
 800426c:	ed87 1a04 	vstr	s2, [r7, #16]
 8004270:	edc7 1a03 	vstr	s3, [r7, #12]
 8004274:	ed87 2a02 	vstr	s4, [r7, #8]
 8004278:	edc7 2a01 	vstr	s5, [r7, #4]
 800427c:	ed87 3a00 	vstr	s6, [r7]
	// filter derivative
	ctx->derivative_filtered = alpha_derivative*(error-ctx->err_last_one)+(1.0f-alpha_derivative)*ctx->derivative_filtered;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	edd3 7a00 	vldr	s15, [r3]
 8004286:	ed97 7a06 	vldr	s14, [r7, #24]
 800428a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800428e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004292:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800429a:	edd7 7a01 	vldr	s15, [r7, #4]
 800429e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80042a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	edc3 7a02 	vstr	s15, [r3, #8]
	// update derivative state
	ctx->err_last_one = error;
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	601a      	str	r2, [r3, #0]
	// PID
	float const p_term = kp*error;
 80042bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80042c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80042c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042c8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float const i_term = ctx->err_integral;
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	633b      	str	r3, [r7, #48]	; 0x30
	float const d_term = kd*ctx->derivative_filtered;
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80042d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80042dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	// compute output before saturation
	float const v = p_term + i_term + d_term + feed_forward;
 80042e4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80042e8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80042ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042f0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80042f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042f8:	ed97 7a00 	vldr	s14, [r7]
 80042fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004300:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	// saturation
	float const u = fconstrain(v,-output_limit,output_limit);
 8004304:	edd7 7a02 	vldr	s15, [r7, #8]
 8004308:	eef1 7a67 	vneg.f32	s15, s15
 800430c:	ed97 1a02 	vldr	s2, [r7, #8]
 8004310:	eef0 0a67 	vmov.f32	s1, s15
 8004314:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004318:	f7ff ff61 	bl	80041de <fconstrain>
 800431c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	// output saturating
	bool saturating = (u!=v);
 8004320:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004324:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004328:	eeb4 7a67 	vcmp.f32	s14, s15
 800432c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004330:	bf14      	ite	ne
 8004332:	2301      	movne	r3, #1
 8004334:	2300      	moveq	r3, #0
 8004336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	// error and output same sign
	bool sign = (error*v >= 0);
 800433a:	ed97 7a06 	vldr	s14, [r7, #24]
 800433e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004346:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800434a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800434e:	bfac      	ite	ge
 8004350:	2301      	movge	r3, #1
 8004352:	2300      	movlt	r3, #0
 8004354:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	// zero
	bool clamp = saturating && sign;
 8004358:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <pid_process_antiwindup_clamp_with_ff+0x110>
 8004360:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <pid_process_antiwindup_clamp_with_ff+0x110>
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <pid_process_antiwindup_clamp_with_ff+0x112>
 800436c:	2300      	movs	r3, #0
 800436e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8004372:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(!clamp)
 800437e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004382:	f083 0301 	eor.w	r3, r3, #1
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00d      	beq.n	80043a8 <pid_process_antiwindup_clamp_with_ff+0x14c>
		ctx->err_integral = ctx->err_integral + ki*error;
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004392:	edd7 6a04 	vldr	s13, [r7, #16]
 8004396:	edd7 7a06 	vldr	s15, [r7, #24]
 800439a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800439e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	edc3 7a01 	vstr	s15, [r3, #4]
	// output
	return u;
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	ee07 3a90 	vmov	s15, r3
}
 80043ae:	eeb0 0a67 	vmov.f32	s0, s15
 80043b2:	3738      	adds	r7, #56	; 0x38
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <API_AS5048A_Position_Sensor_Init>:
static float present_position_multi_rad = 0.0f;

#define ALPHA_VELOCITY 0.01f // 0.1f default

void API_AS5048A_Position_Sensor_Init(TIM_HandleTypeDef * htim)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
	position_sensor_htim = htim;
 80043c0:	4a0e      	ldr	r2, [pc, #56]	; (80043fc <API_AS5048A_Position_Sensor_Init+0x44>)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6013      	str	r3, [r2, #0]
	HAL_TIM_IC_Start_IT(position_sensor_htim,TIM_CHANNEL_1); // Trigger It only when period is over.
 80043c6:	4b0d      	ldr	r3, [pc, #52]	; (80043fc <API_AS5048A_Position_Sensor_Init+0x44>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2100      	movs	r1, #0
 80043cc:	4618      	mov	r0, r3
 80043ce:	f006 fe6b 	bl	800b0a8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(position_sensor_htim,TIM_CHANNEL_2); // CHANNEL 1 is PWM width and CHANNEL 2 is period
 80043d2:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <API_AS5048A_Position_Sensor_Init+0x44>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2104      	movs	r1, #4
 80043d8:	4618      	mov	r0, r3
 80043da:	f006 fd6f 	bl	800aebc <HAL_TIM_IC_Start>
	HAL_Delay(3);
 80043de:	2003      	movs	r0, #3
 80043e0:	f001 fed4 	bl	800618c <HAL_Delay>
	present_revolution = 0;
 80043e4:	4b06      	ldr	r3, [pc, #24]	; (8004400 <API_AS5048A_Position_Sensor_Init+0x48>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]
	present_velocity_rad = 0.0f;
 80043ea:	4b06      	ldr	r3, [pc, #24]	; (8004404 <API_AS5048A_Position_Sensor_Init+0x4c>)
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]
}
 80043f2:	bf00      	nop
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	200001c8 	.word	0x200001c8
 8004400:	200001f0 	.word	0x200001f0
 8004404:	200001ec 	.word	0x200001ec

08004408 <API_AS5048A_Position_Sensor_It>:

void API_AS5048A_Position_Sensor_It(TIM_HandleTypeDef *htim)
{
 8004408:	b5b0      	push	{r4, r5, r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
	if(htim==position_sensor_htim)
 8004410:	4ba3      	ldr	r3, [pc, #652]	; (80046a0 <API_AS5048A_Position_Sensor_It+0x298>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	429a      	cmp	r2, r3
 8004418:	f040 8131 	bne.w	800467e <API_AS5048A_Position_Sensor_It+0x276>
	{
		++calls;
 800441c:	4ba1      	ldr	r3, [pc, #644]	; (80046a4 <API_AS5048A_Position_Sensor_It+0x29c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	3301      	adds	r3, #1
 8004422:	4aa0      	ldr	r2, [pc, #640]	; (80046a4 <API_AS5048A_Position_Sensor_It+0x29c>)
 8004424:	6013      	str	r3, [r2, #0]
		// timestamp as soon as possible
		present_time_us = __HAL_TIM_GET_COUNTER(&htim6);
 8004426:	4ba0      	ldr	r3, [pc, #640]	; (80046a8 <API_AS5048A_Position_Sensor_It+0x2a0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	b29a      	uxth	r2, r3
 800442e:	4b9f      	ldr	r3, [pc, #636]	; (80046ac <API_AS5048A_Position_Sensor_It+0x2a4>)
 8004430:	801a      	strh	r2, [r3, #0]
		// header is 16-bit long (12-bit init field (value=111111111111b), 4 for error field (value=1111b when OK))
		// when position is 0°, length is 16 bits
		// when position is MAX = 2*PI*(1-1/4096)°, length is 16+4095 bits
		// compute PWM width / PWM period * 4119bits that gives the number of 1 bits
		// @150MHz, CHANNEL1 = period = 45500 with PSC=3
		float const init_error_data_bits = 4119.0f*(float)__HAL_TIM_GET_COMPARE(position_sensor_htim,TIM_CHANNEL_2)/(float)__HAL_TIM_GET_COMPARE(position_sensor_htim,TIM_CHANNEL_1);
 8004432:	4b9b      	ldr	r3, [pc, #620]	; (80046a0 <API_AS5048A_Position_Sensor_It+0x298>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004442:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 80046b0 <API_AS5048A_Position_Sensor_It+0x2a8>
 8004446:	ee67 6a87 	vmul.f32	s13, s15, s14
 800444a:	4b95      	ldr	r3, [pc, #596]	; (80046a0 <API_AS5048A_Position_Sensor_It+0x298>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800445a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800445e:	edc7 7a03 	vstr	s15, [r7, #12]
		// if data < 0 bits ==> must be an error
		if(init_error_data_bits<(16.0f-0.8f)) // add a 0.8 margin due to IC TIMER PRECISION and PWM precision
 8004462:	edd7 7a03 	vldr	s15, [r7, #12]
 8004466:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80046b4 <API_AS5048A_Position_Sensor_It+0x2ac>
 800446a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800446e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004472:	d511      	bpl.n	8004498 <API_AS5048A_Position_Sensor_It+0x90>
		{
			// set error
			position_sensor_error = 1;
 8004474:	4b90      	ldr	r3, [pc, #576]	; (80046b8 <API_AS5048A_Position_Sensor_It+0x2b0>)
 8004476:	2201      	movs	r2, #1
 8004478:	601a      	str	r2, [r3, #0]
			++position_sensor_error_counter;
 800447a:	4b90      	ldr	r3, [pc, #576]	; (80046bc <API_AS5048A_Position_Sensor_It+0x2b4>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3301      	adds	r3, #1
 8004480:	4a8e      	ldr	r2, [pc, #568]	; (80046bc <API_AS5048A_Position_Sensor_It+0x2b4>)
 8004482:	6013      	str	r3, [r2, #0]
			// Note : use the state when error (present time / position / velocity)
			// set encoder error
			regs[REG_HARDWARE_ERROR_STATUS] |= 1UL << HW_ERROR_BIT_POSITION_SENSOR_STATUS_ERROR;
 8004484:	4b8e      	ldr	r3, [pc, #568]	; (80046c0 <API_AS5048A_Position_Sensor_It+0x2b8>)
 8004486:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800448a:	f043 0302 	orr.w	r3, r3, #2
 800448e:	b2da      	uxtb	r2, r3
 8004490:	4b8b      	ldr	r3, [pc, #556]	; (80046c0 <API_AS5048A_Position_Sensor_It+0x2b8>)
 8004492:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			// save last position
			last_position_time_us = present_time_us;
			last_position_rad = present_position_rad;
		}
	}
}
 8004496:	e0f2      	b.n	800467e <API_AS5048A_Position_Sensor_It+0x276>
			regs[REG_HARDWARE_ERROR_STATUS] &= ~(1UL << HW_ERROR_BIT_POSITION_SENSOR_STATUS_ERROR);
 8004498:	4b89      	ldr	r3, [pc, #548]	; (80046c0 <API_AS5048A_Position_Sensor_It+0x2b8>)
 800449a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800449e:	f023 0302 	bic.w	r3, r3, #2
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	4b86      	ldr	r3, [pc, #536]	; (80046c0 <API_AS5048A_Position_Sensor_It+0x2b8>)
 80044a6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			position_sensor_error = 0;
 80044aa:	4b83      	ldr	r3, [pc, #524]	; (80046b8 <API_AS5048A_Position_Sensor_It+0x2b0>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
			present_position_rad = roundf(init_error_data_bits-16.0f)*bit_to_radians_ratio;
 80044b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80044b4:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80044b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044bc:	eeb0 0a67 	vmov.f32	s0, s15
 80044c0:	f009 fe16 	bl	800e0f0 <roundf>
 80044c4:	eef0 7a40 	vmov.f32	s15, s0
 80044c8:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80046c4 <API_AS5048A_Position_Sensor_It+0x2bc>
 80044cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044d0:	4b7d      	ldr	r3, [pc, #500]	; (80046c8 <API_AS5048A_Position_Sensor_It+0x2c0>)
 80044d2:	edc3 7a00 	vstr	s15, [r3]
			if(present_position_rad<0.0f)
 80044d6:	4b7c      	ldr	r3, [pc, #496]	; (80046c8 <API_AS5048A_Position_Sensor_It+0x2c0>)
 80044d8:	edd3 7a00 	vldr	s15, [r3]
 80044dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e4:	d503      	bpl.n	80044ee <API_AS5048A_Position_Sensor_It+0xe6>
				present_position_rad=0.0f;
 80044e6:	4b78      	ldr	r3, [pc, #480]	; (80046c8 <API_AS5048A_Position_Sensor_It+0x2c0>)
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
			if(present_position_rad>max_radians)
 80044ee:	4b76      	ldr	r3, [pc, #472]	; (80046c8 <API_AS5048A_Position_Sensor_It+0x2c0>)
 80044f0:	edd3 7a00 	vldr	s15, [r3]
 80044f4:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80046cc <API_AS5048A_Position_Sensor_It+0x2c4>
 80044f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004500:	dd02      	ble.n	8004508 <API_AS5048A_Position_Sensor_It+0x100>
				present_position_rad=max_radians;
 8004502:	4a73      	ldr	r2, [pc, #460]	; (80046d0 <API_AS5048A_Position_Sensor_It+0x2c8>)
 8004504:	4b70      	ldr	r3, [pc, #448]	; (80046c8 <API_AS5048A_Position_Sensor_It+0x2c0>)
 8004506:	601a      	str	r2, [r3, #0]
			delta_position_rad = present_position_rad-last_position_rad;
 8004508:	4b6f      	ldr	r3, [pc, #444]	; (80046c8 <API_AS5048A_Position_Sensor_It+0x2c0>)
 800450a:	ed93 7a00 	vldr	s14, [r3]
 800450e:	4b71      	ldr	r3, [pc, #452]	; (80046d4 <API_AS5048A_Position_Sensor_It+0x2cc>)
 8004510:	edd3 7a00 	vldr	s15, [r3]
 8004514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004518:	4b6f      	ldr	r3, [pc, #444]	; (80046d8 <API_AS5048A_Position_Sensor_It+0x2d0>)
 800451a:	edc3 7a00 	vstr	s15, [r3]
			if(delta_position_rad>M_PI)
 800451e:	4b6e      	ldr	r3, [pc, #440]	; (80046d8 <API_AS5048A_Position_Sensor_It+0x2d0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f7fb ffdc 	bl	80004e0 <__aeabi_f2d>
 8004528:	a357      	add	r3, pc, #348	; (adr r3, 8004688 <API_AS5048A_Position_Sensor_It+0x280>)
 800452a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452e:	f7fc fabf 	bl	8000ab0 <__aeabi_dcmpgt>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d017      	beq.n	8004568 <API_AS5048A_Position_Sensor_It+0x160>
				--present_revolution;
 8004538:	4b68      	ldr	r3, [pc, #416]	; (80046dc <API_AS5048A_Position_Sensor_It+0x2d4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3b01      	subs	r3, #1
 800453e:	4a67      	ldr	r2, [pc, #412]	; (80046dc <API_AS5048A_Position_Sensor_It+0x2d4>)
 8004540:	6013      	str	r3, [r2, #0]
				delta_position_rad-=M_2PI;
 8004542:	4b65      	ldr	r3, [pc, #404]	; (80046d8 <API_AS5048A_Position_Sensor_It+0x2d0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f7fb ffca 	bl	80004e0 <__aeabi_f2d>
 800454c:	a350      	add	r3, pc, #320	; (adr r3, 8004690 <API_AS5048A_Position_Sensor_It+0x288>)
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	f7fb fe65 	bl	8000220 <__aeabi_dsub>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4610      	mov	r0, r2
 800455c:	4619      	mov	r1, r3
 800455e:	f7fc fad9 	bl	8000b14 <__aeabi_d2f>
 8004562:	4603      	mov	r3, r0
 8004564:	4a5c      	ldr	r2, [pc, #368]	; (80046d8 <API_AS5048A_Position_Sensor_It+0x2d0>)
 8004566:	6013      	str	r3, [r2, #0]
			if(delta_position_rad<-M_PI)
 8004568:	4b5b      	ldr	r3, [pc, #364]	; (80046d8 <API_AS5048A_Position_Sensor_It+0x2d0>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f7fb ffb7 	bl	80004e0 <__aeabi_f2d>
 8004572:	a349      	add	r3, pc, #292	; (adr r3, 8004698 <API_AS5048A_Position_Sensor_It+0x290>)
 8004574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004578:	f7fc fa7c 	bl	8000a74 <__aeabi_dcmplt>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d017      	beq.n	80045b2 <API_AS5048A_Position_Sensor_It+0x1aa>
				++present_revolution;
 8004582:	4b56      	ldr	r3, [pc, #344]	; (80046dc <API_AS5048A_Position_Sensor_It+0x2d4>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3301      	adds	r3, #1
 8004588:	4a54      	ldr	r2, [pc, #336]	; (80046dc <API_AS5048A_Position_Sensor_It+0x2d4>)
 800458a:	6013      	str	r3, [r2, #0]
				delta_position_rad+=M_2PI;
 800458c:	4b52      	ldr	r3, [pc, #328]	; (80046d8 <API_AS5048A_Position_Sensor_It+0x2d0>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4618      	mov	r0, r3
 8004592:	f7fb ffa5 	bl	80004e0 <__aeabi_f2d>
 8004596:	a33e      	add	r3, pc, #248	; (adr r3, 8004690 <API_AS5048A_Position_Sensor_It+0x288>)
 8004598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459c:	f7fb fe42 	bl	8000224 <__adddf3>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4610      	mov	r0, r2
 80045a6:	4619      	mov	r1, r3
 80045a8:	f7fc fab4 	bl	8000b14 <__aeabi_d2f>
 80045ac:	4603      	mov	r3, r0
 80045ae:	4a4a      	ldr	r2, [pc, #296]	; (80046d8 <API_AS5048A_Position_Sensor_It+0x2d0>)
 80045b0:	6013      	str	r3, [r2, #0]
			present_position_multi_rad = present_position_rad+(float)present_revolution*M_2PI;
 80045b2:	4b45      	ldr	r3, [pc, #276]	; (80046c8 <API_AS5048A_Position_Sensor_It+0x2c0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fb ff92 	bl	80004e0 <__aeabi_f2d>
 80045bc:	4604      	mov	r4, r0
 80045be:	460d      	mov	r5, r1
 80045c0:	4b46      	ldr	r3, [pc, #280]	; (80046dc <API_AS5048A_Position_Sensor_It+0x2d4>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	ee07 3a90 	vmov	s15, r3
 80045c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045cc:	ee17 0a90 	vmov	r0, s15
 80045d0:	f7fb ff86 	bl	80004e0 <__aeabi_f2d>
 80045d4:	a32e      	add	r3, pc, #184	; (adr r3, 8004690 <API_AS5048A_Position_Sensor_It+0x288>)
 80045d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045da:	f7fb ffd9 	bl	8000590 <__aeabi_dmul>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	4620      	mov	r0, r4
 80045e4:	4629      	mov	r1, r5
 80045e6:	f7fb fe1d 	bl	8000224 <__adddf3>
 80045ea:	4602      	mov	r2, r0
 80045ec:	460b      	mov	r3, r1
 80045ee:	4610      	mov	r0, r2
 80045f0:	4619      	mov	r1, r3
 80045f2:	f7fc fa8f 	bl	8000b14 <__aeabi_d2f>
 80045f6:	4603      	mov	r3, r0
 80045f8:	4a39      	ldr	r2, [pc, #228]	; (80046e0 <API_AS5048A_Position_Sensor_It+0x2d8>)
 80045fa:	6013      	str	r3, [r2, #0]
			position_delta_time_us = present_time_us-last_position_time_us;
 80045fc:	4b2b      	ldr	r3, [pc, #172]	; (80046ac <API_AS5048A_Position_Sensor_It+0x2a4>)
 80045fe:	881a      	ldrh	r2, [r3, #0]
 8004600:	4b38      	ldr	r3, [pc, #224]	; (80046e4 <API_AS5048A_Position_Sensor_It+0x2dc>)
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	b29a      	uxth	r2, r3
 8004608:	4b37      	ldr	r3, [pc, #220]	; (80046e8 <API_AS5048A_Position_Sensor_It+0x2e0>)
 800460a:	801a      	strh	r2, [r3, #0]
			float const alpha_vel = (float)(regs[REG_EWMA_ENCODER]+1)/2560.0f; // 255 => B=0.1, 1 => beta = 0.0004
 800460c:	4b2c      	ldr	r3, [pc, #176]	; (80046c0 <API_AS5048A_Position_Sensor_It+0x2b8>)
 800460e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004612:	3301      	adds	r3, #1
 8004614:	ee07 3a90 	vmov	s15, r3
 8004618:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800461c:	eddf 6a33 	vldr	s13, [pc, #204]	; 80046ec <API_AS5048A_Position_Sensor_It+0x2e4>
 8004620:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004624:	edc7 7a02 	vstr	s15, [r7, #8]
					alpha_vel * (delta_position_rad / (float)position_delta_time_us * 1000000.0f)
 8004628:	4b2b      	ldr	r3, [pc, #172]	; (80046d8 <API_AS5048A_Position_Sensor_It+0x2d0>)
 800462a:	edd3 6a00 	vldr	s13, [r3]
 800462e:	4b2e      	ldr	r3, [pc, #184]	; (80046e8 <API_AS5048A_Position_Sensor_It+0x2e0>)
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800463a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800463e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80046f0 <API_AS5048A_Position_Sensor_It+0x2e8>
 8004642:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004646:	edd7 7a02 	vldr	s15, [r7, #8]
 800464a:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ (1.0f-alpha_vel) * present_velocity_rad;
 800464e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004652:	edd7 7a02 	vldr	s15, [r7, #8]
 8004656:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800465a:	4b26      	ldr	r3, [pc, #152]	; (80046f4 <API_AS5048A_Position_Sensor_It+0x2ec>)
 800465c:	edd3 7a00 	vldr	s15, [r3]
 8004660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004664:	ee77 7a27 	vadd.f32	s15, s14, s15
			present_velocity_rad =
 8004668:	4b22      	ldr	r3, [pc, #136]	; (80046f4 <API_AS5048A_Position_Sensor_It+0x2ec>)
 800466a:	edc3 7a00 	vstr	s15, [r3]
			last_position_time_us = present_time_us;
 800466e:	4b0f      	ldr	r3, [pc, #60]	; (80046ac <API_AS5048A_Position_Sensor_It+0x2a4>)
 8004670:	881a      	ldrh	r2, [r3, #0]
 8004672:	4b1c      	ldr	r3, [pc, #112]	; (80046e4 <API_AS5048A_Position_Sensor_It+0x2dc>)
 8004674:	801a      	strh	r2, [r3, #0]
			last_position_rad = present_position_rad;
 8004676:	4b14      	ldr	r3, [pc, #80]	; (80046c8 <API_AS5048A_Position_Sensor_It+0x2c0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a16      	ldr	r2, [pc, #88]	; (80046d4 <API_AS5048A_Position_Sensor_It+0x2cc>)
 800467c:	6013      	str	r3, [r2, #0]
}
 800467e:	bf00      	nop
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bdb0      	pop	{r4, r5, r7, pc}
 8004686:	bf00      	nop
 8004688:	54442d18 	.word	0x54442d18
 800468c:	400921fb 	.word	0x400921fb
 8004690:	54442d18 	.word	0x54442d18
 8004694:	401921fb 	.word	0x401921fb
 8004698:	54442d18 	.word	0x54442d18
 800469c:	c00921fb 	.word	0xc00921fb
 80046a0:	200001c8 	.word	0x200001c8
 80046a4:	200001cc 	.word	0x200001cc
 80046a8:	20002efc 	.word	0x20002efc
 80046ac:	200001d8 	.word	0x200001d8
 80046b0:	4580b800 	.word	0x4580b800
 80046b4:	41733333 	.word	0x41733333
 80046b8:	200001d0 	.word	0x200001d0
 80046bc:	200001d4 	.word	0x200001d4
 80046c0:	2000021c 	.word	0x2000021c
 80046c4:	3ac90fdb 	.word	0x3ac90fdb
 80046c8:	200001dc 	.word	0x200001dc
 80046cc:	40c9034a 	.word	0x40c9034a
 80046d0:	40c9034a 	.word	0x40c9034a
 80046d4:	200001e8 	.word	0x200001e8
 80046d8:	200001e0 	.word	0x200001e0
 80046dc:	200001f0 	.word	0x200001f0
 80046e0:	200001f4 	.word	0x200001f4
 80046e4:	200001e6 	.word	0x200001e6
 80046e8:	200001e4 	.word	0x200001e4
 80046ec:	45200000 	.word	0x45200000
 80046f0:	49742400 	.word	0x49742400
 80046f4:	200001ec 	.word	0x200001ec

080046f8 <API_AS5048A_Position_Sensor_Get_Radians_Estimation>:

float API_AS5048A_Position_Sensor_Get_Radians_Estimation(uint16_t time_us)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	4603      	mov	r3, r0
 8004700:	80fb      	strh	r3, [r7, #6]
	uint16_t delta_t_us = time_us-present_time_us;
 8004702:	4b1b      	ldr	r3, [pc, #108]	; (8004770 <API_AS5048A_Position_Sensor_Get_Radians_Estimation+0x78>)
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	88fa      	ldrh	r2, [r7, #6]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	81fb      	strh	r3, [r7, #14]
	// check old sample error
	if(delta_t_us>2000) //2ms
 800470c:	89fb      	ldrh	r3, [r7, #14]
 800470e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004712:	d909      	bls.n	8004728 <API_AS5048A_Position_Sensor_Get_Radians_Estimation+0x30>
	{
		// set encoder error
		regs[REG_HARDWARE_ERROR_STATUS] |= 1UL << HW_ERROR_BIT_POSITION_SENSOR_NOS_RESPONDING;
 8004714:	4b17      	ldr	r3, [pc, #92]	; (8004774 <API_AS5048A_Position_Sensor_Get_Radians_Estimation+0x7c>)
 8004716:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800471a:	f043 0304 	orr.w	r3, r3, #4
 800471e:	b2da      	uxtb	r2, r3
 8004720:	4b14      	ldr	r3, [pc, #80]	; (8004774 <API_AS5048A_Position_Sensor_Get_Radians_Estimation+0x7c>)
 8004722:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 8004726:	e008      	b.n	800473a <API_AS5048A_Position_Sensor_Get_Radians_Estimation+0x42>
	}
	else
	{
		// clear encoder error
		regs[REG_HARDWARE_ERROR_STATUS] &= ~(1UL << HW_ERROR_BIT_POSITION_SENSOR_NOS_RESPONDING);
 8004728:	4b12      	ldr	r3, [pc, #72]	; (8004774 <API_AS5048A_Position_Sensor_Get_Radians_Estimation+0x7c>)
 800472a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800472e:	f023 0304 	bic.w	r3, r3, #4
 8004732:	b2da      	uxtb	r2, r3
 8004734:	4b0f      	ldr	r3, [pc, #60]	; (8004774 <API_AS5048A_Position_Sensor_Get_Radians_Estimation+0x7c>)
 8004736:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	}
	return present_position_rad + present_velocity_rad*(float)(delta_t_us)/1000000.0f;
 800473a:	89fb      	ldrh	r3, [r7, #14]
 800473c:	ee07 3a90 	vmov	s15, r3
 8004740:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004744:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <API_AS5048A_Position_Sensor_Get_Radians_Estimation+0x80>)
 8004746:	edd3 7a00 	vldr	s15, [r3]
 800474a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800474e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800477c <API_AS5048A_Position_Sensor_Get_Radians_Estimation+0x84>
 8004752:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004756:	4b0a      	ldr	r3, [pc, #40]	; (8004780 <API_AS5048A_Position_Sensor_Get_Radians_Estimation+0x88>)
 8004758:	edd3 7a00 	vldr	s15, [r3]
 800475c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8004760:	eeb0 0a67 	vmov.f32	s0, s15
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	200001d8 	.word	0x200001d8
 8004774:	2000021c 	.word	0x2000021c
 8004778:	200001ec 	.word	0x200001ec
 800477c:	49742400 	.word	0x49742400
 8004780:	200001dc 	.word	0x200001dc

08004784 <API_AS5048A_Position_Sensor_Get_Multiturn_Radians>:
{
	return present_position_rad;
}

float API_AS5048A_Position_Sensor_Get_Multiturn_Radians()
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
	return present_position_multi_rad;
 8004788:	4b04      	ldr	r3, [pc, #16]	; (800479c <API_AS5048A_Position_Sensor_Get_Multiturn_Radians+0x18>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	ee07 3a90 	vmov	s15, r3
}
 8004790:	eeb0 0a67 	vmov.f32	s0, s15
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	200001f4 	.word	0x200001f4

080047a0 <API_AS5048A_Position_Sensor_Get_DPS>:
{
	return present_velocity_rad;
}

float API_AS5048A_Position_Sensor_Get_DPS()
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
	return RADIANS_TO_DEGREES(present_velocity_rad);
 80047a4:	4b10      	ldr	r3, [pc, #64]	; (80047e8 <API_AS5048A_Position_Sensor_Get_DPS+0x48>)
 80047a6:	edd3 7a00 	vldr	s15, [r3]
 80047aa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80047ec <API_AS5048A_Position_Sensor_Get_DPS+0x4c>
 80047ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047b2:	ee17 0a90 	vmov	r0, s15
 80047b6:	f7fb fe93 	bl	80004e0 <__aeabi_f2d>
 80047ba:	a309      	add	r3, pc, #36	; (adr r3, 80047e0 <API_AS5048A_Position_Sensor_Get_DPS+0x40>)
 80047bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c0:	f7fc f810 	bl	80007e4 <__aeabi_ddiv>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4610      	mov	r0, r2
 80047ca:	4619      	mov	r1, r3
 80047cc:	f7fc f9a2 	bl	8000b14 <__aeabi_d2f>
 80047d0:	4603      	mov	r3, r0
 80047d2:	ee07 3a90 	vmov	s15, r3
}
 80047d6:	eeb0 0a67 	vmov.f32	s0, s15
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	f3af 8000 	nop.w
 80047e0:	54442d18 	.word	0x54442d18
 80047e4:	400921fb 	.word	0x400921fb
 80047e8:	200001ec 	.word	0x200001ec
 80047ec:	43340000 	.word	0x43340000

080047f0 <updateCRC>:
#include "serial.h"

extern HAL_Serial_Handler serial;

uint16_t updateCRC(uint16_t crc_accum, uint8_t *data_blk_ptr, uint16_t data_blk_size)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	4603      	mov	r3, r0
 80047f8:	6039      	str	r1, [r7, #0]
 80047fa:	80fb      	strh	r3, [r7, #6]
 80047fc:	4613      	mov	r3, r2
 80047fe:	80bb      	strh	r3, [r7, #4]
    0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264,
    0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E,
    0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219, 0x0208,
    0x820D, 0x8207, 0x0202 };

  for (j = 0; j < data_blk_size; j++)
 8004800:	2300      	movs	r3, #0
 8004802:	81fb      	strh	r3, [r7, #14]
 8004804:	e019      	b.n	800483a <updateCRC+0x4a>
  {
    i = ((uint16_t)(crc_accum >> 8) ^ *data_blk_ptr++) & 0xFF;
 8004806:	88fb      	ldrh	r3, [r7, #6]
 8004808:	0a1b      	lsrs	r3, r3, #8
 800480a:	b29a      	uxth	r2, r3
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	1c59      	adds	r1, r3, #1
 8004810:	6039      	str	r1, [r7, #0]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	b29b      	uxth	r3, r3
 8004816:	4053      	eors	r3, r2
 8004818:	b29b      	uxth	r3, r3
 800481a:	b2db      	uxtb	r3, r3
 800481c:	81bb      	strh	r3, [r7, #12]
    crc_accum = (crc_accum << 8) ^ crc_table[i];
 800481e:	88fb      	ldrh	r3, [r7, #6]
 8004820:	021b      	lsls	r3, r3, #8
 8004822:	b21a      	sxth	r2, r3
 8004824:	89bb      	ldrh	r3, [r7, #12]
 8004826:	490a      	ldr	r1, [pc, #40]	; (8004850 <updateCRC+0x60>)
 8004828:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800482c:	b21b      	sxth	r3, r3
 800482e:	4053      	eors	r3, r2
 8004830:	b21b      	sxth	r3, r3
 8004832:	80fb      	strh	r3, [r7, #6]
  for (j = 0; j < data_blk_size; j++)
 8004834:	89fb      	ldrh	r3, [r7, #14]
 8004836:	3301      	adds	r3, #1
 8004838:	81fb      	strh	r3, [r7, #14]
 800483a:	89fa      	ldrh	r2, [r7, #14]
 800483c:	88bb      	ldrh	r3, [r7, #4]
 800483e:	429a      	cmp	r2, r3
 8004840:	d3e1      	bcc.n	8004806 <updateCRC+0x16>
  }

  return crc_accum;
 8004842:	88fb      	ldrh	r3, [r7, #6]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	0800ee70 	.word	0x0800ee70

08004854 <packet_encapsulate>:
#define PKT_PARAMETER2          10
#define PKT_PARAMETER3          11
#define PKT_PARAMETER4          12

void packet_encapsulate(uint32_t payload_status_length) // length from instruction byte to last parameter byte
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
	// header
	tx_packet_buffer[PKT_HEADER0]=0xFF;
 800485c:	4b1e      	ldr	r3, [pc, #120]	; (80048d8 <packet_encapsulate+0x84>)
 800485e:	22ff      	movs	r2, #255	; 0xff
 8004860:	701a      	strb	r2, [r3, #0]
	tx_packet_buffer[PKT_HEADER1]=0xFF;
 8004862:	4b1d      	ldr	r3, [pc, #116]	; (80048d8 <packet_encapsulate+0x84>)
 8004864:	22ff      	movs	r2, #255	; 0xff
 8004866:	705a      	strb	r2, [r3, #1]
	tx_packet_buffer[PKT_HEADER2]=0xFD;
 8004868:	4b1b      	ldr	r3, [pc, #108]	; (80048d8 <packet_encapsulate+0x84>)
 800486a:	22fd      	movs	r2, #253	; 0xfd
 800486c:	709a      	strb	r2, [r3, #2]
	tx_packet_buffer[PKT_RESERVED]=0x00;
 800486e:	4b1a      	ldr	r3, [pc, #104]	; (80048d8 <packet_encapsulate+0x84>)
 8004870:	2200      	movs	r2, #0
 8004872:	70da      	strb	r2, [r3, #3]
	tx_packet_buffer[PKT_ID]=regs[REG_ID];
 8004874:	4b19      	ldr	r3, [pc, #100]	; (80048dc <packet_encapsulate+0x88>)
 8004876:	78da      	ldrb	r2, [r3, #3]
 8004878:	4b17      	ldr	r3, [pc, #92]	; (80048d8 <packet_encapsulate+0x84>)
 800487a:	711a      	strb	r2, [r3, #4]
	// length
	uint16_t length = payload_status_length+2; // +crc
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	b29b      	uxth	r3, r3
 8004880:	3302      	adds	r3, #2
 8004882:	81fb      	strh	r3, [r7, #14]
	tx_packet_buffer[PKT_LENGTH_L]= LOW_BYTE(length);
 8004884:	89fb      	ldrh	r3, [r7, #14]
 8004886:	b2da      	uxtb	r2, r3
 8004888:	4b13      	ldr	r3, [pc, #76]	; (80048d8 <packet_encapsulate+0x84>)
 800488a:	715a      	strb	r2, [r3, #5]
	tx_packet_buffer[PKT_LENGTH_H]= HIGH_BYTE(length);
 800488c:	89fb      	ldrh	r3, [r7, #14]
 800488e:	0a1b      	lsrs	r3, r3, #8
 8004890:	b29b      	uxth	r3, r3
 8004892:	b2da      	uxtb	r2, r3
 8004894:	4b10      	ldr	r3, [pc, #64]	; (80048d8 <packet_encapsulate+0x84>)
 8004896:	719a      	strb	r2, [r3, #6]
	// crc
	uint16_t packet_crc = updateCRC(0, tx_packet_buffer, length+5);
 8004898:	89fb      	ldrh	r3, [r7, #14]
 800489a:	3305      	adds	r3, #5
 800489c:	b29b      	uxth	r3, r3
 800489e:	461a      	mov	r2, r3
 80048a0:	490d      	ldr	r1, [pc, #52]	; (80048d8 <packet_encapsulate+0x84>)
 80048a2:	2000      	movs	r0, #0
 80048a4:	f7ff ffa4 	bl	80047f0 <updateCRC>
 80048a8:	4603      	mov	r3, r0
 80048aa:	81bb      	strh	r3, [r7, #12]
	tx_packet_buffer[PKT_INSTRUCTION+payload_status_length]= LOW_BYTE(packet_crc); // CRC 1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3307      	adds	r3, #7
 80048b0:	89ba      	ldrh	r2, [r7, #12]
 80048b2:	b2d1      	uxtb	r1, r2
 80048b4:	4a08      	ldr	r2, [pc, #32]	; (80048d8 <packet_encapsulate+0x84>)
 80048b6:	54d1      	strb	r1, [r2, r3]
	tx_packet_buffer[PKT_INSTRUCTION+payload_status_length+1]= HIGH_BYTE(packet_crc); // CRC 2
 80048b8:	89bb      	ldrh	r3, [r7, #12]
 80048ba:	0a1b      	lsrs	r3, r3, #8
 80048bc:	b29a      	uxth	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3308      	adds	r3, #8
 80048c2:	b2d1      	uxtb	r1, r2
 80048c4:	4a04      	ldr	r2, [pc, #16]	; (80048d8 <packet_encapsulate+0x84>)
 80048c6:	54d1      	strb	r1, [r2, r3]
	tx_packet_length = PKT_INSTRUCTION+payload_status_length+2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3309      	adds	r3, #9
 80048cc:	4a04      	ldr	r2, [pc, #16]	; (80048e0 <packet_encapsulate+0x8c>)
 80048ce:	6013      	str	r3, [r2, #0]
}
 80048d0:	bf00      	nop
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	200034cc 	.word	0x200034cc
 80048dc:	2000021c 	.word	0x2000021c
 80048e0:	20000200 	.word	0x20000200

080048e4 <instruction_handler>:
#define ERROR_DATA_LENGTH_ERROR  	0x05
#define ERROR_DATA_LIMIT_ERROR  	0x06
#define ERROR_ACCESS_ERROR  		0x07

void instruction_handler()
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08c      	sub	sp, #48	; 0x30
 80048e8:	af00      	add	r7, sp, #0
	switch(rx_packet_buffer[PKT_INSTRUCTION])
 80048ea:	4ba4      	ldr	r3, [pc, #656]	; (8004b7c <instruction_handler+0x298>)
 80048ec:	79db      	ldrb	r3, [r3, #7]
 80048ee:	2b83      	cmp	r3, #131	; 0x83
 80048f0:	f000 80d5 	beq.w	8004a9e <instruction_handler+0x1ba>
 80048f4:	2b83      	cmp	r3, #131	; 0x83
 80048f6:	f300 8161 	bgt.w	8004bbc <instruction_handler+0x2d8>
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	dc1a      	bgt.n	8004934 <instruction_handler+0x50>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f340 815c 	ble.w	8004bbc <instruction_handler+0x2d8>
 8004904:	3b01      	subs	r3, #1
 8004906:	2b07      	cmp	r3, #7
 8004908:	f200 8158 	bhi.w	8004bbc <instruction_handler+0x2d8>
 800490c:	a201      	add	r2, pc, #4	; (adr r2, 8004914 <instruction_handler+0x30>)
 800490e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004912:	bf00      	nop
 8004914:	0800493d 	.word	0x0800493d
 8004918:	08004977 	.word	0x08004977
 800491c:	08004a05 	.word	0x08004a05
 8004920:	08004bbd 	.word	0x08004bbd
 8004924:	08004bbd 	.word	0x08004bbd
 8004928:	08004b4b 	.word	0x08004b4b
 800492c:	08004bbd 	.word	0x08004bbd
 8004930:	08004b91 	.word	0x08004b91
 8004934:	2b82      	cmp	r3, #130	; 0x82
 8004936:	f000 8152 	beq.w	8004bde <instruction_handler+0x2fa>
 800493a:	e13f      	b.n	8004bbc <instruction_handler+0x2d8>
	{
	case INSTR_PING:
		{
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 800493c:	4b90      	ldr	r3, [pc, #576]	; (8004b80 <instruction_handler+0x29c>)
 800493e:	2255      	movs	r2, #85	; 0x55
 8004940:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 8004942:	4b8f      	ldr	r3, [pc, #572]	; (8004b80 <instruction_handler+0x29c>)
 8004944:	2200      	movs	r2, #0
 8004946:	721a      	strb	r2, [r3, #8]
			tx_packet_buffer[PKT_PARAMETER1]= regs[REG_MODEL_NUMBER_L];
 8004948:	4b8e      	ldr	r3, [pc, #568]	; (8004b84 <instruction_handler+0x2a0>)
 800494a:	781a      	ldrb	r2, [r3, #0]
 800494c:	4b8c      	ldr	r3, [pc, #560]	; (8004b80 <instruction_handler+0x29c>)
 800494e:	725a      	strb	r2, [r3, #9]
			tx_packet_buffer[PKT_PARAMETER2]= regs[REG_MODEL_NUMBER_H];
 8004950:	4b8c      	ldr	r3, [pc, #560]	; (8004b84 <instruction_handler+0x2a0>)
 8004952:	785a      	ldrb	r2, [r3, #1]
 8004954:	4b8a      	ldr	r3, [pc, #552]	; (8004b80 <instruction_handler+0x29c>)
 8004956:	729a      	strb	r2, [r3, #10]
			tx_packet_buffer[PKT_PARAMETER3]= regs[REG_VERSION];
 8004958:	4b8a      	ldr	r3, [pc, #552]	; (8004b84 <instruction_handler+0x2a0>)
 800495a:	789a      	ldrb	r2, [r3, #2]
 800495c:	4b88      	ldr	r3, [pc, #544]	; (8004b80 <instruction_handler+0x29c>)
 800495e:	72da      	strb	r2, [r3, #11]
			packet_encapsulate(5);
 8004960:	2005      	movs	r0, #5
 8004962:	f7ff ff77 	bl	8004854 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8004966:	4b88      	ldr	r3, [pc, #544]	; (8004b88 <instruction_handler+0x2a4>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	4984      	ldr	r1, [pc, #528]	; (8004b80 <instruction_handler+0x29c>)
 800496e:	4887      	ldr	r0, [pc, #540]	; (8004b8c <instruction_handler+0x2a8>)
 8004970:	f000 fb94 	bl	800509c <HAL_Serial_Write>
		}
		break;
 8004974:	e134      	b.n	8004be0 <instruction_handler+0x2fc>
	case INSTR_READ:
		{
			// resassemble 16-bit address and length
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 8004976:	4b81      	ldr	r3, [pc, #516]	; (8004b7c <instruction_handler+0x298>)
 8004978:	7a5b      	ldrb	r3, [r3, #9]
 800497a:	021b      	lsls	r3, r3, #8
 800497c:	b21a      	sxth	r2, r3
 800497e:	4b7f      	ldr	r3, [pc, #508]	; (8004b7c <instruction_handler+0x298>)
 8004980:	7a1b      	ldrb	r3, [r3, #8]
 8004982:	b21b      	sxth	r3, r3
 8004984:	4313      	orrs	r3, r2
 8004986:	b21b      	sxth	r3, r3
 8004988:	807b      	strh	r3, [r7, #2]
			uint16_t length =  MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER2],rx_packet_buffer[PKT_PARAMETER3]);
 800498a:	4b7c      	ldr	r3, [pc, #496]	; (8004b7c <instruction_handler+0x298>)
 800498c:	7adb      	ldrb	r3, [r3, #11]
 800498e:	021b      	lsls	r3, r3, #8
 8004990:	b21a      	sxth	r2, r3
 8004992:	4b7a      	ldr	r3, [pc, #488]	; (8004b7c <instruction_handler+0x298>)
 8004994:	7a9b      	ldrb	r3, [r3, #10]
 8004996:	b21b      	sxth	r3, r3
 8004998:	4313      	orrs	r3, r2
 800499a:	b21b      	sxth	r3, r3
 800499c:	803b      	strh	r3, [r7, #0]
			// capture value
			if(address<REG_MAX)
 800499e:	887b      	ldrh	r3, [r7, #2]
 80049a0:	2bb1      	cmp	r3, #177	; 0xb1
 80049a2:	d81e      	bhi.n	80049e2 <instruction_handler+0xfe>
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 80049a4:	4b76      	ldr	r3, [pc, #472]	; (8004b80 <instruction_handler+0x29c>)
 80049a6:	2255      	movs	r2, #85	; 0x55
 80049a8:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= 0x00; // TODO : Alarm flag to handle here
 80049aa:	4b75      	ldr	r3, [pc, #468]	; (8004b80 <instruction_handler+0x29c>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	721a      	strb	r2, [r3, #8]
				for(uint32_t index=0;index<length;++index)
 80049b0:	2300      	movs	r3, #0
 80049b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049b4:	e00b      	b.n	80049ce <instruction_handler+0xea>
					tx_packet_buffer[PKT_ERROR+1+index]= regs[address+index];
 80049b6:	887a      	ldrh	r2, [r7, #2]
 80049b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ba:	441a      	add	r2, r3
 80049bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049be:	3309      	adds	r3, #9
 80049c0:	4970      	ldr	r1, [pc, #448]	; (8004b84 <instruction_handler+0x2a0>)
 80049c2:	5c89      	ldrb	r1, [r1, r2]
 80049c4:	4a6e      	ldr	r2, [pc, #440]	; (8004b80 <instruction_handler+0x29c>)
 80049c6:	54d1      	strb	r1, [r2, r3]
				for(uint32_t index=0;index<length;++index)
 80049c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ca:	3301      	adds	r3, #1
 80049cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ce:	883b      	ldrh	r3, [r7, #0]
 80049d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d3ef      	bcc.n	80049b6 <instruction_handler+0xd2>
				packet_encapsulate(2+length);
 80049d6:	883b      	ldrh	r3, [r7, #0]
 80049d8:	3302      	adds	r3, #2
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff ff3a 	bl	8004854 <packet_encapsulate>
 80049e0:	e008      	b.n	80049f4 <instruction_handler+0x110>
			}
			else
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 80049e2:	4b67      	ldr	r3, [pc, #412]	; (8004b80 <instruction_handler+0x29c>)
 80049e4:	2255      	movs	r2, #85	; 0x55
 80049e6:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= ERROR_ACCESS_ERROR; // TODO : Alarm flag to handle here
 80049e8:	4b65      	ldr	r3, [pc, #404]	; (8004b80 <instruction_handler+0x29c>)
 80049ea:	2207      	movs	r2, #7
 80049ec:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 80049ee:	2002      	movs	r0, #2
 80049f0:	f7ff ff30 	bl	8004854 <packet_encapsulate>
			}
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 80049f4:	4b64      	ldr	r3, [pc, #400]	; (8004b88 <instruction_handler+0x2a4>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	461a      	mov	r2, r3
 80049fa:	4961      	ldr	r1, [pc, #388]	; (8004b80 <instruction_handler+0x29c>)
 80049fc:	4863      	ldr	r0, [pc, #396]	; (8004b8c <instruction_handler+0x2a8>)
 80049fe:	f000 fb4d 	bl	800509c <HAL_Serial_Write>
		}
		break;
 8004a02:	e0ed      	b.n	8004be0 <instruction_handler+0x2fc>
	case INSTR_WRITE:
		{
			// resassemble 16-bit address and value
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 8004a04:	4b5d      	ldr	r3, [pc, #372]	; (8004b7c <instruction_handler+0x298>)
 8004a06:	7a5b      	ldrb	r3, [r3, #9]
 8004a08:	021b      	lsls	r3, r3, #8
 8004a0a:	b21a      	sxth	r2, r3
 8004a0c:	4b5b      	ldr	r3, [pc, #364]	; (8004b7c <instruction_handler+0x298>)
 8004a0e:	7a1b      	ldrb	r3, [r3, #8]
 8004a10:	b21b      	sxth	r3, r3
 8004a12:	4313      	orrs	r3, r2
 8004a14:	b21b      	sxth	r3, r3
 8004a16:	80fb      	strh	r3, [r7, #6]
			// TODO ; depend on length of packet
			uint16_t value_length =  MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-2-1-2; // remove INSTR, CRC-16 and PARAM0/1
 8004a18:	4b58      	ldr	r3, [pc, #352]	; (8004b7c <instruction_handler+0x298>)
 8004a1a:	799b      	ldrb	r3, [r3, #6]
 8004a1c:	021b      	lsls	r3, r3, #8
 8004a1e:	b21a      	sxth	r2, r3
 8004a20:	4b56      	ldr	r3, [pc, #344]	; (8004b7c <instruction_handler+0x298>)
 8004a22:	795b      	ldrb	r3, [r3, #5]
 8004a24:	b21b      	sxth	r3, r3
 8004a26:	4313      	orrs	r3, r2
 8004a28:	b21b      	sxth	r3, r3
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b05      	subs	r3, #5
 8004a2e:	80bb      	strh	r3, [r7, #4]
			// write into register
			if(address<REG_MAX)
 8004a30:	88fb      	ldrh	r3, [r7, #6]
 8004a32:	2bb1      	cmp	r3, #177	; 0xb1
 8004a34:	d822      	bhi.n	8004a7c <instruction_handler+0x198>
			{
				// TODO : check data range for global position, and other registers in RAM
				for(uint32_t index=0;index<value_length;++index)
 8004a36:	2300      	movs	r3, #0
 8004a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a3a:	e00c      	b.n	8004a56 <instruction_handler+0x172>
					regs[address+index]=rx_packet_buffer[PKT_PARAMETER2+index];
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	f103 020a 	add.w	r2, r3, #10
 8004a42:	88f9      	ldrh	r1, [r7, #6]
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	440b      	add	r3, r1
 8004a48:	494c      	ldr	r1, [pc, #304]	; (8004b7c <instruction_handler+0x298>)
 8004a4a:	5c89      	ldrb	r1, [r1, r2]
 8004a4c:	4a4d      	ldr	r2, [pc, #308]	; (8004b84 <instruction_handler+0x2a0>)
 8004a4e:	54d1      	strb	r1, [r2, r3]
				for(uint32_t index=0;index<value_length;++index)
 8004a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a52:	3301      	adds	r3, #1
 8004a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a56:	88bb      	ldrh	r3, [r7, #4]
 8004a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d3ee      	bcc.n	8004a3c <instruction_handler+0x158>
				// store when accessing EEPROM regs
				if(address<REG_TORQUE_ENABLE)
 8004a5e:	88fb      	ldrh	r3, [r7, #6]
 8004a60:	2b7f      	cmp	r3, #127	; 0x7f
 8004a62:	d801      	bhi.n	8004a68 <instruction_handler+0x184>
				{
					store_eeprom_regs();
 8004a64:	f7fc fb3e 	bl	80010e4 <store_eeprom_regs>
				}
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8004a68:	4b45      	ldr	r3, [pc, #276]	; (8004b80 <instruction_handler+0x29c>)
 8004a6a:	2255      	movs	r2, #85	; 0x55
 8004a6c:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= 0x00; // TODO : Alarm flag to handle here
 8004a6e:	4b44      	ldr	r3, [pc, #272]	; (8004b80 <instruction_handler+0x29c>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 8004a74:	2002      	movs	r0, #2
 8004a76:	f7ff feed 	bl	8004854 <packet_encapsulate>
 8004a7a:	e008      	b.n	8004a8e <instruction_handler+0x1aa>
			}
			else
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8004a7c:	4b40      	ldr	r3, [pc, #256]	; (8004b80 <instruction_handler+0x29c>)
 8004a7e:	2255      	movs	r2, #85	; 0x55
 8004a80:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= ERROR_ACCESS_ERROR; // TODO : Alarm flag to handle here
 8004a82:	4b3f      	ldr	r3, [pc, #252]	; (8004b80 <instruction_handler+0x29c>)
 8004a84:	2207      	movs	r2, #7
 8004a86:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 8004a88:	2002      	movs	r0, #2
 8004a8a:	f7ff fee3 	bl	8004854 <packet_encapsulate>
			}
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8004a8e:	4b3e      	ldr	r3, [pc, #248]	; (8004b88 <instruction_handler+0x2a4>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	461a      	mov	r2, r3
 8004a94:	493a      	ldr	r1, [pc, #232]	; (8004b80 <instruction_handler+0x29c>)
 8004a96:	483d      	ldr	r0, [pc, #244]	; (8004b8c <instruction_handler+0x2a8>)
 8004a98:	f000 fb00 	bl	800509c <HAL_Serial_Write>
		}
		break;
 8004a9c:	e0a0      	b.n	8004be0 <instruction_handler+0x2fc>
		}
		break;
	case INSTR_SYNC_WRITE:
		{
			// decode length of [ID,PARAMS]
			uint16_t const values_length =  MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-1-4-2; // remove INSTR, CRC-16 and PARAM0/1/2/3
 8004a9e:	4b37      	ldr	r3, [pc, #220]	; (8004b7c <instruction_handler+0x298>)
 8004aa0:	799b      	ldrb	r3, [r3, #6]
 8004aa2:	021b      	lsls	r3, r3, #8
 8004aa4:	b21a      	sxth	r2, r3
 8004aa6:	4b35      	ldr	r3, [pc, #212]	; (8004b7c <instruction_handler+0x298>)
 8004aa8:	795b      	ldrb	r3, [r3, #5]
 8004aaa:	b21b      	sxth	r3, r3
 8004aac:	4313      	orrs	r3, r2
 8004aae:	b21b      	sxth	r3, r3
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	3b07      	subs	r3, #7
 8004ab4:	83fb      	strh	r3, [r7, #30]
			// decode the address
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 8004ab6:	4b31      	ldr	r3, [pc, #196]	; (8004b7c <instruction_handler+0x298>)
 8004ab8:	7a5b      	ldrb	r3, [r3, #9]
 8004aba:	021b      	lsls	r3, r3, #8
 8004abc:	b21a      	sxth	r2, r3
 8004abe:	4b2f      	ldr	r3, [pc, #188]	; (8004b7c <instruction_handler+0x298>)
 8004ac0:	7a1b      	ldrb	r3, [r3, #8]
 8004ac2:	b21b      	sxth	r3, r3
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	b21b      	sxth	r3, r3
 8004ac8:	83bb      	strh	r3, [r7, #28]
			// decode the size of data per ID
			uint32_t const data_length = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER2],rx_packet_buffer[PKT_PARAMETER3]);
 8004aca:	4b2c      	ldr	r3, [pc, #176]	; (8004b7c <instruction_handler+0x298>)
 8004acc:	7adb      	ldrb	r3, [r3, #11]
 8004ace:	021b      	lsls	r3, r3, #8
 8004ad0:	4a2a      	ldr	r2, [pc, #168]	; (8004b7c <instruction_handler+0x298>)
 8004ad2:	7a92      	ldrb	r2, [r2, #10]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
			// count the [ID,PARAMS]
			uint16_t const number_of_id_and_data = values_length / (1+data_length); // 1 for ID + data_length
 8004ad8:	8bfa      	ldrh	r2, [r7, #30]
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	3301      	adds	r3, #1
 8004ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae2:	82fb      	strh	r3, [r7, #22]
			// search for my ID
			uint32_t const my_id = regs[REG_ID];
 8004ae4:	4b27      	ldr	r3, [pc, #156]	; (8004b84 <instruction_handler+0x2a0>)
 8004ae6:	78db      	ldrb	r3, [r3, #3]
 8004ae8:	613b      	str	r3, [r7, #16]
			for(uint32_t index=0;index<number_of_id_and_data;++index)
 8004aea:	2300      	movs	r3, #0
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
 8004aee:	e027      	b.n	8004b40 <instruction_handler+0x25c>
			{
				uint32_t position = PKT_PARAMETER4+index*(data_length+1);
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	3301      	adds	r3, #1
 8004af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	330c      	adds	r3, #12
 8004afc:	60fb      	str	r3, [r7, #12]
				uint32_t id = rx_packet_buffer[position];
 8004afe:	4a1f      	ldr	r2, [pc, #124]	; (8004b7c <instruction_handler+0x298>)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4413      	add	r3, r2
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	60bb      	str	r3, [r7, #8]
				// found my own id in one ID,PARAMS]
				if(id==my_id)
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d114      	bne.n	8004b3a <instruction_handler+0x256>
				{
					// update RAM
					for(uint32_t index2=0;index2<data_length;++index2)
 8004b10:	2300      	movs	r3, #0
 8004b12:	623b      	str	r3, [r7, #32]
 8004b14:	e00d      	b.n	8004b32 <instruction_handler+0x24e>
						regs[address+index2]=rx_packet_buffer[position+1+index2];
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	8bb9      	ldrh	r1, [r7, #28]
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	440b      	add	r3, r1
 8004b24:	4915      	ldr	r1, [pc, #84]	; (8004b7c <instruction_handler+0x298>)
 8004b26:	5c89      	ldrb	r1, [r1, r2]
 8004b28:	4a16      	ldr	r2, [pc, #88]	; (8004b84 <instruction_handler+0x2a0>)
 8004b2a:	54d1      	strb	r1, [r2, r3]
					for(uint32_t index2=0;index2<data_length;++index2)
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	623b      	str	r3, [r7, #32]
 8004b32:	6a3a      	ldr	r2, [r7, #32]
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d3ed      	bcc.n	8004b16 <instruction_handler+0x232>
			for(uint32_t index=0;index<number_of_id_and_data;++index)
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b40:	8afb      	ldrh	r3, [r7, #22]
 8004b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d3d3      	bcc.n	8004af0 <instruction_handler+0x20c>
				}
			}
		}
		break;
 8004b48:	e04a      	b.n	8004be0 <instruction_handler+0x2fc>
	case INSTR_FACTORY_RESET:
		{
			factory_reset_eeprom_regs();
 8004b4a:	f7fc f9af 	bl	8000eac <factory_reset_eeprom_regs>
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8004b4e:	4b0c      	ldr	r3, [pc, #48]	; (8004b80 <instruction_handler+0x29c>)
 8004b50:	2255      	movs	r2, #85	; 0x55
 8004b52:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 8004b54:	4b0a      	ldr	r3, [pc, #40]	; (8004b80 <instruction_handler+0x29c>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 8004b5a:	2002      	movs	r0, #2
 8004b5c:	f7ff fe7a 	bl	8004854 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8004b60:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <instruction_handler+0x2a4>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	461a      	mov	r2, r3
 8004b66:	4906      	ldr	r1, [pc, #24]	; (8004b80 <instruction_handler+0x29c>)
 8004b68:	4808      	ldr	r0, [pc, #32]	; (8004b8c <instruction_handler+0x2a8>)
 8004b6a:	f000 fa97 	bl	800509c <HAL_Serial_Write>
			// reboot
			HAL_Delay(100);
 8004b6e:	2064      	movs	r0, #100	; 0x64
 8004b70:	f001 fb0c 	bl	800618c <HAL_Delay>
			HAL_NVIC_SystemReset();
 8004b74:	f003 fa5b 	bl	800802e <HAL_NVIC_SystemReset>
		}
		break;
 8004b78:	e032      	b.n	8004be0 <instruction_handler+0x2fc>
 8004b7a:	bf00      	nop
 8004b7c:	20003080 	.word	0x20003080
 8004b80:	200034cc 	.word	0x200034cc
 8004b84:	2000021c 	.word	0x2000021c
 8004b88:	20000200 	.word	0x20000200
 8004b8c:	20000568 	.word	0x20000568
	case INSTR_REBOOT:
		{
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8004b90:	4b15      	ldr	r3, [pc, #84]	; (8004be8 <instruction_handler+0x304>)
 8004b92:	2255      	movs	r2, #85	; 0x55
 8004b94:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 8004b96:	4b14      	ldr	r3, [pc, #80]	; (8004be8 <instruction_handler+0x304>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 8004b9c:	2002      	movs	r0, #2
 8004b9e:	f7ff fe59 	bl	8004854 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8004ba2:	4b12      	ldr	r3, [pc, #72]	; (8004bec <instruction_handler+0x308>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	490f      	ldr	r1, [pc, #60]	; (8004be8 <instruction_handler+0x304>)
 8004baa:	4811      	ldr	r0, [pc, #68]	; (8004bf0 <instruction_handler+0x30c>)
 8004bac:	f000 fa76 	bl	800509c <HAL_Serial_Write>
			// reboot
			HAL_Delay(100);
 8004bb0:	2064      	movs	r0, #100	; 0x64
 8004bb2:	f001 faeb 	bl	800618c <HAL_Delay>
			HAL_NVIC_SystemReset();
 8004bb6:	f003 fa3a 	bl	800802e <HAL_NVIC_SystemReset>
		}
		break;
 8004bba:	e011      	b.n	8004be0 <instruction_handler+0x2fc>
	default:
		// reply with a status packet with ERR only
		tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8004bbc:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <instruction_handler+0x304>)
 8004bbe:	2255      	movs	r2, #85	; 0x55
 8004bc0:	71da      	strb	r2, [r3, #7]
		tx_packet_buffer[PKT_ERROR]= ERROR_INSTRUCTION_ERROR; // TODO : Alarm flag to handle here
 8004bc2:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <instruction_handler+0x304>)
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	721a      	strb	r2, [r3, #8]
		packet_encapsulate(2);
 8004bc8:	2002      	movs	r0, #2
 8004bca:	f7ff fe43 	bl	8004854 <packet_encapsulate>
		// send packet
		HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8004bce:	4b07      	ldr	r3, [pc, #28]	; (8004bec <instruction_handler+0x308>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	4904      	ldr	r1, [pc, #16]	; (8004be8 <instruction_handler+0x304>)
 8004bd6:	4806      	ldr	r0, [pc, #24]	; (8004bf0 <instruction_handler+0x30c>)
 8004bd8:	f000 fa60 	bl	800509c <HAL_Serial_Write>
		break;
 8004bdc:	e000      	b.n	8004be0 <instruction_handler+0x2fc>
		break;
 8004bde:	bf00      	nop
		// nope
	}
}
 8004be0:	bf00      	nop
 8004be2:	3730      	adds	r7, #48	; 0x30
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	200034cc 	.word	0x200034cc
 8004bec:	20000200 	.word	0x20000200
 8004bf0:	20000568 	.word	0x20000568

08004bf4 <packet_handler>:
	HEADER1,HEADER2,HEADER3,RESERVED,ID,LENGTH1,LENGTH2,PAYLOAD,CRC1,CRC2
} e_packet_state;
e_packet_state packet_state = HEADER1;

void packet_handler(char c)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	71fb      	strb	r3, [r7, #7]
	switch(packet_state)
 8004bfe:	4b84      	ldr	r3, [pc, #528]	; (8004e10 <packet_handler+0x21c>)
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2b09      	cmp	r3, #9
 8004c04:	f200 8100 	bhi.w	8004e08 <packet_handler+0x214>
 8004c08:	a201      	add	r2, pc, #4	; (adr r2, 8004c10 <packet_handler+0x1c>)
 8004c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0e:	bf00      	nop
 8004c10:	08004c39 	.word	0x08004c39
 8004c14:	08004c4f 	.word	0x08004c4f
 8004c18:	08004c7f 	.word	0x08004c7f
 8004c1c:	08004c9b 	.word	0x08004c9b
 8004c20:	08004cb7 	.word	0x08004cb7
 8004c24:	08004cd9 	.word	0x08004cd9
 8004c28:	08004ce7 	.word	0x08004ce7
 8004c2c:	08004d1f 	.word	0x08004d1f
 8004c30:	08004d4d 	.word	0x08004d4d
 8004c34:	08004d69 	.word	0x08004d69
	{
	case HEADER1:
		if(c==0xFF)
 8004c38:	79fb      	ldrb	r3, [r7, #7]
 8004c3a:	2bff      	cmp	r3, #255	; 0xff
 8004c3c:	f040 80e1 	bne.w	8004e02 <packet_handler+0x20e>
		{
			rx_packet_buffer[PKT_HEADER0] = (uint8_t)c;
 8004c40:	4a74      	ldr	r2, [pc, #464]	; (8004e14 <packet_handler+0x220>)
 8004c42:	79fb      	ldrb	r3, [r7, #7]
 8004c44:	7013      	strb	r3, [r2, #0]
			packet_state = HEADER2;
 8004c46:	4b72      	ldr	r3, [pc, #456]	; (8004e10 <packet_handler+0x21c>)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	701a      	strb	r2, [r3, #0]
		}
		break;
 8004c4c:	e0d9      	b.n	8004e02 <packet_handler+0x20e>
	case HEADER2:
		if(c==0xFF)
 8004c4e:	79fb      	ldrb	r3, [r7, #7]
 8004c50:	2bff      	cmp	r3, #255	; 0xff
 8004c52:	d106      	bne.n	8004c62 <packet_handler+0x6e>
		{
			rx_packet_buffer[PKT_HEADER1] = (uint8_t)c;
 8004c54:	4a6f      	ldr	r2, [pc, #444]	; (8004e14 <packet_handler+0x220>)
 8004c56:	79fb      	ldrb	r3, [r7, #7]
 8004c58:	7053      	strb	r3, [r2, #1]
			packet_state = HEADER3;
 8004c5a:	4b6d      	ldr	r3, [pc, #436]	; (8004e10 <packet_handler+0x21c>)
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	701a      	strb	r2, [r3, #0]
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
			packet_state = RESERVED;
		}
		else
			packet_state = HEADER1;
		break;
 8004c60:	e0d2      	b.n	8004e08 <packet_handler+0x214>
		else if(c==0xFD)
 8004c62:	79fb      	ldrb	r3, [r7, #7]
 8004c64:	2bfd      	cmp	r3, #253	; 0xfd
 8004c66:	d106      	bne.n	8004c76 <packet_handler+0x82>
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
 8004c68:	4a6a      	ldr	r2, [pc, #424]	; (8004e14 <packet_handler+0x220>)
 8004c6a:	79fb      	ldrb	r3, [r7, #7]
 8004c6c:	7093      	strb	r3, [r2, #2]
			packet_state = RESERVED;
 8004c6e:	4b68      	ldr	r3, [pc, #416]	; (8004e10 <packet_handler+0x21c>)
 8004c70:	2203      	movs	r2, #3
 8004c72:	701a      	strb	r2, [r3, #0]
		break;
 8004c74:	e0c8      	b.n	8004e08 <packet_handler+0x214>
			packet_state = HEADER1;
 8004c76:	4b66      	ldr	r3, [pc, #408]	; (8004e10 <packet_handler+0x21c>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	701a      	strb	r2, [r3, #0]
		break;
 8004c7c:	e0c4      	b.n	8004e08 <packet_handler+0x214>
	case HEADER3:
		if(c==0xFD)
 8004c7e:	79fb      	ldrb	r3, [r7, #7]
 8004c80:	2bfd      	cmp	r3, #253	; 0xfd
 8004c82:	d106      	bne.n	8004c92 <packet_handler+0x9e>
		{
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
 8004c84:	4a63      	ldr	r2, [pc, #396]	; (8004e14 <packet_handler+0x220>)
 8004c86:	79fb      	ldrb	r3, [r7, #7]
 8004c88:	7093      	strb	r3, [r2, #2]
			packet_state = RESERVED;
 8004c8a:	4b61      	ldr	r3, [pc, #388]	; (8004e10 <packet_handler+0x21c>)
 8004c8c:	2203      	movs	r2, #3
 8004c8e:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 8004c90:	e0ba      	b.n	8004e08 <packet_handler+0x214>
			packet_state = HEADER1;
 8004c92:	4b5f      	ldr	r3, [pc, #380]	; (8004e10 <packet_handler+0x21c>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	701a      	strb	r2, [r3, #0]
		break;
 8004c98:	e0b6      	b.n	8004e08 <packet_handler+0x214>
	case RESERVED:
		if(c==0x00)
 8004c9a:	79fb      	ldrb	r3, [r7, #7]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d106      	bne.n	8004cae <packet_handler+0xba>
		{
			rx_packet_buffer[PKT_RESERVED] = (uint8_t)c;
 8004ca0:	4a5c      	ldr	r2, [pc, #368]	; (8004e14 <packet_handler+0x220>)
 8004ca2:	79fb      	ldrb	r3, [r7, #7]
 8004ca4:	70d3      	strb	r3, [r2, #3]
			packet_state = ID;
 8004ca6:	4b5a      	ldr	r3, [pc, #360]	; (8004e10 <packet_handler+0x21c>)
 8004ca8:	2204      	movs	r2, #4
 8004caa:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 8004cac:	e0ac      	b.n	8004e08 <packet_handler+0x214>
			packet_state = HEADER1;
 8004cae:	4b58      	ldr	r3, [pc, #352]	; (8004e10 <packet_handler+0x21c>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	701a      	strb	r2, [r3, #0]
		break;
 8004cb4:	e0a8      	b.n	8004e08 <packet_handler+0x214>
	case ID:
		if( (c<=252) || (c==254) ) // validate ID
 8004cb6:	79fb      	ldrb	r3, [r7, #7]
 8004cb8:	2bfc      	cmp	r3, #252	; 0xfc
 8004cba:	d902      	bls.n	8004cc2 <packet_handler+0xce>
 8004cbc:	79fb      	ldrb	r3, [r7, #7]
 8004cbe:	2bfe      	cmp	r3, #254	; 0xfe
 8004cc0:	d106      	bne.n	8004cd0 <packet_handler+0xdc>
		{
			rx_packet_buffer[PKT_ID] = (uint8_t)c;
 8004cc2:	4a54      	ldr	r2, [pc, #336]	; (8004e14 <packet_handler+0x220>)
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	7113      	strb	r3, [r2, #4]
			packet_state = LENGTH1;
 8004cc8:	4b51      	ldr	r3, [pc, #324]	; (8004e10 <packet_handler+0x21c>)
 8004cca:	2205      	movs	r2, #5
 8004ccc:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 8004cce:	e09b      	b.n	8004e08 <packet_handler+0x214>
			packet_state = HEADER1;
 8004cd0:	4b4f      	ldr	r3, [pc, #316]	; (8004e10 <packet_handler+0x21c>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	701a      	strb	r2, [r3, #0]
		break;
 8004cd6:	e097      	b.n	8004e08 <packet_handler+0x214>
	case LENGTH1:
		rx_packet_buffer[PKT_LENGTH_L] = (uint8_t)c;
 8004cd8:	4a4e      	ldr	r2, [pc, #312]	; (8004e14 <packet_handler+0x220>)
 8004cda:	79fb      	ldrb	r3, [r7, #7]
 8004cdc:	7153      	strb	r3, [r2, #5]
		packet_state = LENGTH2;
 8004cde:	4b4c      	ldr	r3, [pc, #304]	; (8004e10 <packet_handler+0x21c>)
 8004ce0:	2206      	movs	r2, #6
 8004ce2:	701a      	strb	r2, [r3, #0]
		break;
 8004ce4:	e090      	b.n	8004e08 <packet_handler+0x214>
	case LENGTH2:
		rx_packet_buffer[PKT_LENGTH_H] = (uint8_t)c;
 8004ce6:	4a4b      	ldr	r2, [pc, #300]	; (8004e14 <packet_handler+0x220>)
 8004ce8:	79fb      	ldrb	r3, [r7, #7]
 8004cea:	7193      	strb	r3, [r2, #6]
		// reassemble length
		rx_packet_payload_bytes = (uint32_t)MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-2;
 8004cec:	4b49      	ldr	r3, [pc, #292]	; (8004e14 <packet_handler+0x220>)
 8004cee:	799b      	ldrb	r3, [r3, #6]
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	4a48      	ldr	r2, [pc, #288]	; (8004e14 <packet_handler+0x220>)
 8004cf4:	7952      	ldrb	r2, [r2, #5]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	3b02      	subs	r3, #2
 8004cfa:	4a47      	ldr	r2, [pc, #284]	; (8004e18 <packet_handler+0x224>)
 8004cfc:	6013      	str	r3, [r2, #0]
		if(rx_packet_payload_bytes<=1024) // validate length
 8004cfe:	4b46      	ldr	r3, [pc, #280]	; (8004e18 <packet_handler+0x224>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d06:	d806      	bhi.n	8004d16 <packet_handler+0x122>
		{
			packet_state = PAYLOAD;
 8004d08:	4b41      	ldr	r3, [pc, #260]	; (8004e10 <packet_handler+0x21c>)
 8004d0a:	2207      	movs	r2, #7
 8004d0c:	701a      	strb	r2, [r3, #0]
			rx_packet_position = PKT_INSTRUCTION;
 8004d0e:	4b43      	ldr	r3, [pc, #268]	; (8004e1c <packet_handler+0x228>)
 8004d10:	2207      	movs	r2, #7
 8004d12:	601a      	str	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 8004d14:	e078      	b.n	8004e08 <packet_handler+0x214>
			packet_state = HEADER1;
 8004d16:	4b3e      	ldr	r3, [pc, #248]	; (8004e10 <packet_handler+0x21c>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	701a      	strb	r2, [r3, #0]
		break;
 8004d1c:	e074      	b.n	8004e08 <packet_handler+0x214>
	case PAYLOAD:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 8004d1e:	4b3f      	ldr	r3, [pc, #252]	; (8004e1c <packet_handler+0x228>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	493c      	ldr	r1, [pc, #240]	; (8004e14 <packet_handler+0x220>)
 8004d24:	79fa      	ldrb	r2, [r7, #7]
 8004d26:	54ca      	strb	r2, [r1, r3]
		++rx_packet_position;
 8004d28:	4b3c      	ldr	r3, [pc, #240]	; (8004e1c <packet_handler+0x228>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	4a3b      	ldr	r2, [pc, #236]	; (8004e1c <packet_handler+0x228>)
 8004d30:	6013      	str	r3, [r2, #0]
		--rx_packet_payload_bytes;
 8004d32:	4b39      	ldr	r3, [pc, #228]	; (8004e18 <packet_handler+0x224>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	4a37      	ldr	r2, [pc, #220]	; (8004e18 <packet_handler+0x224>)
 8004d3a:	6013      	str	r3, [r2, #0]
		if(rx_packet_payload_bytes==0)
 8004d3c:	4b36      	ldr	r3, [pc, #216]	; (8004e18 <packet_handler+0x224>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d160      	bne.n	8004e06 <packet_handler+0x212>
			packet_state = CRC1;
 8004d44:	4b32      	ldr	r3, [pc, #200]	; (8004e10 <packet_handler+0x21c>)
 8004d46:	2208      	movs	r2, #8
 8004d48:	701a      	strb	r2, [r3, #0]
		break;
 8004d4a:	e05c      	b.n	8004e06 <packet_handler+0x212>
	case CRC1:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 8004d4c:	4b33      	ldr	r3, [pc, #204]	; (8004e1c <packet_handler+0x228>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4930      	ldr	r1, [pc, #192]	; (8004e14 <packet_handler+0x220>)
 8004d52:	79fa      	ldrb	r2, [r7, #7]
 8004d54:	54ca      	strb	r2, [r1, r3]
		++rx_packet_position;
 8004d56:	4b31      	ldr	r3, [pc, #196]	; (8004e1c <packet_handler+0x228>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	4a2f      	ldr	r2, [pc, #188]	; (8004e1c <packet_handler+0x228>)
 8004d5e:	6013      	str	r3, [r2, #0]
		packet_state = CRC2;
 8004d60:	4b2b      	ldr	r3, [pc, #172]	; (8004e10 <packet_handler+0x21c>)
 8004d62:	2209      	movs	r2, #9
 8004d64:	701a      	strb	r2, [r3, #0]
		break;
 8004d66:	e04f      	b.n	8004e08 <packet_handler+0x214>
	case CRC2:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 8004d68:	4b2c      	ldr	r3, [pc, #176]	; (8004e1c <packet_handler+0x228>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4929      	ldr	r1, [pc, #164]	; (8004e14 <packet_handler+0x220>)
 8004d6e:	79fa      	ldrb	r2, [r7, #7]
 8004d70:	54ca      	strb	r2, [r1, r3]
		// check CRC
		uint16_t received_crc = (uint16_t)MAKE_SHORT(rx_packet_buffer[rx_packet_position-1],rx_packet_buffer[rx_packet_position]);
 8004d72:	4b2a      	ldr	r3, [pc, #168]	; (8004e1c <packet_handler+0x228>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a27      	ldr	r2, [pc, #156]	; (8004e14 <packet_handler+0x220>)
 8004d78:	5cd3      	ldrb	r3, [r2, r3]
 8004d7a:	021b      	lsls	r3, r3, #8
 8004d7c:	b21a      	sxth	r2, r3
 8004d7e:	4b27      	ldr	r3, [pc, #156]	; (8004e1c <packet_handler+0x228>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	4923      	ldr	r1, [pc, #140]	; (8004e14 <packet_handler+0x220>)
 8004d86:	5ccb      	ldrb	r3, [r1, r3]
 8004d88:	b21b      	sxth	r3, r3
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	b21b      	sxth	r3, r3
 8004d8e:	81fb      	strh	r3, [r7, #14]
		uint16_t calculated_crc = updateCRC(0,rx_packet_buffer,rx_packet_position-1);
 8004d90:	4b22      	ldr	r3, [pc, #136]	; (8004e1c <packet_handler+0x228>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	491d      	ldr	r1, [pc, #116]	; (8004e14 <packet_handler+0x220>)
 8004d9e:	2000      	movs	r0, #0
 8004da0:	f7ff fd26 	bl	80047f0 <updateCRC>
 8004da4:	4603      	mov	r3, r0
 8004da6:	81bb      	strh	r3, [r7, #12]
		if(calculated_crc==received_crc)
 8004da8:	89ba      	ldrh	r2, [r7, #12]
 8004daa:	89fb      	ldrh	r3, [r7, #14]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d10c      	bne.n	8004dca <packet_handler+0x1d6>
		{
			if(rx_packet_buffer[PKT_ID]==regs[REG_ID] || rx_packet_buffer[PKT_ID]==0xFE)
 8004db0:	4b18      	ldr	r3, [pc, #96]	; (8004e14 <packet_handler+0x220>)
 8004db2:	791a      	ldrb	r2, [r3, #4]
 8004db4:	4b1a      	ldr	r3, [pc, #104]	; (8004e20 <packet_handler+0x22c>)
 8004db6:	78db      	ldrb	r3, [r3, #3]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d003      	beq.n	8004dc4 <packet_handler+0x1d0>
 8004dbc:	4b15      	ldr	r3, [pc, #84]	; (8004e14 <packet_handler+0x220>)
 8004dbe:	791b      	ldrb	r3, [r3, #4]
 8004dc0:	2bfe      	cmp	r3, #254	; 0xfe
 8004dc2:	d11a      	bne.n	8004dfa <packet_handler+0x206>
				instruction_handler();
 8004dc4:	f7ff fd8e 	bl	80048e4 <instruction_handler>
 8004dc8:	e017      	b.n	8004dfa <packet_handler+0x206>
		}
		else
		{
			regs[REG_PROTOCOL_CRC_FAIL] = regs[REG_PROTOCOL_CRC_FAIL] + 1;
 8004dca:	4b15      	ldr	r3, [pc, #84]	; (8004e20 <packet_handler+0x22c>)
 8004dcc:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	4b12      	ldr	r3, [pc, #72]	; (8004e20 <packet_handler+0x22c>)
 8004dd6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
			// reply with a status packet with ERR only
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8004dda:	4b12      	ldr	r3, [pc, #72]	; (8004e24 <packet_handler+0x230>)
 8004ddc:	2255      	movs	r2, #85	; 0x55
 8004dde:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_CRC_ERROR; // TODO : Alarm flag to handle here
 8004de0:	4b10      	ldr	r3, [pc, #64]	; (8004e24 <packet_handler+0x230>)
 8004de2:	2203      	movs	r2, #3
 8004de4:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 8004de6:	2002      	movs	r0, #2
 8004de8:	f7ff fd34 	bl	8004854 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8004dec:	4b0e      	ldr	r3, [pc, #56]	; (8004e28 <packet_handler+0x234>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	461a      	mov	r2, r3
 8004df2:	490c      	ldr	r1, [pc, #48]	; (8004e24 <packet_handler+0x230>)
 8004df4:	480d      	ldr	r0, [pc, #52]	; (8004e2c <packet_handler+0x238>)
 8004df6:	f000 f951 	bl	800509c <HAL_Serial_Write>
		}
		packet_state = HEADER1;
 8004dfa:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <packet_handler+0x21c>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	701a      	strb	r2, [r3, #0]
		break;
 8004e00:	e002      	b.n	8004e08 <packet_handler+0x214>
		break;
 8004e02:	bf00      	nop
 8004e04:	e000      	b.n	8004e08 <packet_handler+0x214>
		break;
 8004e06:	bf00      	nop
	}
}
 8004e08:	bf00      	nop
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	20000204 	.word	0x20000204
 8004e14:	20003080 	.word	0x20003080
 8004e18:	200001fc 	.word	0x200001fc
 8004e1c:	200001f8 	.word	0x200001f8
 8004e20:	2000021c 	.word	0x2000021c
 8004e24:	200034cc 	.word	0x200034cc
 8004e28:	20000200 	.word	0x20000200
 8004e2c:	20000568 	.word	0x20000568

08004e30 <HAL_UART_ErrorCallback>:
/// This table has to be filled in the application code
HAL_Serial_Handler * hserial_table[HAL_Serial_Handler_Count] = {0};
uint32_t serial_counter = 0;

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
	static int id = 0;
	for(id=0;id!=serial_counter;++id)
 8004e38:	4b20      	ldr	r3, [pc, #128]	; (8004ebc <HAL_UART_ErrorCallback+0x8c>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	e032      	b.n	8004ea6 <HAL_UART_ErrorCallback+0x76>
	{
		if(hserial_table[id]->huart == huart)
 8004e40:	4b1e      	ldr	r3, [pc, #120]	; (8004ebc <HAL_UART_ErrorCallback+0x8c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a1e      	ldr	r2, [pc, #120]	; (8004ec0 <HAL_UART_ErrorCallback+0x90>)
 8004e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d124      	bne.n	8004e9c <HAL_UART_ErrorCallback+0x6c>
		{
			hserial_table[id]->rx_tail_ptr = hserial_table[id]->rx_circular_buffer;
 8004e52:	4b1a      	ldr	r3, [pc, #104]	; (8004ebc <HAL_UART_ErrorCallback+0x8c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a1a      	ldr	r2, [pc, #104]	; (8004ec0 <HAL_UART_ErrorCallback+0x90>)
 8004e58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e5c:	4b17      	ldr	r3, [pc, #92]	; (8004ebc <HAL_UART_ErrorCallback+0x8c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4917      	ldr	r1, [pc, #92]	; (8004ec0 <HAL_UART_ErrorCallback+0x90>)
 8004e62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e66:	f502 5202 	add.w	r2, r2, #8320	; 0x2080
 8004e6a:	3210      	adds	r2, #16
 8004e6c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004e70:	3310      	adds	r3, #16
 8004e72:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(hserial_table[id]->huart, hserial_table[id]->rx_circular_buffer,size_of_rx_circular_buffer);
 8004e74:	4b11      	ldr	r3, [pc, #68]	; (8004ebc <HAL_UART_ErrorCallback+0x8c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a11      	ldr	r2, [pc, #68]	; (8004ec0 <HAL_UART_ErrorCallback+0x90>)
 8004e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e7e:	6818      	ldr	r0, [r3, #0]
 8004e80:	4b0e      	ldr	r3, [pc, #56]	; (8004ebc <HAL_UART_ErrorCallback+0x8c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a0e      	ldr	r2, [pc, #56]	; (8004ec0 <HAL_UART_ErrorCallback+0x90>)
 8004e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e8a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004e8e:	3310      	adds	r3, #16
 8004e90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e94:	4619      	mov	r1, r3
 8004e96:	f007 ffff 	bl	800ce98 <HAL_UART_Receive_DMA>
		   break;
 8004e9a:	e00b      	b.n	8004eb4 <HAL_UART_ErrorCallback+0x84>
	for(id=0;id!=serial_counter;++id)
 8004e9c:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <HAL_UART_ErrorCallback+0x8c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	4a06      	ldr	r2, [pc, #24]	; (8004ebc <HAL_UART_ErrorCallback+0x8c>)
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <HAL_UART_ErrorCallback+0x8c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a06      	ldr	r2, [pc, #24]	; (8004ec4 <HAL_UART_ErrorCallback+0x94>)
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d1c6      	bne.n	8004e40 <HAL_UART_ErrorCallback+0x10>
		}
	}
}
 8004eb2:	bf00      	nop
 8004eb4:	bf00      	nop
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000210 	.word	0x20000210
 8004ec0:	20000208 	.word	0x20000208
 8004ec4:	2000020c 	.word	0x2000020c

08004ec8 <HAL_Serial_Init>:

void HAL_Serial_Init(UART_HandleTypeDef * huart, HAL_Serial_Handler * hserial)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
	// register this handle
	hserial_table[serial_counter++]=hserial;
 8004ed2:	4b30      	ldr	r3, [pc, #192]	; (8004f94 <HAL_Serial_Init+0xcc>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	1c5a      	adds	r2, r3, #1
 8004ed8:	492e      	ldr	r1, [pc, #184]	; (8004f94 <HAL_Serial_Init+0xcc>)
 8004eda:	600a      	str	r2, [r1, #0]
 8004edc:	492e      	ldr	r1, [pc, #184]	; (8004f98 <HAL_Serial_Init+0xd0>)
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    hserial->huart = huart;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	601a      	str	r2, [r3, #0]

    // reset tx fifo pool buffer
    hserial->tx_head_position = 0;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]
    hserial->tx_tail_position = 0;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004efc:	3308      	adds	r3, #8
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]
	hserial->tx_dma = 0;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004f08:	330c      	adds	r3, #12
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	601a      	str	r2, [r3, #0]

	// reset rx circular buffer
	hserial->rx_tail_ptr = hserial->rx_circular_buffer;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	f503 5202 	add.w	r2, r3, #8320	; 0x2080
 8004f14:	3210      	adds	r2, #16
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004f1c:	3310      	adds	r3, #16
 8004f1e:	601a      	str	r2, [r3, #0]

    // start rx DMA
	HAL_UART_Receive_DMA(hserial->huart, hserial->rx_circular_buffer,size_of_rx_circular_buffer);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004f2a:	3310      	adds	r3, #16
 8004f2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f30:	4619      	mov	r1, r3
 8004f32:	f007 ffb1 	bl	800ce98 <HAL_UART_Receive_DMA>

	// half-duplex
	hserial->half_duplex = false;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004f3c:	3314      	adds	r3, #20
 8004f3e:	2200      	movs	r2, #0
 8004f40:	701a      	strb	r2, [r3, #0]
	hserial->GPIOx_DIR_TX = 0;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004f48:	3318      	adds	r3, #24
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
	hserial->GPIO_Pin_DIR_TX = 0;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004f54:	331c      	adds	r3, #28
 8004f56:	2200      	movs	r2, #0
 8004f58:	801a      	strh	r2, [r3, #0]
	hserial->PinState_DIR_TX = 0;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004f60:	331e      	adds	r3, #30
 8004f62:	2200      	movs	r2, #0
 8004f64:	701a      	strb	r2, [r3, #0]
	hserial->GPIOx_DIR_RX = 0;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004f6c:	3320      	adds	r3, #32
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]
	hserial->GPIO_Pin_DIR_RX = 0;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004f78:	3324      	adds	r3, #36	; 0x24
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	801a      	strh	r2, [r3, #0]
	hserial->PinState_DIR_RX = 0;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004f84:	3326      	adds	r3, #38	; 0x26
 8004f86:	2200      	movs	r2, #0
 8004f88:	701a      	strb	r2, [r3, #0]
}
 8004f8a:	bf00      	nop
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	2000020c 	.word	0x2000020c
 8004f98:	20000208 	.word	0x20000208

08004f9c <HAL_Serial_Available>:
    HAL_GPIO_WritePin(hserial->GPIOx_DIR_TX,hserial->GPIO_Pin_DIR_TX,hserial->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
    HAL_GPIO_WritePin(hserial->GPIOx_DIR_RX,hserial->GPIO_Pin_DIR_RX,hserial->PinState_DIR_RX);
}

int HAL_Serial_Available(HAL_Serial_Handler * hserial)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
    if(hserial->huart == 0)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_Serial_Available+0x14>
        return 0;
 8004fac:	2300      	movs	r3, #0
 8004fae:	e01f      	b.n	8004ff0 <HAL_Serial_Available+0x54>
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004fb6:	3310      	adds	r3, #16
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6812      	ldr	r2, [r2, #0]
 8004fbc:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8004fbe:	6812      	ldr	r2, [r2, #0]
 8004fc0:	6852      	ldr	r2, [r2, #4]
 8004fc2:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 8004fc6:	4413      	add	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]
    uint8_t const * tail = hserial->rx_tail_ptr;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004fd0:	3310      	adds	r3, #16
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	60bb      	str	r3, [r7, #8]
    if( head>=tail )
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d303      	bcc.n	8004fe6 <HAL_Serial_Available+0x4a>
        return head-tail;
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	e004      	b.n	8004ff0 <HAL_Serial_Available+0x54>
    else
        return head-tail+size_of_rx_circular_buffer;
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_Serial_GetChar>:

char HAL_Serial_GetChar(HAL_Serial_Handler * hserial)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
    if(hserial->huart == 0)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_Serial_GetChar+0x14>
        return 0;
 800500c:	2300      	movs	r3, #0
 800500e:	e03f      	b.n	8005090 <HAL_Serial_GetChar+0x94>
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8005016:	3310      	adds	r3, #16
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6812      	ldr	r2, [r2, #0]
 800501c:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800501e:	6812      	ldr	r2, [r2, #0]
 8005020:	6852      	ldr	r2, [r2, #4]
 8005022:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 8005026:	4413      	add	r3, r2
 8005028:	617b      	str	r3, [r7, #20]
    uint8_t const * tail = hserial->rx_tail_ptr;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005030:	3310      	adds	r3, #16
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	613b      	str	r3, [r7, #16]
    if(head!=tail)
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	429a      	cmp	r2, r3
 800503c:	d027      	beq.n	800508e <HAL_Serial_GetChar+0x92>
    {
        char c =  *hserial->rx_tail_ptr++;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005044:	3310      	adds	r3, #16
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	1c51      	adds	r1, r2, #1
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005050:	3310      	adds	r3, #16
 8005052:	6019      	str	r1, [r3, #0]
 8005054:	7813      	ldrb	r3, [r2, #0]
 8005056:	73fb      	strb	r3, [r7, #15]
        if(hserial->rx_tail_ptr>=hserial->rx_circular_buffer + size_of_rx_circular_buffer)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800505e:	3310      	adds	r3, #16
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8005068:	3310      	adds	r3, #16
 800506a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506e:	429a      	cmp	r2, r3
 8005070:	d30b      	bcc.n	800508a <HAL_Serial_GetChar+0x8e>
            hserial->rx_tail_ptr-=size_of_rx_circular_buffer;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005078:	3310      	adds	r3, #16
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f5a3 6200 	sub.w	r2, r3, #2048	; 0x800
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005086:	3310      	adds	r3, #16
 8005088:	601a      	str	r2, [r3, #0]
        return c;
 800508a:	7bfb      	ldrb	r3, [r7, #15]
 800508c:	e000      	b.n	8005090 <HAL_Serial_GetChar+0x94>
    }
    else
        return 0;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	371c      	adds	r7, #28
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_Serial_Write>:
    }
    return counter;
}

int HAL_Serial_Write(HAL_Serial_Handler * hserial, uint8_t const * ptr, int len )
{
 800509c:	b590      	push	{r4, r7, lr}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
    if(hserial->huart == 0)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <HAL_Serial_Write+0x18>
        return 0;
 80050b0:	2300      	movs	r3, #0
 80050b2:	e09a      	b.n	80051ea <HAL_Serial_Write+0x14e>

    // copy user data into the head tx buffer into tx pool, inc tx pool head
    hserial->tx_buffer_pool[hserial->tx_head_position].length = len;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80050ba:	3304      	adds	r3, #4
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	4613      	mov	r3, r2
 80050c4:	019b      	lsls	r3, r3, #6
 80050c6:	4413      	add	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4403      	add	r3, r0
 80050cc:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80050d0:	6019      	str	r1, [r3, #0]
    uint8_t * dst = hserial->tx_buffer_pool[hserial->tx_head_position].data;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80050d8:	3304      	adds	r3, #4
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	4613      	mov	r3, r2
 80050de:	019b      	lsls	r3, r3, #6
 80050e0:	4413      	add	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4413      	add	r3, r2
 80050e8:	3304      	adds	r3, #4
 80050ea:	617b      	str	r3, [r7, #20]
    memcpy(dst,ptr,len);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	461a      	mov	r2, r3
 80050f0:	68b9      	ldr	r1, [r7, #8]
 80050f2:	6978      	ldr	r0, [r7, #20]
 80050f4:	f008 ff94 	bl	800e020 <memcpy>
    hserial->tx_head_position = (hserial->tx_head_position + 1 ) % size_of_tx_pool;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80050fe:	3304      	adds	r3, #4
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3301      	adds	r3, #1
 8005104:	f003 021f 	and.w	r2, r3, #31
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800510e:	3304      	adds	r3, #4
 8005110:	601a      	str	r2, [r3, #0]

    // if no tx dma running, start tx dma
    if(hserial->tx_dma==0)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8005118:	330c      	adds	r3, #12
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d163      	bne.n	80051e8 <HAL_Serial_Write+0x14c>
    {
    	// set tx dma running
        hserial->tx_dma=1;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8005126:	330c      	adds	r3, #12
 8005128:	2201      	movs	r2, #1
 800512a:	601a      	str	r2, [r3, #0]

        // TX = ON
        if(hserial->half_duplex)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005132:	3314      	adds	r3, #20
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d028      	beq.n	800518c <HAL_Serial_Write+0xf0>
        {
        	HAL_GPIO_WritePin(hserial->GPIOx_DIR_TX,hserial->GPIO_Pin_DIR_TX,hserial->PinState_DIR_TX);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005140:	3318      	adds	r3, #24
 8005142:	6818      	ldr	r0, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800514a:	331c      	adds	r3, #28
 800514c:	8819      	ldrh	r1, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005154:	331e      	adds	r3, #30
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	461a      	mov	r2, r3
 800515a:	f004 fb49 	bl	80097f0 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(hserial->GPIOx_DIR_RX,hserial->GPIO_Pin_DIR_RX,hserial->PinState_DIR_RX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005164:	3320      	adds	r3, #32
 8005166:	6818      	ldr	r0, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800516e:	3324      	adds	r3, #36	; 0x24
 8005170:	8819      	ldrh	r1, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005178:	3326      	adds	r3, #38	; 0x26
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	bf0c      	ite	eq
 8005180:	2301      	moveq	r3, #1
 8005182:	2300      	movne	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	461a      	mov	r2, r3
 8005188:	f004 fb32 	bl	80097f0 <HAL_GPIO_WritePin>
        // transmit serial internal tx buffer using DMA if no DMA running
        //HAL_StatusTypeDef result = 0;
        //do
        //{
        	//result =
        	HAL_UART_Transmit_DMA(
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6818      	ldr	r0, [r3, #0]
        			hserial->huart,
					hserial->tx_buffer_pool[hserial->tx_tail_position].data,
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8005196:	3308      	adds	r3, #8
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	4613      	mov	r3, r2
 800519c:	019b      	lsls	r3, r3, #6
 800519e:	4413      	add	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	4413      	add	r3, r2
 80051a6:	1d1c      	adds	r4, r3, #4
					hserial->tx_buffer_pool[hserial->tx_tail_position].length
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80051ae:	3308      	adds	r3, #8
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68f9      	ldr	r1, [r7, #12]
 80051b4:	4613      	mov	r3, r2
 80051b6:	019b      	lsls	r3, r3, #6
 80051b8:	4413      	add	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80051c2:	681b      	ldr	r3, [r3, #0]
        	HAL_UART_Transmit_DMA(
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	461a      	mov	r2, r3
 80051c8:	4621      	mov	r1, r4
 80051ca:	f007 fde5 	bl	800cd98 <HAL_UART_Transmit_DMA>
					);
        //}
        //while(result!=HAL_OK);
        hserial->tx_tail_position = (hserial->tx_tail_position + 1 ) % size_of_tx_pool;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80051d4:	3308      	adds	r3, #8
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3301      	adds	r3, #1
 80051da:	f003 021f 	and.w	r2, r3, #31
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80051e4:	3308      	adds	r3, #8
 80051e6:	601a      	str	r2, [r3, #0]
    }
    else
    {
    	// end of tx dma callback will start next tx dma
    }
    return len;
 80051e8:	687b      	ldr	r3, [r7, #4]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd90      	pop	{r4, r7, pc}
	...

080051f4 <HAL_UART_TxCpltCallback>:
//	HAL_Delay(100);
//
//}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051f4:	b590      	push	{r4, r7, lr}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
    static int id = 0;
    for(id=0;id!=serial_counter;++id)
 80051fc:	4b70      	ldr	r3, [pc, #448]	; (80053c0 <HAL_UART_TxCpltCallback+0x1cc>)
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	e0d0      	b.n	80053a6 <HAL_UART_TxCpltCallback+0x1b2>
    {
        if(hserial_table[id]->huart == huart && hserial_table[id]->tx_dma == 1)
 8005204:	4b6e      	ldr	r3, [pc, #440]	; (80053c0 <HAL_UART_TxCpltCallback+0x1cc>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a6e      	ldr	r2, [pc, #440]	; (80053c4 <HAL_UART_TxCpltCallback+0x1d0>)
 800520a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	429a      	cmp	r2, r3
 8005214:	f040 80c2 	bne.w	800539c <HAL_UART_TxCpltCallback+0x1a8>
 8005218:	4b69      	ldr	r3, [pc, #420]	; (80053c0 <HAL_UART_TxCpltCallback+0x1cc>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a69      	ldr	r2, [pc, #420]	; (80053c4 <HAL_UART_TxCpltCallback+0x1d0>)
 800521e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005222:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8005226:	330c      	adds	r3, #12
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b01      	cmp	r3, #1
 800522c:	f040 80b6 	bne.w	800539c <HAL_UART_TxCpltCallback+0x1a8>
        {
			// tx buffer from pool waiting for transmission ?
			if(hserial_table[id]->tx_head_position!=hserial_table[id]->tx_tail_position)
 8005230:	4b63      	ldr	r3, [pc, #396]	; (80053c0 <HAL_UART_TxCpltCallback+0x1cc>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a63      	ldr	r2, [pc, #396]	; (80053c4 <HAL_UART_TxCpltCallback+0x1d0>)
 8005236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800523a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800523e:	3304      	adds	r3, #4
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	4b5f      	ldr	r3, [pc, #380]	; (80053c0 <HAL_UART_TxCpltCallback+0x1cc>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	495f      	ldr	r1, [pc, #380]	; (80053c4 <HAL_UART_TxCpltCallback+0x1d0>)
 8005248:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800524c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8005250:	3308      	adds	r3, #8
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	429a      	cmp	r2, r3
 8005256:	d04a      	beq.n	80052ee <HAL_UART_TxCpltCallback+0xfa>
		        //HAL_StatusTypeDef result = 0;
		        //do
		        //{
		        	//result =
				 HAL_UART_Transmit_DMA(
		        			hserial_table[id]->huart,
 8005258:	4b59      	ldr	r3, [pc, #356]	; (80053c0 <HAL_UART_TxCpltCallback+0x1cc>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a59      	ldr	r2, [pc, #356]	; (80053c4 <HAL_UART_TxCpltCallback+0x1d0>)
 800525e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				 HAL_UART_Transmit_DMA(
 8005262:	6818      	ldr	r0, [r3, #0]
							hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].data,
 8005264:	4b56      	ldr	r3, [pc, #344]	; (80053c0 <HAL_UART_TxCpltCallback+0x1cc>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a56      	ldr	r2, [pc, #344]	; (80053c4 <HAL_UART_TxCpltCallback+0x1d0>)
 800526a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800526e:	4b54      	ldr	r3, [pc, #336]	; (80053c0 <HAL_UART_TxCpltCallback+0x1cc>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a54      	ldr	r2, [pc, #336]	; (80053c4 <HAL_UART_TxCpltCallback+0x1d0>)
 8005274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005278:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800527c:	3308      	adds	r3, #8
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	4613      	mov	r3, r2
 8005282:	019b      	lsls	r3, r3, #6
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	1d1c      	adds	r4, r3, #4
							hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].length
 800528c:	4b4c      	ldr	r3, [pc, #304]	; (80053c0 <HAL_UART_TxCpltCallback+0x1cc>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a4c      	ldr	r2, [pc, #304]	; (80053c4 <HAL_UART_TxCpltCallback+0x1d0>)
 8005292:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005296:	4b4a      	ldr	r3, [pc, #296]	; (80053c0 <HAL_UART_TxCpltCallback+0x1cc>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a4a      	ldr	r2, [pc, #296]	; (80053c4 <HAL_UART_TxCpltCallback+0x1d0>)
 800529c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a0:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80052a4:	3308      	adds	r3, #8
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	4613      	mov	r3, r2
 80052aa:	019b      	lsls	r3, r3, #6
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80052b6:	681b      	ldr	r3, [r3, #0]
				 HAL_UART_Transmit_DMA(
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	461a      	mov	r2, r3
 80052bc:	4621      	mov	r1, r4
 80052be:	f007 fd6b 	bl	800cd98 <HAL_UART_Transmit_DMA>
							);
		        //}
		        //while(result!=HAL_OK);

				// inc tail
				hserial_table[id]->tx_tail_position = (hserial_table[id]->tx_tail_position + 1 ) % size_of_tx_pool;
 80052c2:	4b3f      	ldr	r3, [pc, #252]	; (80053c0 <HAL_UART_TxCpltCallback+0x1cc>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a3f      	ldr	r2, [pc, #252]	; (80053c4 <HAL_UART_TxCpltCallback+0x1d0>)
 80052c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052cc:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80052d0:	3308      	adds	r3, #8
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	4b3a      	ldr	r3, [pc, #232]	; (80053c0 <HAL_UART_TxCpltCallback+0x1cc>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	493a      	ldr	r1, [pc, #232]	; (80053c4 <HAL_UART_TxCpltCallback+0x1d0>)
 80052dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80052e0:	f002 021f 	and.w	r2, r2, #31
 80052e4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80052e8:	3308      	adds	r3, #8
 80052ea:	601a      	str	r2, [r3, #0]
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_TX,hserial_table[id]->GPIO_Pin_DIR_TX,hserial_table[id]->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_RX,hserial_table[id]->GPIO_Pin_DIR_RX,hserial_table[id]->PinState_DIR_RX);
		        }

			}
           break;
 80052ec:	e063      	b.n	80053b6 <HAL_UART_TxCpltCallback+0x1c2>
				hserial_table[id]->tx_dma = 0;
 80052ee:	4b34      	ldr	r3, [pc, #208]	; (80053c0 <HAL_UART_TxCpltCallback+0x1cc>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a34      	ldr	r2, [pc, #208]	; (80053c4 <HAL_UART_TxCpltCallback+0x1d0>)
 80052f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052f8:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80052fc:	330c      	adds	r3, #12
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]
		        if(hserial_table[id]->half_duplex)
 8005302:	4b2f      	ldr	r3, [pc, #188]	; (80053c0 <HAL_UART_TxCpltCallback+0x1cc>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a2f      	ldr	r2, [pc, #188]	; (80053c4 <HAL_UART_TxCpltCallback+0x1d0>)
 8005308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800530c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005310:	3314      	adds	r3, #20
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d04e      	beq.n	80053b6 <HAL_UART_TxCpltCallback+0x1c2>
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_TX,hserial_table[id]->GPIO_Pin_DIR_TX,hserial_table[id]->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 8005318:	4b29      	ldr	r3, [pc, #164]	; (80053c0 <HAL_UART_TxCpltCallback+0x1cc>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a29      	ldr	r2, [pc, #164]	; (80053c4 <HAL_UART_TxCpltCallback+0x1d0>)
 800531e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005322:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005326:	3318      	adds	r3, #24
 8005328:	6818      	ldr	r0, [r3, #0]
 800532a:	4b25      	ldr	r3, [pc, #148]	; (80053c0 <HAL_UART_TxCpltCallback+0x1cc>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a25      	ldr	r2, [pc, #148]	; (80053c4 <HAL_UART_TxCpltCallback+0x1d0>)
 8005330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005334:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005338:	331c      	adds	r3, #28
 800533a:	8819      	ldrh	r1, [r3, #0]
 800533c:	4b20      	ldr	r3, [pc, #128]	; (80053c0 <HAL_UART_TxCpltCallback+0x1cc>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a20      	ldr	r2, [pc, #128]	; (80053c4 <HAL_UART_TxCpltCallback+0x1d0>)
 8005342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005346:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800534a:	331e      	adds	r3, #30
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	bf0c      	ite	eq
 8005352:	2301      	moveq	r3, #1
 8005354:	2300      	movne	r3, #0
 8005356:	b2db      	uxtb	r3, r3
 8005358:	461a      	mov	r2, r3
 800535a:	f004 fa49 	bl	80097f0 <HAL_GPIO_WritePin>
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_RX,hserial_table[id]->GPIO_Pin_DIR_RX,hserial_table[id]->PinState_DIR_RX);
 800535e:	4b18      	ldr	r3, [pc, #96]	; (80053c0 <HAL_UART_TxCpltCallback+0x1cc>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a18      	ldr	r2, [pc, #96]	; (80053c4 <HAL_UART_TxCpltCallback+0x1d0>)
 8005364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005368:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800536c:	3320      	adds	r3, #32
 800536e:	6818      	ldr	r0, [r3, #0]
 8005370:	4b13      	ldr	r3, [pc, #76]	; (80053c0 <HAL_UART_TxCpltCallback+0x1cc>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a13      	ldr	r2, [pc, #76]	; (80053c4 <HAL_UART_TxCpltCallback+0x1d0>)
 8005376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800537a:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800537e:	3324      	adds	r3, #36	; 0x24
 8005380:	8819      	ldrh	r1, [r3, #0]
 8005382:	4b0f      	ldr	r3, [pc, #60]	; (80053c0 <HAL_UART_TxCpltCallback+0x1cc>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a0f      	ldr	r2, [pc, #60]	; (80053c4 <HAL_UART_TxCpltCallback+0x1d0>)
 8005388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800538c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8005390:	3326      	adds	r3, #38	; 0x26
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	461a      	mov	r2, r3
 8005396:	f004 fa2b 	bl	80097f0 <HAL_GPIO_WritePin>
           break;
 800539a:	e00c      	b.n	80053b6 <HAL_UART_TxCpltCallback+0x1c2>
    for(id=0;id!=serial_counter;++id)
 800539c:	4b08      	ldr	r3, [pc, #32]	; (80053c0 <HAL_UART_TxCpltCallback+0x1cc>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3301      	adds	r3, #1
 80053a2:	4a07      	ldr	r2, [pc, #28]	; (80053c0 <HAL_UART_TxCpltCallback+0x1cc>)
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	4b06      	ldr	r3, [pc, #24]	; (80053c0 <HAL_UART_TxCpltCallback+0x1cc>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a07      	ldr	r2, [pc, #28]	; (80053c8 <HAL_UART_TxCpltCallback+0x1d4>)
 80053ac:	6812      	ldr	r2, [r2, #0]
 80053ae:	4293      	cmp	r3, r2
 80053b0:	f47f af28 	bne.w	8005204 <HAL_UART_TxCpltCallback+0x10>
        }
    }
}
 80053b4:	e000      	b.n	80053b8 <HAL_UART_TxCpltCallback+0x1c4>
           break;
 80053b6:	bf00      	nop
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd90      	pop	{r4, r7, pc}
 80053c0:	20000214 	.word	0x20000214
 80053c4:	20000208 	.word	0x20000208
 80053c8:	2000020c 	.word	0x2000020c

080053cc <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
	int div = 1;
 80053d8:	2301      	movs	r3, #1
 80053da:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80053dc:	e004      	b.n	80053e8 <ts_itoa+0x1c>
		div *= base;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	fb02 f303 	mul.w	r3, r2, r3
 80053e6:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d2f3      	bcs.n	80053de <ts_itoa+0x12>

	while (div != 0)
 80053f6:	e029      	b.n	800544c <ts_itoa+0x80>
	{
		int num = d/div;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005400:	613b      	str	r3, [r7, #16]
		d = d%div;
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	fbb3 f1f2 	udiv	r1, r3, r2
 800540a:	fb02 f201 	mul.w	r2, r2, r1
 800540e:	1a9b      	subs	r3, r3, r2
 8005410:	60bb      	str	r3, [r7, #8]
		div /= base;
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	fb92 f3f3 	sdiv	r3, r2, r3
 800541a:	617b      	str	r3, [r7, #20]
		if (num > 9)
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	2b09      	cmp	r3, #9
 8005420:	dd0a      	ble.n	8005438 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	b2da      	uxtb	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	1c58      	adds	r0, r3, #1
 800542c:	68f9      	ldr	r1, [r7, #12]
 800542e:	6008      	str	r0, [r1, #0]
 8005430:	3237      	adds	r2, #55	; 0x37
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	701a      	strb	r2, [r3, #0]
 8005436:	e009      	b.n	800544c <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	b2da      	uxtb	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	1c58      	adds	r0, r3, #1
 8005442:	68f9      	ldr	r1, [r7, #12]
 8005444:	6008      	str	r0, [r1, #0]
 8005446:	3230      	adds	r2, #48	; 0x30
 8005448:	b2d2      	uxtb	r2, r2
 800544a:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1d2      	bne.n	80053f8 <ts_itoa+0x2c>
	}
}
 8005452:	bf00      	nop
 8005454:	bf00      	nop
 8005456:	371c      	adds	r7, #28
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8005470:	e0bc      	b.n	80055ec <ts_formatstring+0x18c>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	2b25      	cmp	r3, #37	; 0x25
 8005478:	f040 80b0 	bne.w	80055dc <ts_formatstring+0x17c>
		{
			switch (*(++fmt))
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	3301      	adds	r3, #1
 8005480:	60bb      	str	r3, [r7, #8]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b25      	cmp	r3, #37	; 0x25
 8005488:	f000 809e 	beq.w	80055c8 <ts_formatstring+0x168>
 800548c:	2b25      	cmp	r3, #37	; 0x25
 800548e:	f2c0 80a1 	blt.w	80055d4 <ts_formatstring+0x174>
 8005492:	2b78      	cmp	r3, #120	; 0x78
 8005494:	f300 809e 	bgt.w	80055d4 <ts_formatstring+0x174>
 8005498:	2b58      	cmp	r3, #88	; 0x58
 800549a:	f2c0 809b 	blt.w	80055d4 <ts_formatstring+0x174>
 800549e:	3b58      	subs	r3, #88	; 0x58
 80054a0:	2b20      	cmp	r3, #32
 80054a2:	f200 8097 	bhi.w	80055d4 <ts_formatstring+0x174>
 80054a6:	a201      	add	r2, pc, #4	; (adr r2, 80054ac <ts_formatstring+0x4c>)
 80054a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ac:	080055b1 	.word	0x080055b1
 80054b0:	080055d5 	.word	0x080055d5
 80054b4:	080055d5 	.word	0x080055d5
 80054b8:	080055d5 	.word	0x080055d5
 80054bc:	080055d5 	.word	0x080055d5
 80054c0:	080055d5 	.word	0x080055d5
 80054c4:	080055d5 	.word	0x080055d5
 80054c8:	080055d5 	.word	0x080055d5
 80054cc:	080055d5 	.word	0x080055d5
 80054d0:	080055d5 	.word	0x080055d5
 80054d4:	080055d5 	.word	0x080055d5
 80054d8:	08005531 	.word	0x08005531
 80054dc:	08005545 	.word	0x08005545
 80054e0:	080055d5 	.word	0x080055d5
 80054e4:	080055d5 	.word	0x080055d5
 80054e8:	080055d5 	.word	0x080055d5
 80054ec:	080055d5 	.word	0x080055d5
 80054f0:	08005545 	.word	0x08005545
 80054f4:	080055d5 	.word	0x080055d5
 80054f8:	080055d5 	.word	0x080055d5
 80054fc:	080055d5 	.word	0x080055d5
 8005500:	080055d5 	.word	0x080055d5
 8005504:	080055d5 	.word	0x080055d5
 8005508:	080055d5 	.word	0x080055d5
 800550c:	080055d5 	.word	0x080055d5
 8005510:	080055d5 	.word	0x080055d5
 8005514:	080055d5 	.word	0x080055d5
 8005518:	08005575 	.word	0x08005575
 800551c:	080055d5 	.word	0x080055d5
 8005520:	0800559b 	.word	0x0800559b
 8005524:	080055d5 	.word	0x080055d5
 8005528:	080055d5 	.word	0x080055d5
 800552c:	080055b1 	.word	0x080055b1
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	1d1a      	adds	r2, r3, #4
 8005534:	607a      	str	r2, [r7, #4]
 8005536:	6819      	ldr	r1, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	60fa      	str	r2, [r7, #12]
 800553e:	b2ca      	uxtb	r2, r1
 8005540:	701a      	strb	r2, [r3, #0]
				break;
 8005542:	e047      	b.n	80055d4 <ts_formatstring+0x174>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	1d1a      	adds	r2, r3, #4
 8005548:	607a      	str	r2, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	2b00      	cmp	r3, #0
 8005552:	da07      	bge.n	8005564 <ts_formatstring+0x104>
					{
						val *= -1;
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	425b      	negs	r3, r3
 8005558:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	60fa      	str	r2, [r7, #12]
 8005560:	222d      	movs	r2, #45	; 0x2d
 8005562:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8005564:	69f9      	ldr	r1, [r7, #28]
 8005566:	f107 030c 	add.w	r3, r7, #12
 800556a:	220a      	movs	r2, #10
 800556c:	4618      	mov	r0, r3
 800556e:	f7ff ff2d 	bl	80053cc <ts_itoa>
				}
				break;
 8005572:	e02f      	b.n	80055d4 <ts_formatstring+0x174>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	1d1a      	adds	r2, r3, #4
 8005578:	607a      	str	r2, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	61bb      	str	r3, [r7, #24]
					while (*arg)
 800557e:	e007      	b.n	8005590 <ts_formatstring+0x130>
					{
						*buf++ = *arg++;
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	1c53      	adds	r3, r2, #1
 8005584:	61bb      	str	r3, [r7, #24]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	1c59      	adds	r1, r3, #1
 800558a:	60f9      	str	r1, [r7, #12]
 800558c:	7812      	ldrb	r2, [r2, #0]
 800558e:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1f3      	bne.n	8005580 <ts_formatstring+0x120>
					}
				}
				break;
 8005598:	e01c      	b.n	80055d4 <ts_formatstring+0x174>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	1d1a      	adds	r2, r3, #4
 800559e:	607a      	str	r2, [r7, #4]
 80055a0:	6819      	ldr	r1, [r3, #0]
 80055a2:	f107 030c 	add.w	r3, r7, #12
 80055a6:	220a      	movs	r2, #10
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff ff0f 	bl	80053cc <ts_itoa>
				break;
 80055ae:	e011      	b.n	80055d4 <ts_formatstring+0x174>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	1d1a      	adds	r2, r3, #4
 80055b4:	607a      	str	r2, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4619      	mov	r1, r3
 80055ba:	f107 030c 	add.w	r3, r7, #12
 80055be:	2210      	movs	r2, #16
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff ff03 	bl	80053cc <ts_itoa>
				break;
 80055c6:	e005      	b.n	80055d4 <ts_formatstring+0x174>
			  case '%':
				  *buf++ = '%';
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	60fa      	str	r2, [r7, #12]
 80055ce:	2225      	movs	r2, #37	; 0x25
 80055d0:	701a      	strb	r2, [r3, #0]
				  break;
 80055d2:	bf00      	nop
			}
			fmt++;
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	3301      	adds	r3, #1
 80055d8:	60bb      	str	r3, [r7, #8]
 80055da:	e007      	b.n	80055ec <ts_formatstring+0x18c>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	1c53      	adds	r3, r2, #1
 80055e0:	60bb      	str	r3, [r7, #8]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	1c59      	adds	r1, r3, #1
 80055e6:	60f9      	str	r1, [r7, #12]
 80055e8:	7812      	ldrb	r2, [r2, #0]
 80055ea:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f47f af3e 	bne.w	8005472 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	1ad3      	subs	r3, r2, r3
}
 8005602:	4618      	mov	r0, r3
 8005604:	3720      	adds	r7, #32
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop

0800560c <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
	int length = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 800561a:	e080      	b.n	800571e <ts_formatlength+0x112>
	{
		if (*fmt == '%')
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b25      	cmp	r3, #37	; 0x25
 8005622:	d176      	bne.n	8005712 <ts_formatlength+0x106>
		{
			++fmt;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3301      	adds	r3, #1
 8005628:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	3b58      	subs	r3, #88	; 0x58
 8005630:	2b20      	cmp	r3, #32
 8005632:	d86a      	bhi.n	800570a <ts_formatlength+0xfe>
 8005634:	a201      	add	r2, pc, #4	; (adr r2, 800563c <ts_formatlength+0x30>)
 8005636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563a:	bf00      	nop
 800563c:	080056fd 	.word	0x080056fd
 8005640:	0800570b 	.word	0x0800570b
 8005644:	0800570b 	.word	0x0800570b
 8005648:	0800570b 	.word	0x0800570b
 800564c:	0800570b 	.word	0x0800570b
 8005650:	0800570b 	.word	0x0800570b
 8005654:	0800570b 	.word	0x0800570b
 8005658:	0800570b 	.word	0x0800570b
 800565c:	0800570b 	.word	0x0800570b
 8005660:	0800570b 	.word	0x0800570b
 8005664:	0800570b 	.word	0x0800570b
 8005668:	080056c1 	.word	0x080056c1
 800566c:	080056cf 	.word	0x080056cf
 8005670:	0800570b 	.word	0x0800570b
 8005674:	0800570b 	.word	0x0800570b
 8005678:	0800570b 	.word	0x0800570b
 800567c:	0800570b 	.word	0x0800570b
 8005680:	080056cf 	.word	0x080056cf
 8005684:	0800570b 	.word	0x0800570b
 8005688:	0800570b 	.word	0x0800570b
 800568c:	0800570b 	.word	0x0800570b
 8005690:	0800570b 	.word	0x0800570b
 8005694:	0800570b 	.word	0x0800570b
 8005698:	0800570b 	.word	0x0800570b
 800569c:	0800570b 	.word	0x0800570b
 80056a0:	0800570b 	.word	0x0800570b
 80056a4:	0800570b 	.word	0x0800570b
 80056a8:	080056dd 	.word	0x080056dd
 80056ac:	0800570b 	.word	0x0800570b
 80056b0:	080056cf 	.word	0x080056cf
 80056b4:	0800570b 	.word	0x0800570b
 80056b8:	0800570b 	.word	0x0800570b
 80056bc:	080056fd 	.word	0x080056fd
			{
			  case 'c':
		  		  va_arg(va, int);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	3304      	adds	r3, #4
 80056c4:	603b      	str	r3, [r7, #0]
				  ++length;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	3301      	adds	r3, #1
 80056ca:	60fb      	str	r3, [r7, #12]
				  break;
 80056cc:	e024      	b.n	8005718 <ts_formatlength+0x10c>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	330b      	adds	r3, #11
 80056d2:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	3304      	adds	r3, #4
 80056d8:	603b      	str	r3, [r7, #0]
				  break;
 80056da:	e01d      	b.n	8005718 <ts_formatlength+0x10c>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	1d1a      	adds	r2, r3, #4
 80056e0:	603a      	str	r2, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 80056e6:	e002      	b.n	80056ee <ts_formatlength+0xe2>
			  			  ++length;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	3301      	adds	r3, #1
 80056ec:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	60ba      	str	r2, [r7, #8]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1f6      	bne.n	80056e8 <ts_formatlength+0xdc>
			  	  }
				  break;
 80056fa:	e00d      	b.n	8005718 <ts_formatlength+0x10c>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3308      	adds	r3, #8
 8005700:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	3304      	adds	r3, #4
 8005706:	603b      	str	r3, [r7, #0]
				  break;
 8005708:	e006      	b.n	8005718 <ts_formatlength+0x10c>
			  default:
				  ++length;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	3301      	adds	r3, #1
 800570e:	60fb      	str	r3, [r7, #12]
				  break;
 8005710:	e002      	b.n	8005718 <ts_formatlength+0x10c>
			}
		}
		else
		{
			++length;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3301      	adds	r3, #1
 8005716:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3301      	adds	r3, #1
 800571c:	607b      	str	r3, [r7, #4]
	while (*fmt)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	f47f af7a 	bne.w	800561c <ts_formatlength+0x10>
	}
	return length;
 8005728:	68fb      	ldr	r3, [r7, #12]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop

08005738 <HAL_Serial_Print>:

int HAL_Serial_Print(HAL_Serial_Handler * hserial,const char *fmt, ...)
{
 8005738:	b40e      	push	{r1, r2, r3}
 800573a:	b5b0      	push	{r4, r5, r7, lr}
 800573c:	b087      	sub	sp, #28
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
	int length = 0;
 8005742:	2300      	movs	r3, #0
 8005744:	617b      	str	r3, [r7, #20]
	va_list va;
	va_start(va, fmt);
 8005746:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800574a:	60bb      	str	r3, [r7, #8]
	length = ts_formatlength(fmt, va);
 800574c:	68b9      	ldr	r1, [r7, #8]
 800574e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005750:	f7ff ff5c 	bl	800560c <ts_formatlength>
 8005754:	6178      	str	r0, [r7, #20]
	va_end(va);
	{
 8005756:	466b      	mov	r3, sp
 8005758:	461d      	mov	r5, r3
		char buf[length];
 800575a:	697c      	ldr	r4, [r7, #20]
 800575c:	1e63      	subs	r3, r4, #1
 800575e:	613b      	str	r3, [r7, #16]
 8005760:	4623      	mov	r3, r4
 8005762:	4618      	mov	r0, r3
 8005764:	f04f 0100 	mov.w	r1, #0
 8005768:	f04f 0200 	mov.w	r2, #0
 800576c:	f04f 0300 	mov.w	r3, #0
 8005770:	00cb      	lsls	r3, r1, #3
 8005772:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005776:	00c2      	lsls	r2, r0, #3
 8005778:	4623      	mov	r3, r4
 800577a:	4618      	mov	r0, r3
 800577c:	f04f 0100 	mov.w	r1, #0
 8005780:	f04f 0200 	mov.w	r2, #0
 8005784:	f04f 0300 	mov.w	r3, #0
 8005788:	00cb      	lsls	r3, r1, #3
 800578a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800578e:	00c2      	lsls	r2, r0, #3
 8005790:	4623      	mov	r3, r4
 8005792:	3307      	adds	r3, #7
 8005794:	08db      	lsrs	r3, r3, #3
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	ebad 0d03 	sub.w	sp, sp, r3
 800579c:	466b      	mov	r3, sp
 800579e:	3300      	adds	r3, #0
 80057a0:	60fb      	str	r3, [r7, #12]
		va_start(va, fmt);
 80057a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057a6:	60bb      	str	r3, [r7, #8]
		length = ts_formatstring(buf, fmt, va);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7ff fe56 	bl	8005460 <ts_formatstring>
 80057b4:	6178      	str	r0, [r7, #20]
		length = HAL_Serial_Write(hserial, (uint8_t*)buf, length);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	4619      	mov	r1, r3
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f7ff fc6d 	bl	800509c <HAL_Serial_Write>
 80057c2:	6178      	str	r0, [r7, #20]
 80057c4:	46ad      	mov	sp, r5
		va_end(va);
	}
	return length;
 80057c6:	697b      	ldr	r3, [r7, #20]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	371c      	adds	r7, #28
 80057cc:	46bd      	mov	sp, r7
 80057ce:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80057d2:	b003      	add	sp, #12
 80057d4:	4770      	bx	lr
	...

080057d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057de:	4b0f      	ldr	r3, [pc, #60]	; (800581c <HAL_MspInit+0x44>)
 80057e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057e2:	4a0e      	ldr	r2, [pc, #56]	; (800581c <HAL_MspInit+0x44>)
 80057e4:	f043 0301 	orr.w	r3, r3, #1
 80057e8:	6613      	str	r3, [r2, #96]	; 0x60
 80057ea:	4b0c      	ldr	r3, [pc, #48]	; (800581c <HAL_MspInit+0x44>)
 80057ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	607b      	str	r3, [r7, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057f6:	4b09      	ldr	r3, [pc, #36]	; (800581c <HAL_MspInit+0x44>)
 80057f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fa:	4a08      	ldr	r2, [pc, #32]	; (800581c <HAL_MspInit+0x44>)
 80057fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005800:	6593      	str	r3, [r2, #88]	; 0x58
 8005802:	4b06      	ldr	r3, [pc, #24]	; (800581c <HAL_MspInit+0x44>)
 8005804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800580a:	603b      	str	r3, [r7, #0]
 800580c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800580e:	f004 f9ad 	bl	8009b6c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005812:	bf00      	nop
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	40021000 	.word	0x40021000

08005820 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08c      	sub	sp, #48	; 0x30
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005828:	f107 031c 	add.w	r3, r7, #28
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	605a      	str	r2, [r3, #4]
 8005832:	609a      	str	r2, [r3, #8]
 8005834:	60da      	str	r2, [r3, #12]
 8005836:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005840:	d17a      	bne.n	8005938 <HAL_ADC_MspInit+0x118>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005842:	4b66      	ldr	r3, [pc, #408]	; (80059dc <HAL_ADC_MspInit+0x1bc>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3301      	adds	r3, #1
 8005848:	4a64      	ldr	r2, [pc, #400]	; (80059dc <HAL_ADC_MspInit+0x1bc>)
 800584a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800584c:	4b63      	ldr	r3, [pc, #396]	; (80059dc <HAL_ADC_MspInit+0x1bc>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d10b      	bne.n	800586c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005854:	4b62      	ldr	r3, [pc, #392]	; (80059e0 <HAL_ADC_MspInit+0x1c0>)
 8005856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005858:	4a61      	ldr	r2, [pc, #388]	; (80059e0 <HAL_ADC_MspInit+0x1c0>)
 800585a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800585e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005860:	4b5f      	ldr	r3, [pc, #380]	; (80059e0 <HAL_ADC_MspInit+0x1c0>)
 8005862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005864:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005868:	61bb      	str	r3, [r7, #24]
 800586a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800586c:	4b5c      	ldr	r3, [pc, #368]	; (80059e0 <HAL_ADC_MspInit+0x1c0>)
 800586e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005870:	4a5b      	ldr	r2, [pc, #364]	; (80059e0 <HAL_ADC_MspInit+0x1c0>)
 8005872:	f043 0301 	orr.w	r3, r3, #1
 8005876:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005878:	4b59      	ldr	r3, [pc, #356]	; (80059e0 <HAL_ADC_MspInit+0x1c0>)
 800587a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	617b      	str	r3, [r7, #20]
 8005882:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005884:	4b56      	ldr	r3, [pc, #344]	; (80059e0 <HAL_ADC_MspInit+0x1c0>)
 8005886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005888:	4a55      	ldr	r2, [pc, #340]	; (80059e0 <HAL_ADC_MspInit+0x1c0>)
 800588a:	f043 0302 	orr.w	r3, r3, #2
 800588e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005890:	4b53      	ldr	r3, [pc, #332]	; (80059e0 <HAL_ADC_MspInit+0x1c0>)
 8005892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800589c:	2301      	movs	r3, #1
 800589e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80058a0:	2303      	movs	r3, #3
 80058a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058a4:	2300      	movs	r3, #0
 80058a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058a8:	f107 031c 	add.w	r3, r7, #28
 80058ac:	4619      	mov	r1, r3
 80058ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058b2:	f003 fe1b 	bl	80094ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80058b6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80058ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80058bc:	2303      	movs	r3, #3
 80058be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058c0:	2300      	movs	r3, #0
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058c4:	f107 031c 	add.w	r3, r7, #28
 80058c8:	4619      	mov	r1, r3
 80058ca:	4846      	ldr	r0, [pc, #280]	; (80059e4 <HAL_ADC_MspInit+0x1c4>)
 80058cc:	f003 fe0e 	bl	80094ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 80058d0:	4b45      	ldr	r3, [pc, #276]	; (80059e8 <HAL_ADC_MspInit+0x1c8>)
 80058d2:	4a46      	ldr	r2, [pc, #280]	; (80059ec <HAL_ADC_MspInit+0x1cc>)
 80058d4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80058d6:	4b44      	ldr	r3, [pc, #272]	; (80059e8 <HAL_ADC_MspInit+0x1c8>)
 80058d8:	2205      	movs	r2, #5
 80058da:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80058dc:	4b42      	ldr	r3, [pc, #264]	; (80059e8 <HAL_ADC_MspInit+0x1c8>)
 80058de:	2200      	movs	r2, #0
 80058e0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80058e2:	4b41      	ldr	r3, [pc, #260]	; (80059e8 <HAL_ADC_MspInit+0x1c8>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80058e8:	4b3f      	ldr	r3, [pc, #252]	; (80059e8 <HAL_ADC_MspInit+0x1c8>)
 80058ea:	2280      	movs	r2, #128	; 0x80
 80058ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80058ee:	4b3e      	ldr	r3, [pc, #248]	; (80059e8 <HAL_ADC_MspInit+0x1c8>)
 80058f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80058f6:	4b3c      	ldr	r3, [pc, #240]	; (80059e8 <HAL_ADC_MspInit+0x1c8>)
 80058f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80058fe:	4b3a      	ldr	r3, [pc, #232]	; (80059e8 <HAL_ADC_MspInit+0x1c8>)
 8005900:	2220      	movs	r2, #32
 8005902:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005904:	4b38      	ldr	r3, [pc, #224]	; (80059e8 <HAL_ADC_MspInit+0x1c8>)
 8005906:	2200      	movs	r2, #0
 8005908:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800590a:	4837      	ldr	r0, [pc, #220]	; (80059e8 <HAL_ADC_MspInit+0x1c8>)
 800590c:	f002 fba0 	bl	8008050 <HAL_DMA_Init>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8005916:	f7fe fc5d 	bl	80041d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a32      	ldr	r2, [pc, #200]	; (80059e8 <HAL_ADC_MspInit+0x1c8>)
 800591e:	655a      	str	r2, [r3, #84]	; 0x54
 8005920:	4a31      	ldr	r2, [pc, #196]	; (80059e8 <HAL_ADC_MspInit+0x1c8>)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8005926:	2200      	movs	r2, #0
 8005928:	2100      	movs	r1, #0
 800592a:	2012      	movs	r0, #18
 800592c:	f002 fb57 	bl	8007fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005930:	2012      	movs	r0, #18
 8005932:	f002 fb6e 	bl	8008012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005936:	e04c      	b.n	80059d2 <HAL_ADC_MspInit+0x1b2>
  else if(hadc->Instance==ADC2)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a2c      	ldr	r2, [pc, #176]	; (80059f0 <HAL_ADC_MspInit+0x1d0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d147      	bne.n	80059d2 <HAL_ADC_MspInit+0x1b2>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005942:	4b26      	ldr	r3, [pc, #152]	; (80059dc <HAL_ADC_MspInit+0x1bc>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3301      	adds	r3, #1
 8005948:	4a24      	ldr	r2, [pc, #144]	; (80059dc <HAL_ADC_MspInit+0x1bc>)
 800594a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800594c:	4b23      	ldr	r3, [pc, #140]	; (80059dc <HAL_ADC_MspInit+0x1bc>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d10b      	bne.n	800596c <HAL_ADC_MspInit+0x14c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005954:	4b22      	ldr	r3, [pc, #136]	; (80059e0 <HAL_ADC_MspInit+0x1c0>)
 8005956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005958:	4a21      	ldr	r2, [pc, #132]	; (80059e0 <HAL_ADC_MspInit+0x1c0>)
 800595a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800595e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005960:	4b1f      	ldr	r3, [pc, #124]	; (80059e0 <HAL_ADC_MspInit+0x1c0>)
 8005962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005964:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005968:	60fb      	str	r3, [r7, #12]
 800596a:	68fb      	ldr	r3, [r7, #12]
    hdma_adc2.Instance = DMA1_Channel4;
 800596c:	4b21      	ldr	r3, [pc, #132]	; (80059f4 <HAL_ADC_MspInit+0x1d4>)
 800596e:	4a22      	ldr	r2, [pc, #136]	; (80059f8 <HAL_ADC_MspInit+0x1d8>)
 8005970:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8005972:	4b20      	ldr	r3, [pc, #128]	; (80059f4 <HAL_ADC_MspInit+0x1d4>)
 8005974:	2224      	movs	r2, #36	; 0x24
 8005976:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005978:	4b1e      	ldr	r3, [pc, #120]	; (80059f4 <HAL_ADC_MspInit+0x1d4>)
 800597a:	2200      	movs	r2, #0
 800597c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800597e:	4b1d      	ldr	r3, [pc, #116]	; (80059f4 <HAL_ADC_MspInit+0x1d4>)
 8005980:	2200      	movs	r2, #0
 8005982:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005984:	4b1b      	ldr	r3, [pc, #108]	; (80059f4 <HAL_ADC_MspInit+0x1d4>)
 8005986:	2280      	movs	r2, #128	; 0x80
 8005988:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800598a:	4b1a      	ldr	r3, [pc, #104]	; (80059f4 <HAL_ADC_MspInit+0x1d4>)
 800598c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005990:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005992:	4b18      	ldr	r3, [pc, #96]	; (80059f4 <HAL_ADC_MspInit+0x1d4>)
 8005994:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005998:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800599a:	4b16      	ldr	r3, [pc, #88]	; (80059f4 <HAL_ADC_MspInit+0x1d4>)
 800599c:	2220      	movs	r2, #32
 800599e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80059a0:	4b14      	ldr	r3, [pc, #80]	; (80059f4 <HAL_ADC_MspInit+0x1d4>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80059a6:	4813      	ldr	r0, [pc, #76]	; (80059f4 <HAL_ADC_MspInit+0x1d4>)
 80059a8:	f002 fb52 	bl	8008050 <HAL_DMA_Init>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <HAL_ADC_MspInit+0x196>
      Error_Handler();
 80059b2:	f7fe fc0f 	bl	80041d4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a0e      	ldr	r2, [pc, #56]	; (80059f4 <HAL_ADC_MspInit+0x1d4>)
 80059ba:	655a      	str	r2, [r3, #84]	; 0x54
 80059bc:	4a0d      	ldr	r2, [pc, #52]	; (80059f4 <HAL_ADC_MspInit+0x1d4>)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80059c2:	2200      	movs	r2, #0
 80059c4:	2100      	movs	r1, #0
 80059c6:	2012      	movs	r0, #18
 80059c8:	f002 fb09 	bl	8007fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80059cc:	2012      	movs	r0, #18
 80059ce:	f002 fb20 	bl	8008012 <HAL_NVIC_EnableIRQ>
}
 80059d2:	bf00      	nop
 80059d4:	3730      	adds	r7, #48	; 0x30
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	20000218 	.word	0x20000218
 80059e0:	40021000 	.word	0x40021000
 80059e4:	48000400 	.word	0x48000400
 80059e8:	20002e10 	.word	0x20002e10
 80059ec:	40020030 	.word	0x40020030
 80059f0:	50000100 	.word	0x50000100
 80059f4:	20003020 	.word	0x20003020
 80059f8:	40020044 	.word	0x40020044

080059fc <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a0d      	ldr	r2, [pc, #52]	; (8005a40 <HAL_CORDIC_MspInit+0x44>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d113      	bne.n	8005a36 <HAL_CORDIC_MspInit+0x3a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8005a0e:	4b0d      	ldr	r3, [pc, #52]	; (8005a44 <HAL_CORDIC_MspInit+0x48>)
 8005a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a12:	4a0c      	ldr	r2, [pc, #48]	; (8005a44 <HAL_CORDIC_MspInit+0x48>)
 8005a14:	f043 0308 	orr.w	r3, r3, #8
 8005a18:	6493      	str	r3, [r2, #72]	; 0x48
 8005a1a:	4b0a      	ldr	r3, [pc, #40]	; (8005a44 <HAL_CORDIC_MspInit+0x48>)
 8005a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	68fb      	ldr	r3, [r7, #12]
    /* CORDIC interrupt Init */
    HAL_NVIC_SetPriority(CORDIC_IRQn, 0, 0);
 8005a26:	2200      	movs	r2, #0
 8005a28:	2100      	movs	r1, #0
 8005a2a:	2064      	movs	r0, #100	; 0x64
 8005a2c:	f002 fad7 	bl	8007fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CORDIC_IRQn);
 8005a30:	2064      	movs	r0, #100	; 0x64
 8005a32:	f002 faee 	bl	8008012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8005a36:	bf00      	nop
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	40020c00 	.word	0x40020c00
 8005a44:	40021000 	.word	0x40021000

08005a48 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08a      	sub	sp, #40	; 0x28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a50:	f107 0314 	add.w	r3, r7, #20
 8005a54:	2200      	movs	r2, #0
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	605a      	str	r2, [r3, #4]
 8005a5a:	609a      	str	r2, [r3, #8]
 8005a5c:	60da      	str	r2, [r3, #12]
 8005a5e:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a26      	ldr	r2, [pc, #152]	; (8005b00 <HAL_FDCAN_MspInit+0xb8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d146      	bne.n	8005af8 <HAL_FDCAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8005a6a:	4b26      	ldr	r3, [pc, #152]	; (8005b04 <HAL_FDCAN_MspInit+0xbc>)
 8005a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a6e:	4a25      	ldr	r2, [pc, #148]	; (8005b04 <HAL_FDCAN_MspInit+0xbc>)
 8005a70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005a74:	6593      	str	r3, [r2, #88]	; 0x58
 8005a76:	4b23      	ldr	r3, [pc, #140]	; (8005b04 <HAL_FDCAN_MspInit+0xbc>)
 8005a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7e:	613b      	str	r3, [r7, #16]
 8005a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a82:	4b20      	ldr	r3, [pc, #128]	; (8005b04 <HAL_FDCAN_MspInit+0xbc>)
 8005a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a86:	4a1f      	ldr	r2, [pc, #124]	; (8005b04 <HAL_FDCAN_MspInit+0xbc>)
 8005a88:	f043 0301 	orr.w	r3, r3, #1
 8005a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a8e:	4b1d      	ldr	r3, [pc, #116]	; (8005b04 <HAL_FDCAN_MspInit+0xbc>)
 8005a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a9a:	4b1a      	ldr	r3, [pc, #104]	; (8005b04 <HAL_FDCAN_MspInit+0xbc>)
 8005a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a9e:	4a19      	ldr	r2, [pc, #100]	; (8005b04 <HAL_FDCAN_MspInit+0xbc>)
 8005aa0:	f043 0302 	orr.w	r3, r3, #2
 8005aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005aa6:	4b17      	ldr	r3, [pc, #92]	; (8005b04 <HAL_FDCAN_MspInit+0xbc>)
 8005aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	60bb      	str	r3, [r7, #8]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005ab2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ab8:	2302      	movs	r3, #2
 8005aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005abc:	2300      	movs	r3, #0
 8005abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8005ac4:	2309      	movs	r3, #9
 8005ac6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ac8:	f107 0314 	add.w	r3, r7, #20
 8005acc:	4619      	mov	r1, r3
 8005ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ad2:	f003 fd0b 	bl	80094ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005ad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005adc:	2302      	movs	r3, #2
 8005ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8005ae8:	2309      	movs	r3, #9
 8005aea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005aec:	f107 0314 	add.w	r3, r7, #20
 8005af0:	4619      	mov	r1, r3
 8005af2:	4805      	ldr	r0, [pc, #20]	; (8005b08 <HAL_FDCAN_MspInit+0xc0>)
 8005af4:	f003 fcfa 	bl	80094ec <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8005af8:	bf00      	nop
 8005afa:	3728      	adds	r7, #40	; 0x28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	40006400 	.word	0x40006400
 8005b04:	40021000 	.word	0x40021000
 8005b08:	48000400 	.word	0x48000400

08005b0c <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08a      	sub	sp, #40	; 0x28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b14:	f107 0314 	add.w	r3, r7, #20
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	605a      	str	r2, [r3, #4]
 8005b1e:	609a      	str	r2, [r3, #8]
 8005b20:	60da      	str	r2, [r3, #12]
 8005b22:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a2e      	ldr	r2, [pc, #184]	; (8005be4 <HAL_OPAMP_MspInit+0xd8>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d119      	bne.n	8005b62 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b2e:	4b2e      	ldr	r3, [pc, #184]	; (8005be8 <HAL_OPAMP_MspInit+0xdc>)
 8005b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b32:	4a2d      	ldr	r2, [pc, #180]	; (8005be8 <HAL_OPAMP_MspInit+0xdc>)
 8005b34:	f043 0301 	orr.w	r3, r3, #1
 8005b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b3a:	4b2b      	ldr	r3, [pc, #172]	; (8005be8 <HAL_OPAMP_MspInit+0xdc>)
 8005b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	613b      	str	r3, [r7, #16]
 8005b44:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8005b46:	230a      	movs	r3, #10
 8005b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b52:	f107 0314 	add.w	r3, r7, #20
 8005b56:	4619      	mov	r1, r3
 8005b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b5c:	f003 fcc6 	bl	80094ec <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8005b60:	e03b      	b.n	8005bda <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP2)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a21      	ldr	r2, [pc, #132]	; (8005bec <HAL_OPAMP_MspInit+0xe0>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d119      	bne.n	8005ba0 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b6c:	4b1e      	ldr	r3, [pc, #120]	; (8005be8 <HAL_OPAMP_MspInit+0xdc>)
 8005b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b70:	4a1d      	ldr	r2, [pc, #116]	; (8005be8 <HAL_OPAMP_MspInit+0xdc>)
 8005b72:	f043 0301 	orr.w	r3, r3, #1
 8005b76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b78:	4b1b      	ldr	r3, [pc, #108]	; (8005be8 <HAL_OPAMP_MspInit+0xdc>)
 8005b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	60fb      	str	r3, [r7, #12]
 8005b82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005b84:	23a0      	movs	r3, #160	; 0xa0
 8005b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b90:	f107 0314 	add.w	r3, r7, #20
 8005b94:	4619      	mov	r1, r3
 8005b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b9a:	f003 fca7 	bl	80094ec <HAL_GPIO_Init>
}
 8005b9e:	e01c      	b.n	8005bda <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP3)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a12      	ldr	r2, [pc, #72]	; (8005bf0 <HAL_OPAMP_MspInit+0xe4>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d117      	bne.n	8005bda <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005baa:	4b0f      	ldr	r3, [pc, #60]	; (8005be8 <HAL_OPAMP_MspInit+0xdc>)
 8005bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bae:	4a0e      	ldr	r2, [pc, #56]	; (8005be8 <HAL_OPAMP_MspInit+0xdc>)
 8005bb0:	f043 0302 	orr.w	r3, r3, #2
 8005bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bb6:	4b0c      	ldr	r3, [pc, #48]	; (8005be8 <HAL_OPAMP_MspInit+0xdc>)
 8005bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	60bb      	str	r3, [r7, #8]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8005bc2:	2305      	movs	r3, #5
 8005bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bce:	f107 0314 	add.w	r3, r7, #20
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4807      	ldr	r0, [pc, #28]	; (8005bf4 <HAL_OPAMP_MspInit+0xe8>)
 8005bd6:	f003 fc89 	bl	80094ec <HAL_GPIO_Init>
}
 8005bda:	bf00      	nop
 8005bdc:	3728      	adds	r7, #40	; 0x28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	40010300 	.word	0x40010300
 8005be8:	40021000 	.word	0x40021000
 8005bec:	40010304 	.word	0x40010304
 8005bf0:	40010308 	.word	0x40010308
 8005bf4:	48000400 	.word	0x48000400

08005bf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a13      	ldr	r2, [pc, #76]	; (8005c54 <HAL_TIM_Base_MspInit+0x5c>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d10c      	bne.n	8005c24 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005c0a:	4b13      	ldr	r3, [pc, #76]	; (8005c58 <HAL_TIM_Base_MspInit+0x60>)
 8005c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c0e:	4a12      	ldr	r2, [pc, #72]	; (8005c58 <HAL_TIM_Base_MspInit+0x60>)
 8005c10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c14:	6613      	str	r3, [r2, #96]	; 0x60
 8005c16:	4b10      	ldr	r3, [pc, #64]	; (8005c58 <HAL_TIM_Base_MspInit+0x60>)
 8005c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c1e:	60fb      	str	r3, [r7, #12]
 8005c20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8005c22:	e010      	b.n	8005c46 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a0c      	ldr	r2, [pc, #48]	; (8005c5c <HAL_TIM_Base_MspInit+0x64>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d10b      	bne.n	8005c46 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005c2e:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <HAL_TIM_Base_MspInit+0x60>)
 8005c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c32:	4a09      	ldr	r2, [pc, #36]	; (8005c58 <HAL_TIM_Base_MspInit+0x60>)
 8005c34:	f043 0310 	orr.w	r3, r3, #16
 8005c38:	6593      	str	r3, [r2, #88]	; 0x58
 8005c3a:	4b07      	ldr	r3, [pc, #28]	; (8005c58 <HAL_TIM_Base_MspInit+0x60>)
 8005c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3e:	f003 0310 	and.w	r3, r3, #16
 8005c42:	60bb      	str	r3, [r7, #8]
 8005c44:	68bb      	ldr	r3, [r7, #8]
}
 8005c46:	bf00      	nop
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	40012c00 	.word	0x40012c00
 8005c58:	40021000 	.word	0x40021000
 8005c5c:	40001000 	.word	0x40001000

08005c60 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08a      	sub	sp, #40	; 0x28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c68:	f107 0314 	add.w	r3, r7, #20
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	605a      	str	r2, [r3, #4]
 8005c72:	609a      	str	r2, [r3, #8]
 8005c74:	60da      	str	r2, [r3, #12]
 8005c76:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a1b      	ldr	r2, [pc, #108]	; (8005cec <HAL_TIM_IC_MspInit+0x8c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d12f      	bne.n	8005ce2 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005c82:	4b1b      	ldr	r3, [pc, #108]	; (8005cf0 <HAL_TIM_IC_MspInit+0x90>)
 8005c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c86:	4a1a      	ldr	r2, [pc, #104]	; (8005cf0 <HAL_TIM_IC_MspInit+0x90>)
 8005c88:	f043 0304 	orr.w	r3, r3, #4
 8005c8c:	6593      	str	r3, [r2, #88]	; 0x58
 8005c8e:	4b18      	ldr	r3, [pc, #96]	; (8005cf0 <HAL_TIM_IC_MspInit+0x90>)
 8005c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c92:	f003 0304 	and.w	r3, r3, #4
 8005c96:	613b      	str	r3, [r7, #16]
 8005c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c9a:	4b15      	ldr	r3, [pc, #84]	; (8005cf0 <HAL_TIM_IC_MspInit+0x90>)
 8005c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c9e:	4a14      	ldr	r2, [pc, #80]	; (8005cf0 <HAL_TIM_IC_MspInit+0x90>)
 8005ca0:	f043 0302 	orr.w	r3, r3, #2
 8005ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ca6:	4b12      	ldr	r3, [pc, #72]	; (8005cf0 <HAL_TIM_IC_MspInit+0x90>)
 8005ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005cb2:	2340      	movs	r3, #64	; 0x40
 8005cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cc6:	f107 0314 	add.w	r3, r7, #20
 8005cca:	4619      	mov	r1, r3
 8005ccc:	4809      	ldr	r0, [pc, #36]	; (8005cf4 <HAL_TIM_IC_MspInit+0x94>)
 8005cce:	f003 fc0d 	bl	80094ec <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	201e      	movs	r0, #30
 8005cd8:	f002 f981 	bl	8007fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005cdc:	201e      	movs	r0, #30
 8005cde:	f002 f998 	bl	8008012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005ce2:	bf00      	nop
 8005ce4:	3728      	adds	r7, #40	; 0x28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	40000800 	.word	0x40000800
 8005cf0:	40021000 	.word	0x40021000
 8005cf4:	48000400 	.word	0x48000400

08005cf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b08a      	sub	sp, #40	; 0x28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d00:	f107 0314 	add.w	r3, r7, #20
 8005d04:	2200      	movs	r2, #0
 8005d06:	601a      	str	r2, [r3, #0]
 8005d08:	605a      	str	r2, [r3, #4]
 8005d0a:	609a      	str	r2, [r3, #8]
 8005d0c:	60da      	str	r2, [r3, #12]
 8005d0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a2f      	ldr	r2, [pc, #188]	; (8005dd4 <HAL_TIM_MspPostInit+0xdc>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d157      	bne.n	8005dca <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d1a:	4b2f      	ldr	r3, [pc, #188]	; (8005dd8 <HAL_TIM_MspPostInit+0xe0>)
 8005d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d1e:	4a2e      	ldr	r2, [pc, #184]	; (8005dd8 <HAL_TIM_MspPostInit+0xe0>)
 8005d20:	f043 0304 	orr.w	r3, r3, #4
 8005d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d26:	4b2c      	ldr	r3, [pc, #176]	; (8005dd8 <HAL_TIM_MspPostInit+0xe0>)
 8005d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d2a:	f003 0304 	and.w	r3, r3, #4
 8005d2e:	613b      	str	r3, [r7, #16]
 8005d30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d32:	4b29      	ldr	r3, [pc, #164]	; (8005dd8 <HAL_TIM_MspPostInit+0xe0>)
 8005d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d36:	4a28      	ldr	r2, [pc, #160]	; (8005dd8 <HAL_TIM_MspPostInit+0xe0>)
 8005d38:	f043 0302 	orr.w	r3, r3, #2
 8005d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d3e:	4b26      	ldr	r3, [pc, #152]	; (8005dd8 <HAL_TIM_MspPostInit+0xe0>)
 8005d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d4a:	4b23      	ldr	r3, [pc, #140]	; (8005dd8 <HAL_TIM_MspPostInit+0xe0>)
 8005d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d4e:	4a22      	ldr	r2, [pc, #136]	; (8005dd8 <HAL_TIM_MspPostInit+0xe0>)
 8005d50:	f043 0301 	orr.w	r3, r3, #1
 8005d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d56:	4b20      	ldr	r3, [pc, #128]	; (8005dd8 <HAL_TIM_MspPostInit+0xe0>)
 8005d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	60bb      	str	r3, [r7, #8]
 8005d60:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005d62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d68:	2302      	movs	r3, #2
 8005d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d70:	2300      	movs	r3, #0
 8005d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8005d74:	2304      	movs	r3, #4
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d78:	f107 0314 	add.w	r3, r7, #20
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4817      	ldr	r0, [pc, #92]	; (8005ddc <HAL_TIM_MspPostInit+0xe4>)
 8005d80:	f003 fbb4 	bl	80094ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005d84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d92:	2300      	movs	r3, #0
 8005d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8005d96:	2304      	movs	r3, #4
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d9a:	f107 0314 	add.w	r3, r7, #20
 8005d9e:	4619      	mov	r1, r3
 8005da0:	480f      	ldr	r0, [pc, #60]	; (8005de0 <HAL_TIM_MspPostInit+0xe8>)
 8005da2:	f003 fba3 	bl	80094ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8005da6:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8005daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dac:	2302      	movs	r3, #2
 8005dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005db0:	2300      	movs	r3, #0
 8005db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005db4:	2300      	movs	r3, #0
 8005db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005db8:	2306      	movs	r3, #6
 8005dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dbc:	f107 0314 	add.w	r3, r7, #20
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005dc6:	f003 fb91 	bl	80094ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005dca:	bf00      	nop
 8005dcc:	3728      	adds	r7, #40	; 0x28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	40012c00 	.word	0x40012c00
 8005dd8:	40021000 	.word	0x40021000
 8005ddc:	48000800 	.word	0x48000800
 8005de0:	48000400 	.word	0x48000400

08005de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08a      	sub	sp, #40	; 0x28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dec:	f107 0314 	add.w	r3, r7, #20
 8005df0:	2200      	movs	r2, #0
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	605a      	str	r2, [r3, #4]
 8005df6:	609a      	str	r2, [r3, #8]
 8005df8:	60da      	str	r2, [r3, #12]
 8005dfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a44      	ldr	r2, [pc, #272]	; (8005f14 <HAL_UART_MspInit+0x130>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	f040 8082 	bne.w	8005f0c <HAL_UART_MspInit+0x128>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005e08:	4b43      	ldr	r3, [pc, #268]	; (8005f18 <HAL_UART_MspInit+0x134>)
 8005e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0c:	4a42      	ldr	r2, [pc, #264]	; (8005f18 <HAL_UART_MspInit+0x134>)
 8005e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e12:	6593      	str	r3, [r2, #88]	; 0x58
 8005e14:	4b40      	ldr	r3, [pc, #256]	; (8005f18 <HAL_UART_MspInit+0x134>)
 8005e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e1c:	613b      	str	r3, [r7, #16]
 8005e1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e20:	4b3d      	ldr	r3, [pc, #244]	; (8005f18 <HAL_UART_MspInit+0x134>)
 8005e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e24:	4a3c      	ldr	r2, [pc, #240]	; (8005f18 <HAL_UART_MspInit+0x134>)
 8005e26:	f043 0302 	orr.w	r3, r3, #2
 8005e2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e2c:	4b3a      	ldr	r3, [pc, #232]	; (8005f18 <HAL_UART_MspInit+0x134>)
 8005e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8005e38:	2318      	movs	r3, #24
 8005e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e40:	2300      	movs	r3, #0
 8005e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e44:	2300      	movs	r3, #0
 8005e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005e48:	2307      	movs	r3, #7
 8005e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e4c:	f107 0314 	add.w	r3, r7, #20
 8005e50:	4619      	mov	r1, r3
 8005e52:	4832      	ldr	r0, [pc, #200]	; (8005f1c <HAL_UART_MspInit+0x138>)
 8005e54:	f003 fb4a 	bl	80094ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8005e58:	4b31      	ldr	r3, [pc, #196]	; (8005f20 <HAL_UART_MspInit+0x13c>)
 8005e5a:	4a32      	ldr	r2, [pc, #200]	; (8005f24 <HAL_UART_MspInit+0x140>)
 8005e5c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005e5e:	4b30      	ldr	r3, [pc, #192]	; (8005f20 <HAL_UART_MspInit+0x13c>)
 8005e60:	221a      	movs	r2, #26
 8005e62:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e64:	4b2e      	ldr	r3, [pc, #184]	; (8005f20 <HAL_UART_MspInit+0x13c>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e6a:	4b2d      	ldr	r3, [pc, #180]	; (8005f20 <HAL_UART_MspInit+0x13c>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e70:	4b2b      	ldr	r3, [pc, #172]	; (8005f20 <HAL_UART_MspInit+0x13c>)
 8005e72:	2280      	movs	r2, #128	; 0x80
 8005e74:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e76:	4b2a      	ldr	r3, [pc, #168]	; (8005f20 <HAL_UART_MspInit+0x13c>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e7c:	4b28      	ldr	r3, [pc, #160]	; (8005f20 <HAL_UART_MspInit+0x13c>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005e82:	4b27      	ldr	r3, [pc, #156]	; (8005f20 <HAL_UART_MspInit+0x13c>)
 8005e84:	2220      	movs	r2, #32
 8005e86:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005e88:	4b25      	ldr	r3, [pc, #148]	; (8005f20 <HAL_UART_MspInit+0x13c>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005e8e:	4824      	ldr	r0, [pc, #144]	; (8005f20 <HAL_UART_MspInit+0x13c>)
 8005e90:	f002 f8de 	bl	8008050 <HAL_DMA_Init>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 8005e9a:	f7fe f99b 	bl	80041d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a1f      	ldr	r2, [pc, #124]	; (8005f20 <HAL_UART_MspInit+0x13c>)
 8005ea2:	679a      	str	r2, [r3, #120]	; 0x78
 8005ea4:	4a1e      	ldr	r2, [pc, #120]	; (8005f20 <HAL_UART_MspInit+0x13c>)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8005eaa:	4b1f      	ldr	r3, [pc, #124]	; (8005f28 <HAL_UART_MspInit+0x144>)
 8005eac:	4a1f      	ldr	r2, [pc, #124]	; (8005f2c <HAL_UART_MspInit+0x148>)
 8005eae:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005eb0:	4b1d      	ldr	r3, [pc, #116]	; (8005f28 <HAL_UART_MspInit+0x144>)
 8005eb2:	221b      	movs	r2, #27
 8005eb4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005eb6:	4b1c      	ldr	r3, [pc, #112]	; (8005f28 <HAL_UART_MspInit+0x144>)
 8005eb8:	2210      	movs	r2, #16
 8005eba:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ebc:	4b1a      	ldr	r3, [pc, #104]	; (8005f28 <HAL_UART_MspInit+0x144>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ec2:	4b19      	ldr	r3, [pc, #100]	; (8005f28 <HAL_UART_MspInit+0x144>)
 8005ec4:	2280      	movs	r2, #128	; 0x80
 8005ec6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ec8:	4b17      	ldr	r3, [pc, #92]	; (8005f28 <HAL_UART_MspInit+0x144>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ece:	4b16      	ldr	r3, [pc, #88]	; (8005f28 <HAL_UART_MspInit+0x144>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005ed4:	4b14      	ldr	r3, [pc, #80]	; (8005f28 <HAL_UART_MspInit+0x144>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005eda:	4b13      	ldr	r3, [pc, #76]	; (8005f28 <HAL_UART_MspInit+0x144>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005ee0:	4811      	ldr	r0, [pc, #68]	; (8005f28 <HAL_UART_MspInit+0x144>)
 8005ee2:	f002 f8b5 	bl	8008050 <HAL_DMA_Init>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8005eec:	f7fe f972 	bl	80041d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a0d      	ldr	r2, [pc, #52]	; (8005f28 <HAL_UART_MspInit+0x144>)
 8005ef4:	675a      	str	r2, [r3, #116]	; 0x74
 8005ef6:	4a0c      	ldr	r2, [pc, #48]	; (8005f28 <HAL_UART_MspInit+0x144>)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005efc:	2200      	movs	r2, #0
 8005efe:	2100      	movs	r1, #0
 8005f00:	2026      	movs	r0, #38	; 0x26
 8005f02:	f002 f86c 	bl	8007fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005f06:	2026      	movs	r0, #38	; 0x26
 8005f08:	f002 f883 	bl	8008012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005f0c:	bf00      	nop
 8005f0e:	3728      	adds	r7, #40	; 0x28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	40004400 	.word	0x40004400
 8005f18:	40021000 	.word	0x40021000
 8005f1c:	48000400 	.word	0x48000400
 8005f20:	200002d0 	.word	0x200002d0
 8005f24:	40020008 	.word	0x40020008
 8005f28:	20000508 	.word	0x20000508
 8005f2c:	4002001c 	.word	0x4002001c

08005f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005f30:	b480      	push	{r7}
 8005f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005f34:	e7fe      	b.n	8005f34 <NMI_Handler+0x4>

08005f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005f36:	b480      	push	{r7}
 8005f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005f3a:	e7fe      	b.n	8005f3a <HardFault_Handler+0x4>

08005f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005f40:	e7fe      	b.n	8005f40 <MemManage_Handler+0x4>

08005f42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005f42:	b480      	push	{r7}
 8005f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005f46:	e7fe      	b.n	8005f46 <BusFault_Handler+0x4>

08005f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005f4c:	e7fe      	b.n	8005f4c <UsageFault_Handler+0x4>

08005f4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005f52:	bf00      	nop
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005f60:	bf00      	nop
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005f6e:	bf00      	nop
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f7c:	f000 f8e8 	bl	8006150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f80:	bf00      	nop
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005f88:	4802      	ldr	r0, [pc, #8]	; (8005f94 <DMA1_Channel1_IRQHandler+0x10>)
 8005f8a:	f002 f9eb 	bl	8008364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005f8e:	bf00      	nop
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	200002d0 	.word	0x200002d0

08005f98 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005f9c:	4802      	ldr	r0, [pc, #8]	; (8005fa8 <DMA1_Channel2_IRQHandler+0x10>)
 8005f9e:	f002 f9e1 	bl	8008364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005fa2:	bf00      	nop
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20000508 	.word	0x20000508

08005fac <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005fb0:	4802      	ldr	r0, [pc, #8]	; (8005fbc <DMA1_Channel3_IRQHandler+0x10>)
 8005fb2:	f002 f9d7 	bl	8008364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005fb6:	bf00      	nop
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	20002e10 	.word	0x20002e10

08005fc0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005fc4:	4802      	ldr	r0, [pc, #8]	; (8005fd0 <DMA1_Channel4_IRQHandler+0x10>)
 8005fc6:	f002 f9cd 	bl	8008364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005fca:	bf00      	nop
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	20003020 	.word	0x20003020

08005fd4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005fd8:	4803      	ldr	r0, [pc, #12]	; (8005fe8 <ADC1_2_IRQHandler+0x14>)
 8005fda:	f000 fd75 	bl	8006ac8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8005fde:	4803      	ldr	r0, [pc, #12]	; (8005fec <ADC1_2_IRQHandler+0x18>)
 8005fe0:	f000 fd72 	bl	8006ac8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005fe4:	bf00      	nop
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	2000049c 	.word	0x2000049c
 8005fec:	200003b8 	.word	0x200003b8

08005ff0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005ff4:	4802      	ldr	r0, [pc, #8]	; (8006000 <TIM4_IRQHandler+0x10>)
 8005ff6:	f005 f993 	bl	800b320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005ffa:	bf00      	nop
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	2000036c 	.word	0x2000036c

08006004 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006008:	4802      	ldr	r0, [pc, #8]	; (8006014 <USART2_IRQHandler+0x10>)
 800600a:	f006 ffcd 	bl	800cfa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800600e:	bf00      	nop
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	20002f94 	.word	0x20002f94

08006018 <CORDIC_IRQHandler>:

/**
  * @brief This function handles CORDIC interrupt.
  */
void CORDIC_IRQHandler(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CORDIC_IRQn 0 */

  /* USER CODE END CORDIC_IRQn 0 */
  HAL_CORDIC_IRQHandler(&hcordic);
 800601c:	4802      	ldr	r0, [pc, #8]	; (8006028 <CORDIC_IRQHandler+0x10>)
 800601e:	f001 fe52 	bl	8007cc6 <HAL_CORDIC_IRQHandler>
  /* USER CODE BEGIN CORDIC_IRQn 1 */

  /* USER CODE END CORDIC_IRQn 1 */
}
 8006022:	bf00      	nop
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	20002e70 	.word	0x20002e70

0800602c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800602c:	b480      	push	{r7}
 800602e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006030:	4b08      	ldr	r3, [pc, #32]	; (8006054 <SystemInit+0x28>)
 8006032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006036:	4a07      	ldr	r2, [pc, #28]	; (8006054 <SystemInit+0x28>)
 8006038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800603c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006040:	4b04      	ldr	r3, [pc, #16]	; (8006054 <SystemInit+0x28>)
 8006042:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006046:	609a      	str	r2, [r3, #8]
#endif
}
 8006048:	bf00      	nop
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	e000ed00 	.word	0xe000ed00

08006058 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006058:	480d      	ldr	r0, [pc, #52]	; (8006090 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800605a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800605c:	480d      	ldr	r0, [pc, #52]	; (8006094 <LoopForever+0x6>)
  ldr r1, =_edata
 800605e:	490e      	ldr	r1, [pc, #56]	; (8006098 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006060:	4a0e      	ldr	r2, [pc, #56]	; (800609c <LoopForever+0xe>)
  movs r3, #0
 8006062:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006064:	e002      	b.n	800606c <LoopCopyDataInit>

08006066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800606a:	3304      	adds	r3, #4

0800606c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800606c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800606e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006070:	d3f9      	bcc.n	8006066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006072:	4a0b      	ldr	r2, [pc, #44]	; (80060a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006074:	4c0b      	ldr	r4, [pc, #44]	; (80060a4 <LoopForever+0x16>)
  movs r3, #0
 8006076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006078:	e001      	b.n	800607e <LoopFillZerobss>

0800607a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800607a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800607c:	3204      	adds	r2, #4

0800607e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800607e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006080:	d3fb      	bcc.n	800607a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006082:	f7ff ffd3 	bl	800602c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006086:	f007 ffa7 	bl	800dfd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800608a:	f7fc f9a9 	bl	80023e0 <main>

0800608e <LoopForever>:

LoopForever:
    b LoopForever
 800608e:	e7fe      	b.n	800608e <LoopForever>
  ldr   r0, =_estack
 8006090:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8006094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006098:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 800609c:	0800f0ec 	.word	0x0800f0ec
  ldr r2, =_sbss
 80060a0:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 80060a4:	2000391c 	.word	0x2000391c

080060a8 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80060a8:	e7fe      	b.n	80060a8 <COMP1_2_3_IRQHandler>

080060aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b082      	sub	sp, #8
 80060ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80060b4:	2003      	movs	r0, #3
 80060b6:	f001 ff87 	bl	8007fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80060ba:	2000      	movs	r0, #0
 80060bc:	f000 f80e 	bl	80060dc <HAL_InitTick>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	71fb      	strb	r3, [r7, #7]
 80060ca:	e001      	b.n	80060d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80060cc:	f7ff fb84 	bl	80057d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80060d0:	79fb      	ldrb	r3, [r7, #7]

}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
	...

080060dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80060e4:	2300      	movs	r3, #0
 80060e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80060e8:	4b16      	ldr	r3, [pc, #88]	; (8006144 <HAL_InitTick+0x68>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d022      	beq.n	8006136 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80060f0:	4b15      	ldr	r3, [pc, #84]	; (8006148 <HAL_InitTick+0x6c>)
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	4b13      	ldr	r3, [pc, #76]	; (8006144 <HAL_InitTick+0x68>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80060fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8006100:	fbb2 f3f3 	udiv	r3, r2, r3
 8006104:	4618      	mov	r0, r3
 8006106:	f001 ff96 	bl	8008036 <HAL_SYSTICK_Config>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10f      	bne.n	8006130 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b0f      	cmp	r3, #15
 8006114:	d809      	bhi.n	800612a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006116:	2200      	movs	r2, #0
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	f04f 30ff 	mov.w	r0, #4294967295
 800611e:	f001 ff5e 	bl	8007fde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006122:	4a0a      	ldr	r2, [pc, #40]	; (800614c <HAL_InitTick+0x70>)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6013      	str	r3, [r2, #0]
 8006128:	e007      	b.n	800613a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	73fb      	strb	r3, [r7, #15]
 800612e:	e004      	b.n	800613a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	73fb      	strb	r3, [r7, #15]
 8006134:	e001      	b.n	800613a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800613a:	7bfb      	ldrb	r3, [r7, #15]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	20000020 	.word	0x20000020
 8006148:	20000018 	.word	0x20000018
 800614c:	2000001c 	.word	0x2000001c

08006150 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006150:	b480      	push	{r7}
 8006152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006154:	4b05      	ldr	r3, [pc, #20]	; (800616c <HAL_IncTick+0x1c>)
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	4b05      	ldr	r3, [pc, #20]	; (8006170 <HAL_IncTick+0x20>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4413      	add	r3, r2
 800615e:	4a03      	ldr	r2, [pc, #12]	; (800616c <HAL_IncTick+0x1c>)
 8006160:	6013      	str	r3, [r2, #0]
}
 8006162:	bf00      	nop
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	20003918 	.word	0x20003918
 8006170:	20000020 	.word	0x20000020

08006174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006174:	b480      	push	{r7}
 8006176:	af00      	add	r7, sp, #0
  return uwTick;
 8006178:	4b03      	ldr	r3, [pc, #12]	; (8006188 <HAL_GetTick+0x14>)
 800617a:	681b      	ldr	r3, [r3, #0]
}
 800617c:	4618      	mov	r0, r3
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	20003918 	.word	0x20003918

0800618c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006194:	f7ff ffee 	bl	8006174 <HAL_GetTick>
 8006198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a4:	d004      	beq.n	80061b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80061a6:	4b09      	ldr	r3, [pc, #36]	; (80061cc <HAL_Delay+0x40>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	4413      	add	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80061b0:	bf00      	nop
 80061b2:	f7ff ffdf 	bl	8006174 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d8f7      	bhi.n	80061b2 <HAL_Delay+0x26>
  {
  }
}
 80061c2:	bf00      	nop
 80061c4:	bf00      	nop
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	20000020 	.word	0x20000020

080061d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	431a      	orrs	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	609a      	str	r2, [r3, #8]
}
 80061ea:	bf00      	nop
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b083      	sub	sp, #12
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
 80061fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	431a      	orrs	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	609a      	str	r2, [r3, #8]
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800622c:	4618      	mov	r0, r3
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3360      	adds	r3, #96	; 0x60
 800624a:	461a      	mov	r2, r3
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	4b08      	ldr	r3, [pc, #32]	; (800627c <LL_ADC_SetOffset+0x44>)
 800625a:	4013      	ands	r3, r2
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	430a      	orrs	r2, r1
 8006266:	4313      	orrs	r3, r2
 8006268:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006270:	bf00      	nop
 8006272:	371c      	adds	r7, #28
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	03fff000 	.word	0x03fff000

08006280 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	3360      	adds	r3, #96	; 0x60
 800628e:	461a      	mov	r2, r3
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	3360      	adds	r3, #96	; 0x60
 80062bc:	461a      	mov	r2, r3
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4413      	add	r3, r2
 80062c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	431a      	orrs	r2, r3
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80062d6:	bf00      	nop
 80062d8:	371c      	adds	r7, #28
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b087      	sub	sp, #28
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	60f8      	str	r0, [r7, #12]
 80062ea:	60b9      	str	r1, [r7, #8]
 80062ec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	3360      	adds	r3, #96	; 0x60
 80062f2:	461a      	mov	r2, r3
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	431a      	orrs	r2, r3
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800630c:	bf00      	nop
 800630e:	371c      	adds	r7, #28
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006318:	b480      	push	{r7}
 800631a:	b087      	sub	sp, #28
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	3360      	adds	r3, #96	; 0x60
 8006328:	461a      	mov	r2, r3
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4413      	add	r3, r2
 8006330:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	431a      	orrs	r2, r3
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006342:	bf00      	nop
 8006344:	371c      	adds	r7, #28
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	431a      	orrs	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	615a      	str	r2, [r3, #20]
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006388:	2301      	movs	r3, #1
 800638a:	e000      	b.n	800638e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800639a:	b480      	push	{r7}
 800639c:	b087      	sub	sp, #28
 800639e:	af00      	add	r7, sp, #0
 80063a0:	60f8      	str	r0, [r7, #12]
 80063a2:	60b9      	str	r1, [r7, #8]
 80063a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	3330      	adds	r3, #48	; 0x30
 80063aa:	461a      	mov	r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	0a1b      	lsrs	r3, r3, #8
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	f003 030c 	and.w	r3, r3, #12
 80063b6:	4413      	add	r3, r2
 80063b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	f003 031f 	and.w	r3, r3, #31
 80063c4:	211f      	movs	r1, #31
 80063c6:	fa01 f303 	lsl.w	r3, r1, r3
 80063ca:	43db      	mvns	r3, r3
 80063cc:	401a      	ands	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	0e9b      	lsrs	r3, r3, #26
 80063d2:	f003 011f 	and.w	r1, r3, #31
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	f003 031f 	and.w	r3, r3, #31
 80063dc:	fa01 f303 	lsl.w	r3, r1, r3
 80063e0:	431a      	orrs	r2, r3
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80063e6:	bf00      	nop
 80063e8:	371c      	adds	r7, #28
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b083      	sub	sp, #12
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063fe:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006406:	2301      	movs	r3, #1
 8006408:	e000      	b.n	800640c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006418:	b480      	push	{r7}
 800641a:	b087      	sub	sp, #28
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3314      	adds	r3, #20
 8006428:	461a      	mov	r2, r3
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	0e5b      	lsrs	r3, r3, #25
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	f003 0304 	and.w	r3, r3, #4
 8006434:	4413      	add	r3, r2
 8006436:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	0d1b      	lsrs	r3, r3, #20
 8006440:	f003 031f 	and.w	r3, r3, #31
 8006444:	2107      	movs	r1, #7
 8006446:	fa01 f303 	lsl.w	r3, r1, r3
 800644a:	43db      	mvns	r3, r3
 800644c:	401a      	ands	r2, r3
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	0d1b      	lsrs	r3, r3, #20
 8006452:	f003 031f 	and.w	r3, r3, #31
 8006456:	6879      	ldr	r1, [r7, #4]
 8006458:	fa01 f303 	lsl.w	r3, r1, r3
 800645c:	431a      	orrs	r2, r3
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006462:	bf00      	nop
 8006464:	371c      	adds	r7, #28
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
	...

08006470 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006488:	43db      	mvns	r3, r3
 800648a:	401a      	ands	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f003 0318 	and.w	r3, r3, #24
 8006492:	4908      	ldr	r1, [pc, #32]	; (80064b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006494:	40d9      	lsrs	r1, r3
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	400b      	ands	r3, r1
 800649a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800649e:	431a      	orrs	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80064a6:	bf00      	nop
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	0007ffff 	.word	0x0007ffff

080064b8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f003 031f 	and.w	r3, r3, #31
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006500:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	6093      	str	r3, [r2, #8]
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006524:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006528:	d101      	bne.n	800652e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800652a:	2301      	movs	r3, #1
 800652c:	e000      	b.n	8006530 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800654c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006550:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006574:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006578:	d101      	bne.n	800657e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800657a:	2301      	movs	r3, #1
 800657c:	e000      	b.n	8006580 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800659c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80065a0:	f043 0201 	orr.w	r2, r3, #1
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d101      	bne.n	80065cc <LL_ADC_IsEnabled+0x18>
 80065c8:	2301      	movs	r3, #1
 80065ca:	e000      	b.n	80065ce <LL_ADC_IsEnabled+0x1a>
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	370c      	adds	r7, #12
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr

080065da <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80065da:	b480      	push	{r7}
 80065dc:	b083      	sub	sp, #12
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80065ee:	f043 0204 	orr.w	r2, r3, #4
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80065f6:	bf00      	nop
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006602:	b480      	push	{r7}
 8006604:	b083      	sub	sp, #12
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 0304 	and.w	r3, r3, #4
 8006612:	2b04      	cmp	r3, #4
 8006614:	d101      	bne.n	800661a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006616:	2301      	movs	r3, #1
 8006618:	e000      	b.n	800661c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f003 0308 	and.w	r3, r3, #8
 8006638:	2b08      	cmp	r3, #8
 800663a:	d101      	bne.n	8006640 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800663c:	2301      	movs	r3, #1
 800663e:	e000      	b.n	8006642 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
	...

08006650 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006650:	b590      	push	{r4, r7, lr}
 8006652:	b089      	sub	sp, #36	; 0x24
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800665c:	2300      	movs	r3, #0
 800665e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e16b      	b.n	8006942 <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006674:	2b00      	cmp	r3, #0
 8006676:	d109      	bne.n	800668c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7ff f8d1 	bl	8005820 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4618      	mov	r0, r3
 8006692:	f7ff ff3f 	bl	8006514 <LL_ADC_IsDeepPowerDownEnabled>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d004      	beq.n	80066a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7ff ff25 	bl	80064f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff ff5a 	bl	8006564 <LL_ADC_IsInternalRegulatorEnabled>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d113      	bne.n	80066de <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7ff ff3e 	bl	800653c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80066c0:	4ba2      	ldr	r3, [pc, #648]	; (800694c <HAL_ADC_Init+0x2fc>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	099b      	lsrs	r3, r3, #6
 80066c6:	4aa2      	ldr	r2, [pc, #648]	; (8006950 <HAL_ADC_Init+0x300>)
 80066c8:	fba2 2303 	umull	r2, r3, r2, r3
 80066cc:	099b      	lsrs	r3, r3, #6
 80066ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80066d0:	e002      	b.n	80066d8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	3b01      	subs	r3, #1
 80066d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1f9      	bne.n	80066d2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7ff ff3e 	bl	8006564 <LL_ADC_IsInternalRegulatorEnabled>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10d      	bne.n	800670a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f2:	f043 0210 	orr.w	r2, r3, #16
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066fe:	f043 0201 	orr.w	r2, r3, #1
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4618      	mov	r0, r3
 8006710:	f7ff ff77 	bl	8006602 <LL_ADC_REG_IsConversionOngoing>
 8006714:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800671a:	f003 0310 	and.w	r3, r3, #16
 800671e:	2b00      	cmp	r3, #0
 8006720:	f040 8106 	bne.w	8006930 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	2b00      	cmp	r3, #0
 8006728:	f040 8102 	bne.w	8006930 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006730:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006734:	f043 0202 	orr.w	r2, r3, #2
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4618      	mov	r0, r3
 8006742:	f7ff ff37 	bl	80065b4 <LL_ADC_IsEnabled>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d111      	bne.n	8006770 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800674c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006750:	f7ff ff30 	bl	80065b4 <LL_ADC_IsEnabled>
 8006754:	4604      	mov	r4, r0
 8006756:	487f      	ldr	r0, [pc, #508]	; (8006954 <HAL_ADC_Init+0x304>)
 8006758:	f7ff ff2c 	bl	80065b4 <LL_ADC_IsEnabled>
 800675c:	4603      	mov	r3, r0
 800675e:	4323      	orrs	r3, r4
 8006760:	2b00      	cmp	r3, #0
 8006762:	d105      	bne.n	8006770 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	4619      	mov	r1, r3
 800676a:	487b      	ldr	r0, [pc, #492]	; (8006958 <HAL_ADC_Init+0x308>)
 800676c:	f7ff fd30 	bl	80061d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	7f5b      	ldrb	r3, [r3, #29]
 8006774:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800677a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006780:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006786:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800678e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006790:	4313      	orrs	r3, r2
 8006792:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800679a:	2b01      	cmp	r3, #1
 800679c:	d106      	bne.n	80067ac <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a2:	3b01      	subs	r3, #1
 80067a4:	045b      	lsls	r3, r3, #17
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d009      	beq.n	80067c8 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80067c2:	69ba      	ldr	r2, [r7, #24]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68da      	ldr	r2, [r3, #12]
 80067ce:	4b63      	ldr	r3, [pc, #396]	; (800695c <HAL_ADC_Init+0x30c>)
 80067d0:	4013      	ands	r3, r2
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	6812      	ldr	r2, [r2, #0]
 80067d6:	69b9      	ldr	r1, [r7, #24]
 80067d8:	430b      	orrs	r3, r1
 80067da:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7ff ff03 	bl	8006602 <LL_ADC_REG_IsConversionOngoing>
 80067fc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4618      	mov	r0, r3
 8006804:	f7ff ff10 	bl	8006628 <LL_ADC_INJ_IsConversionOngoing>
 8006808:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d16d      	bne.n	80068ec <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d16a      	bne.n	80068ec <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800681a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006822:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006824:	4313      	orrs	r3, r2
 8006826:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006832:	f023 0302 	bic.w	r3, r3, #2
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	6812      	ldr	r2, [r2, #0]
 800683a:	69b9      	ldr	r1, [r7, #24]
 800683c:	430b      	orrs	r3, r1
 800683e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d017      	beq.n	8006878 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	691a      	ldr	r2, [r3, #16]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006856:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006860:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006864:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	6911      	ldr	r1, [r2, #16]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6812      	ldr	r2, [r2, #0]
 8006870:	430b      	orrs	r3, r1
 8006872:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8006876:	e013      	b.n	80068a0 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	691a      	ldr	r2, [r3, #16]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006886:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6812      	ldr	r2, [r2, #0]
 8006894:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006898:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800689c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d118      	bne.n	80068dc <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80068b4:	f023 0304 	bic.w	r3, r3, #4
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80068c0:	4311      	orrs	r1, r2
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80068c6:	4311      	orrs	r1, r2
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80068cc:	430a      	orrs	r2, r1
 80068ce:	431a      	orrs	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f042 0201 	orr.w	r2, r2, #1
 80068d8:	611a      	str	r2, [r3, #16]
 80068da:	e007      	b.n	80068ec <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	691a      	ldr	r2, [r3, #16]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 0201 	bic.w	r2, r2, #1
 80068ea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d10c      	bne.n	800690e <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fa:	f023 010f 	bic.w	r1, r3, #15
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	1e5a      	subs	r2, r3, #1
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	631a      	str	r2, [r3, #48]	; 0x30
 800690c:	e007      	b.n	800691e <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f022 020f 	bic.w	r2, r2, #15
 800691c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006922:	f023 0303 	bic.w	r3, r3, #3
 8006926:	f043 0201 	orr.w	r2, r3, #1
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	65da      	str	r2, [r3, #92]	; 0x5c
 800692e:	e007      	b.n	8006940 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006934:	f043 0210 	orr.w	r2, r3, #16
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006940:	7ffb      	ldrb	r3, [r7, #31]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3724      	adds	r7, #36	; 0x24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd90      	pop	{r4, r7, pc}
 800694a:	bf00      	nop
 800694c:	20000018 	.word	0x20000018
 8006950:	053e2d63 	.word	0x053e2d63
 8006954:	50000100 	.word	0x50000100
 8006958:	50000300 	.word	0x50000300
 800695c:	fff04007 	.word	0xfff04007

08006960 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800696c:	4851      	ldr	r0, [pc, #324]	; (8006ab4 <HAL_ADC_Start_DMA+0x154>)
 800696e:	f7ff fda3 	bl	80064b8 <LL_ADC_GetMultimode>
 8006972:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4618      	mov	r0, r3
 800697a:	f7ff fe42 	bl	8006602 <LL_ADC_REG_IsConversionOngoing>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	f040 808f 	bne.w	8006aa4 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800698c:	2b01      	cmp	r3, #1
 800698e:	d101      	bne.n	8006994 <HAL_ADC_Start_DMA+0x34>
 8006990:	2302      	movs	r3, #2
 8006992:	e08a      	b.n	8006aaa <HAL_ADC_Start_DMA+0x14a>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d005      	beq.n	80069ae <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	2b05      	cmp	r3, #5
 80069a6:	d002      	beq.n	80069ae <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	2b09      	cmp	r3, #9
 80069ac:	d173      	bne.n	8006a96 <HAL_ADC_Start_DMA+0x136>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f000 feb2 	bl	8007718 <ADC_Enable>
 80069b4:	4603      	mov	r3, r0
 80069b6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80069b8:	7dfb      	ldrb	r3, [r7, #23]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d166      	bne.n	8006a8c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80069c6:	f023 0301 	bic.w	r3, r3, #1
 80069ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a38      	ldr	r2, [pc, #224]	; (8006ab8 <HAL_ADC_Start_DMA+0x158>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d002      	beq.n	80069e2 <HAL_ADC_Start_DMA+0x82>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	e001      	b.n	80069e6 <HAL_ADC_Start_DMA+0x86>
 80069e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	6812      	ldr	r2, [r2, #0]
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d002      	beq.n	80069f4 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d105      	bne.n	8006a00 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d006      	beq.n	8006a1a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a10:	f023 0206 	bic.w	r2, r3, #6
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	661a      	str	r2, [r3, #96]	; 0x60
 8006a18:	e002      	b.n	8006a20 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a24:	4a25      	ldr	r2, [pc, #148]	; (8006abc <HAL_ADC_Start_DMA+0x15c>)
 8006a26:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2c:	4a24      	ldr	r2, [pc, #144]	; (8006ac0 <HAL_ADC_Start_DMA+0x160>)
 8006a2e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a34:	4a23      	ldr	r2, [pc, #140]	; (8006ac4 <HAL_ADC_Start_DMA+0x164>)
 8006a36:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	221c      	movs	r2, #28
 8006a3e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f042 0210 	orr.w	r2, r2, #16
 8006a56:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68da      	ldr	r2, [r3, #12]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0201 	orr.w	r2, r2, #1
 8006a66:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3340      	adds	r3, #64	; 0x40
 8006a72:	4619      	mov	r1, r3
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f001 fb92 	bl	80081a0 <HAL_DMA_Start_IT>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7ff fda8 	bl	80065da <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006a8a:	e00d      	b.n	8006aa8 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8006a94:	e008      	b.n	8006aa8 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8006aa2:	e001      	b.n	8006aa8 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3718      	adds	r7, #24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	50000300 	.word	0x50000300
 8006ab8:	50000100 	.word	0x50000100
 8006abc:	080077cd 	.word	0x080077cd
 8006ac0:	080078a5 	.word	0x080078a5
 8006ac4:	080078c1 	.word	0x080078c1

08006ac8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b08a      	sub	sp, #40	; 0x28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006ae4:	4883      	ldr	r0, [pc, #524]	; (8006cf4 <HAL_ADC_IRQHandler+0x22c>)
 8006ae6:	f7ff fce7 	bl	80064b8 <LL_ADC_GetMultimode>
 8006aea:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d017      	beq.n	8006b26 <HAL_ADC_IRQHandler+0x5e>
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	f003 0302 	and.w	r3, r3, #2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d012      	beq.n	8006b26 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b04:	f003 0310 	and.w	r3, r3, #16
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d105      	bne.n	8006b18 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b10:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 ff39 	bl	8007990 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2202      	movs	r2, #2
 8006b24:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	f003 0304 	and.w	r3, r3, #4
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d004      	beq.n	8006b3a <HAL_ADC_IRQHandler+0x72>
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	f003 0304 	and.w	r3, r3, #4
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10a      	bne.n	8006b50 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 8085 	beq.w	8006c50 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	f003 0308 	and.w	r3, r3, #8
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d07f      	beq.n	8006c50 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b54:	f003 0310 	and.w	r3, r3, #16
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d105      	bne.n	8006b68 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b60:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7ff fc01 	bl	8006374 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d064      	beq.n	8006c42 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a5e      	ldr	r2, [pc, #376]	; (8006cf8 <HAL_ADC_IRQHandler+0x230>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d002      	beq.n	8006b88 <HAL_ADC_IRQHandler+0xc0>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	e001      	b.n	8006b8c <HAL_ADC_IRQHandler+0xc4>
 8006b88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	6812      	ldr	r2, [r2, #0]
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d008      	beq.n	8006ba6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d005      	beq.n	8006ba6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2b05      	cmp	r3, #5
 8006b9e:	d002      	beq.n	8006ba6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	2b09      	cmp	r3, #9
 8006ba4:	d104      	bne.n	8006bb0 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	623b      	str	r3, [r7, #32]
 8006bae:	e00d      	b.n	8006bcc <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a50      	ldr	r2, [pc, #320]	; (8006cf8 <HAL_ADC_IRQHandler+0x230>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d002      	beq.n	8006bc0 <HAL_ADC_IRQHandler+0xf8>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	e001      	b.n	8006bc4 <HAL_ADC_IRQHandler+0xfc>
 8006bc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006bc4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d135      	bne.n	8006c42 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0308 	and.w	r3, r3, #8
 8006be0:	2b08      	cmp	r3, #8
 8006be2:	d12e      	bne.n	8006c42 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7ff fd0a 	bl	8006602 <LL_ADC_REG_IsConversionOngoing>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d11a      	bne.n	8006c2a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 020c 	bic.w	r2, r2, #12
 8006c02:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d112      	bne.n	8006c42 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c20:	f043 0201 	orr.w	r2, r3, #1
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	65da      	str	r2, [r3, #92]	; 0x5c
 8006c28:	e00b      	b.n	8006c42 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c2e:	f043 0210 	orr.w	r2, r3, #16
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c3a:	f043 0201 	orr.w	r2, r3, #1
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7fb fb55 	bl	80022f2 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	220c      	movs	r2, #12
 8006c4e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	f003 0320 	and.w	r3, r3, #32
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d004      	beq.n	8006c64 <HAL_ADC_IRQHandler+0x19c>
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	f003 0320 	and.w	r3, r3, #32
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10b      	bne.n	8006c7c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 809e 	beq.w	8006dac <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f000 8098 	beq.w	8006dac <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c80:	f003 0310 	and.w	r3, r3, #16
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d105      	bne.n	8006c94 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c8c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7ff fbaa 	bl	80063f2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006c9e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7ff fb65 	bl	8006374 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006caa:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a11      	ldr	r2, [pc, #68]	; (8006cf8 <HAL_ADC_IRQHandler+0x230>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d002      	beq.n	8006cbc <HAL_ADC_IRQHandler+0x1f4>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	e001      	b.n	8006cc0 <HAL_ADC_IRQHandler+0x1f8>
 8006cbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	6812      	ldr	r2, [r2, #0]
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d008      	beq.n	8006cda <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d005      	beq.n	8006cda <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	2b06      	cmp	r3, #6
 8006cd2:	d002      	beq.n	8006cda <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	2b07      	cmp	r3, #7
 8006cd8:	d104      	bne.n	8006ce4 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	623b      	str	r3, [r7, #32]
 8006ce2:	e011      	b.n	8006d08 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a03      	ldr	r2, [pc, #12]	; (8006cf8 <HAL_ADC_IRQHandler+0x230>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d006      	beq.n	8006cfc <HAL_ADC_IRQHandler+0x234>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	e005      	b.n	8006d00 <HAL_ADC_IRQHandler+0x238>
 8006cf4:	50000300 	.word	0x50000300
 8006cf8:	50000100 	.word	0x50000100
 8006cfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006d00:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10c      	bne.n	8006d28 <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d142      	bne.n	8006d9e <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d03f      	beq.n	8006d9e <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8006d1e:	6a3b      	ldr	r3, [r7, #32]
 8006d20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d13a      	bne.n	8006d9e <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d32:	2b40      	cmp	r3, #64	; 0x40
 8006d34:	d133      	bne.n	8006d9e <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d12e      	bne.n	8006d9e <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7ff fc6f 	bl	8006628 <LL_ADC_INJ_IsConversionOngoing>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d11a      	bne.n	8006d86 <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006d5e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d64:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d112      	bne.n	8006d9e <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d7c:	f043 0201 	orr.w	r2, r3, #1
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	65da      	str	r2, [r3, #92]	; 0x5c
 8006d84:	e00b      	b.n	8006d9e <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d8a:	f043 0210 	orr.w	r2, r3, #16
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d96:	f043 0201 	orr.w	r2, r3, #1
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fdce 	bl	8007940 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2260      	movs	r2, #96	; 0x60
 8006daa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d011      	beq.n	8006dda <HAL_ADC_IRQHandler+0x312>
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00c      	beq.n	8006dda <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f89f 	bl	8006f10 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2280      	movs	r2, #128	; 0x80
 8006dd8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d012      	beq.n	8006e0a <HAL_ADC_IRQHandler+0x342>
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00d      	beq.n	8006e0a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006df2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fdb4 	bl	8007968 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e08:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d012      	beq.n	8006e3a <HAL_ADC_IRQHandler+0x372>
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00d      	beq.n	8006e3a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e22:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fda6 	bl	800797c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e38:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	f003 0310 	and.w	r3, r3, #16
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d036      	beq.n	8006eb2 <HAL_ADC_IRQHandler+0x3ea>
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	f003 0310 	and.w	r3, r3, #16
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d031      	beq.n	8006eb2 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d102      	bne.n	8006e5c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8006e56:	2301      	movs	r3, #1
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24
 8006e5a:	e014      	b.n	8006e86 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d008      	beq.n	8006e74 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006e62:	4825      	ldr	r0, [pc, #148]	; (8006ef8 <HAL_ADC_IRQHandler+0x430>)
 8006e64:	f7ff fb36 	bl	80064d4 <LL_ADC_GetMultiDMATransfer>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00b      	beq.n	8006e86 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	627b      	str	r3, [r7, #36]	; 0x24
 8006e72:	e008      	b.n	8006e86 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8006e82:	2301      	movs	r3, #1
 8006e84:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d10e      	bne.n	8006eaa <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e9c:	f043 0202 	orr.w	r2, r3, #2
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f83d 	bl	8006f24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2210      	movs	r2, #16
 8006eb0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d018      	beq.n	8006eee <HAL_ADC_IRQHandler+0x426>
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d013      	beq.n	8006eee <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eca:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ed6:	f043 0208 	orr.w	r2, r3, #8
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ee6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fd33 	bl	8007954 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006eee:	bf00      	nop
 8006ef0:	3728      	adds	r7, #40	; 0x28
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	50000300 	.word	0x50000300

08006efc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b0b6      	sub	sp, #216	; 0xd8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d101      	bne.n	8006f5a <HAL_ADC_ConfigChannel+0x22>
 8006f56:	2302      	movs	r3, #2
 8006f58:	e3c7      	b.n	80076ea <HAL_ADC_ConfigChannel+0x7b2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7ff fb4b 	bl	8006602 <LL_ADC_REG_IsConversionOngoing>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f040 83ac 	bne.w	80076cc <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6818      	ldr	r0, [r3, #0]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	6859      	ldr	r1, [r3, #4]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	461a      	mov	r2, r3
 8006f82:	f7ff fa0a 	bl	800639a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7ff fb39 	bl	8006602 <LL_ADC_REG_IsConversionOngoing>
 8006f90:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7ff fb45 	bl	8006628 <LL_ADC_INJ_IsConversionOngoing>
 8006f9e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006fa2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f040 81d9 	bne.w	800735e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006fac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f040 81d4 	bne.w	800735e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fbe:	d10f      	bne.n	8006fe0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6818      	ldr	r0, [r3, #0]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	4619      	mov	r1, r3
 8006fcc:	f7ff fa24 	bl	8006418 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7ff f9b8 	bl	800634e <LL_ADC_SetSamplingTimeCommonConfig>
 8006fde:	e00e      	b.n	8006ffe <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6818      	ldr	r0, [r3, #0]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	6819      	ldr	r1, [r3, #0]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	461a      	mov	r2, r3
 8006fee:	f7ff fa13 	bl	8006418 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7ff f9a8 	bl	800634e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	695a      	ldr	r2, [r3, #20]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	08db      	lsrs	r3, r3, #3
 800700a:	f003 0303 	and.w	r3, r3, #3
 800700e:	005b      	lsls	r3, r3, #1
 8007010:	fa02 f303 	lsl.w	r3, r2, r3
 8007014:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	2b04      	cmp	r3, #4
 800701e:	d022      	beq.n	8007066 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6818      	ldr	r0, [r3, #0]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	6919      	ldr	r1, [r3, #16]
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007030:	f7ff f902 	bl	8006238 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6818      	ldr	r0, [r3, #0]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	6919      	ldr	r1, [r3, #16]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	461a      	mov	r2, r3
 8007042:	f7ff f94e 	bl	80062e2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6818      	ldr	r0, [r3, #0]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	6919      	ldr	r1, [r3, #16]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	7f1b      	ldrb	r3, [r3, #28]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d102      	bne.n	800705c <HAL_ADC_ConfigChannel+0x124>
 8007056:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800705a:	e000      	b.n	800705e <HAL_ADC_ConfigChannel+0x126>
 800705c:	2300      	movs	r3, #0
 800705e:	461a      	mov	r2, r3
 8007060:	f7ff f95a 	bl	8006318 <LL_ADC_SetOffsetSaturation>
 8007064:	e17b      	b.n	800735e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2100      	movs	r1, #0
 800706c:	4618      	mov	r0, r3
 800706e:	f7ff f907 	bl	8006280 <LL_ADC_GetOffsetChannel>
 8007072:	4603      	mov	r3, r0
 8007074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10a      	bne.n	8007092 <HAL_ADC_ConfigChannel+0x15a>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2100      	movs	r1, #0
 8007082:	4618      	mov	r0, r3
 8007084:	f7ff f8fc 	bl	8006280 <LL_ADC_GetOffsetChannel>
 8007088:	4603      	mov	r3, r0
 800708a:	0e9b      	lsrs	r3, r3, #26
 800708c:	f003 021f 	and.w	r2, r3, #31
 8007090:	e01e      	b.n	80070d0 <HAL_ADC_ConfigChannel+0x198>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2100      	movs	r1, #0
 8007098:	4618      	mov	r0, r3
 800709a:	f7ff f8f1 	bl	8006280 <LL_ADC_GetOffsetChannel>
 800709e:	4603      	mov	r3, r0
 80070a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80070a8:	fa93 f3a3 	rbit	r3, r3
 80070ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80070b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80070b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80070c0:	2320      	movs	r3, #32
 80070c2:	e004      	b.n	80070ce <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80070c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070c8:	fab3 f383 	clz	r3, r3
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	461a      	mov	r2, r3
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d105      	bne.n	80070e8 <HAL_ADC_ConfigChannel+0x1b0>
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	0e9b      	lsrs	r3, r3, #26
 80070e2:	f003 031f 	and.w	r3, r3, #31
 80070e6:	e018      	b.n	800711a <HAL_ADC_ConfigChannel+0x1e2>
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80070f4:	fa93 f3a3 	rbit	r3, r3
 80070f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80070fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8007104:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800710c:	2320      	movs	r3, #32
 800710e:	e004      	b.n	800711a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8007110:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007114:	fab3 f383 	clz	r3, r3
 8007118:	b2db      	uxtb	r3, r3
 800711a:	429a      	cmp	r2, r3
 800711c:	d106      	bne.n	800712c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2200      	movs	r2, #0
 8007124:	2100      	movs	r1, #0
 8007126:	4618      	mov	r0, r3
 8007128:	f7ff f8c0 	bl	80062ac <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2101      	movs	r1, #1
 8007132:	4618      	mov	r0, r3
 8007134:	f7ff f8a4 	bl	8006280 <LL_ADC_GetOffsetChannel>
 8007138:	4603      	mov	r3, r0
 800713a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10a      	bne.n	8007158 <HAL_ADC_ConfigChannel+0x220>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2101      	movs	r1, #1
 8007148:	4618      	mov	r0, r3
 800714a:	f7ff f899 	bl	8006280 <LL_ADC_GetOffsetChannel>
 800714e:	4603      	mov	r3, r0
 8007150:	0e9b      	lsrs	r3, r3, #26
 8007152:	f003 021f 	and.w	r2, r3, #31
 8007156:	e01e      	b.n	8007196 <HAL_ADC_ConfigChannel+0x25e>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2101      	movs	r1, #1
 800715e:	4618      	mov	r0, r3
 8007160:	f7ff f88e 	bl	8006280 <LL_ADC_GetOffsetChannel>
 8007164:	4603      	mov	r3, r0
 8007166:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800716a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800716e:	fa93 f3a3 	rbit	r3, r3
 8007172:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8007176:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800717a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800717e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8007186:	2320      	movs	r3, #32
 8007188:	e004      	b.n	8007194 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800718a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800718e:	fab3 f383 	clz	r3, r3
 8007192:	b2db      	uxtb	r3, r3
 8007194:	461a      	mov	r2, r3
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d105      	bne.n	80071ae <HAL_ADC_ConfigChannel+0x276>
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	0e9b      	lsrs	r3, r3, #26
 80071a8:	f003 031f 	and.w	r3, r3, #31
 80071ac:	e018      	b.n	80071e0 <HAL_ADC_ConfigChannel+0x2a8>
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071ba:	fa93 f3a3 	rbit	r3, r3
 80071be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80071c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80071c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80071ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80071d2:	2320      	movs	r3, #32
 80071d4:	e004      	b.n	80071e0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80071d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071da:	fab3 f383 	clz	r3, r3
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d106      	bne.n	80071f2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2200      	movs	r2, #0
 80071ea:	2101      	movs	r1, #1
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7ff f85d 	bl	80062ac <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2102      	movs	r1, #2
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7ff f841 	bl	8006280 <LL_ADC_GetOffsetChannel>
 80071fe:	4603      	mov	r3, r0
 8007200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10a      	bne.n	800721e <HAL_ADC_ConfigChannel+0x2e6>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2102      	movs	r1, #2
 800720e:	4618      	mov	r0, r3
 8007210:	f7ff f836 	bl	8006280 <LL_ADC_GetOffsetChannel>
 8007214:	4603      	mov	r3, r0
 8007216:	0e9b      	lsrs	r3, r3, #26
 8007218:	f003 021f 	and.w	r2, r3, #31
 800721c:	e01e      	b.n	800725c <HAL_ADC_ConfigChannel+0x324>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2102      	movs	r1, #2
 8007224:	4618      	mov	r0, r3
 8007226:	f7ff f82b 	bl	8006280 <LL_ADC_GetOffsetChannel>
 800722a:	4603      	mov	r3, r0
 800722c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007230:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007234:	fa93 f3a3 	rbit	r3, r3
 8007238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800723c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007240:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8007244:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800724c:	2320      	movs	r3, #32
 800724e:	e004      	b.n	800725a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8007250:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007254:	fab3 f383 	clz	r3, r3
 8007258:	b2db      	uxtb	r3, r3
 800725a:	461a      	mov	r2, r3
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007264:	2b00      	cmp	r3, #0
 8007266:	d105      	bne.n	8007274 <HAL_ADC_ConfigChannel+0x33c>
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	0e9b      	lsrs	r3, r3, #26
 800726e:	f003 031f 	and.w	r3, r3, #31
 8007272:	e016      	b.n	80072a2 <HAL_ADC_ConfigChannel+0x36a>
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800727c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007280:	fa93 f3a3 	rbit	r3, r3
 8007284:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8007286:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007288:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800728c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007290:	2b00      	cmp	r3, #0
 8007292:	d101      	bne.n	8007298 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8007294:	2320      	movs	r3, #32
 8007296:	e004      	b.n	80072a2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8007298:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800729c:	fab3 f383 	clz	r3, r3
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d106      	bne.n	80072b4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2200      	movs	r2, #0
 80072ac:	2102      	movs	r1, #2
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fe fffc 	bl	80062ac <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2103      	movs	r1, #3
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fe ffe0 	bl	8006280 <LL_ADC_GetOffsetChannel>
 80072c0:	4603      	mov	r3, r0
 80072c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10a      	bne.n	80072e0 <HAL_ADC_ConfigChannel+0x3a8>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2103      	movs	r1, #3
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7fe ffd5 	bl	8006280 <LL_ADC_GetOffsetChannel>
 80072d6:	4603      	mov	r3, r0
 80072d8:	0e9b      	lsrs	r3, r3, #26
 80072da:	f003 021f 	and.w	r2, r3, #31
 80072de:	e017      	b.n	8007310 <HAL_ADC_ConfigChannel+0x3d8>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2103      	movs	r1, #3
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fe ffca 	bl	8006280 <LL_ADC_GetOffsetChannel>
 80072ec:	4603      	mov	r3, r0
 80072ee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072f2:	fa93 f3a3 	rbit	r3, r3
 80072f6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80072f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072fa:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80072fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8007302:	2320      	movs	r3, #32
 8007304:	e003      	b.n	800730e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8007306:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007308:	fab3 f383 	clz	r3, r3
 800730c:	b2db      	uxtb	r3, r3
 800730e:	461a      	mov	r2, r3
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007318:	2b00      	cmp	r3, #0
 800731a:	d105      	bne.n	8007328 <HAL_ADC_ConfigChannel+0x3f0>
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	0e9b      	lsrs	r3, r3, #26
 8007322:	f003 031f 	and.w	r3, r3, #31
 8007326:	e011      	b.n	800734c <HAL_ADC_ConfigChannel+0x414>
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800732e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007330:	fa93 f3a3 	rbit	r3, r3
 8007334:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8007336:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007338:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800733a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800733c:	2b00      	cmp	r3, #0
 800733e:	d101      	bne.n	8007344 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8007340:	2320      	movs	r3, #32
 8007342:	e003      	b.n	800734c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8007344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007346:	fab3 f383 	clz	r3, r3
 800734a:	b2db      	uxtb	r3, r3
 800734c:	429a      	cmp	r2, r3
 800734e:	d106      	bne.n	800735e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2200      	movs	r2, #0
 8007356:	2103      	movs	r1, #3
 8007358:	4618      	mov	r0, r3
 800735a:	f7fe ffa7 	bl	80062ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4618      	mov	r0, r3
 8007364:	f7ff f926 	bl	80065b4 <LL_ADC_IsEnabled>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	f040 8140 	bne.w	80075f0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6818      	ldr	r0, [r3, #0]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	6819      	ldr	r1, [r3, #0]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	461a      	mov	r2, r3
 800737e:	f7ff f877 	bl	8006470 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	4a8f      	ldr	r2, [pc, #572]	; (80075c4 <HAL_ADC_ConfigChannel+0x68c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	f040 8131 	bne.w	80075f0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10b      	bne.n	80073b6 <HAL_ADC_ConfigChannel+0x47e>
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	0e9b      	lsrs	r3, r3, #26
 80073a4:	3301      	adds	r3, #1
 80073a6:	f003 031f 	and.w	r3, r3, #31
 80073aa:	2b09      	cmp	r3, #9
 80073ac:	bf94      	ite	ls
 80073ae:	2301      	movls	r3, #1
 80073b0:	2300      	movhi	r3, #0
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	e019      	b.n	80073ea <HAL_ADC_ConfigChannel+0x4b2>
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073be:	fa93 f3a3 	rbit	r3, r3
 80073c2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80073c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073c6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80073c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80073ce:	2320      	movs	r3, #32
 80073d0:	e003      	b.n	80073da <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80073d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073d4:	fab3 f383 	clz	r3, r3
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	3301      	adds	r3, #1
 80073dc:	f003 031f 	and.w	r3, r3, #31
 80073e0:	2b09      	cmp	r3, #9
 80073e2:	bf94      	ite	ls
 80073e4:	2301      	movls	r3, #1
 80073e6:	2300      	movhi	r3, #0
 80073e8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d079      	beq.n	80074e2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d107      	bne.n	800740a <HAL_ADC_ConfigChannel+0x4d2>
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	0e9b      	lsrs	r3, r3, #26
 8007400:	3301      	adds	r3, #1
 8007402:	069b      	lsls	r3, r3, #26
 8007404:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007408:	e015      	b.n	8007436 <HAL_ADC_ConfigChannel+0x4fe>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007412:	fa93 f3a3 	rbit	r3, r3
 8007416:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800741a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800741c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8007422:	2320      	movs	r3, #32
 8007424:	e003      	b.n	800742e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8007426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007428:	fab3 f383 	clz	r3, r3
 800742c:	b2db      	uxtb	r3, r3
 800742e:	3301      	adds	r3, #1
 8007430:	069b      	lsls	r3, r3, #26
 8007432:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800743e:	2b00      	cmp	r3, #0
 8007440:	d109      	bne.n	8007456 <HAL_ADC_ConfigChannel+0x51e>
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	0e9b      	lsrs	r3, r3, #26
 8007448:	3301      	adds	r3, #1
 800744a:	f003 031f 	and.w	r3, r3, #31
 800744e:	2101      	movs	r1, #1
 8007450:	fa01 f303 	lsl.w	r3, r1, r3
 8007454:	e017      	b.n	8007486 <HAL_ADC_ConfigChannel+0x54e>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800745c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800745e:	fa93 f3a3 	rbit	r3, r3
 8007462:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8007464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007466:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8007468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800746e:	2320      	movs	r3, #32
 8007470:	e003      	b.n	800747a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8007472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007474:	fab3 f383 	clz	r3, r3
 8007478:	b2db      	uxtb	r3, r3
 800747a:	3301      	adds	r3, #1
 800747c:	f003 031f 	and.w	r3, r3, #31
 8007480:	2101      	movs	r1, #1
 8007482:	fa01 f303 	lsl.w	r3, r1, r3
 8007486:	ea42 0103 	orr.w	r1, r2, r3
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007492:	2b00      	cmp	r3, #0
 8007494:	d10a      	bne.n	80074ac <HAL_ADC_ConfigChannel+0x574>
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	0e9b      	lsrs	r3, r3, #26
 800749c:	3301      	adds	r3, #1
 800749e:	f003 021f 	and.w	r2, r3, #31
 80074a2:	4613      	mov	r3, r2
 80074a4:	005b      	lsls	r3, r3, #1
 80074a6:	4413      	add	r3, r2
 80074a8:	051b      	lsls	r3, r3, #20
 80074aa:	e018      	b.n	80074de <HAL_ADC_ConfigChannel+0x5a6>
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b4:	fa93 f3a3 	rbit	r3, r3
 80074b8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80074ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80074be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80074c4:	2320      	movs	r3, #32
 80074c6:	e003      	b.n	80074d0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80074c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ca:	fab3 f383 	clz	r3, r3
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	3301      	adds	r3, #1
 80074d2:	f003 021f 	and.w	r2, r3, #31
 80074d6:	4613      	mov	r3, r2
 80074d8:	005b      	lsls	r3, r3, #1
 80074da:	4413      	add	r3, r2
 80074dc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80074de:	430b      	orrs	r3, r1
 80074e0:	e081      	b.n	80075e6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d107      	bne.n	80074fe <HAL_ADC_ConfigChannel+0x5c6>
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	0e9b      	lsrs	r3, r3, #26
 80074f4:	3301      	adds	r3, #1
 80074f6:	069b      	lsls	r3, r3, #26
 80074f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80074fc:	e015      	b.n	800752a <HAL_ADC_ConfigChannel+0x5f2>
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007506:	fa93 f3a3 	rbit	r3, r3
 800750a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800750c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007512:	2b00      	cmp	r3, #0
 8007514:	d101      	bne.n	800751a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8007516:	2320      	movs	r3, #32
 8007518:	e003      	b.n	8007522 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751c:	fab3 f383 	clz	r3, r3
 8007520:	b2db      	uxtb	r3, r3
 8007522:	3301      	adds	r3, #1
 8007524:	069b      	lsls	r3, r3, #26
 8007526:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007532:	2b00      	cmp	r3, #0
 8007534:	d109      	bne.n	800754a <HAL_ADC_ConfigChannel+0x612>
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	0e9b      	lsrs	r3, r3, #26
 800753c:	3301      	adds	r3, #1
 800753e:	f003 031f 	and.w	r3, r3, #31
 8007542:	2101      	movs	r1, #1
 8007544:	fa01 f303 	lsl.w	r3, r1, r3
 8007548:	e017      	b.n	800757a <HAL_ADC_ConfigChannel+0x642>
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	fa93 f3a3 	rbit	r3, r3
 8007556:	61fb      	str	r3, [r7, #28]
  return result;
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8007562:	2320      	movs	r3, #32
 8007564:	e003      	b.n	800756e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8007566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007568:	fab3 f383 	clz	r3, r3
 800756c:	b2db      	uxtb	r3, r3
 800756e:	3301      	adds	r3, #1
 8007570:	f003 031f 	and.w	r3, r3, #31
 8007574:	2101      	movs	r1, #1
 8007576:	fa01 f303 	lsl.w	r3, r1, r3
 800757a:	ea42 0103 	orr.w	r1, r2, r3
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10d      	bne.n	80075a6 <HAL_ADC_ConfigChannel+0x66e>
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	0e9b      	lsrs	r3, r3, #26
 8007590:	3301      	adds	r3, #1
 8007592:	f003 021f 	and.w	r2, r3, #31
 8007596:	4613      	mov	r3, r2
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	4413      	add	r3, r2
 800759c:	3b1e      	subs	r3, #30
 800759e:	051b      	lsls	r3, r3, #20
 80075a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80075a4:	e01e      	b.n	80075e4 <HAL_ADC_ConfigChannel+0x6ac>
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	fa93 f3a3 	rbit	r3, r3
 80075b2:	613b      	str	r3, [r7, #16]
  return result;
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d104      	bne.n	80075c8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80075be:	2320      	movs	r3, #32
 80075c0:	e006      	b.n	80075d0 <HAL_ADC_ConfigChannel+0x698>
 80075c2:	bf00      	nop
 80075c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	fab3 f383 	clz	r3, r3
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	3301      	adds	r3, #1
 80075d2:	f003 021f 	and.w	r2, r3, #31
 80075d6:	4613      	mov	r3, r2
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	4413      	add	r3, r2
 80075dc:	3b1e      	subs	r3, #30
 80075de:	051b      	lsls	r3, r3, #20
 80075e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80075e4:	430b      	orrs	r3, r1
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	6892      	ldr	r2, [r2, #8]
 80075ea:	4619      	mov	r1, r3
 80075ec:	f7fe ff14 	bl	8006418 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	4b3f      	ldr	r3, [pc, #252]	; (80076f4 <HAL_ADC_ConfigChannel+0x7bc>)
 80075f6:	4013      	ands	r3, r2
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d070      	beq.n	80076de <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80075fc:	483e      	ldr	r0, [pc, #248]	; (80076f8 <HAL_ADC_ConfigChannel+0x7c0>)
 80075fe:	f7fe fe0d 	bl	800621c <LL_ADC_GetCommonPathInternalCh>
 8007602:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a3c      	ldr	r2, [pc, #240]	; (80076fc <HAL_ADC_ConfigChannel+0x7c4>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d004      	beq.n	800761a <HAL_ADC_ConfigChannel+0x6e2>
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a3a      	ldr	r2, [pc, #232]	; (8007700 <HAL_ADC_ConfigChannel+0x7c8>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d126      	bne.n	8007668 <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800761a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800761e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d120      	bne.n	8007668 <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800762e:	d156      	bne.n	80076de <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007630:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007634:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007638:	4619      	mov	r1, r3
 800763a:	482f      	ldr	r0, [pc, #188]	; (80076f8 <HAL_ADC_ConfigChannel+0x7c0>)
 800763c:	f7fe fddb 	bl	80061f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007640:	4b30      	ldr	r3, [pc, #192]	; (8007704 <HAL_ADC_ConfigChannel+0x7cc>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	099b      	lsrs	r3, r3, #6
 8007646:	4a30      	ldr	r2, [pc, #192]	; (8007708 <HAL_ADC_ConfigChannel+0x7d0>)
 8007648:	fba2 2303 	umull	r2, r3, r2, r3
 800764c:	099a      	lsrs	r2, r3, #6
 800764e:	4613      	mov	r3, r2
 8007650:	005b      	lsls	r3, r3, #1
 8007652:	4413      	add	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007658:	e002      	b.n	8007660 <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3b01      	subs	r3, #1
 800765e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1f9      	bne.n	800765a <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007666:	e03a      	b.n	80076de <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a27      	ldr	r2, [pc, #156]	; (800770c <HAL_ADC_ConfigChannel+0x7d4>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d113      	bne.n	800769a <HAL_ADC_ConfigChannel+0x762>
 8007672:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007676:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10d      	bne.n	800769a <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a23      	ldr	r2, [pc, #140]	; (8007710 <HAL_ADC_ConfigChannel+0x7d8>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d02a      	beq.n	80076de <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007688:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800768c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007690:	4619      	mov	r1, r3
 8007692:	4819      	ldr	r0, [pc, #100]	; (80076f8 <HAL_ADC_ConfigChannel+0x7c0>)
 8007694:	f7fe fdaf 	bl	80061f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007698:	e021      	b.n	80076de <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a1d      	ldr	r2, [pc, #116]	; (8007714 <HAL_ADC_ConfigChannel+0x7dc>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d11c      	bne.n	80076de <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80076a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80076a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d116      	bne.n	80076de <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a16      	ldr	r2, [pc, #88]	; (8007710 <HAL_ADC_ConfigChannel+0x7d8>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d011      	beq.n	80076de <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80076ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80076be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80076c2:	4619      	mov	r1, r3
 80076c4:	480c      	ldr	r0, [pc, #48]	; (80076f8 <HAL_ADC_ConfigChannel+0x7c0>)
 80076c6:	f7fe fd96 	bl	80061f6 <LL_ADC_SetCommonPathInternalCh>
 80076ca:	e008      	b.n	80076de <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076d0:	f043 0220 	orr.w	r2, r3, #32
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80076e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	37d8      	adds	r7, #216	; 0xd8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	80080000 	.word	0x80080000
 80076f8:	50000300 	.word	0x50000300
 80076fc:	c3210000 	.word	0xc3210000
 8007700:	90c00010 	.word	0x90c00010
 8007704:	20000018 	.word	0x20000018
 8007708:	053e2d63 	.word	0x053e2d63
 800770c:	c7520000 	.word	0xc7520000
 8007710:	50000100 	.word	0x50000100
 8007714:	cb840000 	.word	0xcb840000

08007718 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4618      	mov	r0, r3
 8007726:	f7fe ff45 	bl	80065b4 <LL_ADC_IsEnabled>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d146      	bne.n	80077be <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	689a      	ldr	r2, [r3, #8]
 8007736:	4b24      	ldr	r3, [pc, #144]	; (80077c8 <ADC_Enable+0xb0>)
 8007738:	4013      	ands	r3, r2
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00d      	beq.n	800775a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007742:	f043 0210 	orr.w	r2, r3, #16
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800774e:	f043 0201 	orr.w	r2, r3, #1
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e032      	b.n	80077c0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4618      	mov	r0, r3
 8007760:	f7fe ff14 	bl	800658c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007764:	f7fe fd06 	bl	8006174 <HAL_GetTick>
 8007768:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800776a:	e021      	b.n	80077b0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4618      	mov	r0, r3
 8007772:	f7fe ff1f 	bl	80065b4 <LL_ADC_IsEnabled>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d104      	bne.n	8007786 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4618      	mov	r0, r3
 8007782:	f7fe ff03 	bl	800658c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007786:	f7fe fcf5 	bl	8006174 <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	2b02      	cmp	r3, #2
 8007792:	d90d      	bls.n	80077b0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007798:	f043 0210 	orr.w	r2, r3, #16
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077a4:	f043 0201 	orr.w	r2, r3, #1
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e007      	b.n	80077c0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d1d6      	bne.n	800776c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	8000003f 	.word	0x8000003f

080077cc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d14b      	bne.n	800787e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0308 	and.w	r3, r3, #8
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d021      	beq.n	8007844 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4618      	mov	r0, r3
 8007806:	f7fe fdb5 	bl	8006374 <LL_ADC_REG_IsTriggerSourceSWStart>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d032      	beq.n	8007876 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d12b      	bne.n	8007876 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007822:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800782e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d11f      	bne.n	8007876 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800783a:	f043 0201 	orr.w	r2, r3, #1
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	65da      	str	r2, [r3, #92]	; 0x5c
 8007842:	e018      	b.n	8007876 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	f003 0302 	and.w	r3, r3, #2
 800784e:	2b00      	cmp	r3, #0
 8007850:	d111      	bne.n	8007876 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007856:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007862:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d105      	bne.n	8007876 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800786e:	f043 0201 	orr.w	r2, r3, #1
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f7fa fd3b 	bl	80022f2 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800787c:	e00e      	b.n	800789c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007882:	f003 0310 	and.w	r3, r3, #16
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f7ff fb4a 	bl	8006f24 <HAL_ADC_ErrorCallback>
}
 8007890:	e004      	b.n	800789c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	4798      	blx	r3
}
 800789c:	bf00      	nop
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f7ff fb22 	bl	8006efc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80078b8:	bf00      	nop
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078cc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078de:	f043 0204 	orr.w	r2, r3, #4
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f7ff fb1c 	bl	8006f24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80078ec:	bf00      	nop
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <LL_ADC_IsEnabled>:
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b01      	cmp	r3, #1
 8007906:	d101      	bne.n	800790c <LL_ADC_IsEnabled+0x18>
 8007908:	2301      	movs	r3, #1
 800790a:	e000      	b.n	800790e <LL_ADC_IsEnabled+0x1a>
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <LL_ADC_REG_IsConversionOngoing>:
{
 800791a:	b480      	push	{r7}
 800791c:	b083      	sub	sp, #12
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f003 0304 	and.w	r3, r3, #4
 800792a:	2b04      	cmp	r3, #4
 800792c:	d101      	bne.n	8007932 <LL_ADC_REG_IsConversionOngoing+0x18>
 800792e:	2301      	movs	r3, #1
 8007930:	e000      	b.n	8007934 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80079a4:	b590      	push	{r4, r7, lr}
 80079a6:	b0a1      	sub	sp, #132	; 0x84
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d101      	bne.n	80079c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80079be:	2302      	movs	r3, #2
 80079c0:	e087      	b.n	8007ad2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079d2:	d102      	bne.n	80079da <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80079d4:	4b41      	ldr	r3, [pc, #260]	; (8007adc <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80079d6:	60bb      	str	r3, [r7, #8]
 80079d8:	e001      	b.n	80079de <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80079da:	2300      	movs	r3, #0
 80079dc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10b      	bne.n	80079fc <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079e8:	f043 0220 	orr.w	r2, r3, #32
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e06a      	b.n	8007ad2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7ff ff8b 	bl	800791a <LL_ADC_REG_IsConversionOngoing>
 8007a04:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff ff85 	bl	800791a <LL_ADC_REG_IsConversionOngoing>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d14c      	bne.n	8007ab0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d149      	bne.n	8007ab0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007a1c:	4b30      	ldr	r3, [pc, #192]	; (8007ae0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8007a1e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d028      	beq.n	8007a7a <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007a28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	6859      	ldr	r1, [r3, #4]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a3a:	035b      	lsls	r3, r3, #13
 8007a3c:	430b      	orrs	r3, r1
 8007a3e:	431a      	orrs	r2, r3
 8007a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a42:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007a44:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007a48:	f7ff ff54 	bl	80078f4 <LL_ADC_IsEnabled>
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	4823      	ldr	r0, [pc, #140]	; (8007adc <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8007a50:	f7ff ff50 	bl	80078f4 <LL_ADC_IsEnabled>
 8007a54:	4603      	mov	r3, r0
 8007a56:	4323      	orrs	r3, r4
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d133      	bne.n	8007ac4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007a64:	f023 030f 	bic.w	r3, r3, #15
 8007a68:	683a      	ldr	r2, [r7, #0]
 8007a6a:	6811      	ldr	r1, [r2, #0]
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	6892      	ldr	r2, [r2, #8]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	431a      	orrs	r2, r3
 8007a74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a76:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007a78:	e024      	b.n	8007ac4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a84:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007a86:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007a8a:	f7ff ff33 	bl	80078f4 <LL_ADC_IsEnabled>
 8007a8e:	4604      	mov	r4, r0
 8007a90:	4812      	ldr	r0, [pc, #72]	; (8007adc <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8007a92:	f7ff ff2f 	bl	80078f4 <LL_ADC_IsEnabled>
 8007a96:	4603      	mov	r3, r0
 8007a98:	4323      	orrs	r3, r4
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d112      	bne.n	8007ac4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007aa6:	f023 030f 	bic.w	r3, r3, #15
 8007aaa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007aac:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007aae:	e009      	b.n	8007ac4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ab4:	f043 0220 	orr.w	r2, r3, #32
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007ac2:	e000      	b.n	8007ac6 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007ac4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007ace:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3784      	adds	r7, #132	; 0x84
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd90      	pop	{r4, r7, pc}
 8007ada:	bf00      	nop
 8007adc:	50000100 	.word	0x50000100
 8007ae0:	50000300 	.word	0x50000300

08007ae4 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d101      	bne.n	8007af6 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e023      	b.n	8007b3e <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d106      	bne.n	8007b10 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7fd ff76 	bl	80059fc <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
	...

08007b48 <HAL_CORDIC_Configure>:
  * @param  sConfig pointer to a CORDIC_ConfigTypeDef structure that
  *         contains the CORDIC configuration information.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Configure(CORDIC_HandleTypeDef *hcordic, CORDIC_ConfigTypeDef *sConfig)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CORDIC_NBREAD(sConfig->NbRead));
  assert_param(IS_CORDIC_INSIZE(sConfig->InSize));
  assert_param(IS_CORDIC_OUTSIZE(sConfig->OutSize));

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d11d      	bne.n	8007b9e <HAL_CORDIC_Configure+0x56>
  {
    /* Apply all configuration parameters in CORDIC control register */
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	4b14      	ldr	r3, [pc, #80]	; (8007bbc <HAL_CORDIC_Configure+0x74>)
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	683a      	ldr	r2, [r7, #0]
 8007b6e:	6811      	ldr	r1, [r2, #0]
 8007b70:	683a      	ldr	r2, [r7, #0]
 8007b72:	6992      	ldr	r2, [r2, #24]
 8007b74:	4311      	orrs	r1, r2
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	6852      	ldr	r2, [r2, #4]
 8007b7a:	4311      	orrs	r1, r2
 8007b7c:	683a      	ldr	r2, [r7, #0]
 8007b7e:	6912      	ldr	r2, [r2, #16]
 8007b80:	4311      	orrs	r1, r2
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	6952      	ldr	r2, [r2, #20]
 8007b86:	4311      	orrs	r1, r2
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	6892      	ldr	r2, [r2, #8]
 8007b8c:	4311      	orrs	r1, r2
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	68d2      	ldr	r2, [r2, #12]
 8007b92:	4311      	orrs	r1, r2
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	6812      	ldr	r2, [r2, #0]
 8007b98:	430b      	orrs	r3, r1
 8007b9a:	6013      	str	r3, [r2, #0]
 8007b9c:	e007      	b.n	8007bae <HAL_CORDIC_Configure+0x66>
                sConfig->NbWrite | sConfig->NbRead | sConfig->InSize | sConfig->OutSize));
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	f043 0202 	orr.w	r2, r3, #2
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	ff87f800 	.word	0xff87f800

08007bc0 <HAL_CORDIC_Calculate>:
  * @param  NbCalc Number of CORDIC calculation to process.
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Calculate(CORDIC_HandleTypeDef *hcordic, int32_t *pInBuff, int32_t *pOutBuff, uint32_t NbCalc, uint32_t Timeout)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b088      	sub	sp, #32
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
 8007bcc:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t index;
  int32_t *p_tmp_in_buff = pInBuff;
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	617b      	str	r3, [r7, #20]
  int32_t *p_tmp_out_buff = pOutBuff;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	613b      	str	r3, [r7, #16]

  /* Check parameters setting */
  if ((pInBuff == NULL) || (pOutBuff == NULL) || (NbCalc == 0U))
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d005      	beq.n	8007be8 <HAL_CORDIC_Calculate+0x28>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d002      	beq.n	8007be8 <HAL_CORDIC_Calculate+0x28>
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d107      	bne.n	8007bf8 <HAL_CORDIC_Calculate+0x38>
  {
    /* Update the error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_PARAM;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bec:	f043 0201 	orr.w	r2, r3, #1
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return error status */
    return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e058      	b.n	8007caa <HAL_CORDIC_Calculate+0xea>
  }

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d14b      	bne.n	8007c9c <HAL_CORDIC_Calculate+0xdc>
  {
    /* Reset CORDIC error code */
    hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_BUSY;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c12:	f7fe faaf 	bl	8006174 <HAL_GetTick>
 8007c16:	61b8      	str	r0, [r7, #24]

    /* Write of input data in Write Data register, and increment input buffer pointer */
    CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 8007c18:	f107 0314 	add.w	r3, r7, #20
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f000 f89a 	bl	8007d58 <CORDIC_WriteInDataIncrementPtr>

    /* Calculation is started.
       Provide next set of input data, until number of calculation is achieved */
    for (index = (NbCalc - 1U); index > 0U; index--)
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	3b01      	subs	r3, #1
 8007c28:	61fb      	str	r3, [r7, #28]
 8007c2a:	e028      	b.n	8007c7e <HAL_CORDIC_Calculate+0xbe>
    {
      /* Write of input data in Write Data register, and increment input buffer pointer */
      CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 8007c2c:	f107 0314 	add.w	r3, r7, #20
 8007c30:	4619      	mov	r1, r3
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 f890 	bl	8007d58 <CORDIC_WriteInDataIncrementPtr>

      /* Wait for RRDY flag to be raised */
      do
      {
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY)
 8007c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3e:	d010      	beq.n	8007c62 <HAL_CORDIC_Calculate+0xa2>
        {
          if ((HAL_GetTick() - tickstart) > Timeout)
 8007c40:	f7fe fa98 	bl	8006174 <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d208      	bcs.n	8007c62 <HAL_CORDIC_Calculate+0xa2>
          {
            /* Set CORDIC error code */
            hcordic->ErrorCode = HAL_CORDIC_ERROR_TIMEOUT;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2204      	movs	r2, #4
 8007c54:	625a      	str	r2, [r3, #36]	; 0x24

            /* Change the CORDIC state */
            hcordic->State = HAL_CORDIC_STATE_READY;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

            /* Return function status */
            return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e023      	b.n	8007caa <HAL_CORDIC_Calculate+0xea>
          }
        }
      }
      while (HAL_IS_BIT_CLR(hcordic->Instance->CSR, CORDIC_CSR_RRDY));
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	dae5      	bge.n	8007c38 <HAL_CORDIC_Calculate+0x78>

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 8007c6c:	f107 0310 	add.w	r3, r7, #16
 8007c70:	4619      	mov	r1, r3
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f000 f899 	bl	8007daa <CORDIC_ReadOutDataIncrementPtr>
    for (index = (NbCalc - 1U); index > 0U; index--)
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	61fb      	str	r3, [r7, #28]
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1d3      	bne.n	8007c2c <HAL_CORDIC_Calculate+0x6c>
    }

    /* Read output data from Read Data register, and increment output buffer pointer */
    CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 8007c84:	f107 0310 	add.w	r3, r7, #16
 8007c88:	4619      	mov	r1, r3
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f000 f88d 	bl	8007daa <CORDIC_ReadOutDataIncrementPtr>

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_READY;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Return function status */
    return HAL_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	e006      	b.n	8007caa <HAL_CORDIC_Calculate+0xea>
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca0:	f043 0202 	orr.w	r2, r3, #2
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
  }
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3720      	adds	r7, #32
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <HAL_CORDIC_CalculateCpltCallback>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
__weak void HAL_CORDIC_CalculateCpltCallback(CORDIC_HandleTypeDef *hcordic)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b083      	sub	sp, #12
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  UNUSED(hcordic);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CORDIC_CalculateCpltCallback can be implemented in the user file
   */
}
 8007cba:	bf00      	nop
 8007cbc:	370c      	adds	r7, #12
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <HAL_CORDIC_IRQHandler>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
void HAL_CORDIC_IRQHandler(CORDIC_HandleTypeDef *hcordic)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  /* Check if calculation complete interrupt is enabled and if result ready
     flag is raised */
  if (__HAL_CORDIC_GET_IT_SOURCE(hcordic, CORDIC_IT_IEN) != 0U)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d039      	beq.n	8007d50 <HAL_CORDIC_IRQHandler+0x8a>
  {
    if (__HAL_CORDIC_GET_FLAG(hcordic, CORDIC_FLAG_RRDY) != 0U)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cea:	d101      	bne.n	8007cf0 <HAL_CORDIC_IRQHandler+0x2a>
 8007cec:	2301      	movs	r3, #1
 8007cee:	e000      	b.n	8007cf2 <HAL_CORDIC_IRQHandler+0x2c>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d02c      	beq.n	8007d50 <HAL_CORDIC_IRQHandler+0x8a>
    {
      /* Decrement number of calculations to get */
      hcordic->NbCalcToGet--;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	1e5a      	subs	r2, r3, #1
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	611a      	str	r2, [r3, #16]

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &(hcordic->pOutBuff));
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	3308      	adds	r3, #8
 8007d04:	4619      	mov	r1, r3
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f84f 	bl	8007daa <CORDIC_ReadOutDataIncrementPtr>

      /* Check if calculations are still to be ordered */
      if (hcordic->NbCalcToOrder > 0U)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00a      	beq.n	8007d2a <HAL_CORDIC_IRQHandler+0x64>
      {
        /* Decrement number of calculations to order */
        hcordic->NbCalcToOrder--;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	1e5a      	subs	r2, r3, #1
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	60da      	str	r2, [r3, #12]

        /* Continue the processing by providing another write of input data
           in the Write Data register, and increment input buffer pointer */
        CORDIC_WriteInDataIncrementPtr(hcordic, &(hcordic->pInBuff));
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	3304      	adds	r3, #4
 8007d22:	4619      	mov	r1, r3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f817 	bl	8007d58 <CORDIC_WriteInDataIncrementPtr>
      }

      /* Check if all calculations results are got */
      if (hcordic->NbCalcToGet == 0U)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10e      	bne.n	8007d50 <HAL_CORDIC_IRQHandler+0x8a>
      {
        /* Disable Result Ready Interrupt */
        __HAL_CORDIC_DISABLE_IT(hcordic, CORDIC_IT_IEN);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007d40:	601a      	str	r2, [r3, #0]

        /* Change the CORDIC state */
        hcordic->State = HAL_CORDIC_STATE_READY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
#if USE_HAL_CORDIC_REGISTER_CALLBACKS == 1
        /*Call registered callback*/
        hcordic->CalculateCpltCallback(hcordic);
#else
        /*Call legacy weak (surcharged) callback*/
        HAL_CORDIC_CalculateCpltCallback(hcordic);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7ff ffb1 	bl	8007cb2 <HAL_CORDIC_CalculateCpltCallback>
#endif /* USE_HAL_CORDIC_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007d50:	bf00      	nop
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <CORDIC_WriteInDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(CORDIC_HandleTypeDef *hcordic, int32_t **ppInBuff)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	1d1a      	adds	r2, r3, #4
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d86:	d10a      	bne.n	8007d9e <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	1d1a      	adds	r2, r3, #4
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	601a      	str	r2, [r3, #0]
  }
}
 8007d9e:	bf00      	nop
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <CORDIC_ReadOutDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
 8007daa:	b480      	push	{r7}
 8007dac:	b083      	sub	sp, #12
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	689a      	ldr	r2, [r3, #8]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	1d1a      	adds	r2, r3, #4
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007dd4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007dd8:	d10a      	bne.n	8007df0 <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	689a      	ldr	r2, [r3, #8]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	1d1a      	adds	r2, r3, #4
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	601a      	str	r2, [r3, #0]
  }
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f003 0307 	and.w	r3, r3, #7
 8007e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e0c:	4b0c      	ldr	r3, [pc, #48]	; (8007e40 <__NVIC_SetPriorityGrouping+0x44>)
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007e18:	4013      	ands	r3, r2
 8007e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e2e:	4a04      	ldr	r2, [pc, #16]	; (8007e40 <__NVIC_SetPriorityGrouping+0x44>)
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	60d3      	str	r3, [r2, #12]
}
 8007e34:	bf00      	nop
 8007e36:	3714      	adds	r7, #20
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	e000ed00 	.word	0xe000ed00

08007e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e44:	b480      	push	{r7}
 8007e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e48:	4b04      	ldr	r3, [pc, #16]	; (8007e5c <__NVIC_GetPriorityGrouping+0x18>)
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	0a1b      	lsrs	r3, r3, #8
 8007e4e:	f003 0307 	and.w	r3, r3, #7
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	e000ed00 	.word	0xe000ed00

08007e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	4603      	mov	r3, r0
 8007e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	db0b      	blt.n	8007e8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e72:	79fb      	ldrb	r3, [r7, #7]
 8007e74:	f003 021f 	and.w	r2, r3, #31
 8007e78:	4907      	ldr	r1, [pc, #28]	; (8007e98 <__NVIC_EnableIRQ+0x38>)
 8007e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e7e:	095b      	lsrs	r3, r3, #5
 8007e80:	2001      	movs	r0, #1
 8007e82:	fa00 f202 	lsl.w	r2, r0, r2
 8007e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007e8a:	bf00      	nop
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	e000e100 	.word	0xe000e100

08007e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	6039      	str	r1, [r7, #0]
 8007ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	db0a      	blt.n	8007ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	b2da      	uxtb	r2, r3
 8007eb4:	490c      	ldr	r1, [pc, #48]	; (8007ee8 <__NVIC_SetPriority+0x4c>)
 8007eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eba:	0112      	lsls	r2, r2, #4
 8007ebc:	b2d2      	uxtb	r2, r2
 8007ebe:	440b      	add	r3, r1
 8007ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ec4:	e00a      	b.n	8007edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	4908      	ldr	r1, [pc, #32]	; (8007eec <__NVIC_SetPriority+0x50>)
 8007ecc:	79fb      	ldrb	r3, [r7, #7]
 8007ece:	f003 030f 	and.w	r3, r3, #15
 8007ed2:	3b04      	subs	r3, #4
 8007ed4:	0112      	lsls	r2, r2, #4
 8007ed6:	b2d2      	uxtb	r2, r2
 8007ed8:	440b      	add	r3, r1
 8007eda:	761a      	strb	r2, [r3, #24]
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr
 8007ee8:	e000e100 	.word	0xe000e100
 8007eec:	e000ed00 	.word	0xe000ed00

08007ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b089      	sub	sp, #36	; 0x24
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f003 0307 	and.w	r3, r3, #7
 8007f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	f1c3 0307 	rsb	r3, r3, #7
 8007f0a:	2b04      	cmp	r3, #4
 8007f0c:	bf28      	it	cs
 8007f0e:	2304      	movcs	r3, #4
 8007f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	3304      	adds	r3, #4
 8007f16:	2b06      	cmp	r3, #6
 8007f18:	d902      	bls.n	8007f20 <NVIC_EncodePriority+0x30>
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	3b03      	subs	r3, #3
 8007f1e:	e000      	b.n	8007f22 <NVIC_EncodePriority+0x32>
 8007f20:	2300      	movs	r3, #0
 8007f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f24:	f04f 32ff 	mov.w	r2, #4294967295
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f2e:	43da      	mvns	r2, r3
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	401a      	ands	r2, r3
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f38:	f04f 31ff 	mov.w	r1, #4294967295
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f42:	43d9      	mvns	r1, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f48:	4313      	orrs	r3, r2
         );
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3724      	adds	r7, #36	; 0x24
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr
	...

08007f58 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8007f5c:	f3bf 8f4f 	dsb	sy
}
 8007f60:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007f62:	4b06      	ldr	r3, [pc, #24]	; (8007f7c <__NVIC_SystemReset+0x24>)
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007f6a:	4904      	ldr	r1, [pc, #16]	; (8007f7c <__NVIC_SystemReset+0x24>)
 8007f6c:	4b04      	ldr	r3, [pc, #16]	; (8007f80 <__NVIC_SystemReset+0x28>)
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007f72:	f3bf 8f4f 	dsb	sy
}
 8007f76:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007f78:	bf00      	nop
 8007f7a:	e7fd      	b.n	8007f78 <__NVIC_SystemReset+0x20>
 8007f7c:	e000ed00 	.word	0xe000ed00
 8007f80:	05fa0004 	.word	0x05fa0004

08007f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f94:	d301      	bcc.n	8007f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007f96:	2301      	movs	r3, #1
 8007f98:	e00f      	b.n	8007fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f9a:	4a0a      	ldr	r2, [pc, #40]	; (8007fc4 <SysTick_Config+0x40>)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007fa2:	210f      	movs	r1, #15
 8007fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa8:	f7ff ff78 	bl	8007e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007fac:	4b05      	ldr	r3, [pc, #20]	; (8007fc4 <SysTick_Config+0x40>)
 8007fae:	2200      	movs	r2, #0
 8007fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007fb2:	4b04      	ldr	r3, [pc, #16]	; (8007fc4 <SysTick_Config+0x40>)
 8007fb4:	2207      	movs	r2, #7
 8007fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	e000e010 	.word	0xe000e010

08007fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f7ff ff13 	bl	8007dfc <__NVIC_SetPriorityGrouping>
}
 8007fd6:	bf00      	nop
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b086      	sub	sp, #24
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	60b9      	str	r1, [r7, #8]
 8007fe8:	607a      	str	r2, [r7, #4]
 8007fea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007fec:	f7ff ff2a 	bl	8007e44 <__NVIC_GetPriorityGrouping>
 8007ff0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	68b9      	ldr	r1, [r7, #8]
 8007ff6:	6978      	ldr	r0, [r7, #20]
 8007ff8:	f7ff ff7a 	bl	8007ef0 <NVIC_EncodePriority>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008002:	4611      	mov	r1, r2
 8008004:	4618      	mov	r0, r3
 8008006:	f7ff ff49 	bl	8007e9c <__NVIC_SetPriority>
}
 800800a:	bf00      	nop
 800800c:	3718      	adds	r7, #24
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b082      	sub	sp, #8
 8008016:	af00      	add	r7, sp, #0
 8008018:	4603      	mov	r3, r0
 800801a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800801c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008020:	4618      	mov	r0, r3
 8008022:	f7ff ff1d 	bl	8007e60 <__NVIC_EnableIRQ>
}
 8008026:	bf00      	nop
 8008028:	3708      	adds	r7, #8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8008032:	f7ff ff91 	bl	8007f58 <__NVIC_SystemReset>

08008036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b082      	sub	sp, #8
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7ff ffa0 	bl	8007f84 <SysTick_Config>
 8008044:	4603      	mov	r3, r0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d101      	bne.n	8008062 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e08d      	b.n	800817e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	461a      	mov	r2, r3
 8008068:	4b47      	ldr	r3, [pc, #284]	; (8008188 <HAL_DMA_Init+0x138>)
 800806a:	429a      	cmp	r2, r3
 800806c:	d80f      	bhi.n	800808e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	461a      	mov	r2, r3
 8008074:	4b45      	ldr	r3, [pc, #276]	; (800818c <HAL_DMA_Init+0x13c>)
 8008076:	4413      	add	r3, r2
 8008078:	4a45      	ldr	r2, [pc, #276]	; (8008190 <HAL_DMA_Init+0x140>)
 800807a:	fba2 2303 	umull	r2, r3, r2, r3
 800807e:	091b      	lsrs	r3, r3, #4
 8008080:	009a      	lsls	r2, r3, #2
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a42      	ldr	r2, [pc, #264]	; (8008194 <HAL_DMA_Init+0x144>)
 800808a:	641a      	str	r2, [r3, #64]	; 0x40
 800808c:	e00e      	b.n	80080ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	461a      	mov	r2, r3
 8008094:	4b40      	ldr	r3, [pc, #256]	; (8008198 <HAL_DMA_Init+0x148>)
 8008096:	4413      	add	r3, r2
 8008098:	4a3d      	ldr	r2, [pc, #244]	; (8008190 <HAL_DMA_Init+0x140>)
 800809a:	fba2 2303 	umull	r2, r3, r2, r3
 800809e:	091b      	lsrs	r3, r3, #4
 80080a0:	009a      	lsls	r2, r3, #2
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a3c      	ldr	r2, [pc, #240]	; (800819c <HAL_DMA_Init+0x14c>)
 80080aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2202      	movs	r2, #2
 80080b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80080c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80080d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fa1e 	bl	8008540 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800810c:	d102      	bne.n	8008114 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685a      	ldr	r2, [r3, #4]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800811c:	b2d2      	uxtb	r2, r2
 800811e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008128:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d010      	beq.n	8008154 <HAL_DMA_Init+0x104>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	2b04      	cmp	r3, #4
 8008138:	d80c      	bhi.n	8008154 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fa3e 	bl	80085bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008144:	2200      	movs	r2, #0
 8008146:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008150:	605a      	str	r2, [r3, #4]
 8008152:	e008      	b.n	8008166 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	40020407 	.word	0x40020407
 800818c:	bffdfff8 	.word	0xbffdfff8
 8008190:	cccccccd 	.word	0xcccccccd
 8008194:	40020000 	.word	0x40020000
 8008198:	bffdfbf8 	.word	0xbffdfbf8
 800819c:	40020400 	.word	0x40020400

080081a0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d101      	bne.n	80081c0 <HAL_DMA_Start_IT+0x20>
 80081bc:	2302      	movs	r3, #2
 80081be:	e066      	b.n	800828e <HAL_DMA_Start_IT+0xee>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d155      	bne.n	8008280 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2202      	movs	r2, #2
 80081d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2200      	movs	r2, #0
 80081e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f022 0201 	bic.w	r2, r2, #1
 80081f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	68b9      	ldr	r1, [r7, #8]
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f000 f962 	bl	80084c2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008202:	2b00      	cmp	r3, #0
 8008204:	d008      	beq.n	8008218 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f042 020e 	orr.w	r2, r2, #14
 8008214:	601a      	str	r2, [r3, #0]
 8008216:	e00f      	b.n	8008238 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f022 0204 	bic.w	r2, r2, #4
 8008226:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f042 020a 	orr.w	r2, r2, #10
 8008236:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d007      	beq.n	8008256 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008254:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800825a:	2b00      	cmp	r3, #0
 800825c:	d007      	beq.n	800826e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800826c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f042 0201 	orr.w	r2, r2, #1
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	e005      	b.n	800828c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008288:	2302      	movs	r3, #2
 800828a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800828c:	7dfb      	ldrb	r3, [r7, #23]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3718      	adds	r7, #24
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b084      	sub	sp, #16
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d00d      	beq.n	80082ca <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2204      	movs	r2, #4
 80082b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	73fb      	strb	r3, [r7, #15]
 80082c8:	e047      	b.n	800835a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f022 020e 	bic.w	r2, r2, #14
 80082d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f022 0201 	bic.w	r2, r2, #1
 80082e8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082fe:	f003 021f 	and.w	r2, r3, #31
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008306:	2101      	movs	r1, #1
 8008308:	fa01 f202 	lsl.w	r2, r1, r2
 800830c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008316:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00c      	beq.n	800833a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800832a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800832e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008338:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	4798      	blx	r3
    }
  }
  return status;
 800835a:	7bfb      	ldrb	r3, [r7, #15]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008380:	f003 031f 	and.w	r3, r3, #31
 8008384:	2204      	movs	r2, #4
 8008386:	409a      	lsls	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	4013      	ands	r3, r2
 800838c:	2b00      	cmp	r3, #0
 800838e:	d026      	beq.n	80083de <HAL_DMA_IRQHandler+0x7a>
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	f003 0304 	and.w	r3, r3, #4
 8008396:	2b00      	cmp	r3, #0
 8008398:	d021      	beq.n	80083de <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 0320 	and.w	r3, r3, #32
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d107      	bne.n	80083b8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f022 0204 	bic.w	r2, r2, #4
 80083b6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083bc:	f003 021f 	and.w	r2, r3, #31
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c4:	2104      	movs	r1, #4
 80083c6:	fa01 f202 	lsl.w	r2, r1, r2
 80083ca:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d071      	beq.n	80084b8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80083dc:	e06c      	b.n	80084b8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e2:	f003 031f 	and.w	r3, r3, #31
 80083e6:	2202      	movs	r2, #2
 80083e8:	409a      	lsls	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	4013      	ands	r3, r2
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d02e      	beq.n	8008450 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	f003 0302 	and.w	r3, r3, #2
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d029      	beq.n	8008450 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 0320 	and.w	r3, r3, #32
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10b      	bne.n	8008422 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f022 020a 	bic.w	r2, r2, #10
 8008418:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2201      	movs	r2, #1
 800841e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008426:	f003 021f 	and.w	r2, r3, #31
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842e:	2102      	movs	r1, #2
 8008430:	fa01 f202 	lsl.w	r2, r1, r2
 8008434:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008442:	2b00      	cmp	r3, #0
 8008444:	d038      	beq.n	80084b8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800844e:	e033      	b.n	80084b8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008454:	f003 031f 	and.w	r3, r3, #31
 8008458:	2208      	movs	r2, #8
 800845a:	409a      	lsls	r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4013      	ands	r3, r2
 8008460:	2b00      	cmp	r3, #0
 8008462:	d02a      	beq.n	80084ba <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	f003 0308 	and.w	r3, r3, #8
 800846a:	2b00      	cmp	r3, #0
 800846c:	d025      	beq.n	80084ba <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f022 020e 	bic.w	r2, r2, #14
 800847c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008482:	f003 021f 	and.w	r2, r3, #31
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848a:	2101      	movs	r1, #1
 800848c:	fa01 f202 	lsl.w	r2, r1, r2
 8008490:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d004      	beq.n	80084ba <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80084b8:	bf00      	nop
 80084ba:	bf00      	nop
}
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80084c2:	b480      	push	{r7}
 80084c4:	b085      	sub	sp, #20
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	60f8      	str	r0, [r7, #12]
 80084ca:	60b9      	str	r1, [r7, #8]
 80084cc:	607a      	str	r2, [r7, #4]
 80084ce:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80084d8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d004      	beq.n	80084ec <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80084ea:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084f0:	f003 021f 	and.w	r2, r3, #31
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f8:	2101      	movs	r1, #1
 80084fa:	fa01 f202 	lsl.w	r2, r1, r2
 80084fe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	683a      	ldr	r2, [r7, #0]
 8008506:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	2b10      	cmp	r3, #16
 800850e:	d108      	bne.n	8008522 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008520:	e007      	b.n	8008532 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	60da      	str	r2, [r3, #12]
}
 8008532:	bf00      	nop
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
	...

08008540 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008540:	b480      	push	{r7}
 8008542:	b087      	sub	sp, #28
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	461a      	mov	r2, r3
 800854e:	4b16      	ldr	r3, [pc, #88]	; (80085a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8008550:	429a      	cmp	r2, r3
 8008552:	d802      	bhi.n	800855a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8008554:	4b15      	ldr	r3, [pc, #84]	; (80085ac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008556:	617b      	str	r3, [r7, #20]
 8008558:	e001      	b.n	800855e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800855a:	4b15      	ldr	r3, [pc, #84]	; (80085b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800855c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	b2db      	uxtb	r3, r3
 8008568:	3b08      	subs	r3, #8
 800856a:	4a12      	ldr	r2, [pc, #72]	; (80085b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800856c:	fba2 2303 	umull	r2, r3, r2, r3
 8008570:	091b      	lsrs	r3, r3, #4
 8008572:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008578:	089b      	lsrs	r3, r3, #2
 800857a:	009a      	lsls	r2, r3, #2
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	4413      	add	r3, r2
 8008580:	461a      	mov	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a0b      	ldr	r2, [pc, #44]	; (80085b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800858a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f003 031f 	and.w	r3, r3, #31
 8008592:	2201      	movs	r2, #1
 8008594:	409a      	lsls	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	651a      	str	r2, [r3, #80]	; 0x50
}
 800859a:	bf00      	nop
 800859c:	371c      	adds	r7, #28
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	40020407 	.word	0x40020407
 80085ac:	40020800 	.word	0x40020800
 80085b0:	40020820 	.word	0x40020820
 80085b4:	cccccccd 	.word	0xcccccccd
 80085b8:	40020880 	.word	0x40020880

080085bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	4b0b      	ldr	r3, [pc, #44]	; (80085fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80085d0:	4413      	add	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	461a      	mov	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a08      	ldr	r2, [pc, #32]	; (8008600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80085de:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	3b01      	subs	r3, #1
 80085e4:	f003 031f 	and.w	r3, r3, #31
 80085e8:	2201      	movs	r2, #1
 80085ea:	409a      	lsls	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80085f0:	bf00      	nop
 80085f2:	3714      	adds	r7, #20
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr
 80085fc:	1000823f 	.word	0x1000823f
 8008600:	40020940 	.word	0x40020940

08008604 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e147      	b.n	80088a6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d106      	bne.n	8008630 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7fd fa0c 	bl	8005a48 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	699a      	ldr	r2, [r3, #24]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f022 0210 	bic.w	r2, r2, #16
 800863e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008640:	f7fd fd98 	bl	8006174 <HAL_GetTick>
 8008644:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008646:	e012      	b.n	800866e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008648:	f7fd fd94 	bl	8006174 <HAL_GetTick>
 800864c:	4602      	mov	r2, r0
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	2b0a      	cmp	r3, #10
 8008654:	d90b      	bls.n	800866e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800865a:	f043 0201 	orr.w	r2, r3, #1
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2203      	movs	r2, #3
 8008666:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e11b      	b.n	80088a6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	f003 0308 	and.w	r3, r3, #8
 8008678:	2b08      	cmp	r3, #8
 800867a:	d0e5      	beq.n	8008648 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	699a      	ldr	r2, [r3, #24]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f042 0201 	orr.w	r2, r2, #1
 800868a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800868c:	f7fd fd72 	bl	8006174 <HAL_GetTick>
 8008690:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008692:	e012      	b.n	80086ba <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008694:	f7fd fd6e 	bl	8006174 <HAL_GetTick>
 8008698:	4602      	mov	r2, r0
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	2b0a      	cmp	r3, #10
 80086a0:	d90b      	bls.n	80086ba <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086a6:	f043 0201 	orr.w	r2, r3, #1
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2203      	movs	r2, #3
 80086b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e0f5      	b.n	80088a6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	699b      	ldr	r3, [r3, #24]
 80086c0:	f003 0301 	and.w	r3, r3, #1
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d0e5      	beq.n	8008694 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	699a      	ldr	r2, [r3, #24]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f042 0202 	orr.w	r2, r2, #2
 80086d6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a74      	ldr	r2, [pc, #464]	; (80088b0 <HAL_FDCAN_Init+0x2ac>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d103      	bne.n	80086ea <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80086e2:	4a74      	ldr	r2, [pc, #464]	; (80088b4 <HAL_FDCAN_Init+0x2b0>)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	7c1b      	ldrb	r3, [r3, #16]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d108      	bne.n	8008704 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	699a      	ldr	r2, [r3, #24]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008700:	619a      	str	r2, [r3, #24]
 8008702:	e007      	b.n	8008714 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	699a      	ldr	r2, [r3, #24]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008712:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	7c5b      	ldrb	r3, [r3, #17]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d108      	bne.n	800872e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	699a      	ldr	r2, [r3, #24]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800872a:	619a      	str	r2, [r3, #24]
 800872c:	e007      	b.n	800873e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	699a      	ldr	r2, [r3, #24]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800873c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	7c9b      	ldrb	r3, [r3, #18]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d108      	bne.n	8008758 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	699a      	ldr	r2, [r3, #24]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008754:	619a      	str	r2, [r3, #24]
 8008756:	e007      	b.n	8008768 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	699a      	ldr	r2, [r3, #24]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008766:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	689a      	ldr	r2, [r3, #8]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	430a      	orrs	r2, r1
 800877c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	699a      	ldr	r2, [r3, #24]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800878c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	691a      	ldr	r2, [r3, #16]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f022 0210 	bic.w	r2, r2, #16
 800879c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d108      	bne.n	80087b8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	699a      	ldr	r2, [r3, #24]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f042 0204 	orr.w	r2, r2, #4
 80087b4:	619a      	str	r2, [r3, #24]
 80087b6:	e02c      	b.n	8008812 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d028      	beq.n	8008812 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d01c      	beq.n	8008802 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	699a      	ldr	r2, [r3, #24]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80087d6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	691a      	ldr	r2, [r3, #16]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f042 0210 	orr.w	r2, r2, #16
 80087e6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	2b03      	cmp	r3, #3
 80087ee:	d110      	bne.n	8008812 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	699a      	ldr	r2, [r3, #24]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f042 0220 	orr.w	r2, r2, #32
 80087fe:	619a      	str	r2, [r3, #24]
 8008800:	e007      	b.n	8008812 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	699a      	ldr	r2, [r3, #24]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f042 0220 	orr.w	r2, r2, #32
 8008810:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	699b      	ldr	r3, [r3, #24]
 8008816:	3b01      	subs	r3, #1
 8008818:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	69db      	ldr	r3, [r3, #28]
 800881e:	3b01      	subs	r3, #1
 8008820:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008822:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a1b      	ldr	r3, [r3, #32]
 8008828:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800882a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	3b01      	subs	r3, #1
 8008834:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800883a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800883c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008846:	d115      	bne.n	8008874 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008852:	3b01      	subs	r3, #1
 8008854:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008856:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885c:	3b01      	subs	r3, #1
 800885e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008860:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008868:	3b01      	subs	r3, #1
 800886a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008870:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008872:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	430a      	orrs	r2, r1
 8008886:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 faea 	bl	8008e64 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	40006400 	.word	0x40006400
 80088b4:	40006500 	.word	0x40006500

080088b8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b087      	sub	sp, #28
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80088c8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80088ca:	7dfb      	ldrb	r3, [r7, #23]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d002      	beq.n	80088d6 <HAL_FDCAN_ConfigFilter+0x1e>
 80088d0:	7dfb      	ldrb	r3, [r7, #23]
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d13d      	bne.n	8008952 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d119      	bne.n	8008912 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80088ea:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80088f2:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80088f8:	4313      	orrs	r3, r2
 80088fa:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	4413      	add	r3, r2
 8008908:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	e01d      	b.n	800894e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	075a      	lsls	r2, r3, #29
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	4313      	orrs	r3, r2
 800891e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	079a      	lsls	r2, r3, #30
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	4313      	orrs	r3, r2
 800892c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	00db      	lsls	r3, r3, #3
 8008938:	4413      	add	r3, r2
 800893a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	3304      	adds	r3, #4
 8008946:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800894e:	2300      	movs	r3, #0
 8008950:	e006      	b.n	8008960 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008956:	f043 0202 	orr.w	r2, r3, #2
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800895e:	2301      	movs	r3, #1
  }
}
 8008960:	4618      	mov	r0, r3
 8008962:	371c      	adds	r7, #28
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
 8008978:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b01      	cmp	r3, #1
 8008984:	d116      	bne.n	80089b4 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800898e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	011a      	lsls	r2, r3, #4
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	431a      	orrs	r2, r3
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	005b      	lsls	r3, r3, #1
 80089a0:	431a      	orrs	r2, r3
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	431a      	orrs	r2, r3
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	430a      	orrs	r2, r1
 80089ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80089b0:	2300      	movs	r3, #0
 80089b2:	e006      	b.n	80089c2 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089b8:	f043 0204 	orr.w	r2, r3, #4
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
  }
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr

080089ce <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80089ce:	b480      	push	{r7}
 80089d0:	b083      	sub	sp, #12
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d110      	bne.n	8008a04 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2202      	movs	r2, #2
 80089e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	699a      	ldr	r2, [r3, #24]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f022 0201 	bic.w	r2, r2, #1
 80089f8:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8008a00:	2300      	movs	r3, #0
 8008a02:	e006      	b.n	8008a12 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a08:	f043 0204 	orr.w	r2, r3, #4
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
  }
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	370c      	adds	r7, #12
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr

08008a1e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b086      	sub	sp, #24
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	60f8      	str	r0, [r7, #12]
 8008a26:	60b9      	str	r1, [r7, #8]
 8008a28:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d12c      	bne.n	8008a90 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d007      	beq.n	8008a56 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	e023      	b.n	8008a9e <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008a5e:	0c1b      	lsrs	r3, r3, #16
 8008a60:	f003 0303 	and.w	r3, r3, #3
 8008a64:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	68b9      	ldr	r1, [r7, #8]
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f000 fa4f 	bl	8008f10 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2101      	movs	r1, #1
 8008a78:	697a      	ldr	r2, [r7, #20]
 8008a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8008a7e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8008a82:	2201      	movs	r2, #1
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	409a      	lsls	r2, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	e006      	b.n	8008a9e <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a94:	f043 0208 	orr.w	r2, r3, #8
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
  }
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3718      	adds	r7, #24
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
	...

08008aa8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b08b      	sub	sp, #44	; 0x2c
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	607a      	str	r2, [r7, #4]
 8008ab4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008abc:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8008abe:	7efb      	ldrb	r3, [r7, #27]
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	f040 80bc 	bne.w	8008c3e <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	2b40      	cmp	r3, #64	; 0x40
 8008aca:	d121      	bne.n	8008b10 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ad4:	f003 030f 	and.w	r3, r3, #15
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d107      	bne.n	8008aec <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ae0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e0af      	b.n	8008c4c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008af4:	0a1b      	lsrs	r3, r3, #8
 8008af6:	f003 0303 	and.w	r3, r3, #3
 8008afa:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8008b00:	69fa      	ldr	r2, [r7, #28]
 8008b02:	4613      	mov	r3, r2
 8008b04:	00db      	lsls	r3, r3, #3
 8008b06:	4413      	add	r3, r2
 8008b08:	00db      	lsls	r3, r3, #3
 8008b0a:	440b      	add	r3, r1
 8008b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b0e:	e020      	b.n	8008b52 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b18:	f003 030f 	and.w	r3, r3, #15
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d107      	bne.n	8008b30 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e08d      	b.n	8008c4c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b38:	0a1b      	lsrs	r3, r3, #8
 8008b3a:	f003 0303 	and.w	r3, r3, #3
 8008b3e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008b44:	69fa      	ldr	r2, [r7, #28]
 8008b46:	4613      	mov	r3, r2
 8008b48:	00db      	lsls	r3, r3, #3
 8008b4a:	4413      	add	r3, r2
 8008b4c:	00db      	lsls	r3, r3, #3
 8008b4e:	440b      	add	r3, r1
 8008b50:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d107      	bne.n	8008b76 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8008b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	0c9b      	lsrs	r3, r3, #18
 8008b6c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	601a      	str	r2, [r3, #0]
 8008b74:	e005      	b.n	8008b82 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8008b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8008b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9c:	3304      	adds	r3, #4
 8008b9e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8008bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	0e1b      	lsrs	r3, r3, #24
 8008bd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	0fda      	lsrs	r2, r3, #31
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8008be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be8:	3304      	adds	r3, #4
 8008bea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8008bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bee:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	623b      	str	r3, [r7, #32]
 8008bf4:	e00a      	b.n	8008c0c <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	6a3b      	ldr	r3, [r7, #32]
 8008bfa:	441a      	add	r2, r3
 8008bfc:	6839      	ldr	r1, [r7, #0]
 8008bfe:	6a3b      	ldr	r3, [r7, #32]
 8008c00:	440b      	add	r3, r1
 8008c02:	7812      	ldrb	r2, [r2, #0]
 8008c04:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	623b      	str	r3, [r7, #32]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	0c1b      	lsrs	r3, r3, #16
 8008c12:	4a11      	ldr	r2, [pc, #68]	; (8008c58 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8008c14:	5cd3      	ldrb	r3, [r2, r3]
 8008c16:	461a      	mov	r2, r3
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d3eb      	bcc.n	8008bf6 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	2b40      	cmp	r3, #64	; 0x40
 8008c22:	d105      	bne.n	8008c30 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	69fa      	ldr	r2, [r7, #28]
 8008c2a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8008c2e:	e004      	b.n	8008c3a <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	69fa      	ldr	r2, [r7, #28]
 8008c36:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	e006      	b.n	8008c4c <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c42:	f043 0208 	orr.w	r2, r3, #8
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
  }
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	372c      	adds	r7, #44	; 0x2c
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr
 8008c58:	0800f088 	.word	0x0800f088

08008c5c <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	2b40      	cmp	r3, #64	; 0x40
 8008c6a:	d107      	bne.n	8008c7c <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c74:	f003 030f 	and.w	r3, r3, #15
 8008c78:	60fb      	str	r3, [r7, #12]
 8008c7a:	e006      	b.n	8008c8a <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c84:	f003 030f 	and.w	r3, r3, #15
 8008c88:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3714      	adds	r7, #20
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b087      	sub	sp, #28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008caa:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8008cac:	7dfb      	ldrb	r3, [r7, #23]
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d003      	beq.n	8008cba <HAL_FDCAN_ActivateNotification+0x22>
 8008cb2:	7dfb      	ldrb	r3, [r7, #23]
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	f040 80c8 	bne.w	8008e4a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cc0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	f003 0307 	and.w	r3, r3, #7
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d004      	beq.n	8008cd6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d03b      	beq.n	8008d4e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d004      	beq.n	8008cea <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	f003 0302 	and.w	r3, r3, #2
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d031      	beq.n	8008d4e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d004      	beq.n	8008cfe <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	f003 0304 	and.w	r3, r3, #4
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d027      	beq.n	8008d4e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d004      	beq.n	8008d12 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	f003 0308 	and.w	r3, r3, #8
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d01d      	beq.n	8008d4e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d004      	beq.n	8008d26 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	f003 0310 	and.w	r3, r3, #16
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d013      	beq.n	8008d4e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d004      	beq.n	8008d3a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	f003 0320 	and.w	r3, r3, #32
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d009      	beq.n	8008d4e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00c      	beq.n	8008d5e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d107      	bne.n	8008d5e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f042 0201 	orr.w	r2, r2, #1
 8008d5c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	f003 0307 	and.w	r3, r3, #7
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d004      	beq.n	8008d72 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	f003 0301 	and.w	r3, r3, #1
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d13b      	bne.n	8008dea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d004      	beq.n	8008d86 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	f003 0302 	and.w	r3, r3, #2
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d131      	bne.n	8008dea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d004      	beq.n	8008d9a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	f003 0304 	and.w	r3, r3, #4
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d127      	bne.n	8008dea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d004      	beq.n	8008dae <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	f003 0308 	and.w	r3, r3, #8
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d11d      	bne.n	8008dea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d004      	beq.n	8008dc2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	f003 0310 	and.w	r3, r3, #16
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d113      	bne.n	8008dea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d004      	beq.n	8008dd6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	f003 0320 	and.w	r3, r3, #32
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d109      	bne.n	8008dea <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00c      	beq.n	8008dfa <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d007      	beq.n	8008dfa <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f042 0202 	orr.w	r2, r2, #2
 8008df8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d009      	beq.n	8008e18 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	430a      	orrs	r2, r1
 8008e14:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d009      	beq.n	8008e36 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	430a      	orrs	r2, r1
 8008e32:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	68ba      	ldr	r2, [r7, #8]
 8008e42:	430a      	orrs	r2, r1
 8008e44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8008e46:	2300      	movs	r3, #0
 8008e48:	e006      	b.n	8008e58 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e4e:	f043 0202 	orr.w	r2, r3, #2
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
  }
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	371c      	adds	r7, #28
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8008e6c:	4b27      	ldr	r3, [pc, #156]	; (8008f0c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8008e6e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68ba      	ldr	r2, [r7, #8]
 8008e74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e7e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e86:	041a      	lsls	r2, r3, #16
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	430a      	orrs	r2, r1
 8008e8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ea4:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eac:	061a      	lsls	r2, r3, #24
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	430a      	orrs	r2, r1
 8008eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	60fb      	str	r3, [r7, #12]
 8008ee4:	e005      	b.n	8008ef2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	3304      	adds	r3, #4
 8008ef0:	60fb      	str	r3, [r7, #12]
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d3f3      	bcc.n	8008ee6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8008efe:	bf00      	nop
 8008f00:	bf00      	nop
 8008f02:	3714      	adds	r7, #20
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	4000a400 	.word	0x4000a400

08008f10 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b089      	sub	sp, #36	; 0x24
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
 8008f1c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d10a      	bne.n	8008f3c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8008f2e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008f36:	4313      	orrs	r3, r2
 8008f38:	61fb      	str	r3, [r7, #28]
 8008f3a:	e00a      	b.n	8008f52 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008f44:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8008f4a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008f4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f50:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	6a1b      	ldr	r3, [r3, #32]
 8008f56:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008f5c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8008f62:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8008f68:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	4613      	mov	r3, r2
 8008f7a:	00db      	lsls	r3, r3, #3
 8008f7c:	4413      	add	r3, r2
 8008f7e:	00db      	lsls	r3, r3, #3
 8008f80:	440b      	add	r3, r1
 8008f82:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	69fa      	ldr	r2, [r7, #28]
 8008f88:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	3304      	adds	r3, #4
 8008f9a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	617b      	str	r3, [r7, #20]
 8008fa0:	e020      	b.n	8008fe4 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	3303      	adds	r3, #3
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	4413      	add	r3, r2
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	3302      	adds	r3, #2
 8008fb2:	6879      	ldr	r1, [r7, #4]
 8008fb4:	440b      	add	r3, r1
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008fba:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	6879      	ldr	r1, [r7, #4]
 8008fc2:	440b      	add	r3, r1
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008fc8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8008fca:	6879      	ldr	r1, [r7, #4]
 8008fcc:	697a      	ldr	r2, [r7, #20]
 8008fce:	440a      	add	r2, r1
 8008fd0:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008fd2:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	3304      	adds	r3, #4
 8008fdc:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	3304      	adds	r3, #4
 8008fe2:	617b      	str	r3, [r7, #20]
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	0c1b      	lsrs	r3, r3, #16
 8008fea:	4a06      	ldr	r2, [pc, #24]	; (8009004 <FDCAN_CopyMessageToRAM+0xf4>)
 8008fec:	5cd3      	ldrb	r3, [r2, r3]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d3d5      	bcc.n	8008fa2 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8008ff6:	bf00      	nop
 8008ff8:	bf00      	nop
 8008ffa:	3724      	adds	r7, #36	; 0x24
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	0800f088 	.word	0x0800f088

08009008 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b086      	sub	sp, #24
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8009016:	2300      	movs	r3, #0
 8009018:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800901a:	4b24      	ldr	r3, [pc, #144]	; (80090ac <HAL_FLASH_Program+0xa4>)
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d101      	bne.n	8009026 <HAL_FLASH_Program+0x1e>
 8009022:	2302      	movs	r3, #2
 8009024:	e03e      	b.n	80090a4 <HAL_FLASH_Program+0x9c>
 8009026:	4b21      	ldr	r3, [pc, #132]	; (80090ac <HAL_FLASH_Program+0xa4>)
 8009028:	2201      	movs	r2, #1
 800902a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800902c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009030:	f000 f888 	bl	8009144 <FLASH_WaitForLastOperation>
 8009034:	4603      	mov	r3, r0
 8009036:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8009038:	7dfb      	ldrb	r3, [r7, #23]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d12e      	bne.n	800909c <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800903e:	4b1b      	ldr	r3, [pc, #108]	; (80090ac <HAL_FLASH_Program+0xa4>)
 8009040:	2200      	movs	r2, #0
 8009042:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d107      	bne.n	800905a <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800904a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800904e:	68b8      	ldr	r0, [r7, #8]
 8009050:	f000 f8cc 	bl	80091ec <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8009054:	2301      	movs	r3, #1
 8009056:	613b      	str	r3, [r7, #16]
 8009058:	e010      	b.n	800907c <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d002      	beq.n	8009066 <HAL_FLASH_Program+0x5e>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2b02      	cmp	r3, #2
 8009064:	d10a      	bne.n	800907c <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	4619      	mov	r1, r3
 800906a:	68b8      	ldr	r0, [r7, #8]
 800906c:	f000 f8e4 	bl	8009238 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2b02      	cmp	r3, #2
 8009074:	d102      	bne.n	800907c <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8009076:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800907a:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800907c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009080:	f000 f860 	bl	8009144 <FLASH_WaitForLastOperation>
 8009084:	4603      	mov	r3, r0
 8009086:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d006      	beq.n	800909c <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800908e:	4b08      	ldr	r3, [pc, #32]	; (80090b0 <HAL_FLASH_Program+0xa8>)
 8009090:	695a      	ldr	r2, [r3, #20]
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	43db      	mvns	r3, r3
 8009096:	4906      	ldr	r1, [pc, #24]	; (80090b0 <HAL_FLASH_Program+0xa8>)
 8009098:	4013      	ands	r3, r2
 800909a:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800909c:	4b03      	ldr	r3, [pc, #12]	; (80090ac <HAL_FLASH_Program+0xa4>)
 800909e:	2200      	movs	r2, #0
 80090a0:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80090a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3718      	adds	r7, #24
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	20000024 	.word	0x20000024
 80090b0:	40022000 	.word	0x40022000

080090b4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80090ba:	2300      	movs	r3, #0
 80090bc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80090be:	4b0b      	ldr	r3, [pc, #44]	; (80090ec <HAL_FLASH_Unlock+0x38>)
 80090c0:	695b      	ldr	r3, [r3, #20]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	da0b      	bge.n	80090de <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80090c6:	4b09      	ldr	r3, [pc, #36]	; (80090ec <HAL_FLASH_Unlock+0x38>)
 80090c8:	4a09      	ldr	r2, [pc, #36]	; (80090f0 <HAL_FLASH_Unlock+0x3c>)
 80090ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80090cc:	4b07      	ldr	r3, [pc, #28]	; (80090ec <HAL_FLASH_Unlock+0x38>)
 80090ce:	4a09      	ldr	r2, [pc, #36]	; (80090f4 <HAL_FLASH_Unlock+0x40>)
 80090d0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80090d2:	4b06      	ldr	r3, [pc, #24]	; (80090ec <HAL_FLASH_Unlock+0x38>)
 80090d4:	695b      	ldr	r3, [r3, #20]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	da01      	bge.n	80090de <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80090de:	79fb      	ldrb	r3, [r7, #7]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr
 80090ec:	40022000 	.word	0x40022000
 80090f0:	45670123 	.word	0x45670123
 80090f4:	cdef89ab 	.word	0xcdef89ab

080090f8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8009102:	4b09      	ldr	r3, [pc, #36]	; (8009128 <HAL_FLASH_Lock+0x30>)
 8009104:	695b      	ldr	r3, [r3, #20]
 8009106:	4a08      	ldr	r2, [pc, #32]	; (8009128 <HAL_FLASH_Lock+0x30>)
 8009108:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800910c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800910e:	4b06      	ldr	r3, [pc, #24]	; (8009128 <HAL_FLASH_Lock+0x30>)
 8009110:	695b      	ldr	r3, [r3, #20]
 8009112:	2b00      	cmp	r3, #0
 8009114:	da01      	bge.n	800911a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8009116:	2300      	movs	r3, #0
 8009118:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800911a:	79fb      	ldrb	r3, [r7, #7]
}
 800911c:	4618      	mov	r0, r3
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	40022000 	.word	0x40022000

0800912c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 800912c:	b480      	push	{r7}
 800912e:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8009130:	4b03      	ldr	r3, [pc, #12]	; (8009140 <HAL_FLASH_GetError+0x14>)
 8009132:	685b      	ldr	r3, [r3, #4]
}
 8009134:	4618      	mov	r0, r3
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	20000024 	.word	0x20000024

08009144 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800914c:	f7fd f812 	bl	8006174 <HAL_GetTick>
 8009150:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8009152:	e009      	b.n	8009168 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8009154:	f7fd f80e 	bl	8006174 <HAL_GetTick>
 8009158:	4602      	mov	r2, r0
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	429a      	cmp	r2, r3
 8009162:	d201      	bcs.n	8009168 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8009164:	2303      	movs	r3, #3
 8009166:	e038      	b.n	80091da <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8009168:	4b1e      	ldr	r3, [pc, #120]	; (80091e4 <FLASH_WaitForLastOperation+0xa0>)
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009174:	d0ee      	beq.n	8009154 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8009176:	4b1b      	ldr	r3, [pc, #108]	; (80091e4 <FLASH_WaitForLastOperation+0xa0>)
 8009178:	691a      	ldr	r2, [r3, #16]
 800917a:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800917e:	4013      	ands	r3, r2
 8009180:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d01e      	beq.n	80091c6 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8009188:	4b17      	ldr	r3, [pc, #92]	; (80091e8 <FLASH_WaitForLastOperation+0xa4>)
 800918a:	685a      	ldr	r2, [r3, #4]
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	4313      	orrs	r3, r2
 8009190:	4a15      	ldr	r2, [pc, #84]	; (80091e8 <FLASH_WaitForLastOperation+0xa4>)
 8009192:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800919a:	2b00      	cmp	r3, #0
 800919c:	d007      	beq.n	80091ae <FLASH_WaitForLastOperation+0x6a>
 800919e:	4b11      	ldr	r3, [pc, #68]	; (80091e4 <FLASH_WaitForLastOperation+0xa0>)
 80091a0:	699a      	ldr	r2, [r3, #24]
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80091a8:	490e      	ldr	r1, [pc, #56]	; (80091e4 <FLASH_WaitForLastOperation+0xa0>)
 80091aa:	4313      	orrs	r3, r2
 80091ac:	618b      	str	r3, [r1, #24]
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d004      	beq.n	80091c2 <FLASH_WaitForLastOperation+0x7e>
 80091b8:	4a0a      	ldr	r2, [pc, #40]	; (80091e4 <FLASH_WaitForLastOperation+0xa0>)
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80091c0:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e009      	b.n	80091da <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80091c6:	4b07      	ldr	r3, [pc, #28]	; (80091e4 <FLASH_WaitForLastOperation+0xa0>)
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	f003 0301 	and.w	r3, r3, #1
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d102      	bne.n	80091d8 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80091d2:	4b04      	ldr	r3, [pc, #16]	; (80091e4 <FLASH_WaitForLastOperation+0xa0>)
 80091d4:	2201      	movs	r2, #1
 80091d6:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	40022000 	.word	0x40022000
 80091e8:	20000024 	.word	0x20000024

080091ec <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80091f8:	4b0e      	ldr	r3, [pc, #56]	; (8009234 <FLASH_Program_DoubleWord+0x48>)
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	4a0d      	ldr	r2, [pc, #52]	; (8009234 <FLASH_Program_DoubleWord+0x48>)
 80091fe:	f043 0301 	orr.w	r3, r3, #1
 8009202:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	683a      	ldr	r2, [r7, #0]
 8009208:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800920a:	f3bf 8f6f 	isb	sy
}
 800920e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8009210:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009214:	f04f 0200 	mov.w	r2, #0
 8009218:	f04f 0300 	mov.w	r3, #0
 800921c:	000a      	movs	r2, r1
 800921e:	2300      	movs	r3, #0
 8009220:	68f9      	ldr	r1, [r7, #12]
 8009222:	3104      	adds	r1, #4
 8009224:	4613      	mov	r3, r2
 8009226:	600b      	str	r3, [r1, #0]
}
 8009228:	bf00      	nop
 800922a:	3714      	adds	r7, #20
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr
 8009234:	40022000 	.word	0x40022000

08009238 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8009238:	b480      	push	{r7}
 800923a:	b089      	sub	sp, #36	; 0x24
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8009242:	2340      	movs	r3, #64	; 0x40
 8009244:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800924e:	4b14      	ldr	r3, [pc, #80]	; (80092a0 <FLASH_Program_Fast+0x68>)
 8009250:	695b      	ldr	r3, [r3, #20]
 8009252:	4a13      	ldr	r2, [pc, #76]	; (80092a0 <FLASH_Program_Fast+0x68>)
 8009254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009258:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800925a:	f3ef 8310 	mrs	r3, PRIMASK
 800925e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009260:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8009262:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009264:	b672      	cpsid	i
}
 8009266:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	3304      	adds	r3, #4
 8009274:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	3304      	adds	r3, #4
 800927a:	617b      	str	r3, [r7, #20]
    row_index--;
 800927c:	7ffb      	ldrb	r3, [r7, #31]
 800927e:	3b01      	subs	r3, #1
 8009280:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8009282:	7ffb      	ldrb	r3, [r7, #31]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d1ef      	bne.n	8009268 <FLASH_Program_Fast+0x30>
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	f383 8810 	msr	PRIMASK, r3
}
 8009292:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8009294:	bf00      	nop
 8009296:	3724      	adds	r7, #36	; 0x24
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr
 80092a0:	40022000 	.word	0x40022000

080092a4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80092ae:	4b4a      	ldr	r3, [pc, #296]	; (80093d8 <HAL_FLASHEx_Erase+0x134>)
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d101      	bne.n	80092ba <HAL_FLASHEx_Erase+0x16>
 80092b6:	2302      	movs	r3, #2
 80092b8:	e089      	b.n	80093ce <HAL_FLASHEx_Erase+0x12a>
 80092ba:	4b47      	ldr	r3, [pc, #284]	; (80093d8 <HAL_FLASHEx_Erase+0x134>)
 80092bc:	2201      	movs	r2, #1
 80092be:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80092c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80092c4:	f7ff ff3e 	bl	8009144 <FLASH_WaitForLastOperation>
 80092c8:	4603      	mov	r3, r0
 80092ca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d179      	bne.n	80093c6 <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80092d2:	4b41      	ldr	r3, [pc, #260]	; (80093d8 <HAL_FLASHEx_Erase+0x134>)
 80092d4:	2200      	movs	r2, #0
 80092d6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80092d8:	4b40      	ldr	r3, [pc, #256]	; (80093dc <HAL_FLASHEx_Erase+0x138>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d019      	beq.n	8009318 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80092e4:	4b3d      	ldr	r3, [pc, #244]	; (80093dc <HAL_FLASHEx_Erase+0x138>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a3c      	ldr	r2, [pc, #240]	; (80093dc <HAL_FLASHEx_Erase+0x138>)
 80092ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80092ee:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80092f0:	4b3a      	ldr	r3, [pc, #232]	; (80093dc <HAL_FLASHEx_Erase+0x138>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d009      	beq.n	8009310 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80092fc:	4b37      	ldr	r3, [pc, #220]	; (80093dc <HAL_FLASHEx_Erase+0x138>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a36      	ldr	r2, [pc, #216]	; (80093dc <HAL_FLASHEx_Erase+0x138>)
 8009302:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009306:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8009308:	4b33      	ldr	r3, [pc, #204]	; (80093d8 <HAL_FLASHEx_Erase+0x134>)
 800930a:	2203      	movs	r2, #3
 800930c:	771a      	strb	r2, [r3, #28]
 800930e:	e016      	b.n	800933e <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8009310:	4b31      	ldr	r3, [pc, #196]	; (80093d8 <HAL_FLASHEx_Erase+0x134>)
 8009312:	2201      	movs	r2, #1
 8009314:	771a      	strb	r2, [r3, #28]
 8009316:	e012      	b.n	800933e <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009318:	4b30      	ldr	r3, [pc, #192]	; (80093dc <HAL_FLASHEx_Erase+0x138>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009320:	2b00      	cmp	r3, #0
 8009322:	d009      	beq.n	8009338 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8009324:	4b2d      	ldr	r3, [pc, #180]	; (80093dc <HAL_FLASHEx_Erase+0x138>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a2c      	ldr	r2, [pc, #176]	; (80093dc <HAL_FLASHEx_Erase+0x138>)
 800932a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800932e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8009330:	4b29      	ldr	r3, [pc, #164]	; (80093d8 <HAL_FLASHEx_Erase+0x134>)
 8009332:	2202      	movs	r2, #2
 8009334:	771a      	strb	r2, [r3, #28]
 8009336:	e002      	b.n	800933e <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009338:	4b27      	ldr	r3, [pc, #156]	; (80093d8 <HAL_FLASHEx_Erase+0x134>)
 800933a:	2200      	movs	r2, #0
 800933c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2b01      	cmp	r3, #1
 8009344:	d111      	bne.n	800936a <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	4618      	mov	r0, r3
 800934c:	f000 f848 	bl	80093e0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009350:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009354:	f7ff fef6 	bl	8009144 <FLASH_WaitForLastOperation>
 8009358:	4603      	mov	r3, r0
 800935a:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800935c:	4b1f      	ldr	r3, [pc, #124]	; (80093dc <HAL_FLASHEx_Erase+0x138>)
 800935e:	695b      	ldr	r3, [r3, #20]
 8009360:	4a1e      	ldr	r2, [pc, #120]	; (80093dc <HAL_FLASHEx_Erase+0x138>)
 8009362:	f023 0304 	bic.w	r3, r3, #4
 8009366:	6153      	str	r3, [r2, #20]
 8009368:	e02b      	b.n	80093c2 <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	f04f 32ff 	mov.w	r2, #4294967295
 8009370:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	60bb      	str	r3, [r7, #8]
 8009378:	e01b      	b.n	80093b2 <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	4619      	mov	r1, r3
 8009380:	68b8      	ldr	r0, [r7, #8]
 8009382:	f000 f84b 	bl	800941c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009386:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800938a:	f7ff fedb 	bl	8009144 <FLASH_WaitForLastOperation>
 800938e:	4603      	mov	r3, r0
 8009390:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8009392:	4b12      	ldr	r3, [pc, #72]	; (80093dc <HAL_FLASHEx_Erase+0x138>)
 8009394:	695b      	ldr	r3, [r3, #20]
 8009396:	4a11      	ldr	r2, [pc, #68]	; (80093dc <HAL_FLASHEx_Erase+0x138>)
 8009398:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 800939c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800939e:	7bfb      	ldrb	r3, [r7, #15]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d003      	beq.n	80093ac <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	601a      	str	r2, [r3, #0]
          break;
 80093aa:	e00a      	b.n	80093c2 <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	3301      	adds	r3, #1
 80093b0:	60bb      	str	r3, [r7, #8]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	689a      	ldr	r2, [r3, #8]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	4413      	add	r3, r2
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d3db      	bcc.n	800937a <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80093c2:	f000 f84f 	bl	8009464 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80093c6:	4b04      	ldr	r3, [pc, #16]	; (80093d8 <HAL_FLASHEx_Erase+0x134>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	701a      	strb	r2, [r3, #0]

  return status;
 80093cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	20000024 	.word	0x20000024
 80093dc:	40022000 	.word	0x40022000

080093e0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d005      	beq.n	80093fe <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80093f2:	4b09      	ldr	r3, [pc, #36]	; (8009418 <FLASH_MassErase+0x38>)
 80093f4:	695b      	ldr	r3, [r3, #20]
 80093f6:	4a08      	ldr	r2, [pc, #32]	; (8009418 <FLASH_MassErase+0x38>)
 80093f8:	f043 0304 	orr.w	r3, r3, #4
 80093fc:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80093fe:	4b06      	ldr	r3, [pc, #24]	; (8009418 <FLASH_MassErase+0x38>)
 8009400:	695b      	ldr	r3, [r3, #20]
 8009402:	4a05      	ldr	r2, [pc, #20]	; (8009418 <FLASH_MassErase+0x38>)
 8009404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009408:	6153      	str	r3, [r2, #20]
}
 800940a:	bf00      	nop
 800940c:	370c      	adds	r7, #12
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	40022000 	.word	0x40022000

0800941c <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8009426:	4b0e      	ldr	r3, [pc, #56]	; (8009460 <FLASH_PageErase+0x44>)
 8009428:	695b      	ldr	r3, [r3, #20]
 800942a:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	00db      	lsls	r3, r3, #3
 8009432:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8009436:	490a      	ldr	r1, [pc, #40]	; (8009460 <FLASH_PageErase+0x44>)
 8009438:	4313      	orrs	r3, r2
 800943a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800943c:	4b08      	ldr	r3, [pc, #32]	; (8009460 <FLASH_PageErase+0x44>)
 800943e:	695b      	ldr	r3, [r3, #20]
 8009440:	4a07      	ldr	r2, [pc, #28]	; (8009460 <FLASH_PageErase+0x44>)
 8009442:	f043 0302 	orr.w	r3, r3, #2
 8009446:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009448:	4b05      	ldr	r3, [pc, #20]	; (8009460 <FLASH_PageErase+0x44>)
 800944a:	695b      	ldr	r3, [r3, #20]
 800944c:	4a04      	ldr	r2, [pc, #16]	; (8009460 <FLASH_PageErase+0x44>)
 800944e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009452:	6153      	str	r3, [r2, #20]
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	40022000 	.word	0x40022000

08009464 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800946a:	4b1e      	ldr	r3, [pc, #120]	; (80094e4 <FLASH_FlushCaches+0x80>)
 800946c:	7f1b      	ldrb	r3, [r3, #28]
 800946e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8009470:	79fb      	ldrb	r3, [r7, #7]
 8009472:	2b01      	cmp	r3, #1
 8009474:	d002      	beq.n	800947c <FLASH_FlushCaches+0x18>
 8009476:	79fb      	ldrb	r3, [r7, #7]
 8009478:	2b03      	cmp	r3, #3
 800947a:	d111      	bne.n	80094a0 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800947c:	4b1a      	ldr	r3, [pc, #104]	; (80094e8 <FLASH_FlushCaches+0x84>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a19      	ldr	r2, [pc, #100]	; (80094e8 <FLASH_FlushCaches+0x84>)
 8009482:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009486:	6013      	str	r3, [r2, #0]
 8009488:	4b17      	ldr	r3, [pc, #92]	; (80094e8 <FLASH_FlushCaches+0x84>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a16      	ldr	r2, [pc, #88]	; (80094e8 <FLASH_FlushCaches+0x84>)
 800948e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009492:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009494:	4b14      	ldr	r3, [pc, #80]	; (80094e8 <FLASH_FlushCaches+0x84>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a13      	ldr	r2, [pc, #76]	; (80094e8 <FLASH_FlushCaches+0x84>)
 800949a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800949e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80094a0:	79fb      	ldrb	r3, [r7, #7]
 80094a2:	2b02      	cmp	r3, #2
 80094a4:	d002      	beq.n	80094ac <FLASH_FlushCaches+0x48>
 80094a6:	79fb      	ldrb	r3, [r7, #7]
 80094a8:	2b03      	cmp	r3, #3
 80094aa:	d111      	bne.n	80094d0 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80094ac:	4b0e      	ldr	r3, [pc, #56]	; (80094e8 <FLASH_FlushCaches+0x84>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a0d      	ldr	r2, [pc, #52]	; (80094e8 <FLASH_FlushCaches+0x84>)
 80094b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80094b6:	6013      	str	r3, [r2, #0]
 80094b8:	4b0b      	ldr	r3, [pc, #44]	; (80094e8 <FLASH_FlushCaches+0x84>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a0a      	ldr	r2, [pc, #40]	; (80094e8 <FLASH_FlushCaches+0x84>)
 80094be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094c2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80094c4:	4b08      	ldr	r3, [pc, #32]	; (80094e8 <FLASH_FlushCaches+0x84>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a07      	ldr	r2, [pc, #28]	; (80094e8 <FLASH_FlushCaches+0x84>)
 80094ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80094ce:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80094d0:	4b04      	ldr	r3, [pc, #16]	; (80094e4 <FLASH_FlushCaches+0x80>)
 80094d2:	2200      	movs	r2, #0
 80094d4:	771a      	strb	r2, [r3, #28]
}
 80094d6:	bf00      	nop
 80094d8:	370c      	adds	r7, #12
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	20000024 	.word	0x20000024
 80094e8:	40022000 	.word	0x40022000

080094ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b087      	sub	sp, #28
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80094f6:	2300      	movs	r3, #0
 80094f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80094fa:	e15a      	b.n	80097b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	2101      	movs	r1, #1
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	fa01 f303 	lsl.w	r3, r1, r3
 8009508:	4013      	ands	r3, r2
 800950a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2b00      	cmp	r3, #0
 8009510:	f000 814c 	beq.w	80097ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	2b01      	cmp	r3, #1
 800951a:	d00b      	beq.n	8009534 <HAL_GPIO_Init+0x48>
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	2b02      	cmp	r3, #2
 8009522:	d007      	beq.n	8009534 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009528:	2b11      	cmp	r3, #17
 800952a:	d003      	beq.n	8009534 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	2b12      	cmp	r3, #18
 8009532:	d130      	bne.n	8009596 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	005b      	lsls	r3, r3, #1
 800953e:	2203      	movs	r2, #3
 8009540:	fa02 f303 	lsl.w	r3, r2, r3
 8009544:	43db      	mvns	r3, r3
 8009546:	693a      	ldr	r2, [r7, #16]
 8009548:	4013      	ands	r3, r2
 800954a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	68da      	ldr	r2, [r3, #12]
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	005b      	lsls	r3, r3, #1
 8009554:	fa02 f303 	lsl.w	r3, r2, r3
 8009558:	693a      	ldr	r2, [r7, #16]
 800955a:	4313      	orrs	r3, r2
 800955c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	693a      	ldr	r2, [r7, #16]
 8009562:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800956a:	2201      	movs	r2, #1
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	fa02 f303 	lsl.w	r3, r2, r3
 8009572:	43db      	mvns	r3, r3
 8009574:	693a      	ldr	r2, [r7, #16]
 8009576:	4013      	ands	r3, r2
 8009578:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	091b      	lsrs	r3, r3, #4
 8009580:	f003 0201 	and.w	r2, r3, #1
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	fa02 f303 	lsl.w	r3, r2, r3
 800958a:	693a      	ldr	r2, [r7, #16]
 800958c:	4313      	orrs	r3, r2
 800958e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	693a      	ldr	r2, [r7, #16]
 8009594:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	005b      	lsls	r3, r3, #1
 80095a0:	2203      	movs	r2, #3
 80095a2:	fa02 f303 	lsl.w	r3, r2, r3
 80095a6:	43db      	mvns	r3, r3
 80095a8:	693a      	ldr	r2, [r7, #16]
 80095aa:	4013      	ands	r3, r2
 80095ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	689a      	ldr	r2, [r3, #8]
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	005b      	lsls	r3, r3, #1
 80095b6:	fa02 f303 	lsl.w	r3, r2, r3
 80095ba:	693a      	ldr	r2, [r7, #16]
 80095bc:	4313      	orrs	r3, r2
 80095be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	693a      	ldr	r2, [r7, #16]
 80095c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d003      	beq.n	80095d6 <HAL_GPIO_Init+0xea>
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	2b12      	cmp	r3, #18
 80095d4:	d123      	bne.n	800961e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	08da      	lsrs	r2, r3, #3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	3208      	adds	r2, #8
 80095de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	f003 0307 	and.w	r3, r3, #7
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	220f      	movs	r2, #15
 80095ee:	fa02 f303 	lsl.w	r3, r2, r3
 80095f2:	43db      	mvns	r3, r3
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	4013      	ands	r3, r2
 80095f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	691a      	ldr	r2, [r3, #16]
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	f003 0307 	and.w	r3, r3, #7
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	fa02 f303 	lsl.w	r3, r2, r3
 800960a:	693a      	ldr	r2, [r7, #16]
 800960c:	4313      	orrs	r3, r2
 800960e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	08da      	lsrs	r2, r3, #3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	3208      	adds	r2, #8
 8009618:	6939      	ldr	r1, [r7, #16]
 800961a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	005b      	lsls	r3, r3, #1
 8009628:	2203      	movs	r2, #3
 800962a:	fa02 f303 	lsl.w	r3, r2, r3
 800962e:	43db      	mvns	r3, r3
 8009630:	693a      	ldr	r2, [r7, #16]
 8009632:	4013      	ands	r3, r2
 8009634:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	f003 0203 	and.w	r2, r3, #3
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	005b      	lsls	r3, r3, #1
 8009642:	fa02 f303 	lsl.w	r3, r2, r3
 8009646:	693a      	ldr	r2, [r7, #16]
 8009648:	4313      	orrs	r3, r2
 800964a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	693a      	ldr	r2, [r7, #16]
 8009650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800965a:	2b00      	cmp	r3, #0
 800965c:	f000 80a6 	beq.w	80097ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009660:	4b5b      	ldr	r3, [pc, #364]	; (80097d0 <HAL_GPIO_Init+0x2e4>)
 8009662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009664:	4a5a      	ldr	r2, [pc, #360]	; (80097d0 <HAL_GPIO_Init+0x2e4>)
 8009666:	f043 0301 	orr.w	r3, r3, #1
 800966a:	6613      	str	r3, [r2, #96]	; 0x60
 800966c:	4b58      	ldr	r3, [pc, #352]	; (80097d0 <HAL_GPIO_Init+0x2e4>)
 800966e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009670:	f003 0301 	and.w	r3, r3, #1
 8009674:	60bb      	str	r3, [r7, #8]
 8009676:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009678:	4a56      	ldr	r2, [pc, #344]	; (80097d4 <HAL_GPIO_Init+0x2e8>)
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	089b      	lsrs	r3, r3, #2
 800967e:	3302      	adds	r3, #2
 8009680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009684:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	f003 0303 	and.w	r3, r3, #3
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	220f      	movs	r2, #15
 8009690:	fa02 f303 	lsl.w	r3, r2, r3
 8009694:	43db      	mvns	r3, r3
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	4013      	ands	r3, r2
 800969a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80096a2:	d01f      	beq.n	80096e4 <HAL_GPIO_Init+0x1f8>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a4c      	ldr	r2, [pc, #304]	; (80097d8 <HAL_GPIO_Init+0x2ec>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d019      	beq.n	80096e0 <HAL_GPIO_Init+0x1f4>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a4b      	ldr	r2, [pc, #300]	; (80097dc <HAL_GPIO_Init+0x2f0>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d013      	beq.n	80096dc <HAL_GPIO_Init+0x1f0>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a4a      	ldr	r2, [pc, #296]	; (80097e0 <HAL_GPIO_Init+0x2f4>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d00d      	beq.n	80096d8 <HAL_GPIO_Init+0x1ec>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a49      	ldr	r2, [pc, #292]	; (80097e4 <HAL_GPIO_Init+0x2f8>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d007      	beq.n	80096d4 <HAL_GPIO_Init+0x1e8>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a48      	ldr	r2, [pc, #288]	; (80097e8 <HAL_GPIO_Init+0x2fc>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d101      	bne.n	80096d0 <HAL_GPIO_Init+0x1e4>
 80096cc:	2305      	movs	r3, #5
 80096ce:	e00a      	b.n	80096e6 <HAL_GPIO_Init+0x1fa>
 80096d0:	2306      	movs	r3, #6
 80096d2:	e008      	b.n	80096e6 <HAL_GPIO_Init+0x1fa>
 80096d4:	2304      	movs	r3, #4
 80096d6:	e006      	b.n	80096e6 <HAL_GPIO_Init+0x1fa>
 80096d8:	2303      	movs	r3, #3
 80096da:	e004      	b.n	80096e6 <HAL_GPIO_Init+0x1fa>
 80096dc:	2302      	movs	r3, #2
 80096de:	e002      	b.n	80096e6 <HAL_GPIO_Init+0x1fa>
 80096e0:	2301      	movs	r3, #1
 80096e2:	e000      	b.n	80096e6 <HAL_GPIO_Init+0x1fa>
 80096e4:	2300      	movs	r3, #0
 80096e6:	697a      	ldr	r2, [r7, #20]
 80096e8:	f002 0203 	and.w	r2, r2, #3
 80096ec:	0092      	lsls	r2, r2, #2
 80096ee:	4093      	lsls	r3, r2
 80096f0:	693a      	ldr	r2, [r7, #16]
 80096f2:	4313      	orrs	r3, r2
 80096f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80096f6:	4937      	ldr	r1, [pc, #220]	; (80097d4 <HAL_GPIO_Init+0x2e8>)
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	089b      	lsrs	r3, r3, #2
 80096fc:	3302      	adds	r3, #2
 80096fe:	693a      	ldr	r2, [r7, #16]
 8009700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009704:	4b39      	ldr	r3, [pc, #228]	; (80097ec <HAL_GPIO_Init+0x300>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	43db      	mvns	r3, r3
 800970e:	693a      	ldr	r2, [r7, #16]
 8009710:	4013      	ands	r3, r2
 8009712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800971c:	2b00      	cmp	r3, #0
 800971e:	d003      	beq.n	8009728 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009720:	693a      	ldr	r2, [r7, #16]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	4313      	orrs	r3, r2
 8009726:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009728:	4a30      	ldr	r2, [pc, #192]	; (80097ec <HAL_GPIO_Init+0x300>)
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800972e:	4b2f      	ldr	r3, [pc, #188]	; (80097ec <HAL_GPIO_Init+0x300>)
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	43db      	mvns	r3, r3
 8009738:	693a      	ldr	r2, [r7, #16]
 800973a:	4013      	ands	r3, r2
 800973c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009746:	2b00      	cmp	r3, #0
 8009748:	d003      	beq.n	8009752 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800974a:	693a      	ldr	r2, [r7, #16]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	4313      	orrs	r3, r2
 8009750:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009752:	4a26      	ldr	r2, [pc, #152]	; (80097ec <HAL_GPIO_Init+0x300>)
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009758:	4b24      	ldr	r3, [pc, #144]	; (80097ec <HAL_GPIO_Init+0x300>)
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	43db      	mvns	r3, r3
 8009762:	693a      	ldr	r2, [r7, #16]
 8009764:	4013      	ands	r3, r2
 8009766:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009770:	2b00      	cmp	r3, #0
 8009772:	d003      	beq.n	800977c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8009774:	693a      	ldr	r2, [r7, #16]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	4313      	orrs	r3, r2
 800977a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800977c:	4a1b      	ldr	r2, [pc, #108]	; (80097ec <HAL_GPIO_Init+0x300>)
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009782:	4b1a      	ldr	r3, [pc, #104]	; (80097ec <HAL_GPIO_Init+0x300>)
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	43db      	mvns	r3, r3
 800978c:	693a      	ldr	r2, [r7, #16]
 800978e:	4013      	ands	r3, r2
 8009790:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800979a:	2b00      	cmp	r3, #0
 800979c:	d003      	beq.n	80097a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800979e:	693a      	ldr	r2, [r7, #16]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80097a6:	4a11      	ldr	r2, [pc, #68]	; (80097ec <HAL_GPIO_Init+0x300>)
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	3301      	adds	r3, #1
 80097b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	fa22 f303 	lsr.w	r3, r2, r3
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f47f ae9d 	bne.w	80094fc <HAL_GPIO_Init+0x10>
  }
}
 80097c2:	bf00      	nop
 80097c4:	bf00      	nop
 80097c6:	371c      	adds	r7, #28
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr
 80097d0:	40021000 	.word	0x40021000
 80097d4:	40010000 	.word	0x40010000
 80097d8:	48000400 	.word	0x48000400
 80097dc:	48000800 	.word	0x48000800
 80097e0:	48000c00 	.word	0x48000c00
 80097e4:	48001000 	.word	0x48001000
 80097e8:	48001400 	.word	0x48001400
 80097ec:	40010400 	.word	0x40010400

080097f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	460b      	mov	r3, r1
 80097fa:	807b      	strh	r3, [r7, #2]
 80097fc:	4613      	mov	r3, r2
 80097fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009800:	787b      	ldrb	r3, [r7, #1]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d003      	beq.n	800980e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009806:	887a      	ldrh	r2, [r7, #2]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800980c:	e002      	b.n	8009814 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800980e:	887a      	ldrh	r2, [r7, #2]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d101      	bne.n	8009836 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	e0bb      	b.n	80099ae <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800983c:	b2db      	uxtb	r3, r3
 800983e:	2b05      	cmp	r3, #5
 8009840:	d101      	bne.n	8009846 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	e0b3      	b.n	80099ae <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800984c:	b2db      	uxtb	r3, r3
 800984e:	2b02      	cmp	r3, #2
 8009850:	d101      	bne.n	8009856 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	e0ab      	b.n	80099ae <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009856:	4b58      	ldr	r3, [pc, #352]	; (80099b8 <HAL_OPAMP_Init+0x198>)
 8009858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800985a:	4a57      	ldr	r2, [pc, #348]	; (80099b8 <HAL_OPAMP_Init+0x198>)
 800985c:	f043 0301 	orr.w	r3, r3, #1
 8009860:	6613      	str	r3, [r2, #96]	; 0x60
 8009862:	4b55      	ldr	r3, [pc, #340]	; (80099b8 <HAL_OPAMP_Init+0x198>)
 8009864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009866:	f003 0301 	and.w	r3, r3, #1
 800986a:	60bb      	str	r3, [r7, #8]
 800986c:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009874:	b2db      	uxtb	r3, r3
 8009876:	2b00      	cmp	r3, #0
 8009878:	d103      	bne.n	8009882 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f7fc f942 	bl	8005b0c <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	2b40      	cmp	r3, #64	; 0x40
 800988e:	d003      	beq.n	8009898 <HAL_OPAMP_Init+0x78>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	2b60      	cmp	r3, #96	; 0x60
 8009896:	d133      	bne.n	8009900 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f023 0110 	bic.w	r1, r3, #16
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	430a      	orrs	r2, r1
 80098ac:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	4b41      	ldr	r3, [pc, #260]	; (80099bc <HAL_OPAMP_Init+0x19c>)
 80098b6:	4013      	ands	r3, r2
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	6851      	ldr	r1, [r2, #4]
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	6892      	ldr	r2, [r2, #8]
 80098c0:	4311      	orrs	r1, r2
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	6912      	ldr	r2, [r2, #16]
 80098c6:	430a      	orrs	r2, r1
 80098c8:	6879      	ldr	r1, [r7, #4]
 80098ca:	7d09      	ldrb	r1, [r1, #20]
 80098cc:	2901      	cmp	r1, #1
 80098ce:	d102      	bne.n	80098d6 <HAL_OPAMP_Init+0xb6>
 80098d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80098d4:	e000      	b.n	80098d8 <HAL_OPAMP_Init+0xb8>
 80098d6:	2100      	movs	r1, #0
 80098d8:	4311      	orrs	r1, r2
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80098de:	4311      	orrs	r1, r2
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80098e4:	4311      	orrs	r1, r2
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80098ea:	04d2      	lsls	r2, r2, #19
 80098ec:	4311      	orrs	r1, r2
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80098f2:	0612      	lsls	r2, r2, #24
 80098f4:	4311      	orrs	r1, r2
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	6812      	ldr	r2, [r2, #0]
 80098fa:	430b      	orrs	r3, r1
 80098fc:	6013      	str	r3, [r2, #0]
 80098fe:	e035      	b.n	800996c <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f023 0110 	bic.w	r1, r3, #16
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	430a      	orrs	r2, r1
 8009914:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	4b27      	ldr	r3, [pc, #156]	; (80099bc <HAL_OPAMP_Init+0x19c>)
 800991e:	4013      	ands	r3, r2
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	6851      	ldr	r1, [r2, #4]
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	6892      	ldr	r2, [r2, #8]
 8009928:	4311      	orrs	r1, r2
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	68d2      	ldr	r2, [r2, #12]
 800992e:	4311      	orrs	r1, r2
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	6912      	ldr	r2, [r2, #16]
 8009934:	430a      	orrs	r2, r1
 8009936:	6879      	ldr	r1, [r7, #4]
 8009938:	7d09      	ldrb	r1, [r1, #20]
 800993a:	2901      	cmp	r1, #1
 800993c:	d102      	bne.n	8009944 <HAL_OPAMP_Init+0x124>
 800993e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009942:	e000      	b.n	8009946 <HAL_OPAMP_Init+0x126>
 8009944:	2100      	movs	r1, #0
 8009946:	4311      	orrs	r1, r2
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800994c:	4311      	orrs	r1, r2
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009952:	4311      	orrs	r1, r2
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009958:	04d2      	lsls	r2, r2, #19
 800995a:	4311      	orrs	r1, r2
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009960:	0612      	lsls	r2, r2, #24
 8009962:	4311      	orrs	r1, r2
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	6812      	ldr	r2, [r2, #0]
 8009968:	430b      	orrs	r3, r1
 800996a:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	699b      	ldr	r3, [r3, #24]
 8009972:	2b00      	cmp	r3, #0
 8009974:	db10      	blt.n	8009998 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	699b      	ldr	r3, [r3, #24]
 800997c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	699a      	ldr	r2, [r3, #24]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	69db      	ldr	r3, [r3, #28]
 8009988:	431a      	orrs	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6a1b      	ldr	r3, [r3, #32]
 800998e:	431a      	orrs	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	430a      	orrs	r2, r1
 8009996:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d103      	bne.n	80099ac <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	40021000 	.word	0x40021000
 80099bc:	e0003e11 	.word	0xe0003e11

080099c0 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b085      	sub	sp, #20
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099c8:	2300      	movs	r3, #0
 80099ca:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d102      	bne.n	80099d8 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	73fb      	strb	r3, [r7, #15]
 80099d6:	e01d      	b.n	8009a14 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	2b05      	cmp	r3, #5
 80099e2:	d102      	bne.n	80099ea <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	73fb      	strb	r3, [r7, #15]
 80099e8:	e014      	b.n	8009a14 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d10c      	bne.n	8009a10 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f042 0201 	orr.w	r2, r2, #1
 8009a04:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2204      	movs	r2, #4
 8009a0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8009a0e:	e001      	b.n	8009a14 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3714      	adds	r7, #20
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr
	...

08009a24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b085      	sub	sp, #20
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d141      	bne.n	8009ab6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009a32:	4b4b      	ldr	r3, [pc, #300]	; (8009b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a3e:	d131      	bne.n	8009aa4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009a40:	4b47      	ldr	r3, [pc, #284]	; (8009b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a46:	4a46      	ldr	r2, [pc, #280]	; (8009b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009a50:	4b43      	ldr	r3, [pc, #268]	; (8009b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009a58:	4a41      	ldr	r2, [pc, #260]	; (8009b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009a5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009a60:	4b40      	ldr	r3, [pc, #256]	; (8009b64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2232      	movs	r2, #50	; 0x32
 8009a66:	fb02 f303 	mul.w	r3, r2, r3
 8009a6a:	4a3f      	ldr	r2, [pc, #252]	; (8009b68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8009a70:	0c9b      	lsrs	r3, r3, #18
 8009a72:	3301      	adds	r3, #1
 8009a74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009a76:	e002      	b.n	8009a7e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009a7e:	4b38      	ldr	r3, [pc, #224]	; (8009b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a80:	695b      	ldr	r3, [r3, #20]
 8009a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a8a:	d102      	bne.n	8009a92 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1f2      	bne.n	8009a78 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009a92:	4b33      	ldr	r3, [pc, #204]	; (8009b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a94:	695b      	ldr	r3, [r3, #20]
 8009a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a9e:	d158      	bne.n	8009b52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	e057      	b.n	8009b54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009aa4:	4b2e      	ldr	r3, [pc, #184]	; (8009b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009aaa:	4a2d      	ldr	r2, [pc, #180]	; (8009b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ab0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009ab4:	e04d      	b.n	8009b52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009abc:	d141      	bne.n	8009b42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009abe:	4b28      	ldr	r3, [pc, #160]	; (8009b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009aca:	d131      	bne.n	8009b30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009acc:	4b24      	ldr	r3, [pc, #144]	; (8009b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ad2:	4a23      	ldr	r2, [pc, #140]	; (8009b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ad8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009adc:	4b20      	ldr	r3, [pc, #128]	; (8009b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009ae4:	4a1e      	ldr	r2, [pc, #120]	; (8009b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009aea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009aec:	4b1d      	ldr	r3, [pc, #116]	; (8009b64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2232      	movs	r2, #50	; 0x32
 8009af2:	fb02 f303 	mul.w	r3, r2, r3
 8009af6:	4a1c      	ldr	r2, [pc, #112]	; (8009b68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009af8:	fba2 2303 	umull	r2, r3, r2, r3
 8009afc:	0c9b      	lsrs	r3, r3, #18
 8009afe:	3301      	adds	r3, #1
 8009b00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009b02:	e002      	b.n	8009b0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	3b01      	subs	r3, #1
 8009b08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009b0a:	4b15      	ldr	r3, [pc, #84]	; (8009b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b16:	d102      	bne.n	8009b1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d1f2      	bne.n	8009b04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009b1e:	4b10      	ldr	r3, [pc, #64]	; (8009b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009b20:	695b      	ldr	r3, [r3, #20]
 8009b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b2a:	d112      	bne.n	8009b52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009b2c:	2303      	movs	r3, #3
 8009b2e:	e011      	b.n	8009b54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009b30:	4b0b      	ldr	r3, [pc, #44]	; (8009b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b36:	4a0a      	ldr	r2, [pc, #40]	; (8009b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009b40:	e007      	b.n	8009b52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009b42:	4b07      	ldr	r3, [pc, #28]	; (8009b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009b4a:	4a05      	ldr	r2, [pc, #20]	; (8009b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009b4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009b50:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3714      	adds	r7, #20
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	40007000 	.word	0x40007000
 8009b64:	20000018 	.word	0x20000018
 8009b68:	431bde83 	.word	0x431bde83

08009b6c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009b70:	4b05      	ldr	r3, [pc, #20]	; (8009b88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	4a04      	ldr	r2, [pc, #16]	; (8009b88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009b76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b7a:	6093      	str	r3, [r2, #8]
}
 8009b7c:	bf00      	nop
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	40007000 	.word	0x40007000

08009b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b088      	sub	sp, #32
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d101      	bne.n	8009b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e308      	b.n	800a1b0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f003 0301 	and.w	r3, r3, #1
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d075      	beq.n	8009c96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009baa:	4ba3      	ldr	r3, [pc, #652]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	f003 030c 	and.w	r3, r3, #12
 8009bb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009bb4:	4ba0      	ldr	r3, [pc, #640]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	f003 0303 	and.w	r3, r3, #3
 8009bbc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	2b0c      	cmp	r3, #12
 8009bc2:	d102      	bne.n	8009bca <HAL_RCC_OscConfig+0x3e>
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	2b03      	cmp	r3, #3
 8009bc8:	d002      	beq.n	8009bd0 <HAL_RCC_OscConfig+0x44>
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	2b08      	cmp	r3, #8
 8009bce:	d10b      	bne.n	8009be8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009bd0:	4b99      	ldr	r3, [pc, #612]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d05b      	beq.n	8009c94 <HAL_RCC_OscConfig+0x108>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d157      	bne.n	8009c94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	e2e3      	b.n	800a1b0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bf0:	d106      	bne.n	8009c00 <HAL_RCC_OscConfig+0x74>
 8009bf2:	4b91      	ldr	r3, [pc, #580]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a90      	ldr	r2, [pc, #576]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bfc:	6013      	str	r3, [r2, #0]
 8009bfe:	e01d      	b.n	8009c3c <HAL_RCC_OscConfig+0xb0>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c08:	d10c      	bne.n	8009c24 <HAL_RCC_OscConfig+0x98>
 8009c0a:	4b8b      	ldr	r3, [pc, #556]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a8a      	ldr	r2, [pc, #552]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c14:	6013      	str	r3, [r2, #0]
 8009c16:	4b88      	ldr	r3, [pc, #544]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a87      	ldr	r2, [pc, #540]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c20:	6013      	str	r3, [r2, #0]
 8009c22:	e00b      	b.n	8009c3c <HAL_RCC_OscConfig+0xb0>
 8009c24:	4b84      	ldr	r3, [pc, #528]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a83      	ldr	r2, [pc, #524]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c2e:	6013      	str	r3, [r2, #0]
 8009c30:	4b81      	ldr	r3, [pc, #516]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a80      	ldr	r2, [pc, #512]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d013      	beq.n	8009c6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c44:	f7fc fa96 	bl	8006174 <HAL_GetTick>
 8009c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009c4a:	e008      	b.n	8009c5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c4c:	f7fc fa92 	bl	8006174 <HAL_GetTick>
 8009c50:	4602      	mov	r2, r0
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	1ad3      	subs	r3, r2, r3
 8009c56:	2b64      	cmp	r3, #100	; 0x64
 8009c58:	d901      	bls.n	8009c5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009c5a:	2303      	movs	r3, #3
 8009c5c:	e2a8      	b.n	800a1b0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009c5e:	4b76      	ldr	r3, [pc, #472]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d0f0      	beq.n	8009c4c <HAL_RCC_OscConfig+0xc0>
 8009c6a:	e014      	b.n	8009c96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c6c:	f7fc fa82 	bl	8006174 <HAL_GetTick>
 8009c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009c72:	e008      	b.n	8009c86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c74:	f7fc fa7e 	bl	8006174 <HAL_GetTick>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	2b64      	cmp	r3, #100	; 0x64
 8009c80:	d901      	bls.n	8009c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009c82:	2303      	movs	r3, #3
 8009c84:	e294      	b.n	800a1b0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009c86:	4b6c      	ldr	r3, [pc, #432]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1f0      	bne.n	8009c74 <HAL_RCC_OscConfig+0xe8>
 8009c92:	e000      	b.n	8009c96 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f003 0302 	and.w	r3, r3, #2
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d075      	beq.n	8009d8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ca2:	4b65      	ldr	r3, [pc, #404]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	f003 030c 	and.w	r3, r3, #12
 8009caa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009cac:	4b62      	ldr	r3, [pc, #392]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	f003 0303 	and.w	r3, r3, #3
 8009cb4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	2b0c      	cmp	r3, #12
 8009cba:	d102      	bne.n	8009cc2 <HAL_RCC_OscConfig+0x136>
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	d002      	beq.n	8009cc8 <HAL_RCC_OscConfig+0x13c>
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	2b04      	cmp	r3, #4
 8009cc6:	d11f      	bne.n	8009d08 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009cc8:	4b5b      	ldr	r3, [pc, #364]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d005      	beq.n	8009ce0 <HAL_RCC_OscConfig+0x154>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d101      	bne.n	8009ce0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e267      	b.n	800a1b0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ce0:	4b55      	ldr	r3, [pc, #340]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	691b      	ldr	r3, [r3, #16]
 8009cec:	061b      	lsls	r3, r3, #24
 8009cee:	4952      	ldr	r1, [pc, #328]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009cf4:	4b51      	ldr	r3, [pc, #324]	; (8009e3c <HAL_RCC_OscConfig+0x2b0>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7fc f9ef 	bl	80060dc <HAL_InitTick>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d043      	beq.n	8009d8c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	e253      	b.n	800a1b0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d023      	beq.n	8009d58 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009d10:	4b49      	ldr	r3, [pc, #292]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a48      	ldr	r2, [pc, #288]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d1c:	f7fc fa2a 	bl	8006174 <HAL_GetTick>
 8009d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009d22:	e008      	b.n	8009d36 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d24:	f7fc fa26 	bl	8006174 <HAL_GetTick>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	1ad3      	subs	r3, r2, r3
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	d901      	bls.n	8009d36 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009d32:	2303      	movs	r3, #3
 8009d34:	e23c      	b.n	800a1b0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009d36:	4b40      	ldr	r3, [pc, #256]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d0f0      	beq.n	8009d24 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d42:	4b3d      	ldr	r3, [pc, #244]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	061b      	lsls	r3, r3, #24
 8009d50:	4939      	ldr	r1, [pc, #228]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009d52:	4313      	orrs	r3, r2
 8009d54:	604b      	str	r3, [r1, #4]
 8009d56:	e01a      	b.n	8009d8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009d58:	4b37      	ldr	r3, [pc, #220]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a36      	ldr	r2, [pc, #216]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009d5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d64:	f7fc fa06 	bl	8006174 <HAL_GetTick>
 8009d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009d6a:	e008      	b.n	8009d7e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d6c:	f7fc fa02 	bl	8006174 <HAL_GetTick>
 8009d70:	4602      	mov	r2, r0
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	1ad3      	subs	r3, r2, r3
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d901      	bls.n	8009d7e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009d7a:	2303      	movs	r3, #3
 8009d7c:	e218      	b.n	800a1b0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009d7e:	4b2e      	ldr	r3, [pc, #184]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d1f0      	bne.n	8009d6c <HAL_RCC_OscConfig+0x1e0>
 8009d8a:	e000      	b.n	8009d8e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009d8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f003 0308 	and.w	r3, r3, #8
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d03c      	beq.n	8009e14 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	695b      	ldr	r3, [r3, #20]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d01c      	beq.n	8009ddc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009da2:	4b25      	ldr	r3, [pc, #148]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009da8:	4a23      	ldr	r2, [pc, #140]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009daa:	f043 0301 	orr.w	r3, r3, #1
 8009dae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009db2:	f7fc f9df 	bl	8006174 <HAL_GetTick>
 8009db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009db8:	e008      	b.n	8009dcc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009dba:	f7fc f9db 	bl	8006174 <HAL_GetTick>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	1ad3      	subs	r3, r2, r3
 8009dc4:	2b02      	cmp	r3, #2
 8009dc6:	d901      	bls.n	8009dcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	e1f1      	b.n	800a1b0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009dcc:	4b1a      	ldr	r3, [pc, #104]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009dd2:	f003 0302 	and.w	r3, r3, #2
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d0ef      	beq.n	8009dba <HAL_RCC_OscConfig+0x22e>
 8009dda:	e01b      	b.n	8009e14 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ddc:	4b16      	ldr	r3, [pc, #88]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009de2:	4a15      	ldr	r2, [pc, #84]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009de4:	f023 0301 	bic.w	r3, r3, #1
 8009de8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dec:	f7fc f9c2 	bl	8006174 <HAL_GetTick>
 8009df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009df2:	e008      	b.n	8009e06 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009df4:	f7fc f9be 	bl	8006174 <HAL_GetTick>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	1ad3      	subs	r3, r2, r3
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d901      	bls.n	8009e06 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8009e02:	2303      	movs	r3, #3
 8009e04:	e1d4      	b.n	800a1b0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009e06:	4b0c      	ldr	r3, [pc, #48]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e0c:	f003 0302 	and.w	r3, r3, #2
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d1ef      	bne.n	8009df4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f003 0304 	and.w	r3, r3, #4
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f000 80ab 	beq.w	8009f78 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009e22:	2300      	movs	r3, #0
 8009e24:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009e26:	4b04      	ldr	r3, [pc, #16]	; (8009e38 <HAL_RCC_OscConfig+0x2ac>)
 8009e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d106      	bne.n	8009e40 <HAL_RCC_OscConfig+0x2b4>
 8009e32:	2301      	movs	r3, #1
 8009e34:	e005      	b.n	8009e42 <HAL_RCC_OscConfig+0x2b6>
 8009e36:	bf00      	nop
 8009e38:	40021000 	.word	0x40021000
 8009e3c:	2000001c 	.word	0x2000001c
 8009e40:	2300      	movs	r3, #0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00d      	beq.n	8009e62 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e46:	4baf      	ldr	r3, [pc, #700]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 8009e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e4a:	4aae      	ldr	r2, [pc, #696]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 8009e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e50:	6593      	str	r3, [r2, #88]	; 0x58
 8009e52:	4bac      	ldr	r3, [pc, #688]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 8009e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e5a:	60fb      	str	r3, [r7, #12]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e62:	4ba9      	ldr	r3, [pc, #676]	; (800a108 <HAL_RCC_OscConfig+0x57c>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d118      	bne.n	8009ea0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e6e:	4ba6      	ldr	r3, [pc, #664]	; (800a108 <HAL_RCC_OscConfig+0x57c>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4aa5      	ldr	r2, [pc, #660]	; (800a108 <HAL_RCC_OscConfig+0x57c>)
 8009e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009e7a:	f7fc f97b 	bl	8006174 <HAL_GetTick>
 8009e7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e80:	e008      	b.n	8009e94 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e82:	f7fc f977 	bl	8006174 <HAL_GetTick>
 8009e86:	4602      	mov	r2, r0
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	2b02      	cmp	r3, #2
 8009e8e:	d901      	bls.n	8009e94 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009e90:	2303      	movs	r3, #3
 8009e92:	e18d      	b.n	800a1b0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e94:	4b9c      	ldr	r3, [pc, #624]	; (800a108 <HAL_RCC_OscConfig+0x57c>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d0f0      	beq.n	8009e82 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d108      	bne.n	8009eba <HAL_RCC_OscConfig+0x32e>
 8009ea8:	4b96      	ldr	r3, [pc, #600]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 8009eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eae:	4a95      	ldr	r2, [pc, #596]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 8009eb0:	f043 0301 	orr.w	r3, r3, #1
 8009eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009eb8:	e024      	b.n	8009f04 <HAL_RCC_OscConfig+0x378>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	2b05      	cmp	r3, #5
 8009ec0:	d110      	bne.n	8009ee4 <HAL_RCC_OscConfig+0x358>
 8009ec2:	4b90      	ldr	r3, [pc, #576]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 8009ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ec8:	4a8e      	ldr	r2, [pc, #568]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 8009eca:	f043 0304 	orr.w	r3, r3, #4
 8009ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009ed2:	4b8c      	ldr	r3, [pc, #560]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 8009ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ed8:	4a8a      	ldr	r2, [pc, #552]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 8009eda:	f043 0301 	orr.w	r3, r3, #1
 8009ede:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009ee2:	e00f      	b.n	8009f04 <HAL_RCC_OscConfig+0x378>
 8009ee4:	4b87      	ldr	r3, [pc, #540]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 8009ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eea:	4a86      	ldr	r2, [pc, #536]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 8009eec:	f023 0301 	bic.w	r3, r3, #1
 8009ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009ef4:	4b83      	ldr	r3, [pc, #524]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 8009ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009efa:	4a82      	ldr	r2, [pc, #520]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 8009efc:	f023 0304 	bic.w	r3, r3, #4
 8009f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d016      	beq.n	8009f3a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f0c:	f7fc f932 	bl	8006174 <HAL_GetTick>
 8009f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f12:	e00a      	b.n	8009f2a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f14:	f7fc f92e 	bl	8006174 <HAL_GetTick>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	1ad3      	subs	r3, r2, r3
 8009f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d901      	bls.n	8009f2a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009f26:	2303      	movs	r3, #3
 8009f28:	e142      	b.n	800a1b0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f2a:	4b76      	ldr	r3, [pc, #472]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 8009f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f30:	f003 0302 	and.w	r3, r3, #2
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d0ed      	beq.n	8009f14 <HAL_RCC_OscConfig+0x388>
 8009f38:	e015      	b.n	8009f66 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f3a:	f7fc f91b 	bl	8006174 <HAL_GetTick>
 8009f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009f40:	e00a      	b.n	8009f58 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f42:	f7fc f917 	bl	8006174 <HAL_GetTick>
 8009f46:	4602      	mov	r2, r0
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d901      	bls.n	8009f58 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009f54:	2303      	movs	r3, #3
 8009f56:	e12b      	b.n	800a1b0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009f58:	4b6a      	ldr	r3, [pc, #424]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 8009f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f5e:	f003 0302 	and.w	r3, r3, #2
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1ed      	bne.n	8009f42 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009f66:	7ffb      	ldrb	r3, [r7, #31]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d105      	bne.n	8009f78 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f6c:	4b65      	ldr	r3, [pc, #404]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 8009f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f70:	4a64      	ldr	r2, [pc, #400]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 8009f72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f76:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 0320 	and.w	r3, r3, #32
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d03c      	beq.n	8009ffe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	699b      	ldr	r3, [r3, #24]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d01c      	beq.n	8009fc6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009f8c:	4b5d      	ldr	r3, [pc, #372]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 8009f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f92:	4a5c      	ldr	r2, [pc, #368]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 8009f94:	f043 0301 	orr.w	r3, r3, #1
 8009f98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f9c:	f7fc f8ea 	bl	8006174 <HAL_GetTick>
 8009fa0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009fa2:	e008      	b.n	8009fb6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009fa4:	f7fc f8e6 	bl	8006174 <HAL_GetTick>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	1ad3      	subs	r3, r2, r3
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	d901      	bls.n	8009fb6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	e0fc      	b.n	800a1b0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009fb6:	4b53      	ldr	r3, [pc, #332]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 8009fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009fbc:	f003 0302 	and.w	r3, r3, #2
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d0ef      	beq.n	8009fa4 <HAL_RCC_OscConfig+0x418>
 8009fc4:	e01b      	b.n	8009ffe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009fc6:	4b4f      	ldr	r3, [pc, #316]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 8009fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009fcc:	4a4d      	ldr	r2, [pc, #308]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 8009fce:	f023 0301 	bic.w	r3, r3, #1
 8009fd2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fd6:	f7fc f8cd 	bl	8006174 <HAL_GetTick>
 8009fda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009fdc:	e008      	b.n	8009ff0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009fde:	f7fc f8c9 	bl	8006174 <HAL_GetTick>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	1ad3      	subs	r3, r2, r3
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	d901      	bls.n	8009ff0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009fec:	2303      	movs	r3, #3
 8009fee:	e0df      	b.n	800a1b0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009ff0:	4b44      	ldr	r3, [pc, #272]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 8009ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ff6:	f003 0302 	and.w	r3, r3, #2
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1ef      	bne.n	8009fde <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	69db      	ldr	r3, [r3, #28]
 800a002:	2b00      	cmp	r3, #0
 800a004:	f000 80d3 	beq.w	800a1ae <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a008:	4b3e      	ldr	r3, [pc, #248]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	f003 030c 	and.w	r3, r3, #12
 800a010:	2b0c      	cmp	r3, #12
 800a012:	f000 808d 	beq.w	800a130 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	69db      	ldr	r3, [r3, #28]
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d15a      	bne.n	800a0d4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a01e:	4b39      	ldr	r3, [pc, #228]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a38      	ldr	r2, [pc, #224]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 800a024:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a02a:	f7fc f8a3 	bl	8006174 <HAL_GetTick>
 800a02e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a030:	e008      	b.n	800a044 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a032:	f7fc f89f 	bl	8006174 <HAL_GetTick>
 800a036:	4602      	mov	r2, r0
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	1ad3      	subs	r3, r2, r3
 800a03c:	2b02      	cmp	r3, #2
 800a03e:	d901      	bls.n	800a044 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800a040:	2303      	movs	r3, #3
 800a042:	e0b5      	b.n	800a1b0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a044:	4b2f      	ldr	r3, [pc, #188]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d1f0      	bne.n	800a032 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a050:	4b2c      	ldr	r3, [pc, #176]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 800a052:	68da      	ldr	r2, [r3, #12]
 800a054:	4b2d      	ldr	r3, [pc, #180]	; (800a10c <HAL_RCC_OscConfig+0x580>)
 800a056:	4013      	ands	r3, r2
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	6a11      	ldr	r1, [r2, #32]
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a060:	3a01      	subs	r2, #1
 800a062:	0112      	lsls	r2, r2, #4
 800a064:	4311      	orrs	r1, r2
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a06a:	0212      	lsls	r2, r2, #8
 800a06c:	4311      	orrs	r1, r2
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a072:	0852      	lsrs	r2, r2, #1
 800a074:	3a01      	subs	r2, #1
 800a076:	0552      	lsls	r2, r2, #21
 800a078:	4311      	orrs	r1, r2
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a07e:	0852      	lsrs	r2, r2, #1
 800a080:	3a01      	subs	r2, #1
 800a082:	0652      	lsls	r2, r2, #25
 800a084:	4311      	orrs	r1, r2
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a08a:	06d2      	lsls	r2, r2, #27
 800a08c:	430a      	orrs	r2, r1
 800a08e:	491d      	ldr	r1, [pc, #116]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 800a090:	4313      	orrs	r3, r2
 800a092:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a094:	4b1b      	ldr	r3, [pc, #108]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a1a      	ldr	r2, [pc, #104]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 800a09a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a09e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a0a0:	4b18      	ldr	r3, [pc, #96]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	4a17      	ldr	r2, [pc, #92]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 800a0a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a0aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0ac:	f7fc f862 	bl	8006174 <HAL_GetTick>
 800a0b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a0b2:	e008      	b.n	800a0c6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0b4:	f7fc f85e 	bl	8006174 <HAL_GetTick>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	1ad3      	subs	r3, r2, r3
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	d901      	bls.n	800a0c6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800a0c2:	2303      	movs	r3, #3
 800a0c4:	e074      	b.n	800a1b0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a0c6:	4b0f      	ldr	r3, [pc, #60]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d0f0      	beq.n	800a0b4 <HAL_RCC_OscConfig+0x528>
 800a0d2:	e06c      	b.n	800a1ae <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0d4:	4b0b      	ldr	r3, [pc, #44]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a0a      	ldr	r2, [pc, #40]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 800a0da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0de:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800a0e0:	4b08      	ldr	r3, [pc, #32]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	4a07      	ldr	r2, [pc, #28]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 800a0e6:	f023 0303 	bic.w	r3, r3, #3
 800a0ea:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a0ec:	4b05      	ldr	r3, [pc, #20]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	4a04      	ldr	r2, [pc, #16]	; (800a104 <HAL_RCC_OscConfig+0x578>)
 800a0f2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800a0f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0fc:	f7fc f83a 	bl	8006174 <HAL_GetTick>
 800a100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a102:	e00e      	b.n	800a122 <HAL_RCC_OscConfig+0x596>
 800a104:	40021000 	.word	0x40021000
 800a108:	40007000 	.word	0x40007000
 800a10c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a110:	f7fc f830 	bl	8006174 <HAL_GetTick>
 800a114:	4602      	mov	r2, r0
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	d901      	bls.n	800a122 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800a11e:	2303      	movs	r3, #3
 800a120:	e046      	b.n	800a1b0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a122:	4b25      	ldr	r3, [pc, #148]	; (800a1b8 <HAL_RCC_OscConfig+0x62c>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d1f0      	bne.n	800a110 <HAL_RCC_OscConfig+0x584>
 800a12e:	e03e      	b.n	800a1ae <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	69db      	ldr	r3, [r3, #28]
 800a134:	2b01      	cmp	r3, #1
 800a136:	d101      	bne.n	800a13c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	e039      	b.n	800a1b0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a13c:	4b1e      	ldr	r3, [pc, #120]	; (800a1b8 <HAL_RCC_OscConfig+0x62c>)
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	f003 0203 	and.w	r2, r3, #3
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6a1b      	ldr	r3, [r3, #32]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d12c      	bne.n	800a1aa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15a:	3b01      	subs	r3, #1
 800a15c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a15e:	429a      	cmp	r2, r3
 800a160:	d123      	bne.n	800a1aa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a16c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a16e:	429a      	cmp	r2, r3
 800a170:	d11b      	bne.n	800a1aa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a17e:	429a      	cmp	r2, r3
 800a180:	d113      	bne.n	800a1aa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a18c:	085b      	lsrs	r3, r3, #1
 800a18e:	3b01      	subs	r3, #1
 800a190:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a192:	429a      	cmp	r2, r3
 800a194:	d109      	bne.n	800a1aa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1a0:	085b      	lsrs	r3, r3, #1
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d001      	beq.n	800a1ae <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e000      	b.n	800a1b0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3720      	adds	r7, #32
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	40021000 	.word	0x40021000

0800a1bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b086      	sub	sp, #24
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d101      	bne.n	800a1d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e11e      	b.n	800a412 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a1d4:	4b91      	ldr	r3, [pc, #580]	; (800a41c <HAL_RCC_ClockConfig+0x260>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f003 030f 	and.w	r3, r3, #15
 800a1dc:	683a      	ldr	r2, [r7, #0]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d910      	bls.n	800a204 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1e2:	4b8e      	ldr	r3, [pc, #568]	; (800a41c <HAL_RCC_ClockConfig+0x260>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f023 020f 	bic.w	r2, r3, #15
 800a1ea:	498c      	ldr	r1, [pc, #560]	; (800a41c <HAL_RCC_ClockConfig+0x260>)
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1f2:	4b8a      	ldr	r3, [pc, #552]	; (800a41c <HAL_RCC_ClockConfig+0x260>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 030f 	and.w	r3, r3, #15
 800a1fa:	683a      	ldr	r2, [r7, #0]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d001      	beq.n	800a204 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a200:	2301      	movs	r3, #1
 800a202:	e106      	b.n	800a412 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f003 0301 	and.w	r3, r3, #1
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d073      	beq.n	800a2f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	2b03      	cmp	r3, #3
 800a216:	d129      	bne.n	800a26c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a218:	4b81      	ldr	r3, [pc, #516]	; (800a420 <HAL_RCC_ClockConfig+0x264>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a220:	2b00      	cmp	r3, #0
 800a222:	d101      	bne.n	800a228 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a224:	2301      	movs	r3, #1
 800a226:	e0f4      	b.n	800a412 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a228:	f000 f99e 	bl	800a568 <RCC_GetSysClockFreqFromPLLSource>
 800a22c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	4a7c      	ldr	r2, [pc, #496]	; (800a424 <HAL_RCC_ClockConfig+0x268>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d93f      	bls.n	800a2b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a236:	4b7a      	ldr	r3, [pc, #488]	; (800a420 <HAL_RCC_ClockConfig+0x264>)
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d009      	beq.n	800a256 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d033      	beq.n	800a2b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a252:	2b00      	cmp	r3, #0
 800a254:	d12f      	bne.n	800a2b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a256:	4b72      	ldr	r3, [pc, #456]	; (800a420 <HAL_RCC_ClockConfig+0x264>)
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a25e:	4a70      	ldr	r2, [pc, #448]	; (800a420 <HAL_RCC_ClockConfig+0x264>)
 800a260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a264:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a266:	2380      	movs	r3, #128	; 0x80
 800a268:	617b      	str	r3, [r7, #20]
 800a26a:	e024      	b.n	800a2b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	2b02      	cmp	r3, #2
 800a272:	d107      	bne.n	800a284 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a274:	4b6a      	ldr	r3, [pc, #424]	; (800a420 <HAL_RCC_ClockConfig+0x264>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d109      	bne.n	800a294 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a280:	2301      	movs	r3, #1
 800a282:	e0c6      	b.n	800a412 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a284:	4b66      	ldr	r3, [pc, #408]	; (800a420 <HAL_RCC_ClockConfig+0x264>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d101      	bne.n	800a294 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	e0be      	b.n	800a412 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a294:	f000 f8ce 	bl	800a434 <HAL_RCC_GetSysClockFreq>
 800a298:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	4a61      	ldr	r2, [pc, #388]	; (800a424 <HAL_RCC_ClockConfig+0x268>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d909      	bls.n	800a2b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a2a2:	4b5f      	ldr	r3, [pc, #380]	; (800a420 <HAL_RCC_ClockConfig+0x264>)
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2aa:	4a5d      	ldr	r2, [pc, #372]	; (800a420 <HAL_RCC_ClockConfig+0x264>)
 800a2ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a2b2:	2380      	movs	r3, #128	; 0x80
 800a2b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a2b6:	4b5a      	ldr	r3, [pc, #360]	; (800a420 <HAL_RCC_ClockConfig+0x264>)
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	f023 0203 	bic.w	r2, r3, #3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	4957      	ldr	r1, [pc, #348]	; (800a420 <HAL_RCC_ClockConfig+0x264>)
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2c8:	f7fb ff54 	bl	8006174 <HAL_GetTick>
 800a2cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a2ce:	e00a      	b.n	800a2e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a2d0:	f7fb ff50 	bl	8006174 <HAL_GetTick>
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	1ad3      	subs	r3, r2, r3
 800a2da:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d901      	bls.n	800a2e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a2e2:	2303      	movs	r3, #3
 800a2e4:	e095      	b.n	800a412 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a2e6:	4b4e      	ldr	r3, [pc, #312]	; (800a420 <HAL_RCC_ClockConfig+0x264>)
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	f003 020c 	and.w	r2, r3, #12
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d1eb      	bne.n	800a2d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 0302 	and.w	r3, r3, #2
 800a300:	2b00      	cmp	r3, #0
 800a302:	d023      	beq.n	800a34c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f003 0304 	and.w	r3, r3, #4
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d005      	beq.n	800a31c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a310:	4b43      	ldr	r3, [pc, #268]	; (800a420 <HAL_RCC_ClockConfig+0x264>)
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	4a42      	ldr	r2, [pc, #264]	; (800a420 <HAL_RCC_ClockConfig+0x264>)
 800a316:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a31a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f003 0308 	and.w	r3, r3, #8
 800a324:	2b00      	cmp	r3, #0
 800a326:	d007      	beq.n	800a338 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a328:	4b3d      	ldr	r3, [pc, #244]	; (800a420 <HAL_RCC_ClockConfig+0x264>)
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a330:	4a3b      	ldr	r2, [pc, #236]	; (800a420 <HAL_RCC_ClockConfig+0x264>)
 800a332:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a336:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a338:	4b39      	ldr	r3, [pc, #228]	; (800a420 <HAL_RCC_ClockConfig+0x264>)
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	4936      	ldr	r1, [pc, #216]	; (800a420 <HAL_RCC_ClockConfig+0x264>)
 800a346:	4313      	orrs	r3, r2
 800a348:	608b      	str	r3, [r1, #8]
 800a34a:	e008      	b.n	800a35e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	2b80      	cmp	r3, #128	; 0x80
 800a350:	d105      	bne.n	800a35e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a352:	4b33      	ldr	r3, [pc, #204]	; (800a420 <HAL_RCC_ClockConfig+0x264>)
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	4a32      	ldr	r2, [pc, #200]	; (800a420 <HAL_RCC_ClockConfig+0x264>)
 800a358:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a35c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a35e:	4b2f      	ldr	r3, [pc, #188]	; (800a41c <HAL_RCC_ClockConfig+0x260>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f003 030f 	and.w	r3, r3, #15
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d21d      	bcs.n	800a3a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a36c:	4b2b      	ldr	r3, [pc, #172]	; (800a41c <HAL_RCC_ClockConfig+0x260>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f023 020f 	bic.w	r2, r3, #15
 800a374:	4929      	ldr	r1, [pc, #164]	; (800a41c <HAL_RCC_ClockConfig+0x260>)
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	4313      	orrs	r3, r2
 800a37a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a37c:	f7fb fefa 	bl	8006174 <HAL_GetTick>
 800a380:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a382:	e00a      	b.n	800a39a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a384:	f7fb fef6 	bl	8006174 <HAL_GetTick>
 800a388:	4602      	mov	r2, r0
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	1ad3      	subs	r3, r2, r3
 800a38e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a392:	4293      	cmp	r3, r2
 800a394:	d901      	bls.n	800a39a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a396:	2303      	movs	r3, #3
 800a398:	e03b      	b.n	800a412 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a39a:	4b20      	ldr	r3, [pc, #128]	; (800a41c <HAL_RCC_ClockConfig+0x260>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f003 030f 	and.w	r3, r3, #15
 800a3a2:	683a      	ldr	r2, [r7, #0]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d1ed      	bne.n	800a384 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f003 0304 	and.w	r3, r3, #4
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d008      	beq.n	800a3c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a3b4:	4b1a      	ldr	r3, [pc, #104]	; (800a420 <HAL_RCC_ClockConfig+0x264>)
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	68db      	ldr	r3, [r3, #12]
 800a3c0:	4917      	ldr	r1, [pc, #92]	; (800a420 <HAL_RCC_ClockConfig+0x264>)
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 0308 	and.w	r3, r3, #8
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d009      	beq.n	800a3e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a3d2:	4b13      	ldr	r3, [pc, #76]	; (800a420 <HAL_RCC_ClockConfig+0x264>)
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	00db      	lsls	r3, r3, #3
 800a3e0:	490f      	ldr	r1, [pc, #60]	; (800a420 <HAL_RCC_ClockConfig+0x264>)
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a3e6:	f000 f825 	bl	800a434 <HAL_RCC_GetSysClockFreq>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	4b0c      	ldr	r3, [pc, #48]	; (800a420 <HAL_RCC_ClockConfig+0x264>)
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	091b      	lsrs	r3, r3, #4
 800a3f2:	f003 030f 	and.w	r3, r3, #15
 800a3f6:	490c      	ldr	r1, [pc, #48]	; (800a428 <HAL_RCC_ClockConfig+0x26c>)
 800a3f8:	5ccb      	ldrb	r3, [r1, r3]
 800a3fa:	f003 031f 	and.w	r3, r3, #31
 800a3fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a402:	4a0a      	ldr	r2, [pc, #40]	; (800a42c <HAL_RCC_ClockConfig+0x270>)
 800a404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a406:	4b0a      	ldr	r3, [pc, #40]	; (800a430 <HAL_RCC_ClockConfig+0x274>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7fb fe66 	bl	80060dc <HAL_InitTick>
 800a410:	4603      	mov	r3, r0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3718      	adds	r7, #24
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	40022000 	.word	0x40022000
 800a420:	40021000 	.word	0x40021000
 800a424:	04c4b400 	.word	0x04c4b400
 800a428:	0800f070 	.word	0x0800f070
 800a42c:	20000018 	.word	0x20000018
 800a430:	2000001c 	.word	0x2000001c

0800a434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a434:	b480      	push	{r7}
 800a436:	b087      	sub	sp, #28
 800a438:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a43a:	4b2c      	ldr	r3, [pc, #176]	; (800a4ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	f003 030c 	and.w	r3, r3, #12
 800a442:	2b04      	cmp	r3, #4
 800a444:	d102      	bne.n	800a44c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a446:	4b2a      	ldr	r3, [pc, #168]	; (800a4f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a448:	613b      	str	r3, [r7, #16]
 800a44a:	e047      	b.n	800a4dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a44c:	4b27      	ldr	r3, [pc, #156]	; (800a4ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	f003 030c 	and.w	r3, r3, #12
 800a454:	2b08      	cmp	r3, #8
 800a456:	d102      	bne.n	800a45e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a458:	4b26      	ldr	r3, [pc, #152]	; (800a4f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a45a:	613b      	str	r3, [r7, #16]
 800a45c:	e03e      	b.n	800a4dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a45e:	4b23      	ldr	r3, [pc, #140]	; (800a4ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	f003 030c 	and.w	r3, r3, #12
 800a466:	2b0c      	cmp	r3, #12
 800a468:	d136      	bne.n	800a4d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a46a:	4b20      	ldr	r3, [pc, #128]	; (800a4ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	f003 0303 	and.w	r3, r3, #3
 800a472:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a474:	4b1d      	ldr	r3, [pc, #116]	; (800a4ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	091b      	lsrs	r3, r3, #4
 800a47a:	f003 030f 	and.w	r3, r3, #15
 800a47e:	3301      	adds	r3, #1
 800a480:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2b03      	cmp	r3, #3
 800a486:	d10c      	bne.n	800a4a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a488:	4a1a      	ldr	r2, [pc, #104]	; (800a4f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a490:	4a16      	ldr	r2, [pc, #88]	; (800a4ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800a492:	68d2      	ldr	r2, [r2, #12]
 800a494:	0a12      	lsrs	r2, r2, #8
 800a496:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a49a:	fb02 f303 	mul.w	r3, r2, r3
 800a49e:	617b      	str	r3, [r7, #20]
      break;
 800a4a0:	e00c      	b.n	800a4bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a4a2:	4a13      	ldr	r2, [pc, #76]	; (800a4f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4aa:	4a10      	ldr	r2, [pc, #64]	; (800a4ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800a4ac:	68d2      	ldr	r2, [r2, #12]
 800a4ae:	0a12      	lsrs	r2, r2, #8
 800a4b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a4b4:	fb02 f303 	mul.w	r3, r2, r3
 800a4b8:	617b      	str	r3, [r7, #20]
      break;
 800a4ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a4bc:	4b0b      	ldr	r3, [pc, #44]	; (800a4ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	0e5b      	lsrs	r3, r3, #25
 800a4c2:	f003 0303 	and.w	r3, r3, #3
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	005b      	lsls	r3, r3, #1
 800a4ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a4cc:	697a      	ldr	r2, [r7, #20]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4d4:	613b      	str	r3, [r7, #16]
 800a4d6:	e001      	b.n	800a4dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a4dc:	693b      	ldr	r3, [r7, #16]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	371c      	adds	r7, #28
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr
 800a4ea:	bf00      	nop
 800a4ec:	40021000 	.word	0x40021000
 800a4f0:	00f42400 	.word	0x00f42400
 800a4f4:	007a1200 	.word	0x007a1200

0800a4f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a4fc:	4b03      	ldr	r3, [pc, #12]	; (800a50c <HAL_RCC_GetHCLKFreq+0x14>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
}
 800a500:	4618      	mov	r0, r3
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	20000018 	.word	0x20000018

0800a510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a514:	f7ff fff0 	bl	800a4f8 <HAL_RCC_GetHCLKFreq>
 800a518:	4602      	mov	r2, r0
 800a51a:	4b06      	ldr	r3, [pc, #24]	; (800a534 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	0a1b      	lsrs	r3, r3, #8
 800a520:	f003 0307 	and.w	r3, r3, #7
 800a524:	4904      	ldr	r1, [pc, #16]	; (800a538 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a526:	5ccb      	ldrb	r3, [r1, r3]
 800a528:	f003 031f 	and.w	r3, r3, #31
 800a52c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a530:	4618      	mov	r0, r3
 800a532:	bd80      	pop	{r7, pc}
 800a534:	40021000 	.word	0x40021000
 800a538:	0800f080 	.word	0x0800f080

0800a53c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a540:	f7ff ffda 	bl	800a4f8 <HAL_RCC_GetHCLKFreq>
 800a544:	4602      	mov	r2, r0
 800a546:	4b06      	ldr	r3, [pc, #24]	; (800a560 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a548:	689b      	ldr	r3, [r3, #8]
 800a54a:	0adb      	lsrs	r3, r3, #11
 800a54c:	f003 0307 	and.w	r3, r3, #7
 800a550:	4904      	ldr	r1, [pc, #16]	; (800a564 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a552:	5ccb      	ldrb	r3, [r1, r3]
 800a554:	f003 031f 	and.w	r3, r3, #31
 800a558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	40021000 	.word	0x40021000
 800a564:	0800f080 	.word	0x0800f080

0800a568 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a568:	b480      	push	{r7}
 800a56a:	b087      	sub	sp, #28
 800a56c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a56e:	4b1e      	ldr	r3, [pc, #120]	; (800a5e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	f003 0303 	and.w	r3, r3, #3
 800a576:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a578:	4b1b      	ldr	r3, [pc, #108]	; (800a5e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	091b      	lsrs	r3, r3, #4
 800a57e:	f003 030f 	and.w	r3, r3, #15
 800a582:	3301      	adds	r3, #1
 800a584:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	2b03      	cmp	r3, #3
 800a58a:	d10c      	bne.n	800a5a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a58c:	4a17      	ldr	r2, [pc, #92]	; (800a5ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	fbb2 f3f3 	udiv	r3, r2, r3
 800a594:	4a14      	ldr	r2, [pc, #80]	; (800a5e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a596:	68d2      	ldr	r2, [r2, #12]
 800a598:	0a12      	lsrs	r2, r2, #8
 800a59a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a59e:	fb02 f303 	mul.w	r3, r2, r3
 800a5a2:	617b      	str	r3, [r7, #20]
    break;
 800a5a4:	e00c      	b.n	800a5c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a5a6:	4a12      	ldr	r2, [pc, #72]	; (800a5f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ae:	4a0e      	ldr	r2, [pc, #56]	; (800a5e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a5b0:	68d2      	ldr	r2, [r2, #12]
 800a5b2:	0a12      	lsrs	r2, r2, #8
 800a5b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a5b8:	fb02 f303 	mul.w	r3, r2, r3
 800a5bc:	617b      	str	r3, [r7, #20]
    break;
 800a5be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a5c0:	4b09      	ldr	r3, [pc, #36]	; (800a5e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	0e5b      	lsrs	r3, r3, #25
 800a5c6:	f003 0303 	and.w	r3, r3, #3
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	005b      	lsls	r3, r3, #1
 800a5ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a5d0:	697a      	ldr	r2, [r7, #20]
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a5da:	687b      	ldr	r3, [r7, #4]
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	371c      	adds	r7, #28
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr
 800a5e8:	40021000 	.word	0x40021000
 800a5ec:	007a1200 	.word	0x007a1200
 800a5f0:	00f42400 	.word	0x00f42400

0800a5f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b086      	sub	sp, #24
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a600:	2300      	movs	r3, #0
 800a602:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f000 8098 	beq.w	800a742 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a612:	2300      	movs	r3, #0
 800a614:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a616:	4b43      	ldr	r3, [pc, #268]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a61a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d10d      	bne.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a622:	4b40      	ldr	r3, [pc, #256]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a626:	4a3f      	ldr	r2, [pc, #252]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a62c:	6593      	str	r3, [r2, #88]	; 0x58
 800a62e:	4b3d      	ldr	r3, [pc, #244]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a636:	60bb      	str	r3, [r7, #8]
 800a638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a63a:	2301      	movs	r3, #1
 800a63c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a63e:	4b3a      	ldr	r3, [pc, #232]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a39      	ldr	r2, [pc, #228]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a648:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a64a:	f7fb fd93 	bl	8006174 <HAL_GetTick>
 800a64e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a650:	e009      	b.n	800a666 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a652:	f7fb fd8f 	bl	8006174 <HAL_GetTick>
 800a656:	4602      	mov	r2, r0
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	1ad3      	subs	r3, r2, r3
 800a65c:	2b02      	cmp	r3, #2
 800a65e:	d902      	bls.n	800a666 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a660:	2303      	movs	r3, #3
 800a662:	74fb      	strb	r3, [r7, #19]
        break;
 800a664:	e005      	b.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a666:	4b30      	ldr	r3, [pc, #192]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d0ef      	beq.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a672:	7cfb      	ldrb	r3, [r7, #19]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d159      	bne.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a678:	4b2a      	ldr	r3, [pc, #168]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a67a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a67e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a682:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d01e      	beq.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a68e:	697a      	ldr	r2, [r7, #20]
 800a690:	429a      	cmp	r2, r3
 800a692:	d019      	beq.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a694:	4b23      	ldr	r3, [pc, #140]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a69a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a69e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a6a0:	4b20      	ldr	r3, [pc, #128]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a6a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6a6:	4a1f      	ldr	r2, [pc, #124]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a6a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a6b0:	4b1c      	ldr	r3, [pc, #112]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a6b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6b6:	4a1b      	ldr	r2, [pc, #108]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a6b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a6c0:	4a18      	ldr	r2, [pc, #96]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	f003 0301 	and.w	r3, r3, #1
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d016      	beq.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6d2:	f7fb fd4f 	bl	8006174 <HAL_GetTick>
 800a6d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a6d8:	e00b      	b.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6da:	f7fb fd4b 	bl	8006174 <HAL_GetTick>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	1ad3      	subs	r3, r2, r3
 800a6e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d902      	bls.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a6ec:	2303      	movs	r3, #3
 800a6ee:	74fb      	strb	r3, [r7, #19]
            break;
 800a6f0:	e006      	b.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a6f2:	4b0c      	ldr	r3, [pc, #48]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a6f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6f8:	f003 0302 	and.w	r3, r3, #2
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d0ec      	beq.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a700:	7cfb      	ldrb	r3, [r7, #19]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d10b      	bne.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a706:	4b07      	ldr	r3, [pc, #28]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a70c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a714:	4903      	ldr	r1, [pc, #12]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a716:	4313      	orrs	r3, r2
 800a718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a71c:	e008      	b.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a71e:	7cfb      	ldrb	r3, [r7, #19]
 800a720:	74bb      	strb	r3, [r7, #18]
 800a722:	e005      	b.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a724:	40021000 	.word	0x40021000
 800a728:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a72c:	7cfb      	ldrb	r3, [r7, #19]
 800a72e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a730:	7c7b      	ldrb	r3, [r7, #17]
 800a732:	2b01      	cmp	r3, #1
 800a734:	d105      	bne.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a736:	4ba6      	ldr	r3, [pc, #664]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a73a:	4aa5      	ldr	r2, [pc, #660]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a73c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a740:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f003 0301 	and.w	r3, r3, #1
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00a      	beq.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a74e:	4ba0      	ldr	r3, [pc, #640]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a754:	f023 0203 	bic.w	r2, r3, #3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	499c      	ldr	r1, [pc, #624]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a75e:	4313      	orrs	r3, r2
 800a760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f003 0302 	and.w	r3, r3, #2
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00a      	beq.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a770:	4b97      	ldr	r3, [pc, #604]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a776:	f023 020c 	bic.w	r2, r3, #12
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	4994      	ldr	r1, [pc, #592]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a780:	4313      	orrs	r3, r2
 800a782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f003 0304 	and.w	r3, r3, #4
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00a      	beq.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a792:	4b8f      	ldr	r3, [pc, #572]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a798:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	498b      	ldr	r1, [pc, #556]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f003 0308 	and.w	r3, r3, #8
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00a      	beq.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a7b4:	4b86      	ldr	r3, [pc, #536]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	691b      	ldr	r3, [r3, #16]
 800a7c2:	4983      	ldr	r1, [pc, #524]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f003 0320 	and.w	r3, r3, #32
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00a      	beq.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a7d6:	4b7e      	ldr	r3, [pc, #504]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	695b      	ldr	r3, [r3, #20]
 800a7e4:	497a      	ldr	r1, [pc, #488]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00a      	beq.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a7f8:	4b75      	ldr	r3, [pc, #468]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	699b      	ldr	r3, [r3, #24]
 800a806:	4972      	ldr	r1, [pc, #456]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a808:	4313      	orrs	r3, r2
 800a80a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00a      	beq.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a81a:	4b6d      	ldr	r3, [pc, #436]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a81c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a820:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	69db      	ldr	r3, [r3, #28]
 800a828:	4969      	ldr	r1, [pc, #420]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a82a:	4313      	orrs	r3, r2
 800a82c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00a      	beq.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a83c:	4b64      	ldr	r3, [pc, #400]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a83e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a842:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6a1b      	ldr	r3, [r3, #32]
 800a84a:	4961      	ldr	r1, [pc, #388]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a84c:	4313      	orrs	r3, r2
 800a84e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00a      	beq.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a85e:	4b5c      	ldr	r3, [pc, #368]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a864:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a86c:	4958      	ldr	r1, [pc, #352]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a86e:	4313      	orrs	r3, r2
 800a870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d015      	beq.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a880:	4b53      	ldr	r3, [pc, #332]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a886:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a88e:	4950      	ldr	r1, [pc, #320]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a890:	4313      	orrs	r3, r2
 800a892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a89a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a89e:	d105      	bne.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a8a0:	4b4b      	ldr	r3, [pc, #300]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	4a4a      	ldr	r2, [pc, #296]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d015      	beq.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a8b8:	4b45      	ldr	r3, [pc, #276]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c6:	4942      	ldr	r1, [pc, #264]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8d6:	d105      	bne.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a8d8:	4b3d      	ldr	r3, [pc, #244]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	4a3c      	ldr	r2, [pc, #240]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8e2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d015      	beq.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a8f0:	4b37      	ldr	r3, [pc, #220]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8fe:	4934      	ldr	r1, [pc, #208]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a900:	4313      	orrs	r3, r2
 800a902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a90a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a90e:	d105      	bne.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a910:	4b2f      	ldr	r3, [pc, #188]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a912:	68db      	ldr	r3, [r3, #12]
 800a914:	4a2e      	ldr	r2, [pc, #184]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a916:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a91a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a924:	2b00      	cmp	r3, #0
 800a926:	d015      	beq.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a928:	4b29      	ldr	r3, [pc, #164]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a92a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a92e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a936:	4926      	ldr	r1, [pc, #152]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a938:	4313      	orrs	r3, r2
 800a93a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a942:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a946:	d105      	bne.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a948:	4b21      	ldr	r3, [pc, #132]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	4a20      	ldr	r2, [pc, #128]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a94e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a952:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d015      	beq.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a960:	4b1b      	ldr	r3, [pc, #108]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a966:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a96e:	4918      	ldr	r1, [pc, #96]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a970:	4313      	orrs	r3, r2
 800a972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a97a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a97e:	d105      	bne.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a980:	4b13      	ldr	r3, [pc, #76]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	4a12      	ldr	r2, [pc, #72]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a98a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a994:	2b00      	cmp	r3, #0
 800a996:	d015      	beq.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a998:	4b0d      	ldr	r3, [pc, #52]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a99a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a99e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9a6:	490a      	ldr	r1, [pc, #40]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9b6:	d105      	bne.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a9b8:	4b05      	ldr	r3, [pc, #20]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a9ba:	68db      	ldr	r3, [r3, #12]
 800a9bc:	4a04      	ldr	r2, [pc, #16]	; (800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a9be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a9c4:	7cbb      	ldrb	r3, [r7, #18]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3718      	adds	r7, #24
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	40021000 	.word	0x40021000

0800a9d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d101      	bne.n	800a9e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e049      	b.n	800aa7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d106      	bne.n	800aa00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f7fb f8fc 	bl	8005bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2202      	movs	r2, #2
 800aa04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	3304      	adds	r3, #4
 800aa10:	4619      	mov	r1, r3
 800aa12:	4610      	mov	r0, r2
 800aa14:	f001 f908 	bl	800bc28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2201      	movs	r2, #1
 800aa34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2201      	movs	r2, #1
 800aa44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2201      	movs	r2, #1
 800aa64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2201      	movs	r2, #1
 800aa74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3708      	adds	r7, #8
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
	...

0800aa84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d001      	beq.n	800aa9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e042      	b.n	800ab22 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2202      	movs	r2, #2
 800aaa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a21      	ldr	r2, [pc, #132]	; (800ab30 <HAL_TIM_Base_Start+0xac>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d018      	beq.n	800aae0 <HAL_TIM_Base_Start+0x5c>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aab6:	d013      	beq.n	800aae0 <HAL_TIM_Base_Start+0x5c>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a1d      	ldr	r2, [pc, #116]	; (800ab34 <HAL_TIM_Base_Start+0xb0>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d00e      	beq.n	800aae0 <HAL_TIM_Base_Start+0x5c>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a1c      	ldr	r2, [pc, #112]	; (800ab38 <HAL_TIM_Base_Start+0xb4>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d009      	beq.n	800aae0 <HAL_TIM_Base_Start+0x5c>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a1a      	ldr	r2, [pc, #104]	; (800ab3c <HAL_TIM_Base_Start+0xb8>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d004      	beq.n	800aae0 <HAL_TIM_Base_Start+0x5c>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a19      	ldr	r2, [pc, #100]	; (800ab40 <HAL_TIM_Base_Start+0xbc>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d115      	bne.n	800ab0c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	689a      	ldr	r2, [r3, #8]
 800aae6:	4b17      	ldr	r3, [pc, #92]	; (800ab44 <HAL_TIM_Base_Start+0xc0>)
 800aae8:	4013      	ands	r3, r2
 800aaea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2b06      	cmp	r3, #6
 800aaf0:	d015      	beq.n	800ab1e <HAL_TIM_Base_Start+0x9a>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaf8:	d011      	beq.n	800ab1e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f042 0201 	orr.w	r2, r2, #1
 800ab08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab0a:	e008      	b.n	800ab1e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f042 0201 	orr.w	r2, r2, #1
 800ab1a:	601a      	str	r2, [r3, #0]
 800ab1c:	e000      	b.n	800ab20 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3714      	adds	r7, #20
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	40012c00 	.word	0x40012c00
 800ab34:	40000400 	.word	0x40000400
 800ab38:	40000800 	.word	0x40000800
 800ab3c:	40013400 	.word	0x40013400
 800ab40:	40014000 	.word	0x40014000
 800ab44:	00010007 	.word	0x00010007

0800ab48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d101      	bne.n	800ab5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
 800ab58:	e049      	b.n	800abee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d106      	bne.n	800ab74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 f841 	bl	800abf6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2202      	movs	r2, #2
 800ab78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681a      	ldr	r2, [r3, #0]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	3304      	adds	r3, #4
 800ab84:	4619      	mov	r1, r3
 800ab86:	4610      	mov	r0, r2
 800ab88:	f001 f84e 	bl	800bc28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2201      	movs	r2, #1
 800ab98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2201      	movs	r2, #1
 800abc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2201      	movs	r2, #1
 800abd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2201      	movs	r2, #1
 800abe0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800abec:	2300      	movs	r3, #0
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3708      	adds	r7, #8
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800abf6:	b480      	push	{r7}
 800abf8:	b083      	sub	sp, #12
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800abfe:	bf00      	nop
 800ac00:	370c      	adds	r7, #12
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr
	...

0800ac0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d109      	bne.n	800ac30 <HAL_TIM_PWM_Start+0x24>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	bf14      	ite	ne
 800ac28:	2301      	movne	r3, #1
 800ac2a:	2300      	moveq	r3, #0
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	e03c      	b.n	800acaa <HAL_TIM_PWM_Start+0x9e>
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	2b04      	cmp	r3, #4
 800ac34:	d109      	bne.n	800ac4a <HAL_TIM_PWM_Start+0x3e>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	bf14      	ite	ne
 800ac42:	2301      	movne	r3, #1
 800ac44:	2300      	moveq	r3, #0
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	e02f      	b.n	800acaa <HAL_TIM_PWM_Start+0x9e>
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	2b08      	cmp	r3, #8
 800ac4e:	d109      	bne.n	800ac64 <HAL_TIM_PWM_Start+0x58>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	bf14      	ite	ne
 800ac5c:	2301      	movne	r3, #1
 800ac5e:	2300      	moveq	r3, #0
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	e022      	b.n	800acaa <HAL_TIM_PWM_Start+0x9e>
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	2b0c      	cmp	r3, #12
 800ac68:	d109      	bne.n	800ac7e <HAL_TIM_PWM_Start+0x72>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	bf14      	ite	ne
 800ac76:	2301      	movne	r3, #1
 800ac78:	2300      	moveq	r3, #0
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	e015      	b.n	800acaa <HAL_TIM_PWM_Start+0x9e>
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	2b10      	cmp	r3, #16
 800ac82:	d109      	bne.n	800ac98 <HAL_TIM_PWM_Start+0x8c>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	bf14      	ite	ne
 800ac90:	2301      	movne	r3, #1
 800ac92:	2300      	moveq	r3, #0
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	e008      	b.n	800acaa <HAL_TIM_PWM_Start+0x9e>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	bf14      	ite	ne
 800aca4:	2301      	movne	r3, #1
 800aca6:	2300      	moveq	r3, #0
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d001      	beq.n	800acb2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800acae:	2301      	movs	r3, #1
 800acb0:	e097      	b.n	800ade2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d104      	bne.n	800acc2 <HAL_TIM_PWM_Start+0xb6>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2202      	movs	r2, #2
 800acbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800acc0:	e023      	b.n	800ad0a <HAL_TIM_PWM_Start+0xfe>
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	2b04      	cmp	r3, #4
 800acc6:	d104      	bne.n	800acd2 <HAL_TIM_PWM_Start+0xc6>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2202      	movs	r2, #2
 800accc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800acd0:	e01b      	b.n	800ad0a <HAL_TIM_PWM_Start+0xfe>
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	2b08      	cmp	r3, #8
 800acd6:	d104      	bne.n	800ace2 <HAL_TIM_PWM_Start+0xd6>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2202      	movs	r2, #2
 800acdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ace0:	e013      	b.n	800ad0a <HAL_TIM_PWM_Start+0xfe>
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	2b0c      	cmp	r3, #12
 800ace6:	d104      	bne.n	800acf2 <HAL_TIM_PWM_Start+0xe6>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2202      	movs	r2, #2
 800acec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800acf0:	e00b      	b.n	800ad0a <HAL_TIM_PWM_Start+0xfe>
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	2b10      	cmp	r3, #16
 800acf6:	d104      	bne.n	800ad02 <HAL_TIM_PWM_Start+0xf6>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2202      	movs	r2, #2
 800acfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad00:	e003      	b.n	800ad0a <HAL_TIM_PWM_Start+0xfe>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2202      	movs	r2, #2
 800ad06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	6839      	ldr	r1, [r7, #0]
 800ad12:	4618      	mov	r0, r3
 800ad14:	f001 fd88 	bl	800c828 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a33      	ldr	r2, [pc, #204]	; (800adec <HAL_TIM_PWM_Start+0x1e0>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d013      	beq.n	800ad4a <HAL_TIM_PWM_Start+0x13e>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a32      	ldr	r2, [pc, #200]	; (800adf0 <HAL_TIM_PWM_Start+0x1e4>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d00e      	beq.n	800ad4a <HAL_TIM_PWM_Start+0x13e>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a30      	ldr	r2, [pc, #192]	; (800adf4 <HAL_TIM_PWM_Start+0x1e8>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d009      	beq.n	800ad4a <HAL_TIM_PWM_Start+0x13e>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a2f      	ldr	r2, [pc, #188]	; (800adf8 <HAL_TIM_PWM_Start+0x1ec>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d004      	beq.n	800ad4a <HAL_TIM_PWM_Start+0x13e>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a2d      	ldr	r2, [pc, #180]	; (800adfc <HAL_TIM_PWM_Start+0x1f0>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d101      	bne.n	800ad4e <HAL_TIM_PWM_Start+0x142>
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e000      	b.n	800ad50 <HAL_TIM_PWM_Start+0x144>
 800ad4e:	2300      	movs	r3, #0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d007      	beq.n	800ad64 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad62:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4a20      	ldr	r2, [pc, #128]	; (800adec <HAL_TIM_PWM_Start+0x1e0>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d018      	beq.n	800ada0 <HAL_TIM_PWM_Start+0x194>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad76:	d013      	beq.n	800ada0 <HAL_TIM_PWM_Start+0x194>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a20      	ldr	r2, [pc, #128]	; (800ae00 <HAL_TIM_PWM_Start+0x1f4>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d00e      	beq.n	800ada0 <HAL_TIM_PWM_Start+0x194>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a1f      	ldr	r2, [pc, #124]	; (800ae04 <HAL_TIM_PWM_Start+0x1f8>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d009      	beq.n	800ada0 <HAL_TIM_PWM_Start+0x194>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a17      	ldr	r2, [pc, #92]	; (800adf0 <HAL_TIM_PWM_Start+0x1e4>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d004      	beq.n	800ada0 <HAL_TIM_PWM_Start+0x194>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a16      	ldr	r2, [pc, #88]	; (800adf4 <HAL_TIM_PWM_Start+0x1e8>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d115      	bne.n	800adcc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	689a      	ldr	r2, [r3, #8]
 800ada6:	4b18      	ldr	r3, [pc, #96]	; (800ae08 <HAL_TIM_PWM_Start+0x1fc>)
 800ada8:	4013      	ands	r3, r2
 800adaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2b06      	cmp	r3, #6
 800adb0:	d015      	beq.n	800adde <HAL_TIM_PWM_Start+0x1d2>
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adb8:	d011      	beq.n	800adde <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f042 0201 	orr.w	r2, r2, #1
 800adc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adca:	e008      	b.n	800adde <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f042 0201 	orr.w	r2, r2, #1
 800adda:	601a      	str	r2, [r3, #0]
 800addc:	e000      	b.n	800ade0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ade0:	2300      	movs	r3, #0
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	40012c00 	.word	0x40012c00
 800adf0:	40013400 	.word	0x40013400
 800adf4:	40014000 	.word	0x40014000
 800adf8:	40014400 	.word	0x40014400
 800adfc:	40014800 	.word	0x40014800
 800ae00:	40000400 	.word	0x40000400
 800ae04:	40000800 	.word	0x40000800
 800ae08:	00010007 	.word	0x00010007

0800ae0c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b082      	sub	sp, #8
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d101      	bne.n	800ae1e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e049      	b.n	800aeb2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d106      	bne.n	800ae38 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7fa ff14 	bl	8005c60 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2202      	movs	r2, #2
 800ae3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	3304      	adds	r3, #4
 800ae48:	4619      	mov	r1, r3
 800ae4a:	4610      	mov	r0, r2
 800ae4c:	f000 feec 	bl	800bc28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2201      	movs	r2, #1
 800ae54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2201      	movs	r2, #1
 800ae64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2201      	movs	r2, #1
 800ae74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2201      	movs	r2, #1
 800ae84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2201      	movs	r2, #1
 800ae94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2201      	movs	r2, #1
 800aea4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aeb0:	2300      	movs	r3, #0
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3708      	adds	r7, #8
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
	...

0800aebc <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b084      	sub	sp, #16
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d104      	bne.n	800aed6 <HAL_TIM_IC_Start+0x1a>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	e023      	b.n	800af1e <HAL_TIM_IC_Start+0x62>
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	2b04      	cmp	r3, #4
 800aeda:	d104      	bne.n	800aee6 <HAL_TIM_IC_Start+0x2a>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	e01b      	b.n	800af1e <HAL_TIM_IC_Start+0x62>
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	2b08      	cmp	r3, #8
 800aeea:	d104      	bne.n	800aef6 <HAL_TIM_IC_Start+0x3a>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	e013      	b.n	800af1e <HAL_TIM_IC_Start+0x62>
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	2b0c      	cmp	r3, #12
 800aefa:	d104      	bne.n	800af06 <HAL_TIM_IC_Start+0x4a>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af02:	b2db      	uxtb	r3, r3
 800af04:	e00b      	b.n	800af1e <HAL_TIM_IC_Start+0x62>
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	2b10      	cmp	r3, #16
 800af0a:	d104      	bne.n	800af16 <HAL_TIM_IC_Start+0x5a>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af12:	b2db      	uxtb	r3, r3
 800af14:	e003      	b.n	800af1e <HAL_TIM_IC_Start+0x62>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d104      	bne.n	800af30 <HAL_TIM_IC_Start+0x74>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	e013      	b.n	800af58 <HAL_TIM_IC_Start+0x9c>
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	2b04      	cmp	r3, #4
 800af34:	d104      	bne.n	800af40 <HAL_TIM_IC_Start+0x84>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	e00b      	b.n	800af58 <HAL_TIM_IC_Start+0x9c>
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	2b08      	cmp	r3, #8
 800af44:	d104      	bne.n	800af50 <HAL_TIM_IC_Start+0x94>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	e003      	b.n	800af58 <HAL_TIM_IC_Start+0x9c>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800af56:	b2db      	uxtb	r3, r3
 800af58:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800af5a:	7bfb      	ldrb	r3, [r7, #15]
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d102      	bne.n	800af66 <HAL_TIM_IC_Start+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800af60:	7bbb      	ldrb	r3, [r7, #14]
 800af62:	2b01      	cmp	r3, #1
 800af64:	d001      	beq.n	800af6a <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 800af66:	2301      	movs	r3, #1
 800af68:	e08d      	b.n	800b086 <HAL_TIM_IC_Start+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d104      	bne.n	800af7a <HAL_TIM_IC_Start+0xbe>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2202      	movs	r2, #2
 800af74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af78:	e023      	b.n	800afc2 <HAL_TIM_IC_Start+0x106>
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	2b04      	cmp	r3, #4
 800af7e:	d104      	bne.n	800af8a <HAL_TIM_IC_Start+0xce>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2202      	movs	r2, #2
 800af84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af88:	e01b      	b.n	800afc2 <HAL_TIM_IC_Start+0x106>
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	2b08      	cmp	r3, #8
 800af8e:	d104      	bne.n	800af9a <HAL_TIM_IC_Start+0xde>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2202      	movs	r2, #2
 800af94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af98:	e013      	b.n	800afc2 <HAL_TIM_IC_Start+0x106>
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	2b0c      	cmp	r3, #12
 800af9e:	d104      	bne.n	800afaa <HAL_TIM_IC_Start+0xee>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2202      	movs	r2, #2
 800afa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800afa8:	e00b      	b.n	800afc2 <HAL_TIM_IC_Start+0x106>
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	2b10      	cmp	r3, #16
 800afae:	d104      	bne.n	800afba <HAL_TIM_IC_Start+0xfe>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2202      	movs	r2, #2
 800afb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800afb8:	e003      	b.n	800afc2 <HAL_TIM_IC_Start+0x106>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2202      	movs	r2, #2
 800afbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d104      	bne.n	800afd2 <HAL_TIM_IC_Start+0x116>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2202      	movs	r2, #2
 800afcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afd0:	e013      	b.n	800affa <HAL_TIM_IC_Start+0x13e>
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	2b04      	cmp	r3, #4
 800afd6:	d104      	bne.n	800afe2 <HAL_TIM_IC_Start+0x126>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2202      	movs	r2, #2
 800afdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afe0:	e00b      	b.n	800affa <HAL_TIM_IC_Start+0x13e>
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	2b08      	cmp	r3, #8
 800afe6:	d104      	bne.n	800aff2 <HAL_TIM_IC_Start+0x136>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2202      	movs	r2, #2
 800afec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aff0:	e003      	b.n	800affa <HAL_TIM_IC_Start+0x13e>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2202      	movs	r2, #2
 800aff6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2201      	movs	r2, #1
 800b000:	6839      	ldr	r1, [r7, #0]
 800b002:	4618      	mov	r0, r3
 800b004:	f001 fc10 	bl	800c828 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a20      	ldr	r2, [pc, #128]	; (800b090 <HAL_TIM_IC_Start+0x1d4>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d018      	beq.n	800b044 <HAL_TIM_IC_Start+0x188>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b01a:	d013      	beq.n	800b044 <HAL_TIM_IC_Start+0x188>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a1c      	ldr	r2, [pc, #112]	; (800b094 <HAL_TIM_IC_Start+0x1d8>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d00e      	beq.n	800b044 <HAL_TIM_IC_Start+0x188>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a1b      	ldr	r2, [pc, #108]	; (800b098 <HAL_TIM_IC_Start+0x1dc>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d009      	beq.n	800b044 <HAL_TIM_IC_Start+0x188>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a19      	ldr	r2, [pc, #100]	; (800b09c <HAL_TIM_IC_Start+0x1e0>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d004      	beq.n	800b044 <HAL_TIM_IC_Start+0x188>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a18      	ldr	r2, [pc, #96]	; (800b0a0 <HAL_TIM_IC_Start+0x1e4>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d115      	bne.n	800b070 <HAL_TIM_IC_Start+0x1b4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	689a      	ldr	r2, [r3, #8]
 800b04a:	4b16      	ldr	r3, [pc, #88]	; (800b0a4 <HAL_TIM_IC_Start+0x1e8>)
 800b04c:	4013      	ands	r3, r2
 800b04e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	2b06      	cmp	r3, #6
 800b054:	d015      	beq.n	800b082 <HAL_TIM_IC_Start+0x1c6>
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b05c:	d011      	beq.n	800b082 <HAL_TIM_IC_Start+0x1c6>
    {
      __HAL_TIM_ENABLE(htim);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f042 0201 	orr.w	r2, r2, #1
 800b06c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b06e:	e008      	b.n	800b082 <HAL_TIM_IC_Start+0x1c6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f042 0201 	orr.w	r2, r2, #1
 800b07e:	601a      	str	r2, [r3, #0]
 800b080:	e000      	b.n	800b084 <HAL_TIM_IC_Start+0x1c8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b082:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	40012c00 	.word	0x40012c00
 800b094:	40000400 	.word	0x40000400
 800b098:	40000800 	.word	0x40000800
 800b09c:	40013400 	.word	0x40013400
 800b0a0:	40014000 	.word	0x40014000
 800b0a4:	00010007 	.word	0x00010007

0800b0a8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d104      	bne.n	800b0c2 <HAL_TIM_IC_Start_IT+0x1a>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	e023      	b.n	800b10a <HAL_TIM_IC_Start_IT+0x62>
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	2b04      	cmp	r3, #4
 800b0c6:	d104      	bne.n	800b0d2 <HAL_TIM_IC_Start_IT+0x2a>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	e01b      	b.n	800b10a <HAL_TIM_IC_Start_IT+0x62>
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	2b08      	cmp	r3, #8
 800b0d6:	d104      	bne.n	800b0e2 <HAL_TIM_IC_Start_IT+0x3a>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	e013      	b.n	800b10a <HAL_TIM_IC_Start_IT+0x62>
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	2b0c      	cmp	r3, #12
 800b0e6:	d104      	bne.n	800b0f2 <HAL_TIM_IC_Start_IT+0x4a>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	e00b      	b.n	800b10a <HAL_TIM_IC_Start_IT+0x62>
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	2b10      	cmp	r3, #16
 800b0f6:	d104      	bne.n	800b102 <HAL_TIM_IC_Start_IT+0x5a>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	e003      	b.n	800b10a <HAL_TIM_IC_Start_IT+0x62>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d104      	bne.n	800b11c <HAL_TIM_IC_Start_IT+0x74>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	e013      	b.n	800b144 <HAL_TIM_IC_Start_IT+0x9c>
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	2b04      	cmp	r3, #4
 800b120:	d104      	bne.n	800b12c <HAL_TIM_IC_Start_IT+0x84>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	e00b      	b.n	800b144 <HAL_TIM_IC_Start_IT+0x9c>
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	2b08      	cmp	r3, #8
 800b130:	d104      	bne.n	800b13c <HAL_TIM_IC_Start_IT+0x94>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	e003      	b.n	800b144 <HAL_TIM_IC_Start_IT+0x9c>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b142:	b2db      	uxtb	r3, r3
 800b144:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800b146:	7bfb      	ldrb	r3, [r7, #15]
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d102      	bne.n	800b152 <HAL_TIM_IC_Start_IT+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800b14c:	7bbb      	ldrb	r3, [r7, #14]
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d001      	beq.n	800b156 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 800b152:	2301      	movs	r3, #1
 800b154:	e0d3      	b.n	800b2fe <HAL_TIM_IC_Start_IT+0x256>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d104      	bne.n	800b166 <HAL_TIM_IC_Start_IT+0xbe>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2202      	movs	r2, #2
 800b160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b164:	e023      	b.n	800b1ae <HAL_TIM_IC_Start_IT+0x106>
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	2b04      	cmp	r3, #4
 800b16a:	d104      	bne.n	800b176 <HAL_TIM_IC_Start_IT+0xce>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2202      	movs	r2, #2
 800b170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b174:	e01b      	b.n	800b1ae <HAL_TIM_IC_Start_IT+0x106>
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	2b08      	cmp	r3, #8
 800b17a:	d104      	bne.n	800b186 <HAL_TIM_IC_Start_IT+0xde>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2202      	movs	r2, #2
 800b180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b184:	e013      	b.n	800b1ae <HAL_TIM_IC_Start_IT+0x106>
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	2b0c      	cmp	r3, #12
 800b18a:	d104      	bne.n	800b196 <HAL_TIM_IC_Start_IT+0xee>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2202      	movs	r2, #2
 800b190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b194:	e00b      	b.n	800b1ae <HAL_TIM_IC_Start_IT+0x106>
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	2b10      	cmp	r3, #16
 800b19a:	d104      	bne.n	800b1a6 <HAL_TIM_IC_Start_IT+0xfe>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2202      	movs	r2, #2
 800b1a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b1a4:	e003      	b.n	800b1ae <HAL_TIM_IC_Start_IT+0x106>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2202      	movs	r2, #2
 800b1aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d104      	bne.n	800b1be <HAL_TIM_IC_Start_IT+0x116>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2202      	movs	r2, #2
 800b1b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1bc:	e013      	b.n	800b1e6 <HAL_TIM_IC_Start_IT+0x13e>
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	2b04      	cmp	r3, #4
 800b1c2:	d104      	bne.n	800b1ce <HAL_TIM_IC_Start_IT+0x126>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2202      	movs	r2, #2
 800b1c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1cc:	e00b      	b.n	800b1e6 <HAL_TIM_IC_Start_IT+0x13e>
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	2b08      	cmp	r3, #8
 800b1d2:	d104      	bne.n	800b1de <HAL_TIM_IC_Start_IT+0x136>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2202      	movs	r2, #2
 800b1d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b1dc:	e003      	b.n	800b1e6 <HAL_TIM_IC_Start_IT+0x13e>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2202      	movs	r2, #2
 800b1e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	2b0c      	cmp	r3, #12
 800b1ea:	d841      	bhi.n	800b270 <HAL_TIM_IC_Start_IT+0x1c8>
 800b1ec:	a201      	add	r2, pc, #4	; (adr r2, 800b1f4 <HAL_TIM_IC_Start_IT+0x14c>)
 800b1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f2:	bf00      	nop
 800b1f4:	0800b229 	.word	0x0800b229
 800b1f8:	0800b271 	.word	0x0800b271
 800b1fc:	0800b271 	.word	0x0800b271
 800b200:	0800b271 	.word	0x0800b271
 800b204:	0800b23b 	.word	0x0800b23b
 800b208:	0800b271 	.word	0x0800b271
 800b20c:	0800b271 	.word	0x0800b271
 800b210:	0800b271 	.word	0x0800b271
 800b214:	0800b24d 	.word	0x0800b24d
 800b218:	0800b271 	.word	0x0800b271
 800b21c:	0800b271 	.word	0x0800b271
 800b220:	0800b271 	.word	0x0800b271
 800b224:	0800b25f 	.word	0x0800b25f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	68da      	ldr	r2, [r3, #12]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f042 0202 	orr.w	r2, r2, #2
 800b236:	60da      	str	r2, [r3, #12]
      break;
 800b238:	e01b      	b.n	800b272 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	68da      	ldr	r2, [r3, #12]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f042 0204 	orr.w	r2, r2, #4
 800b248:	60da      	str	r2, [r3, #12]
      break;
 800b24a:	e012      	b.n	800b272 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	68da      	ldr	r2, [r3, #12]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f042 0208 	orr.w	r2, r2, #8
 800b25a:	60da      	str	r2, [r3, #12]
      break;
 800b25c:	e009      	b.n	800b272 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	68da      	ldr	r2, [r3, #12]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f042 0210 	orr.w	r2, r2, #16
 800b26c:	60da      	str	r2, [r3, #12]
      break;
 800b26e:	e000      	b.n	800b272 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 800b270:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2201      	movs	r2, #1
 800b278:	6839      	ldr	r1, [r7, #0]
 800b27a:	4618      	mov	r0, r3
 800b27c:	f001 fad4 	bl	800c828 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a20      	ldr	r2, [pc, #128]	; (800b308 <HAL_TIM_IC_Start_IT+0x260>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d018      	beq.n	800b2bc <HAL_TIM_IC_Start_IT+0x214>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b292:	d013      	beq.n	800b2bc <HAL_TIM_IC_Start_IT+0x214>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4a1c      	ldr	r2, [pc, #112]	; (800b30c <HAL_TIM_IC_Start_IT+0x264>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d00e      	beq.n	800b2bc <HAL_TIM_IC_Start_IT+0x214>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	4a1b      	ldr	r2, [pc, #108]	; (800b310 <HAL_TIM_IC_Start_IT+0x268>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d009      	beq.n	800b2bc <HAL_TIM_IC_Start_IT+0x214>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4a19      	ldr	r2, [pc, #100]	; (800b314 <HAL_TIM_IC_Start_IT+0x26c>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d004      	beq.n	800b2bc <HAL_TIM_IC_Start_IT+0x214>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a18      	ldr	r2, [pc, #96]	; (800b318 <HAL_TIM_IC_Start_IT+0x270>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d115      	bne.n	800b2e8 <HAL_TIM_IC_Start_IT+0x240>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	689a      	ldr	r2, [r3, #8]
 800b2c2:	4b16      	ldr	r3, [pc, #88]	; (800b31c <HAL_TIM_IC_Start_IT+0x274>)
 800b2c4:	4013      	ands	r3, r2
 800b2c6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	2b06      	cmp	r3, #6
 800b2cc:	d015      	beq.n	800b2fa <HAL_TIM_IC_Start_IT+0x252>
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2d4:	d011      	beq.n	800b2fa <HAL_TIM_IC_Start_IT+0x252>
    {
      __HAL_TIM_ENABLE(htim);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f042 0201 	orr.w	r2, r2, #1
 800b2e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2e6:	e008      	b.n	800b2fa <HAL_TIM_IC_Start_IT+0x252>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f042 0201 	orr.w	r2, r2, #1
 800b2f6:	601a      	str	r2, [r3, #0]
 800b2f8:	e000      	b.n	800b2fc <HAL_TIM_IC_Start_IT+0x254>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b2fc:	2300      	movs	r3, #0
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3710      	adds	r7, #16
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop
 800b308:	40012c00 	.word	0x40012c00
 800b30c:	40000400 	.word	0x40000400
 800b310:	40000800 	.word	0x40000800
 800b314:	40013400 	.word	0x40013400
 800b318:	40014000 	.word	0x40014000
 800b31c:	00010007 	.word	0x00010007

0800b320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b082      	sub	sp, #8
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	691b      	ldr	r3, [r3, #16]
 800b32e:	f003 0302 	and.w	r3, r3, #2
 800b332:	2b02      	cmp	r3, #2
 800b334:	d122      	bne.n	800b37c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	f003 0302 	and.w	r3, r3, #2
 800b340:	2b02      	cmp	r3, #2
 800b342:	d11b      	bne.n	800b37c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f06f 0202 	mvn.w	r2, #2
 800b34c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2201      	movs	r2, #1
 800b352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	699b      	ldr	r3, [r3, #24]
 800b35a:	f003 0303 	and.w	r3, r3, #3
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d003      	beq.n	800b36a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f7f6 ffba 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 800b368:	e005      	b.n	800b376 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 fc3e 	bl	800bbec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f000 fc45 	bl	800bc00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	691b      	ldr	r3, [r3, #16]
 800b382:	f003 0304 	and.w	r3, r3, #4
 800b386:	2b04      	cmp	r3, #4
 800b388:	d122      	bne.n	800b3d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	f003 0304 	and.w	r3, r3, #4
 800b394:	2b04      	cmp	r3, #4
 800b396:	d11b      	bne.n	800b3d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f06f 0204 	mvn.w	r2, #4
 800b3a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2202      	movs	r2, #2
 800b3a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	699b      	ldr	r3, [r3, #24]
 800b3ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d003      	beq.n	800b3be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f7f6 ff90 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 800b3bc:	e005      	b.n	800b3ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 fc14 	bl	800bbec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 fc1b 	bl	800bc00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	f003 0308 	and.w	r3, r3, #8
 800b3da:	2b08      	cmp	r3, #8
 800b3dc:	d122      	bne.n	800b424 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	68db      	ldr	r3, [r3, #12]
 800b3e4:	f003 0308 	and.w	r3, r3, #8
 800b3e8:	2b08      	cmp	r3, #8
 800b3ea:	d11b      	bne.n	800b424 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f06f 0208 	mvn.w	r2, #8
 800b3f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2204      	movs	r2, #4
 800b3fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	69db      	ldr	r3, [r3, #28]
 800b402:	f003 0303 	and.w	r3, r3, #3
 800b406:	2b00      	cmp	r3, #0
 800b408:	d003      	beq.n	800b412 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f7f6 ff66 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 800b410:	e005      	b.n	800b41e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 fbea 	bl	800bbec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f000 fbf1 	bl	800bc00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	691b      	ldr	r3, [r3, #16]
 800b42a:	f003 0310 	and.w	r3, r3, #16
 800b42e:	2b10      	cmp	r3, #16
 800b430:	d122      	bne.n	800b478 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	f003 0310 	and.w	r3, r3, #16
 800b43c:	2b10      	cmp	r3, #16
 800b43e:	d11b      	bne.n	800b478 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f06f 0210 	mvn.w	r2, #16
 800b448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2208      	movs	r2, #8
 800b44e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	69db      	ldr	r3, [r3, #28]
 800b456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d003      	beq.n	800b466 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f7f6 ff3c 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 800b464:	e005      	b.n	800b472 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f000 fbc0 	bl	800bbec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 fbc7 	bl	800bc00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	691b      	ldr	r3, [r3, #16]
 800b47e:	f003 0301 	and.w	r3, r3, #1
 800b482:	2b01      	cmp	r3, #1
 800b484:	d10e      	bne.n	800b4a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	f003 0301 	and.w	r3, r3, #1
 800b490:	2b01      	cmp	r3, #1
 800b492:	d107      	bne.n	800b4a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f06f 0201 	mvn.w	r2, #1
 800b49c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f000 fb9a 	bl	800bbd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	691b      	ldr	r3, [r3, #16]
 800b4aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4ae:	2b80      	cmp	r3, #128	; 0x80
 800b4b0:	d10e      	bne.n	800b4d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4bc:	2b80      	cmp	r3, #128	; 0x80
 800b4be:	d107      	bne.n	800b4d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b4c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f001 fbb2 	bl	800cc34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	691b      	ldr	r3, [r3, #16]
 800b4d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4de:	d10e      	bne.n	800b4fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4ea:	2b80      	cmp	r3, #128	; 0x80
 800b4ec:	d107      	bne.n	800b4fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b4f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f001 fba5 	bl	800cc48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	691b      	ldr	r3, [r3, #16]
 800b504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b508:	2b40      	cmp	r3, #64	; 0x40
 800b50a:	d10e      	bne.n	800b52a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b516:	2b40      	cmp	r3, #64	; 0x40
 800b518:	d107      	bne.n	800b52a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f000 fb75 	bl	800bc14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	f003 0320 	and.w	r3, r3, #32
 800b534:	2b20      	cmp	r3, #32
 800b536:	d10e      	bne.n	800b556 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	68db      	ldr	r3, [r3, #12]
 800b53e:	f003 0320 	and.w	r3, r3, #32
 800b542:	2b20      	cmp	r3, #32
 800b544:	d107      	bne.n	800b556 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f06f 0220 	mvn.w	r2, #32
 800b54e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f001 fb65 	bl	800cc20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	691b      	ldr	r3, [r3, #16]
 800b55c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b560:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b564:	d10f      	bne.n	800b586 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	68db      	ldr	r3, [r3, #12]
 800b56c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b574:	d107      	bne.n	800b586 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800b57e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f001 fb6b 	bl	800cc5c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	691b      	ldr	r3, [r3, #16]
 800b58c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b590:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b594:	d10f      	bne.n	800b5b6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	68db      	ldr	r3, [r3, #12]
 800b59c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b5a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5a4:	d107      	bne.n	800b5b6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800b5ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f001 fb5d 	bl	800cc70 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	691b      	ldr	r3, [r3, #16]
 800b5bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b5c4:	d10f      	bne.n	800b5e6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b5d4:	d107      	bne.n	800b5e6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800b5de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f001 fb4f 	bl	800cc84 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	691b      	ldr	r3, [r3, #16]
 800b5ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b5f4:	d10f      	bne.n	800b616 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b600:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b604:	d107      	bne.n	800b616 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800b60e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f001 fb41 	bl	800cc98 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b616:	bf00      	nop
 800b618:	3708      	adds	r7, #8
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}

0800b61e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b61e:	b580      	push	{r7, lr}
 800b620:	b084      	sub	sp, #16
 800b622:	af00      	add	r7, sp, #0
 800b624:	60f8      	str	r0, [r7, #12]
 800b626:	60b9      	str	r1, [r7, #8]
 800b628:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b630:	2b01      	cmp	r3, #1
 800b632:	d101      	bne.n	800b638 <HAL_TIM_IC_ConfigChannel+0x1a>
 800b634:	2302      	movs	r3, #2
 800b636:	e082      	b.n	800b73e <HAL_TIM_IC_ConfigChannel+0x120>
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2201      	movs	r2, #1
 800b63c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d11b      	bne.n	800b67e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	6818      	ldr	r0, [r3, #0]
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	6819      	ldr	r1, [r3, #0]
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	685a      	ldr	r2, [r3, #4]
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	f000 ff2d 	bl	800c4b4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	699a      	ldr	r2, [r3, #24]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f022 020c 	bic.w	r2, r2, #12
 800b668:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	6999      	ldr	r1, [r3, #24]
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	689a      	ldr	r2, [r3, #8]
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	430a      	orrs	r2, r1
 800b67a:	619a      	str	r2, [r3, #24]
 800b67c:	e05a      	b.n	800b734 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2b04      	cmp	r3, #4
 800b682:	d11c      	bne.n	800b6be <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6818      	ldr	r0, [r3, #0]
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	6819      	ldr	r1, [r3, #0]
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	685a      	ldr	r2, [r3, #4]
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	f000 ffa5 	bl	800c5e2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	699a      	ldr	r2, [r3, #24]
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b6a6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	6999      	ldr	r1, [r3, #24]
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	021a      	lsls	r2, r3, #8
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	430a      	orrs	r2, r1
 800b6ba:	619a      	str	r2, [r3, #24]
 800b6bc:	e03a      	b.n	800b734 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2b08      	cmp	r3, #8
 800b6c2:	d11b      	bne.n	800b6fc <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	6818      	ldr	r0, [r3, #0]
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	6819      	ldr	r1, [r3, #0]
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	685a      	ldr	r2, [r3, #4]
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	68db      	ldr	r3, [r3, #12]
 800b6d4:	f000 fff2 	bl	800c6bc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	69da      	ldr	r2, [r3, #28]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f022 020c 	bic.w	r2, r2, #12
 800b6e6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	69d9      	ldr	r1, [r3, #28]
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	689a      	ldr	r2, [r3, #8]
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	430a      	orrs	r2, r1
 800b6f8:	61da      	str	r2, [r3, #28]
 800b6fa:	e01b      	b.n	800b734 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	6818      	ldr	r0, [r3, #0]
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	6819      	ldr	r1, [r3, #0]
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	685a      	ldr	r2, [r3, #4]
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	f001 f812 	bl	800c734 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	69da      	ldr	r2, [r3, #28]
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b71e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	69d9      	ldr	r1, [r3, #28]
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	021a      	lsls	r2, r3, #8
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	430a      	orrs	r2, r1
 800b732:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2200      	movs	r2, #0
 800b738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
	...

0800b748 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d101      	bne.n	800b762 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b75e:	2302      	movs	r3, #2
 800b760:	e0fd      	b.n	800b95e <HAL_TIM_PWM_ConfigChannel+0x216>
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2201      	movs	r2, #1
 800b766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2b14      	cmp	r3, #20
 800b76e:	f200 80f0 	bhi.w	800b952 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800b772:	a201      	add	r2, pc, #4	; (adr r2, 800b778 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b778:	0800b7cd 	.word	0x0800b7cd
 800b77c:	0800b953 	.word	0x0800b953
 800b780:	0800b953 	.word	0x0800b953
 800b784:	0800b953 	.word	0x0800b953
 800b788:	0800b80d 	.word	0x0800b80d
 800b78c:	0800b953 	.word	0x0800b953
 800b790:	0800b953 	.word	0x0800b953
 800b794:	0800b953 	.word	0x0800b953
 800b798:	0800b84f 	.word	0x0800b84f
 800b79c:	0800b953 	.word	0x0800b953
 800b7a0:	0800b953 	.word	0x0800b953
 800b7a4:	0800b953 	.word	0x0800b953
 800b7a8:	0800b88f 	.word	0x0800b88f
 800b7ac:	0800b953 	.word	0x0800b953
 800b7b0:	0800b953 	.word	0x0800b953
 800b7b4:	0800b953 	.word	0x0800b953
 800b7b8:	0800b8d1 	.word	0x0800b8d1
 800b7bc:	0800b953 	.word	0x0800b953
 800b7c0:	0800b953 	.word	0x0800b953
 800b7c4:	0800b953 	.word	0x0800b953
 800b7c8:	0800b911 	.word	0x0800b911
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	68b9      	ldr	r1, [r7, #8]
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f000 fab8 	bl	800bd48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	699a      	ldr	r2, [r3, #24]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f042 0208 	orr.w	r2, r2, #8
 800b7e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	699a      	ldr	r2, [r3, #24]
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f022 0204 	bic.w	r2, r2, #4
 800b7f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	6999      	ldr	r1, [r3, #24]
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	691a      	ldr	r2, [r3, #16]
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	430a      	orrs	r2, r1
 800b808:	619a      	str	r2, [r3, #24]
      break;
 800b80a:	e0a3      	b.n	800b954 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	68b9      	ldr	r1, [r7, #8]
 800b812:	4618      	mov	r0, r3
 800b814:	f000 fb28 	bl	800be68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	699a      	ldr	r2, [r3, #24]
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	699a      	ldr	r2, [r3, #24]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	6999      	ldr	r1, [r3, #24]
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	691b      	ldr	r3, [r3, #16]
 800b842:	021a      	lsls	r2, r3, #8
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	430a      	orrs	r2, r1
 800b84a:	619a      	str	r2, [r3, #24]
      break;
 800b84c:	e082      	b.n	800b954 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	68b9      	ldr	r1, [r7, #8]
 800b854:	4618      	mov	r0, r3
 800b856:	f000 fb91 	bl	800bf7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	69da      	ldr	r2, [r3, #28]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f042 0208 	orr.w	r2, r2, #8
 800b868:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	69da      	ldr	r2, [r3, #28]
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f022 0204 	bic.w	r2, r2, #4
 800b878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	69d9      	ldr	r1, [r3, #28]
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	691a      	ldr	r2, [r3, #16]
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	430a      	orrs	r2, r1
 800b88a:	61da      	str	r2, [r3, #28]
      break;
 800b88c:	e062      	b.n	800b954 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	68b9      	ldr	r1, [r7, #8]
 800b894:	4618      	mov	r0, r3
 800b896:	f000 fbf9 	bl	800c08c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	69da      	ldr	r2, [r3, #28]
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b8a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	69da      	ldr	r2, [r3, #28]
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	69d9      	ldr	r1, [r3, #28]
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	691b      	ldr	r3, [r3, #16]
 800b8c4:	021a      	lsls	r2, r3, #8
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	430a      	orrs	r2, r1
 800b8cc:	61da      	str	r2, [r3, #28]
      break;
 800b8ce:	e041      	b.n	800b954 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	68b9      	ldr	r1, [r7, #8]
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f000 fc62 	bl	800c1a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f042 0208 	orr.w	r2, r2, #8
 800b8ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f022 0204 	bic.w	r2, r2, #4
 800b8fa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	691a      	ldr	r2, [r3, #16]
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	430a      	orrs	r2, r1
 800b90c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b90e:	e021      	b.n	800b954 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	68b9      	ldr	r1, [r7, #8]
 800b916:	4618      	mov	r0, r3
 800b918:	f000 fca6 	bl	800c268 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b92a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b93a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	691b      	ldr	r3, [r3, #16]
 800b946:	021a      	lsls	r2, r3, #8
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	430a      	orrs	r2, r1
 800b94e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b950:	e000      	b.n	800b954 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b952:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2200      	movs	r2, #0
 800b958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b95c:	2300      	movs	r3, #0
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop

0800b968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b978:	2b01      	cmp	r3, #1
 800b97a:	d101      	bne.n	800b980 <HAL_TIM_ConfigClockSource+0x18>
 800b97c:	2302      	movs	r3, #2
 800b97e:	e0dd      	b.n	800bb3c <HAL_TIM_ConfigClockSource+0x1d4>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2201      	movs	r2, #1
 800b984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2202      	movs	r2, #2
 800b98c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	689b      	ldr	r3, [r3, #8]
 800b996:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800b99e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b9a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b9aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	68fa      	ldr	r2, [r7, #12]
 800b9b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4a62      	ldr	r2, [pc, #392]	; (800bb44 <HAL_TIM_ConfigClockSource+0x1dc>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	f000 80a9 	beq.w	800bb12 <HAL_TIM_ConfigClockSource+0x1aa>
 800b9c0:	4a60      	ldr	r2, [pc, #384]	; (800bb44 <HAL_TIM_ConfigClockSource+0x1dc>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	f200 80ae 	bhi.w	800bb24 <HAL_TIM_ConfigClockSource+0x1bc>
 800b9c8:	4a5f      	ldr	r2, [pc, #380]	; (800bb48 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	f000 80a1 	beq.w	800bb12 <HAL_TIM_ConfigClockSource+0x1aa>
 800b9d0:	4a5d      	ldr	r2, [pc, #372]	; (800bb48 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	f200 80a6 	bhi.w	800bb24 <HAL_TIM_ConfigClockSource+0x1bc>
 800b9d8:	4a5c      	ldr	r2, [pc, #368]	; (800bb4c <HAL_TIM_ConfigClockSource+0x1e4>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	f000 8099 	beq.w	800bb12 <HAL_TIM_ConfigClockSource+0x1aa>
 800b9e0:	4a5a      	ldr	r2, [pc, #360]	; (800bb4c <HAL_TIM_ConfigClockSource+0x1e4>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	f200 809e 	bhi.w	800bb24 <HAL_TIM_ConfigClockSource+0x1bc>
 800b9e8:	4a59      	ldr	r2, [pc, #356]	; (800bb50 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	f000 8091 	beq.w	800bb12 <HAL_TIM_ConfigClockSource+0x1aa>
 800b9f0:	4a57      	ldr	r2, [pc, #348]	; (800bb50 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	f200 8096 	bhi.w	800bb24 <HAL_TIM_ConfigClockSource+0x1bc>
 800b9f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b9fc:	f000 8089 	beq.w	800bb12 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba00:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ba04:	f200 808e 	bhi.w	800bb24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba0c:	d03e      	beq.n	800ba8c <HAL_TIM_ConfigClockSource+0x124>
 800ba0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba12:	f200 8087 	bhi.w	800bb24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba1a:	f000 8085 	beq.w	800bb28 <HAL_TIM_ConfigClockSource+0x1c0>
 800ba1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba22:	d87f      	bhi.n	800bb24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba24:	2b70      	cmp	r3, #112	; 0x70
 800ba26:	d01a      	beq.n	800ba5e <HAL_TIM_ConfigClockSource+0xf6>
 800ba28:	2b70      	cmp	r3, #112	; 0x70
 800ba2a:	d87b      	bhi.n	800bb24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba2c:	2b60      	cmp	r3, #96	; 0x60
 800ba2e:	d050      	beq.n	800bad2 <HAL_TIM_ConfigClockSource+0x16a>
 800ba30:	2b60      	cmp	r3, #96	; 0x60
 800ba32:	d877      	bhi.n	800bb24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba34:	2b50      	cmp	r3, #80	; 0x50
 800ba36:	d03c      	beq.n	800bab2 <HAL_TIM_ConfigClockSource+0x14a>
 800ba38:	2b50      	cmp	r3, #80	; 0x50
 800ba3a:	d873      	bhi.n	800bb24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba3c:	2b40      	cmp	r3, #64	; 0x40
 800ba3e:	d058      	beq.n	800baf2 <HAL_TIM_ConfigClockSource+0x18a>
 800ba40:	2b40      	cmp	r3, #64	; 0x40
 800ba42:	d86f      	bhi.n	800bb24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba44:	2b30      	cmp	r3, #48	; 0x30
 800ba46:	d064      	beq.n	800bb12 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba48:	2b30      	cmp	r3, #48	; 0x30
 800ba4a:	d86b      	bhi.n	800bb24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba4c:	2b20      	cmp	r3, #32
 800ba4e:	d060      	beq.n	800bb12 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba50:	2b20      	cmp	r3, #32
 800ba52:	d867      	bhi.n	800bb24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d05c      	beq.n	800bb12 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba58:	2b10      	cmp	r3, #16
 800ba5a:	d05a      	beq.n	800bb12 <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800ba5c:	e062      	b.n	800bb24 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6818      	ldr	r0, [r3, #0]
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	6899      	ldr	r1, [r3, #8]
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	685a      	ldr	r2, [r3, #4]
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	f000 febb 	bl	800c7e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	689b      	ldr	r3, [r3, #8]
 800ba78:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ba80:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	68fa      	ldr	r2, [r7, #12]
 800ba88:	609a      	str	r2, [r3, #8]
      break;
 800ba8a:	e04e      	b.n	800bb2a <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6818      	ldr	r0, [r3, #0]
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	6899      	ldr	r1, [r3, #8]
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	685a      	ldr	r2, [r3, #4]
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	68db      	ldr	r3, [r3, #12]
 800ba9c:	f000 fea4 	bl	800c7e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	689a      	ldr	r2, [r3, #8]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800baae:	609a      	str	r2, [r3, #8]
      break;
 800bab0:	e03b      	b.n	800bb2a <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6818      	ldr	r0, [r3, #0]
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	6859      	ldr	r1, [r3, #4]
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	68db      	ldr	r3, [r3, #12]
 800babe:	461a      	mov	r2, r3
 800bac0:	f000 fd60 	bl	800c584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2150      	movs	r1, #80	; 0x50
 800baca:	4618      	mov	r0, r3
 800bacc:	f000 fe6f 	bl	800c7ae <TIM_ITRx_SetConfig>
      break;
 800bad0:	e02b      	b.n	800bb2a <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6818      	ldr	r0, [r3, #0]
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	6859      	ldr	r1, [r3, #4]
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	68db      	ldr	r3, [r3, #12]
 800bade:	461a      	mov	r2, r3
 800bae0:	f000 fdbc 	bl	800c65c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	2160      	movs	r1, #96	; 0x60
 800baea:	4618      	mov	r0, r3
 800baec:	f000 fe5f 	bl	800c7ae <TIM_ITRx_SetConfig>
      break;
 800baf0:	e01b      	b.n	800bb2a <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6818      	ldr	r0, [r3, #0]
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	6859      	ldr	r1, [r3, #4]
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	68db      	ldr	r3, [r3, #12]
 800bafe:	461a      	mov	r2, r3
 800bb00:	f000 fd40 	bl	800c584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2140      	movs	r1, #64	; 0x40
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f000 fe4f 	bl	800c7ae <TIM_ITRx_SetConfig>
      break;
 800bb10:	e00b      	b.n	800bb2a <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	4610      	mov	r0, r2
 800bb1e:	f000 fe46 	bl	800c7ae <TIM_ITRx_SetConfig>
        break;
 800bb22:	e002      	b.n	800bb2a <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 800bb24:	bf00      	nop
 800bb26:	e000      	b.n	800bb2a <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 800bb28:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb3a:	2300      	movs	r3, #0
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3710      	adds	r7, #16
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	00100070 	.word	0x00100070
 800bb48:	00100040 	.word	0x00100040
 800bb4c:	00100030 	.word	0x00100030
 800bb50:	00100020 	.word	0x00100020

0800bb54 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b082      	sub	sp, #8
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d101      	bne.n	800bb6c <HAL_TIM_SlaveConfigSynchro+0x18>
 800bb68:	2302      	movs	r3, #2
 800bb6a:	e031      	b.n	800bbd0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2201      	movs	r2, #1
 800bb70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2202      	movs	r2, #2
 800bb78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800bb7c:	6839      	ldr	r1, [r7, #0]
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 fbd8 	bl	800c334 <TIM_SlaveTimer_SetConfig>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d009      	beq.n	800bb9e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2200      	movs	r2, #0
 800bb96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e018      	b.n	800bbd0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	68da      	ldr	r2, [r3, #12]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bbac:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	68da      	ldr	r2, [r3, #12]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bbbc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bbce:	2300      	movs	r3, #0
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3708      	adds	r7, #8
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bbe0:	bf00      	nop
 800bbe2:	370c      	adds	r7, #12
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr

0800bbec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b083      	sub	sp, #12
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bbf4:	bf00      	nop
 800bbf6:	370c      	adds	r7, #12
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr

0800bc00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b083      	sub	sp, #12
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc08:	bf00      	nop
 800bc0a:	370c      	adds	r7, #12
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr

0800bc14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc1c:	bf00      	nop
 800bc1e:	370c      	adds	r7, #12
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr

0800bc28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b085      	sub	sp, #20
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4a3c      	ldr	r2, [pc, #240]	; (800bd2c <TIM_Base_SetConfig+0x104>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d00f      	beq.n	800bc60 <TIM_Base_SetConfig+0x38>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc46:	d00b      	beq.n	800bc60 <TIM_Base_SetConfig+0x38>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4a39      	ldr	r2, [pc, #228]	; (800bd30 <TIM_Base_SetConfig+0x108>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d007      	beq.n	800bc60 <TIM_Base_SetConfig+0x38>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4a38      	ldr	r2, [pc, #224]	; (800bd34 <TIM_Base_SetConfig+0x10c>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d003      	beq.n	800bc60 <TIM_Base_SetConfig+0x38>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	4a37      	ldr	r2, [pc, #220]	; (800bd38 <TIM_Base_SetConfig+0x110>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d108      	bne.n	800bc72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	68fa      	ldr	r2, [r7, #12]
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	4a2d      	ldr	r2, [pc, #180]	; (800bd2c <TIM_Base_SetConfig+0x104>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d01b      	beq.n	800bcb2 <TIM_Base_SetConfig+0x8a>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc80:	d017      	beq.n	800bcb2 <TIM_Base_SetConfig+0x8a>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	4a2a      	ldr	r2, [pc, #168]	; (800bd30 <TIM_Base_SetConfig+0x108>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d013      	beq.n	800bcb2 <TIM_Base_SetConfig+0x8a>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4a29      	ldr	r2, [pc, #164]	; (800bd34 <TIM_Base_SetConfig+0x10c>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d00f      	beq.n	800bcb2 <TIM_Base_SetConfig+0x8a>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	4a28      	ldr	r2, [pc, #160]	; (800bd38 <TIM_Base_SetConfig+0x110>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d00b      	beq.n	800bcb2 <TIM_Base_SetConfig+0x8a>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	4a27      	ldr	r2, [pc, #156]	; (800bd3c <TIM_Base_SetConfig+0x114>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d007      	beq.n	800bcb2 <TIM_Base_SetConfig+0x8a>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	4a26      	ldr	r2, [pc, #152]	; (800bd40 <TIM_Base_SetConfig+0x118>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d003      	beq.n	800bcb2 <TIM_Base_SetConfig+0x8a>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	4a25      	ldr	r2, [pc, #148]	; (800bd44 <TIM_Base_SetConfig+0x11c>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d108      	bne.n	800bcc4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bcb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	68fa      	ldr	r2, [r7, #12]
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	695b      	ldr	r3, [r3, #20]
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	68fa      	ldr	r2, [r7, #12]
 800bcd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	689a      	ldr	r2, [r3, #8]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4a10      	ldr	r2, [pc, #64]	; (800bd2c <TIM_Base_SetConfig+0x104>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d00f      	beq.n	800bd10 <TIM_Base_SetConfig+0xe8>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4a11      	ldr	r2, [pc, #68]	; (800bd38 <TIM_Base_SetConfig+0x110>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d00b      	beq.n	800bd10 <TIM_Base_SetConfig+0xe8>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	4a10      	ldr	r2, [pc, #64]	; (800bd3c <TIM_Base_SetConfig+0x114>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d007      	beq.n	800bd10 <TIM_Base_SetConfig+0xe8>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	4a0f      	ldr	r2, [pc, #60]	; (800bd40 <TIM_Base_SetConfig+0x118>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d003      	beq.n	800bd10 <TIM_Base_SetConfig+0xe8>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	4a0e      	ldr	r2, [pc, #56]	; (800bd44 <TIM_Base_SetConfig+0x11c>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d103      	bne.n	800bd18 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	691a      	ldr	r2, [r3, #16]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	615a      	str	r2, [r3, #20]
}
 800bd1e:	bf00      	nop
 800bd20:	3714      	adds	r7, #20
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr
 800bd2a:	bf00      	nop
 800bd2c:	40012c00 	.word	0x40012c00
 800bd30:	40000400 	.word	0x40000400
 800bd34:	40000800 	.word	0x40000800
 800bd38:	40013400 	.word	0x40013400
 800bd3c:	40014000 	.word	0x40014000
 800bd40:	40014400 	.word	0x40014400
 800bd44:	40014800 	.word	0x40014800

0800bd48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b087      	sub	sp, #28
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6a1b      	ldr	r3, [r3, #32]
 800bd56:	f023 0201 	bic.w	r2, r3, #1
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6a1b      	ldr	r3, [r3, #32]
 800bd62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	699b      	ldr	r3, [r3, #24]
 800bd6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f023 0303 	bic.w	r3, r3, #3
 800bd82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	f023 0302 	bic.w	r3, r3, #2
 800bd94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	697a      	ldr	r2, [r7, #20]
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	4a2c      	ldr	r2, [pc, #176]	; (800be54 <TIM_OC1_SetConfig+0x10c>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d00f      	beq.n	800bdc8 <TIM_OC1_SetConfig+0x80>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	4a2b      	ldr	r2, [pc, #172]	; (800be58 <TIM_OC1_SetConfig+0x110>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d00b      	beq.n	800bdc8 <TIM_OC1_SetConfig+0x80>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	4a2a      	ldr	r2, [pc, #168]	; (800be5c <TIM_OC1_SetConfig+0x114>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d007      	beq.n	800bdc8 <TIM_OC1_SetConfig+0x80>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	4a29      	ldr	r2, [pc, #164]	; (800be60 <TIM_OC1_SetConfig+0x118>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d003      	beq.n	800bdc8 <TIM_OC1_SetConfig+0x80>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	4a28      	ldr	r2, [pc, #160]	; (800be64 <TIM_OC1_SetConfig+0x11c>)
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d10c      	bne.n	800bde2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	f023 0308 	bic.w	r3, r3, #8
 800bdce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	68db      	ldr	r3, [r3, #12]
 800bdd4:	697a      	ldr	r2, [r7, #20]
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	f023 0304 	bic.w	r3, r3, #4
 800bde0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	4a1b      	ldr	r2, [pc, #108]	; (800be54 <TIM_OC1_SetConfig+0x10c>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d00f      	beq.n	800be0a <TIM_OC1_SetConfig+0xc2>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	4a1a      	ldr	r2, [pc, #104]	; (800be58 <TIM_OC1_SetConfig+0x110>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d00b      	beq.n	800be0a <TIM_OC1_SetConfig+0xc2>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	4a19      	ldr	r2, [pc, #100]	; (800be5c <TIM_OC1_SetConfig+0x114>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d007      	beq.n	800be0a <TIM_OC1_SetConfig+0xc2>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	4a18      	ldr	r2, [pc, #96]	; (800be60 <TIM_OC1_SetConfig+0x118>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d003      	beq.n	800be0a <TIM_OC1_SetConfig+0xc2>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	4a17      	ldr	r2, [pc, #92]	; (800be64 <TIM_OC1_SetConfig+0x11c>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d111      	bne.n	800be2e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800be18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	695b      	ldr	r3, [r3, #20]
 800be1e:	693a      	ldr	r2, [r7, #16]
 800be20:	4313      	orrs	r3, r2
 800be22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	699b      	ldr	r3, [r3, #24]
 800be28:	693a      	ldr	r2, [r7, #16]
 800be2a:	4313      	orrs	r3, r2
 800be2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	693a      	ldr	r2, [r7, #16]
 800be32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	68fa      	ldr	r2, [r7, #12]
 800be38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	685a      	ldr	r2, [r3, #4]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	697a      	ldr	r2, [r7, #20]
 800be46:	621a      	str	r2, [r3, #32]
}
 800be48:	bf00      	nop
 800be4a:	371c      	adds	r7, #28
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr
 800be54:	40012c00 	.word	0x40012c00
 800be58:	40013400 	.word	0x40013400
 800be5c:	40014000 	.word	0x40014000
 800be60:	40014400 	.word	0x40014400
 800be64:	40014800 	.word	0x40014800

0800be68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be68:	b480      	push	{r7}
 800be6a:	b087      	sub	sp, #28
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6a1b      	ldr	r3, [r3, #32]
 800be76:	f023 0210 	bic.w	r2, r3, #16
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6a1b      	ldr	r3, [r3, #32]
 800be82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	699b      	ldr	r3, [r3, #24]
 800be8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800be96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	021b      	lsls	r3, r3, #8
 800beaa:	68fa      	ldr	r2, [r7, #12]
 800beac:	4313      	orrs	r3, r2
 800beae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	f023 0320 	bic.w	r3, r3, #32
 800beb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	689b      	ldr	r3, [r3, #8]
 800bebc:	011b      	lsls	r3, r3, #4
 800bebe:	697a      	ldr	r2, [r7, #20]
 800bec0:	4313      	orrs	r3, r2
 800bec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	4a28      	ldr	r2, [pc, #160]	; (800bf68 <TIM_OC2_SetConfig+0x100>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d003      	beq.n	800bed4 <TIM_OC2_SetConfig+0x6c>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	4a27      	ldr	r2, [pc, #156]	; (800bf6c <TIM_OC2_SetConfig+0x104>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d10d      	bne.n	800bef0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800beda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	011b      	lsls	r3, r3, #4
 800bee2:	697a      	ldr	r2, [r7, #20]
 800bee4:	4313      	orrs	r3, r2
 800bee6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800beee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4a1d      	ldr	r2, [pc, #116]	; (800bf68 <TIM_OC2_SetConfig+0x100>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d00f      	beq.n	800bf18 <TIM_OC2_SetConfig+0xb0>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	4a1c      	ldr	r2, [pc, #112]	; (800bf6c <TIM_OC2_SetConfig+0x104>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d00b      	beq.n	800bf18 <TIM_OC2_SetConfig+0xb0>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	4a1b      	ldr	r2, [pc, #108]	; (800bf70 <TIM_OC2_SetConfig+0x108>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d007      	beq.n	800bf18 <TIM_OC2_SetConfig+0xb0>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	4a1a      	ldr	r2, [pc, #104]	; (800bf74 <TIM_OC2_SetConfig+0x10c>)
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d003      	beq.n	800bf18 <TIM_OC2_SetConfig+0xb0>
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	4a19      	ldr	r2, [pc, #100]	; (800bf78 <TIM_OC2_SetConfig+0x110>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d113      	bne.n	800bf40 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bf1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	695b      	ldr	r3, [r3, #20]
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	693a      	ldr	r2, [r7, #16]
 800bf30:	4313      	orrs	r3, r2
 800bf32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	699b      	ldr	r3, [r3, #24]
 800bf38:	009b      	lsls	r3, r3, #2
 800bf3a:	693a      	ldr	r2, [r7, #16]
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	693a      	ldr	r2, [r7, #16]
 800bf44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	68fa      	ldr	r2, [r7, #12]
 800bf4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	685a      	ldr	r2, [r3, #4]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	697a      	ldr	r2, [r7, #20]
 800bf58:	621a      	str	r2, [r3, #32]
}
 800bf5a:	bf00      	nop
 800bf5c:	371c      	adds	r7, #28
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr
 800bf66:	bf00      	nop
 800bf68:	40012c00 	.word	0x40012c00
 800bf6c:	40013400 	.word	0x40013400
 800bf70:	40014000 	.word	0x40014000
 800bf74:	40014400 	.word	0x40014400
 800bf78:	40014800 	.word	0x40014800

0800bf7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b087      	sub	sp, #28
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6a1b      	ldr	r3, [r3, #32]
 800bf8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6a1b      	ldr	r3, [r3, #32]
 800bf96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	69db      	ldr	r3, [r3, #28]
 800bfa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bfaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f023 0303 	bic.w	r3, r3, #3
 800bfb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	68fa      	ldr	r2, [r7, #12]
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bfc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	021b      	lsls	r3, r3, #8
 800bfd0:	697a      	ldr	r2, [r7, #20]
 800bfd2:	4313      	orrs	r3, r2
 800bfd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	4a27      	ldr	r2, [pc, #156]	; (800c078 <TIM_OC3_SetConfig+0xfc>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d003      	beq.n	800bfe6 <TIM_OC3_SetConfig+0x6a>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	4a26      	ldr	r2, [pc, #152]	; (800c07c <TIM_OC3_SetConfig+0x100>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d10d      	bne.n	800c002 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bfec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	68db      	ldr	r3, [r3, #12]
 800bff2:	021b      	lsls	r3, r3, #8
 800bff4:	697a      	ldr	r2, [r7, #20]
 800bff6:	4313      	orrs	r3, r2
 800bff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	4a1c      	ldr	r2, [pc, #112]	; (800c078 <TIM_OC3_SetConfig+0xfc>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d00f      	beq.n	800c02a <TIM_OC3_SetConfig+0xae>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	4a1b      	ldr	r2, [pc, #108]	; (800c07c <TIM_OC3_SetConfig+0x100>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d00b      	beq.n	800c02a <TIM_OC3_SetConfig+0xae>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	4a1a      	ldr	r2, [pc, #104]	; (800c080 <TIM_OC3_SetConfig+0x104>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d007      	beq.n	800c02a <TIM_OC3_SetConfig+0xae>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	4a19      	ldr	r2, [pc, #100]	; (800c084 <TIM_OC3_SetConfig+0x108>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d003      	beq.n	800c02a <TIM_OC3_SetConfig+0xae>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	4a18      	ldr	r2, [pc, #96]	; (800c088 <TIM_OC3_SetConfig+0x10c>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d113      	bne.n	800c052 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	695b      	ldr	r3, [r3, #20]
 800c03e:	011b      	lsls	r3, r3, #4
 800c040:	693a      	ldr	r2, [r7, #16]
 800c042:	4313      	orrs	r3, r2
 800c044:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	699b      	ldr	r3, [r3, #24]
 800c04a:	011b      	lsls	r3, r3, #4
 800c04c:	693a      	ldr	r2, [r7, #16]
 800c04e:	4313      	orrs	r3, r2
 800c050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	693a      	ldr	r2, [r7, #16]
 800c056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	68fa      	ldr	r2, [r7, #12]
 800c05c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	685a      	ldr	r2, [r3, #4]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	697a      	ldr	r2, [r7, #20]
 800c06a:	621a      	str	r2, [r3, #32]
}
 800c06c:	bf00      	nop
 800c06e:	371c      	adds	r7, #28
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr
 800c078:	40012c00 	.word	0x40012c00
 800c07c:	40013400 	.word	0x40013400
 800c080:	40014000 	.word	0x40014000
 800c084:	40014400 	.word	0x40014400
 800c088:	40014800 	.word	0x40014800

0800c08c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b087      	sub	sp, #28
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6a1b      	ldr	r3, [r3, #32]
 800c09a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6a1b      	ldr	r3, [r3, #32]
 800c0a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	69db      	ldr	r3, [r3, #28]
 800c0b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c0ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	021b      	lsls	r3, r3, #8
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c0da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	031b      	lsls	r3, r3, #12
 800c0e2:	697a      	ldr	r2, [r7, #20]
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	4a28      	ldr	r2, [pc, #160]	; (800c18c <TIM_OC4_SetConfig+0x100>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d003      	beq.n	800c0f8 <TIM_OC4_SetConfig+0x6c>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4a27      	ldr	r2, [pc, #156]	; (800c190 <TIM_OC4_SetConfig+0x104>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d10d      	bne.n	800c114 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c0fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	68db      	ldr	r3, [r3, #12]
 800c104:	031b      	lsls	r3, r3, #12
 800c106:	697a      	ldr	r2, [r7, #20]
 800c108:	4313      	orrs	r3, r2
 800c10a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c112:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	4a1d      	ldr	r2, [pc, #116]	; (800c18c <TIM_OC4_SetConfig+0x100>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d00f      	beq.n	800c13c <TIM_OC4_SetConfig+0xb0>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	4a1c      	ldr	r2, [pc, #112]	; (800c190 <TIM_OC4_SetConfig+0x104>)
 800c120:	4293      	cmp	r3, r2
 800c122:	d00b      	beq.n	800c13c <TIM_OC4_SetConfig+0xb0>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	4a1b      	ldr	r2, [pc, #108]	; (800c194 <TIM_OC4_SetConfig+0x108>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d007      	beq.n	800c13c <TIM_OC4_SetConfig+0xb0>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	4a1a      	ldr	r2, [pc, #104]	; (800c198 <TIM_OC4_SetConfig+0x10c>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d003      	beq.n	800c13c <TIM_OC4_SetConfig+0xb0>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	4a19      	ldr	r2, [pc, #100]	; (800c19c <TIM_OC4_SetConfig+0x110>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d113      	bne.n	800c164 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c142:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c14a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	695b      	ldr	r3, [r3, #20]
 800c150:	019b      	lsls	r3, r3, #6
 800c152:	693a      	ldr	r2, [r7, #16]
 800c154:	4313      	orrs	r3, r2
 800c156:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	699b      	ldr	r3, [r3, #24]
 800c15c:	019b      	lsls	r3, r3, #6
 800c15e:	693a      	ldr	r2, [r7, #16]
 800c160:	4313      	orrs	r3, r2
 800c162:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	693a      	ldr	r2, [r7, #16]
 800c168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	68fa      	ldr	r2, [r7, #12]
 800c16e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	685a      	ldr	r2, [r3, #4]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	697a      	ldr	r2, [r7, #20]
 800c17c:	621a      	str	r2, [r3, #32]
}
 800c17e:	bf00      	nop
 800c180:	371c      	adds	r7, #28
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr
 800c18a:	bf00      	nop
 800c18c:	40012c00 	.word	0x40012c00
 800c190:	40013400 	.word	0x40013400
 800c194:	40014000 	.word	0x40014000
 800c198:	40014400 	.word	0x40014400
 800c19c:	40014800 	.word	0x40014800

0800c1a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b087      	sub	sp, #28
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6a1b      	ldr	r3, [r3, #32]
 800c1ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6a1b      	ldr	r3, [r3, #32]
 800c1ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	68fa      	ldr	r2, [r7, #12]
 800c1da:	4313      	orrs	r3, r2
 800c1dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c1e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	689b      	ldr	r3, [r3, #8]
 800c1ea:	041b      	lsls	r3, r3, #16
 800c1ec:	693a      	ldr	r2, [r7, #16]
 800c1ee:	4313      	orrs	r3, r2
 800c1f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	4a17      	ldr	r2, [pc, #92]	; (800c254 <TIM_OC5_SetConfig+0xb4>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d00f      	beq.n	800c21a <TIM_OC5_SetConfig+0x7a>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	4a16      	ldr	r2, [pc, #88]	; (800c258 <TIM_OC5_SetConfig+0xb8>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d00b      	beq.n	800c21a <TIM_OC5_SetConfig+0x7a>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	4a15      	ldr	r2, [pc, #84]	; (800c25c <TIM_OC5_SetConfig+0xbc>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d007      	beq.n	800c21a <TIM_OC5_SetConfig+0x7a>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	4a14      	ldr	r2, [pc, #80]	; (800c260 <TIM_OC5_SetConfig+0xc0>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d003      	beq.n	800c21a <TIM_OC5_SetConfig+0x7a>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	4a13      	ldr	r2, [pc, #76]	; (800c264 <TIM_OC5_SetConfig+0xc4>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d109      	bne.n	800c22e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c220:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	695b      	ldr	r3, [r3, #20]
 800c226:	021b      	lsls	r3, r3, #8
 800c228:	697a      	ldr	r2, [r7, #20]
 800c22a:	4313      	orrs	r3, r2
 800c22c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	697a      	ldr	r2, [r7, #20]
 800c232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	68fa      	ldr	r2, [r7, #12]
 800c238:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	685a      	ldr	r2, [r3, #4]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	693a      	ldr	r2, [r7, #16]
 800c246:	621a      	str	r2, [r3, #32]
}
 800c248:	bf00      	nop
 800c24a:	371c      	adds	r7, #28
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr
 800c254:	40012c00 	.word	0x40012c00
 800c258:	40013400 	.word	0x40013400
 800c25c:	40014000 	.word	0x40014000
 800c260:	40014400 	.word	0x40014400
 800c264:	40014800 	.word	0x40014800

0800c268 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c268:	b480      	push	{r7}
 800c26a:	b087      	sub	sp, #28
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6a1b      	ldr	r3, [r3, #32]
 800c276:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6a1b      	ldr	r3, [r3, #32]
 800c282:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c29a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	021b      	lsls	r3, r3, #8
 800c2a2:	68fa      	ldr	r2, [r7, #12]
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c2ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	051b      	lsls	r3, r3, #20
 800c2b6:	693a      	ldr	r2, [r7, #16]
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	4a18      	ldr	r2, [pc, #96]	; (800c320 <TIM_OC6_SetConfig+0xb8>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d00f      	beq.n	800c2e4 <TIM_OC6_SetConfig+0x7c>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	4a17      	ldr	r2, [pc, #92]	; (800c324 <TIM_OC6_SetConfig+0xbc>)
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d00b      	beq.n	800c2e4 <TIM_OC6_SetConfig+0x7c>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	4a16      	ldr	r2, [pc, #88]	; (800c328 <TIM_OC6_SetConfig+0xc0>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d007      	beq.n	800c2e4 <TIM_OC6_SetConfig+0x7c>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	4a15      	ldr	r2, [pc, #84]	; (800c32c <TIM_OC6_SetConfig+0xc4>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d003      	beq.n	800c2e4 <TIM_OC6_SetConfig+0x7c>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	4a14      	ldr	r2, [pc, #80]	; (800c330 <TIM_OC6_SetConfig+0xc8>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d109      	bne.n	800c2f8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c2ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	695b      	ldr	r3, [r3, #20]
 800c2f0:	029b      	lsls	r3, r3, #10
 800c2f2:	697a      	ldr	r2, [r7, #20]
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	697a      	ldr	r2, [r7, #20]
 800c2fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	68fa      	ldr	r2, [r7, #12]
 800c302:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	685a      	ldr	r2, [r3, #4]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	693a      	ldr	r2, [r7, #16]
 800c310:	621a      	str	r2, [r3, #32]
}
 800c312:	bf00      	nop
 800c314:	371c      	adds	r7, #28
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr
 800c31e:	bf00      	nop
 800c320:	40012c00 	.word	0x40012c00
 800c324:	40013400 	.word	0x40013400
 800c328:	40014000 	.word	0x40014000
 800c32c:	40014400 	.word	0x40014400
 800c330:	40014800 	.word	0x40014800

0800c334 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b086      	sub	sp, #24
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	689b      	ldr	r3, [r3, #8]
 800c344:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c34c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c350:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	697a      	ldr	r2, [r7, #20]
 800c358:	4313      	orrs	r3, r2
 800c35a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c362:	f023 0307 	bic.w	r3, r3, #7
 800c366:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	697a      	ldr	r2, [r7, #20]
 800c36e:	4313      	orrs	r3, r2
 800c370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	697a      	ldr	r2, [r7, #20]
 800c378:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	685b      	ldr	r3, [r3, #4]
 800c37e:	4a49      	ldr	r2, [pc, #292]	; (800c4a4 <TIM_SlaveTimer_SetConfig+0x170>)
 800c380:	4293      	cmp	r3, r2
 800c382:	f000 8086 	beq.w	800c492 <TIM_SlaveTimer_SetConfig+0x15e>
 800c386:	4a47      	ldr	r2, [pc, #284]	; (800c4a4 <TIM_SlaveTimer_SetConfig+0x170>)
 800c388:	4293      	cmp	r3, r2
 800c38a:	f200 8084 	bhi.w	800c496 <TIM_SlaveTimer_SetConfig+0x162>
 800c38e:	4a46      	ldr	r2, [pc, #280]	; (800c4a8 <TIM_SlaveTimer_SetConfig+0x174>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d07e      	beq.n	800c492 <TIM_SlaveTimer_SetConfig+0x15e>
 800c394:	4a44      	ldr	r2, [pc, #272]	; (800c4a8 <TIM_SlaveTimer_SetConfig+0x174>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d87d      	bhi.n	800c496 <TIM_SlaveTimer_SetConfig+0x162>
 800c39a:	4a44      	ldr	r2, [pc, #272]	; (800c4ac <TIM_SlaveTimer_SetConfig+0x178>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d078      	beq.n	800c492 <TIM_SlaveTimer_SetConfig+0x15e>
 800c3a0:	4a42      	ldr	r2, [pc, #264]	; (800c4ac <TIM_SlaveTimer_SetConfig+0x178>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d877      	bhi.n	800c496 <TIM_SlaveTimer_SetConfig+0x162>
 800c3a6:	4a42      	ldr	r2, [pc, #264]	; (800c4b0 <TIM_SlaveTimer_SetConfig+0x17c>)
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d072      	beq.n	800c492 <TIM_SlaveTimer_SetConfig+0x15e>
 800c3ac:	4a40      	ldr	r2, [pc, #256]	; (800c4b0 <TIM_SlaveTimer_SetConfig+0x17c>)
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	d871      	bhi.n	800c496 <TIM_SlaveTimer_SetConfig+0x162>
 800c3b2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c3b6:	d06c      	beq.n	800c492 <TIM_SlaveTimer_SetConfig+0x15e>
 800c3b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c3bc:	d86b      	bhi.n	800c496 <TIM_SlaveTimer_SetConfig+0x162>
 800c3be:	2b70      	cmp	r3, #112	; 0x70
 800c3c0:	d01a      	beq.n	800c3f8 <TIM_SlaveTimer_SetConfig+0xc4>
 800c3c2:	2b70      	cmp	r3, #112	; 0x70
 800c3c4:	d867      	bhi.n	800c496 <TIM_SlaveTimer_SetConfig+0x162>
 800c3c6:	2b60      	cmp	r3, #96	; 0x60
 800c3c8:	d059      	beq.n	800c47e <TIM_SlaveTimer_SetConfig+0x14a>
 800c3ca:	2b60      	cmp	r3, #96	; 0x60
 800c3cc:	d863      	bhi.n	800c496 <TIM_SlaveTimer_SetConfig+0x162>
 800c3ce:	2b50      	cmp	r3, #80	; 0x50
 800c3d0:	d04b      	beq.n	800c46a <TIM_SlaveTimer_SetConfig+0x136>
 800c3d2:	2b50      	cmp	r3, #80	; 0x50
 800c3d4:	d85f      	bhi.n	800c496 <TIM_SlaveTimer_SetConfig+0x162>
 800c3d6:	2b40      	cmp	r3, #64	; 0x40
 800c3d8:	d019      	beq.n	800c40e <TIM_SlaveTimer_SetConfig+0xda>
 800c3da:	2b40      	cmp	r3, #64	; 0x40
 800c3dc:	d85b      	bhi.n	800c496 <TIM_SlaveTimer_SetConfig+0x162>
 800c3de:	2b30      	cmp	r3, #48	; 0x30
 800c3e0:	d057      	beq.n	800c492 <TIM_SlaveTimer_SetConfig+0x15e>
 800c3e2:	2b30      	cmp	r3, #48	; 0x30
 800c3e4:	d857      	bhi.n	800c496 <TIM_SlaveTimer_SetConfig+0x162>
 800c3e6:	2b20      	cmp	r3, #32
 800c3e8:	d053      	beq.n	800c492 <TIM_SlaveTimer_SetConfig+0x15e>
 800c3ea:	2b20      	cmp	r3, #32
 800c3ec:	d853      	bhi.n	800c496 <TIM_SlaveTimer_SetConfig+0x162>
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d04f      	beq.n	800c492 <TIM_SlaveTimer_SetConfig+0x15e>
 800c3f2:	2b10      	cmp	r3, #16
 800c3f4:	d04d      	beq.n	800c492 <TIM_SlaveTimer_SetConfig+0x15e>
        assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
        break;
      }

    default:
      break;
 800c3f6:	e04e      	b.n	800c496 <TIM_SlaveTimer_SetConfig+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6818      	ldr	r0, [r3, #0]
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	68d9      	ldr	r1, [r3, #12]
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	689a      	ldr	r2, [r3, #8]
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	691b      	ldr	r3, [r3, #16]
 800c408:	f000 f9ee 	bl	800c7e8 <TIM_ETR_SetConfig>
      break;
 800c40c:	e044      	b.n	800c498 <TIM_SlaveTimer_SetConfig+0x164>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	2b05      	cmp	r3, #5
 800c414:	d004      	beq.n	800c420 <TIM_SlaveTimer_SetConfig+0xec>
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800c41e:	d101      	bne.n	800c424 <TIM_SlaveTimer_SetConfig+0xf0>
        return HAL_ERROR;
 800c420:	2301      	movs	r3, #1
 800c422:	e03a      	b.n	800c49a <TIM_SlaveTimer_SetConfig+0x166>
      tmpccer = htim->Instance->CCER;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	6a1b      	ldr	r3, [r3, #32]
 800c42a:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	6a1a      	ldr	r2, [r3, #32]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f022 0201 	bic.w	r2, r2, #1
 800c43a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	699b      	ldr	r3, [r3, #24]
 800c442:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c44a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	691b      	ldr	r3, [r3, #16]
 800c450:	011b      	lsls	r3, r3, #4
 800c452:	68fa      	ldr	r2, [r7, #12]
 800c454:	4313      	orrs	r3, r2
 800c456:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	68fa      	ldr	r2, [r7, #12]
 800c45e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	693a      	ldr	r2, [r7, #16]
 800c466:	621a      	str	r2, [r3, #32]
      break;
 800c468:	e016      	b.n	800c498 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6818      	ldr	r0, [r3, #0]
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	6899      	ldr	r1, [r3, #8]
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	691b      	ldr	r3, [r3, #16]
 800c476:	461a      	mov	r2, r3
 800c478:	f000 f884 	bl	800c584 <TIM_TI1_ConfigInputStage>
      break;
 800c47c:	e00c      	b.n	800c498 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6818      	ldr	r0, [r3, #0]
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	6899      	ldr	r1, [r3, #8]
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	691b      	ldr	r3, [r3, #16]
 800c48a:	461a      	mov	r2, r3
 800c48c:	f000 f8e6 	bl	800c65c <TIM_TI2_ConfigInputStage>
      break;
 800c490:	e002      	b.n	800c498 <TIM_SlaveTimer_SetConfig+0x164>
        break;
 800c492:	bf00      	nop
 800c494:	e000      	b.n	800c498 <TIM_SlaveTimer_SetConfig+0x164>
      break;
 800c496:	bf00      	nop
  }
  return HAL_OK;
 800c498:	2300      	movs	r3, #0
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3718      	adds	r7, #24
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	00100070 	.word	0x00100070
 800c4a8:	00100040 	.word	0x00100040
 800c4ac:	00100030 	.word	0x00100030
 800c4b0:	00100020 	.word	0x00100020

0800c4b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b087      	sub	sp, #28
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	60f8      	str	r0, [r7, #12]
 800c4bc:	60b9      	str	r1, [r7, #8]
 800c4be:	607a      	str	r2, [r7, #4]
 800c4c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	6a1b      	ldr	r3, [r3, #32]
 800c4c6:	f023 0201 	bic.w	r2, r3, #1
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	699b      	ldr	r3, [r3, #24]
 800c4d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	6a1b      	ldr	r3, [r3, #32]
 800c4d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	4a24      	ldr	r2, [pc, #144]	; (800c570 <TIM_TI1_SetConfig+0xbc>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d013      	beq.n	800c50a <TIM_TI1_SetConfig+0x56>
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4e8:	d00f      	beq.n	800c50a <TIM_TI1_SetConfig+0x56>
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	4a21      	ldr	r2, [pc, #132]	; (800c574 <TIM_TI1_SetConfig+0xc0>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d00b      	beq.n	800c50a <TIM_TI1_SetConfig+0x56>
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	4a20      	ldr	r2, [pc, #128]	; (800c578 <TIM_TI1_SetConfig+0xc4>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d007      	beq.n	800c50a <TIM_TI1_SetConfig+0x56>
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	4a1f      	ldr	r2, [pc, #124]	; (800c57c <TIM_TI1_SetConfig+0xc8>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d003      	beq.n	800c50a <TIM_TI1_SetConfig+0x56>
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	4a1e      	ldr	r2, [pc, #120]	; (800c580 <TIM_TI1_SetConfig+0xcc>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d101      	bne.n	800c50e <TIM_TI1_SetConfig+0x5a>
 800c50a:	2301      	movs	r3, #1
 800c50c:	e000      	b.n	800c510 <TIM_TI1_SetConfig+0x5c>
 800c50e:	2300      	movs	r3, #0
 800c510:	2b00      	cmp	r3, #0
 800c512:	d008      	beq.n	800c526 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	f023 0303 	bic.w	r3, r3, #3
 800c51a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c51c:	697a      	ldr	r2, [r7, #20]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	4313      	orrs	r3, r2
 800c522:	617b      	str	r3, [r7, #20]
 800c524:	e003      	b.n	800c52e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	f043 0301 	orr.w	r3, r3, #1
 800c52c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c534:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	011b      	lsls	r3, r3, #4
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	697a      	ldr	r2, [r7, #20]
 800c53e:	4313      	orrs	r3, r2
 800c540:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	f023 030a 	bic.w	r3, r3, #10
 800c548:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	f003 030a 	and.w	r3, r3, #10
 800c550:	693a      	ldr	r2, [r7, #16]
 800c552:	4313      	orrs	r3, r2
 800c554:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	697a      	ldr	r2, [r7, #20]
 800c55a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	693a      	ldr	r2, [r7, #16]
 800c560:	621a      	str	r2, [r3, #32]
}
 800c562:	bf00      	nop
 800c564:	371c      	adds	r7, #28
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	40012c00 	.word	0x40012c00
 800c574:	40000400 	.word	0x40000400
 800c578:	40000800 	.word	0x40000800
 800c57c:	40013400 	.word	0x40013400
 800c580:	40014000 	.word	0x40014000

0800c584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c584:	b480      	push	{r7}
 800c586:	b087      	sub	sp, #28
 800c588:	af00      	add	r7, sp, #0
 800c58a:	60f8      	str	r0, [r7, #12]
 800c58c:	60b9      	str	r1, [r7, #8]
 800c58e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	6a1b      	ldr	r3, [r3, #32]
 800c594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	6a1b      	ldr	r3, [r3, #32]
 800c59a:	f023 0201 	bic.w	r2, r3, #1
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	699b      	ldr	r3, [r3, #24]
 800c5a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c5ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	011b      	lsls	r3, r3, #4
 800c5b4:	693a      	ldr	r2, [r7, #16]
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	f023 030a 	bic.w	r3, r3, #10
 800c5c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c5c2:	697a      	ldr	r2, [r7, #20]
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	4313      	orrs	r3, r2
 800c5c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	693a      	ldr	r2, [r7, #16]
 800c5ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	697a      	ldr	r2, [r7, #20]
 800c5d4:	621a      	str	r2, [r3, #32]
}
 800c5d6:	bf00      	nop
 800c5d8:	371c      	adds	r7, #28
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr

0800c5e2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c5e2:	b480      	push	{r7}
 800c5e4:	b087      	sub	sp, #28
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	60f8      	str	r0, [r7, #12]
 800c5ea:	60b9      	str	r1, [r7, #8]
 800c5ec:	607a      	str	r2, [r7, #4]
 800c5ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	6a1b      	ldr	r3, [r3, #32]
 800c5f4:	f023 0210 	bic.w	r2, r3, #16
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	699b      	ldr	r3, [r3, #24]
 800c600:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	6a1b      	ldr	r3, [r3, #32]
 800c606:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c60e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	021b      	lsls	r3, r3, #8
 800c614:	697a      	ldr	r2, [r7, #20]
 800c616:	4313      	orrs	r3, r2
 800c618:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c620:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	031b      	lsls	r3, r3, #12
 800c626:	b29b      	uxth	r3, r3
 800c628:	697a      	ldr	r2, [r7, #20]
 800c62a:	4313      	orrs	r3, r2
 800c62c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c634:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	011b      	lsls	r3, r3, #4
 800c63a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c63e:	693a      	ldr	r2, [r7, #16]
 800c640:	4313      	orrs	r3, r2
 800c642:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	697a      	ldr	r2, [r7, #20]
 800c648:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	693a      	ldr	r2, [r7, #16]
 800c64e:	621a      	str	r2, [r3, #32]
}
 800c650:	bf00      	nop
 800c652:	371c      	adds	r7, #28
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr

0800c65c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b087      	sub	sp, #28
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	6a1b      	ldr	r3, [r3, #32]
 800c66c:	f023 0210 	bic.w	r2, r3, #16
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	699b      	ldr	r3, [r3, #24]
 800c678:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	6a1b      	ldr	r3, [r3, #32]
 800c67e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c686:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	031b      	lsls	r3, r3, #12
 800c68c:	697a      	ldr	r2, [r7, #20]
 800c68e:	4313      	orrs	r3, r2
 800c690:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c698:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	011b      	lsls	r3, r3, #4
 800c69e:	693a      	ldr	r2, [r7, #16]
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	697a      	ldr	r2, [r7, #20]
 800c6a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	693a      	ldr	r2, [r7, #16]
 800c6ae:	621a      	str	r2, [r3, #32]
}
 800c6b0:	bf00      	nop
 800c6b2:	371c      	adds	r7, #28
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b087      	sub	sp, #28
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	607a      	str	r2, [r7, #4]
 800c6c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	6a1b      	ldr	r3, [r3, #32]
 800c6ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	69db      	ldr	r3, [r3, #28]
 800c6da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	6a1b      	ldr	r3, [r3, #32]
 800c6e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	f023 0303 	bic.w	r3, r3, #3
 800c6e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800c6ea:	697a      	ldr	r2, [r7, #20]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c6f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	011b      	lsls	r3, r3, #4
 800c6fe:	b2db      	uxtb	r3, r3
 800c700:	697a      	ldr	r2, [r7, #20]
 800c702:	4313      	orrs	r3, r2
 800c704:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800c70c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	021b      	lsls	r3, r3, #8
 800c712:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800c716:	693a      	ldr	r2, [r7, #16]
 800c718:	4313      	orrs	r3, r2
 800c71a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	697a      	ldr	r2, [r7, #20]
 800c720:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	693a      	ldr	r2, [r7, #16]
 800c726:	621a      	str	r2, [r3, #32]
}
 800c728:	bf00      	nop
 800c72a:	371c      	adds	r7, #28
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c734:	b480      	push	{r7}
 800c736:	b087      	sub	sp, #28
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	607a      	str	r2, [r7, #4]
 800c740:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	6a1b      	ldr	r3, [r3, #32]
 800c746:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	69db      	ldr	r3, [r3, #28]
 800c752:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	6a1b      	ldr	r3, [r3, #32]
 800c758:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c760:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	021b      	lsls	r3, r3, #8
 800c766:	697a      	ldr	r2, [r7, #20]
 800c768:	4313      	orrs	r3, r2
 800c76a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c772:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	031b      	lsls	r3, r3, #12
 800c778:	b29b      	uxth	r3, r3
 800c77a:	697a      	ldr	r2, [r7, #20]
 800c77c:	4313      	orrs	r3, r2
 800c77e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800c786:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	031b      	lsls	r3, r3, #12
 800c78c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800c790:	693a      	ldr	r2, [r7, #16]
 800c792:	4313      	orrs	r3, r2
 800c794:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	697a      	ldr	r2, [r7, #20]
 800c79a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	693a      	ldr	r2, [r7, #16]
 800c7a0:	621a      	str	r2, [r3, #32]
}
 800c7a2:	bf00      	nop
 800c7a4:	371c      	adds	r7, #28
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr

0800c7ae <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c7ae:	b480      	push	{r7}
 800c7b0:	b085      	sub	sp, #20
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
 800c7b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	689b      	ldr	r3, [r3, #8]
 800c7bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c7c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c7ca:	683a      	ldr	r2, [r7, #0]
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	f043 0307 	orr.w	r3, r3, #7
 800c7d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	68fa      	ldr	r2, [r7, #12]
 800c7da:	609a      	str	r2, [r3, #8]
}
 800c7dc:	bf00      	nop
 800c7de:	3714      	adds	r7, #20
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr

0800c7e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b087      	sub	sp, #28
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	60f8      	str	r0, [r7, #12]
 800c7f0:	60b9      	str	r1, [r7, #8]
 800c7f2:	607a      	str	r2, [r7, #4]
 800c7f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	689b      	ldr	r3, [r3, #8]
 800c7fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c802:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	021a      	lsls	r2, r3, #8
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	431a      	orrs	r2, r3
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	4313      	orrs	r3, r2
 800c810:	697a      	ldr	r2, [r7, #20]
 800c812:	4313      	orrs	r3, r2
 800c814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	697a      	ldr	r2, [r7, #20]
 800c81a:	609a      	str	r2, [r3, #8]
}
 800c81c:	bf00      	nop
 800c81e:	371c      	adds	r7, #28
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr

0800c828 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c828:	b480      	push	{r7}
 800c82a:	b087      	sub	sp, #28
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	f003 031f 	and.w	r3, r3, #31
 800c83a:	2201      	movs	r2, #1
 800c83c:	fa02 f303 	lsl.w	r3, r2, r3
 800c840:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	6a1a      	ldr	r2, [r3, #32]
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	43db      	mvns	r3, r3
 800c84a:	401a      	ands	r2, r3
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	6a1a      	ldr	r2, [r3, #32]
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	f003 031f 	and.w	r3, r3, #31
 800c85a:	6879      	ldr	r1, [r7, #4]
 800c85c:	fa01 f303 	lsl.w	r3, r1, r3
 800c860:	431a      	orrs	r2, r3
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	621a      	str	r2, [r3, #32]
}
 800c866:	bf00      	nop
 800c868:	371c      	adds	r7, #28
 800c86a:	46bd      	mov	sp, r7
 800c86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c870:	4770      	bx	lr
	...

0800c874 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d109      	bne.n	800c898 <HAL_TIMEx_PWMN_Start+0x24>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	2b01      	cmp	r3, #1
 800c88e:	bf14      	ite	ne
 800c890:	2301      	movne	r3, #1
 800c892:	2300      	moveq	r3, #0
 800c894:	b2db      	uxtb	r3, r3
 800c896:	e022      	b.n	800c8de <HAL_TIMEx_PWMN_Start+0x6a>
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	2b04      	cmp	r3, #4
 800c89c:	d109      	bne.n	800c8b2 <HAL_TIMEx_PWMN_Start+0x3e>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	bf14      	ite	ne
 800c8aa:	2301      	movne	r3, #1
 800c8ac:	2300      	moveq	r3, #0
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	e015      	b.n	800c8de <HAL_TIMEx_PWMN_Start+0x6a>
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	2b08      	cmp	r3, #8
 800c8b6:	d109      	bne.n	800c8cc <HAL_TIMEx_PWMN_Start+0x58>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c8be:	b2db      	uxtb	r3, r3
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	bf14      	ite	ne
 800c8c4:	2301      	movne	r3, #1
 800c8c6:	2300      	moveq	r3, #0
 800c8c8:	b2db      	uxtb	r3, r3
 800c8ca:	e008      	b.n	800c8de <HAL_TIMEx_PWMN_Start+0x6a>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	bf14      	ite	ne
 800c8d8:	2301      	movne	r3, #1
 800c8da:	2300      	moveq	r3, #0
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d001      	beq.n	800c8e6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e069      	b.n	800c9ba <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d104      	bne.n	800c8f6 <HAL_TIMEx_PWMN_Start+0x82>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2202      	movs	r2, #2
 800c8f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8f4:	e013      	b.n	800c91e <HAL_TIMEx_PWMN_Start+0xaa>
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	2b04      	cmp	r3, #4
 800c8fa:	d104      	bne.n	800c906 <HAL_TIMEx_PWMN_Start+0x92>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2202      	movs	r2, #2
 800c900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c904:	e00b      	b.n	800c91e <HAL_TIMEx_PWMN_Start+0xaa>
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	2b08      	cmp	r3, #8
 800c90a:	d104      	bne.n	800c916 <HAL_TIMEx_PWMN_Start+0xa2>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2202      	movs	r2, #2
 800c910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c914:	e003      	b.n	800c91e <HAL_TIMEx_PWMN_Start+0xaa>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2202      	movs	r2, #2
 800c91a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	2204      	movs	r2, #4
 800c924:	6839      	ldr	r1, [r7, #0]
 800c926:	4618      	mov	r0, r3
 800c928:	f000 f9c0 	bl	800ccac <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c93a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4a20      	ldr	r2, [pc, #128]	; (800c9c4 <HAL_TIMEx_PWMN_Start+0x150>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d018      	beq.n	800c978 <HAL_TIMEx_PWMN_Start+0x104>
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c94e:	d013      	beq.n	800c978 <HAL_TIMEx_PWMN_Start+0x104>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a1c      	ldr	r2, [pc, #112]	; (800c9c8 <HAL_TIMEx_PWMN_Start+0x154>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d00e      	beq.n	800c978 <HAL_TIMEx_PWMN_Start+0x104>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4a1b      	ldr	r2, [pc, #108]	; (800c9cc <HAL_TIMEx_PWMN_Start+0x158>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d009      	beq.n	800c978 <HAL_TIMEx_PWMN_Start+0x104>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4a19      	ldr	r2, [pc, #100]	; (800c9d0 <HAL_TIMEx_PWMN_Start+0x15c>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d004      	beq.n	800c978 <HAL_TIMEx_PWMN_Start+0x104>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	4a18      	ldr	r2, [pc, #96]	; (800c9d4 <HAL_TIMEx_PWMN_Start+0x160>)
 800c974:	4293      	cmp	r3, r2
 800c976:	d115      	bne.n	800c9a4 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	689a      	ldr	r2, [r3, #8]
 800c97e:	4b16      	ldr	r3, [pc, #88]	; (800c9d8 <HAL_TIMEx_PWMN_Start+0x164>)
 800c980:	4013      	ands	r3, r2
 800c982:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	2b06      	cmp	r3, #6
 800c988:	d015      	beq.n	800c9b6 <HAL_TIMEx_PWMN_Start+0x142>
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c990:	d011      	beq.n	800c9b6 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f042 0201 	orr.w	r2, r2, #1
 800c9a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9a2:	e008      	b.n	800c9b6 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	681a      	ldr	r2, [r3, #0]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f042 0201 	orr.w	r2, r2, #1
 800c9b2:	601a      	str	r2, [r3, #0]
 800c9b4:	e000      	b.n	800c9b8 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c9b8:	2300      	movs	r3, #0
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	40012c00 	.word	0x40012c00
 800c9c8:	40000400 	.word	0x40000400
 800c9cc:	40000800 	.word	0x40000800
 800c9d0:	40013400 	.word	0x40013400
 800c9d4:	40014000 	.word	0x40014000
 800c9d8:	00010007 	.word	0x00010007

0800c9dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b085      	sub	sp, #20
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d101      	bne.n	800c9f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c9f0:	2302      	movs	r3, #2
 800c9f2:	e065      	b.n	800cac0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2202      	movs	r2, #2
 800ca00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	689b      	ldr	r3, [r3, #8]
 800ca12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4a2c      	ldr	r2, [pc, #176]	; (800cacc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d004      	beq.n	800ca28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4a2b      	ldr	r2, [pc, #172]	; (800cad0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d108      	bne.n	800ca3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ca2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	685b      	ldr	r3, [r3, #4]
 800ca34:	68fa      	ldr	r2, [r7, #12]
 800ca36:	4313      	orrs	r3, r2
 800ca38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ca40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	68fa      	ldr	r2, [r7, #12]
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	68fa      	ldr	r2, [r7, #12]
 800ca56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4a1b      	ldr	r2, [pc, #108]	; (800cacc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d018      	beq.n	800ca94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca6a:	d013      	beq.n	800ca94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4a18      	ldr	r2, [pc, #96]	; (800cad4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d00e      	beq.n	800ca94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4a17      	ldr	r2, [pc, #92]	; (800cad8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d009      	beq.n	800ca94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4a12      	ldr	r2, [pc, #72]	; (800cad0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d004      	beq.n	800ca94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4a13      	ldr	r2, [pc, #76]	; (800cadc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d10c      	bne.n	800caae <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	689b      	ldr	r3, [r3, #8]
 800caa0:	68ba      	ldr	r2, [r7, #8]
 800caa2:	4313      	orrs	r3, r2
 800caa4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	68ba      	ldr	r2, [r7, #8]
 800caac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2201      	movs	r2, #1
 800cab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2200      	movs	r2, #0
 800caba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cabe:	2300      	movs	r3, #0
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3714      	adds	r7, #20
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr
 800cacc:	40012c00 	.word	0x40012c00
 800cad0:	40013400 	.word	0x40013400
 800cad4:	40000400 	.word	0x40000400
 800cad8:	40000800 	.word	0x40000800
 800cadc:	40014000 	.word	0x40014000

0800cae0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b085      	sub	sp, #20
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800caea:	2300      	movs	r3, #0
 800caec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d101      	bne.n	800cafc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800caf8:	2302      	movs	r3, #2
 800cafa:	e087      	b.n	800cc0c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2201      	movs	r2, #1
 800cb00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	689b      	ldr	r3, [r3, #8]
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	685b      	ldr	r3, [r3, #4]
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	691b      	ldr	r3, [r3, #16]
 800cb46:	4313      	orrs	r3, r2
 800cb48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	695b      	ldr	r3, [r3, #20]
 800cb54:	4313      	orrs	r3, r2
 800cb56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb62:	4313      	orrs	r3, r2
 800cb64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	699b      	ldr	r3, [r3, #24]
 800cb70:	041b      	lsls	r3, r3, #16
 800cb72:	4313      	orrs	r3, r2
 800cb74:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4a27      	ldr	r2, [pc, #156]	; (800cc18 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d004      	beq.n	800cb8a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4a25      	ldr	r2, [pc, #148]	; (800cc1c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d106      	bne.n	800cb98 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	69db      	ldr	r3, [r3, #28]
 800cb94:	4313      	orrs	r3, r2
 800cb96:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a1e      	ldr	r2, [pc, #120]	; (800cc18 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d004      	beq.n	800cbac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	4a1d      	ldr	r2, [pc, #116]	; (800cc1c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d126      	bne.n	800cbfa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbb6:	051b      	lsls	r3, r3, #20
 800cbb8:	4313      	orrs	r3, r2
 800cbba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	6a1b      	ldr	r3, [r3, #32]
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	4a0e      	ldr	r2, [pc, #56]	; (800cc18 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d004      	beq.n	800cbec <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4a0d      	ldr	r2, [pc, #52]	; (800cc1c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d106      	bne.n	800cbfa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	68fa      	ldr	r2, [r7, #12]
 800cc00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2200      	movs	r2, #0
 800cc06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cc0a:	2300      	movs	r3, #0
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3714      	adds	r7, #20
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr
 800cc18:	40012c00 	.word	0x40012c00
 800cc1c:	40013400 	.word	0x40013400

0800cc20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b083      	sub	sp, #12
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cc28:	bf00      	nop
 800cc2a:	370c      	adds	r7, #12
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr

0800cc34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cc34:	b480      	push	{r7}
 800cc36:	b083      	sub	sp, #12
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cc3c:	bf00      	nop
 800cc3e:	370c      	adds	r7, #12
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr

0800cc48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b083      	sub	sp, #12
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cc50:	bf00      	nop
 800cc52:	370c      	adds	r7, #12
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr

0800cc5c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b083      	sub	sp, #12
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800cc64:	bf00      	nop
 800cc66:	370c      	adds	r7, #12
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6e:	4770      	bx	lr

0800cc70 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b083      	sub	sp, #12
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800cc78:	bf00      	nop
 800cc7a:	370c      	adds	r7, #12
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc82:	4770      	bx	lr

0800cc84 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b083      	sub	sp, #12
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800cc8c:	bf00      	nop
 800cc8e:	370c      	adds	r7, #12
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr

0800cc98 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b083      	sub	sp, #12
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800cca0:	bf00      	nop
 800cca2:	370c      	adds	r7, #12
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b087      	sub	sp, #28
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	60b9      	str	r1, [r7, #8]
 800ccb6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	f003 031f 	and.w	r3, r3, #31
 800ccbe:	2204      	movs	r2, #4
 800ccc0:	fa02 f303 	lsl.w	r3, r2, r3
 800ccc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	6a1a      	ldr	r2, [r3, #32]
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	43db      	mvns	r3, r3
 800ccce:	401a      	ands	r2, r3
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	6a1a      	ldr	r2, [r3, #32]
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	f003 031f 	and.w	r3, r3, #31
 800ccde:	6879      	ldr	r1, [r7, #4]
 800cce0:	fa01 f303 	lsl.w	r3, r1, r3
 800cce4:	431a      	orrs	r2, r3
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	621a      	str	r2, [r3, #32]
}
 800ccea:	bf00      	nop
 800ccec:	371c      	adds	r7, #28
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr

0800ccf6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ccf6:	b580      	push	{r7, lr}
 800ccf8:	b082      	sub	sp, #8
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d101      	bne.n	800cd08 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cd04:	2301      	movs	r3, #1
 800cd06:	e042      	b.n	800cd8e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d106      	bne.n	800cd20 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2200      	movs	r2, #0
 800cd16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f7f9 f862 	bl	8005de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2224      	movs	r2, #36	; 0x24
 800cd24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	681a      	ldr	r2, [r3, #0]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f022 0201 	bic.w	r2, r2, #1
 800cd36:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f000 fad1 	bl	800d2e0 <UART_SetConfig>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	2b01      	cmp	r3, #1
 800cd42:	d101      	bne.n	800cd48 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cd44:	2301      	movs	r3, #1
 800cd46:	e022      	b.n	800cd8e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d002      	beq.n	800cd56 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f000 fd69 	bl	800d828 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	685a      	ldr	r2, [r3, #4]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cd64:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	689a      	ldr	r2, [r3, #8]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cd74:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	681a      	ldr	r2, [r3, #0]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f042 0201 	orr.w	r2, r2, #1
 800cd84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f000 fdf0 	bl	800d96c <UART_CheckIdleState>
 800cd8c:	4603      	mov	r3, r0
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3708      	adds	r7, #8
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
	...

0800cd98 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	60f8      	str	r0, [r7, #12]
 800cda0:	60b9      	str	r1, [r7, #8]
 800cda2:	4613      	mov	r3, r2
 800cda4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cdac:	2b20      	cmp	r3, #32
 800cdae:	d168      	bne.n	800ce82 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d002      	beq.n	800cdbc <HAL_UART_Transmit_DMA+0x24>
 800cdb6:	88fb      	ldrh	r3, [r7, #6]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d101      	bne.n	800cdc0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	e061      	b.n	800ce84 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d101      	bne.n	800cdce <HAL_UART_Transmit_DMA+0x36>
 800cdca:	2302      	movs	r3, #2
 800cdcc:	e05a      	b.n	800ce84 <HAL_UART_Transmit_DMA+0xec>
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2201      	movs	r2, #1
 800cdd2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	68ba      	ldr	r2, [r7, #8]
 800cdda:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	88fa      	ldrh	r2, [r7, #6]
 800cde0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	88fa      	ldrh	r2, [r7, #6]
 800cde8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2221      	movs	r2, #33	; 0x21
 800cdf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d02c      	beq.n	800ce5e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce08:	4a20      	ldr	r2, [pc, #128]	; (800ce8c <HAL_UART_Transmit_DMA+0xf4>)
 800ce0a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce10:	4a1f      	ldr	r2, [pc, #124]	; (800ce90 <HAL_UART_Transmit_DMA+0xf8>)
 800ce12:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce18:	4a1e      	ldr	r2, [pc, #120]	; (800ce94 <HAL_UART_Transmit_DMA+0xfc>)
 800ce1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce20:	2200      	movs	r2, #0
 800ce22:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	3328      	adds	r3, #40	; 0x28
 800ce34:	461a      	mov	r2, r3
 800ce36:	88fb      	ldrh	r3, [r7, #6]
 800ce38:	f7fb f9b2 	bl	80081a0 <HAL_DMA_Start_IT>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d00d      	beq.n	800ce5e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2210      	movs	r2, #16
 800ce46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2220      	movs	r2, #32
 800ce56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	e012      	b.n	800ce84 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	2240      	movs	r2, #64	; 0x40
 800ce64:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	689a      	ldr	r2, [r3, #8]
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ce7c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	e000      	b.n	800ce84 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800ce82:	2302      	movs	r3, #2
  }
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3710      	adds	r7, #16
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}
 800ce8c:	0800db7f 	.word	0x0800db7f
 800ce90:	0800dbd3 	.word	0x0800dbd3
 800ce94:	0800dc75 	.word	0x0800dc75

0800ce98 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b084      	sub	sp, #16
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	60f8      	str	r0, [r7, #12]
 800cea0:	60b9      	str	r1, [r7, #8]
 800cea2:	4613      	mov	r3, r2
 800cea4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ceac:	2b20      	cmp	r3, #32
 800ceae:	d170      	bne.n	800cf92 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d002      	beq.n	800cebc <HAL_UART_Receive_DMA+0x24>
 800ceb6:	88fb      	ldrh	r3, [r7, #6]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d101      	bne.n	800cec0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800cebc:	2301      	movs	r3, #1
 800cebe:	e069      	b.n	800cf94 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cec6:	2b01      	cmp	r3, #1
 800cec8:	d101      	bne.n	800cece <HAL_UART_Receive_DMA+0x36>
 800ceca:	2302      	movs	r3, #2
 800cecc:	e062      	b.n	800cf94 <HAL_UART_Receive_DMA+0xfc>
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2201      	movs	r2, #1
 800ced2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	68ba      	ldr	r2, [r7, #8]
 800ceda:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	88fa      	ldrh	r2, [r7, #6]
 800cee0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2200      	movs	r2, #0
 800cee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2222      	movs	r2, #34	; 0x22
 800cef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d02c      	beq.n	800cf56 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf00:	4a26      	ldr	r2, [pc, #152]	; (800cf9c <HAL_UART_Receive_DMA+0x104>)
 800cf02:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf08:	4a25      	ldr	r2, [pc, #148]	; (800cfa0 <HAL_UART_Receive_DMA+0x108>)
 800cf0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf10:	4a24      	ldr	r2, [pc, #144]	; (800cfa4 <HAL_UART_Receive_DMA+0x10c>)
 800cf12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf18:	2200      	movs	r2, #0
 800cf1a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	3324      	adds	r3, #36	; 0x24
 800cf26:	4619      	mov	r1, r3
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	88fb      	ldrh	r3, [r7, #6]
 800cf30:	f7fb f936 	bl	80081a0 <HAL_DMA_Start_IT>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d00d      	beq.n	800cf56 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	2210      	movs	r2, #16
 800cf3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	2200      	movs	r2, #0
 800cf46:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2220      	movs	r2, #32
 800cf4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800cf52:	2301      	movs	r3, #1
 800cf54:	e01e      	b.n	800cf94 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cf6c:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	689a      	ldr	r2, [r3, #8]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f042 0201 	orr.w	r2, r2, #1
 800cf7c:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	689a      	ldr	r2, [r3, #8]
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cf8c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	e000      	b.n	800cf94 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800cf92:	2302      	movs	r3, #2
  }
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3710      	adds	r7, #16
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}
 800cf9c:	0800dbef 	.word	0x0800dbef
 800cfa0:	0800dc59 	.word	0x0800dc59
 800cfa4:	0800dc75 	.word	0x0800dc75

0800cfa8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b088      	sub	sp, #32
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	69db      	ldr	r3, [r3, #28]
 800cfb6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	689b      	ldr	r3, [r3, #8]
 800cfc6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cfc8:	69fa      	ldr	r2, [r7, #28]
 800cfca:	f640 030f 	movw	r3, #2063	; 0x80f
 800cfce:	4013      	ands	r3, r2
 800cfd0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d118      	bne.n	800d00a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cfd8:	69fb      	ldr	r3, [r7, #28]
 800cfda:	f003 0320 	and.w	r3, r3, #32
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d013      	beq.n	800d00a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cfe2:	69bb      	ldr	r3, [r7, #24]
 800cfe4:	f003 0320 	and.w	r3, r3, #32
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d104      	bne.n	800cff6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d009      	beq.n	800d00a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	f000 8144 	beq.w	800d288 <HAL_UART_IRQHandler+0x2e0>
      {
        huart->RxISR(huart);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	4798      	blx	r3
      }
      return;
 800d008:	e13e      	b.n	800d288 <HAL_UART_IRQHandler+0x2e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	f000 80e8 	beq.w	800d1e2 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d012:	697a      	ldr	r2, [r7, #20]
 800d014:	4ba0      	ldr	r3, [pc, #640]	; (800d298 <HAL_UART_IRQHandler+0x2f0>)
 800d016:	4013      	ands	r3, r2
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d105      	bne.n	800d028 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d01c:	69ba      	ldr	r2, [r7, #24]
 800d01e:	4b9f      	ldr	r3, [pc, #636]	; (800d29c <HAL_UART_IRQHandler+0x2f4>)
 800d020:	4013      	ands	r3, r2
 800d022:	2b00      	cmp	r3, #0
 800d024:	f000 80dd 	beq.w	800d1e2 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d028:	69fb      	ldr	r3, [r7, #28]
 800d02a:	f003 0301 	and.w	r3, r3, #1
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d010      	beq.n	800d054 <HAL_UART_IRQHandler+0xac>
 800d032:	69bb      	ldr	r3, [r7, #24]
 800d034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d00b      	beq.n	800d054 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	2201      	movs	r2, #1
 800d042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d04a:	f043 0201 	orr.w	r2, r3, #1
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d054:	69fb      	ldr	r3, [r7, #28]
 800d056:	f003 0302 	and.w	r3, r3, #2
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d010      	beq.n	800d080 <HAL_UART_IRQHandler+0xd8>
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	f003 0301 	and.w	r3, r3, #1
 800d064:	2b00      	cmp	r3, #0
 800d066:	d00b      	beq.n	800d080 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	2202      	movs	r2, #2
 800d06e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d076:	f043 0204 	orr.w	r2, r3, #4
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d080:	69fb      	ldr	r3, [r7, #28]
 800d082:	f003 0304 	and.w	r3, r3, #4
 800d086:	2b00      	cmp	r3, #0
 800d088:	d010      	beq.n	800d0ac <HAL_UART_IRQHandler+0x104>
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	f003 0301 	and.w	r3, r3, #1
 800d090:	2b00      	cmp	r3, #0
 800d092:	d00b      	beq.n	800d0ac <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2204      	movs	r2, #4
 800d09a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0a2:	f043 0202 	orr.w	r2, r3, #2
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d0ac:	69fb      	ldr	r3, [r7, #28]
 800d0ae:	f003 0308 	and.w	r3, r3, #8
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d015      	beq.n	800d0e2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d0b6:	69bb      	ldr	r3, [r7, #24]
 800d0b8:	f003 0320 	and.w	r3, r3, #32
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d104      	bne.n	800d0ca <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d0c0:	697a      	ldr	r2, [r7, #20]
 800d0c2:	4b75      	ldr	r3, [pc, #468]	; (800d298 <HAL_UART_IRQHandler+0x2f0>)
 800d0c4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d00b      	beq.n	800d0e2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	2208      	movs	r2, #8
 800d0d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0d8:	f043 0208 	orr.w	r2, r3, #8
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d0e2:	69fb      	ldr	r3, [r7, #28]
 800d0e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d011      	beq.n	800d110 <HAL_UART_IRQHandler+0x168>
 800d0ec:	69bb      	ldr	r3, [r7, #24]
 800d0ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d00c      	beq.n	800d110 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d0fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d106:	f043 0220 	orr.w	r2, r3, #32
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d116:	2b00      	cmp	r3, #0
 800d118:	f000 80b8 	beq.w	800d28c <HAL_UART_IRQHandler+0x2e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d11c:	69fb      	ldr	r3, [r7, #28]
 800d11e:	f003 0320 	and.w	r3, r3, #32
 800d122:	2b00      	cmp	r3, #0
 800d124:	d011      	beq.n	800d14a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d126:	69bb      	ldr	r3, [r7, #24]
 800d128:	f003 0320 	and.w	r3, r3, #32
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d104      	bne.n	800d13a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d130:	697b      	ldr	r3, [r7, #20]
 800d132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d136:	2b00      	cmp	r3, #0
 800d138:	d007      	beq.n	800d14a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d003      	beq.n	800d14a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d150:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	689b      	ldr	r3, [r3, #8]
 800d158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d15c:	2b40      	cmp	r3, #64	; 0x40
 800d15e:	d004      	beq.n	800d16a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d166:	2b00      	cmp	r3, #0
 800d168:	d031      	beq.n	800d1ce <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f000 fce4 	bl	800db38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	689b      	ldr	r3, [r3, #8]
 800d176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d17a:	2b40      	cmp	r3, #64	; 0x40
 800d17c:	d123      	bne.n	800d1c6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	689a      	ldr	r2, [r3, #8]
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d18c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d192:	2b00      	cmp	r3, #0
 800d194:	d013      	beq.n	800d1be <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d19a:	4a41      	ldr	r2, [pc, #260]	; (800d2a0 <HAL_UART_IRQHandler+0x2f8>)
 800d19c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f7fb f877 	bl	8008296 <HAL_DMA_Abort_IT>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d017      	beq.n	800d1de <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800d1b8:	4610      	mov	r0, r2
 800d1ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1bc:	e00f      	b.n	800d1de <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f7f7 fe36 	bl	8004e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1c4:	e00b      	b.n	800d1de <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f7f7 fe32 	bl	8004e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1cc:	e007      	b.n	800d1de <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f7f7 fe2e 	bl	8004e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800d1dc:	e056      	b.n	800d28c <HAL_UART_IRQHandler+0x2e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1de:	bf00      	nop
    return;
 800d1e0:	e054      	b.n	800d28c <HAL_UART_IRQHandler+0x2e4>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d1e2:	69fb      	ldr	r3, [r7, #28]
 800d1e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d00d      	beq.n	800d208 <HAL_UART_IRQHandler+0x260>
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d008      	beq.n	800d208 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d1fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f000 fda7 	bl	800dd54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d206:	e044      	b.n	800d292 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d208:	69fb      	ldr	r3, [r7, #28]
 800d20a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d012      	beq.n	800d238 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d212:	69bb      	ldr	r3, [r7, #24]
 800d214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d104      	bne.n	800d226 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d222:	2b00      	cmp	r3, #0
 800d224:	d008      	beq.n	800d238 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d030      	beq.n	800d290 <HAL_UART_IRQHandler+0x2e8>
    {
      huart->TxISR(huart);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	4798      	blx	r3
    }
    return;
 800d236:	e02b      	b.n	800d290 <HAL_UART_IRQHandler+0x2e8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d238:	69fb      	ldr	r3, [r7, #28]
 800d23a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d008      	beq.n	800d254 <HAL_UART_IRQHandler+0x2ac>
 800d242:	69bb      	ldr	r3, [r7, #24]
 800d244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d003      	beq.n	800d254 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f000 fd67 	bl	800dd20 <UART_EndTransmit_IT>
    return;
 800d252:	e01e      	b.n	800d292 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d254:	69fb      	ldr	r3, [r7, #28]
 800d256:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d008      	beq.n	800d270 <HAL_UART_IRQHandler+0x2c8>
 800d25e:	69bb      	ldr	r3, [r7, #24]
 800d260:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d264:	2b00      	cmp	r3, #0
 800d266:	d003      	beq.n	800d270 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 fd87 	bl	800dd7c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d26e:	e010      	b.n	800d292 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d276:	2b00      	cmp	r3, #0
 800d278:	d00b      	beq.n	800d292 <HAL_UART_IRQHandler+0x2ea>
 800d27a:	69bb      	ldr	r3, [r7, #24]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	da08      	bge.n	800d292 <HAL_UART_IRQHandler+0x2ea>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f000 fd71 	bl	800dd68 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d286:	e004      	b.n	800d292 <HAL_UART_IRQHandler+0x2ea>
      return;
 800d288:	bf00      	nop
 800d28a:	e002      	b.n	800d292 <HAL_UART_IRQHandler+0x2ea>
    return;
 800d28c:	bf00      	nop
 800d28e:	e000      	b.n	800d292 <HAL_UART_IRQHandler+0x2ea>
    return;
 800d290:	bf00      	nop
  }
}
 800d292:	3720      	adds	r7, #32
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	10000001 	.word	0x10000001
 800d29c:	04000120 	.word	0x04000120
 800d2a0:	0800dcf5 	.word	0x0800dcf5

0800d2a4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b083      	sub	sp, #12
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d2ac:	bf00      	nop
 800d2ae:	370c      	adds	r7, #12
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr

0800d2b8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d2c0:	bf00      	nop
 800d2c2:	370c      	adds	r7, #12
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ca:	4770      	bx	lr

0800d2cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b083      	sub	sp, #12
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d2d4:	bf00      	nop
 800d2d6:	370c      	adds	r7, #12
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr

0800d2e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d2e0:	b5b0      	push	{r4, r5, r7, lr}
 800d2e2:	b088      	sub	sp, #32
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	689a      	ldr	r2, [r3, #8]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	691b      	ldr	r3, [r3, #16]
 800d2f4:	431a      	orrs	r2, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	695b      	ldr	r3, [r3, #20]
 800d2fa:	431a      	orrs	r2, r3
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	69db      	ldr	r3, [r3, #28]
 800d300:	4313      	orrs	r3, r2
 800d302:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d308:	69fa      	ldr	r2, [r7, #28]
 800d30a:	4313      	orrs	r3, r2
 800d30c:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	681a      	ldr	r2, [r3, #0]
 800d314:	4baf      	ldr	r3, [pc, #700]	; (800d5d4 <UART_SetConfig+0x2f4>)
 800d316:	4013      	ands	r3, r2
 800d318:	687a      	ldr	r2, [r7, #4]
 800d31a:	6812      	ldr	r2, [r2, #0]
 800d31c:	69f9      	ldr	r1, [r7, #28]
 800d31e:	430b      	orrs	r3, r1
 800d320:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	68da      	ldr	r2, [r3, #12]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	430a      	orrs	r2, r1
 800d336:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	699b      	ldr	r3, [r3, #24]
 800d33c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	4aa5      	ldr	r2, [pc, #660]	; (800d5d8 <UART_SetConfig+0x2f8>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d004      	beq.n	800d352 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6a1b      	ldr	r3, [r3, #32]
 800d34c:	69fa      	ldr	r2, [r7, #28]
 800d34e:	4313      	orrs	r3, r2
 800d350:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	689b      	ldr	r3, [r3, #8]
 800d358:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800d35c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	6812      	ldr	r2, [r2, #0]
 800d364:	69f9      	ldr	r1, [r7, #28]
 800d366:	430b      	orrs	r3, r1
 800d368:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d370:	f023 010f 	bic.w	r1, r3, #15
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	430a      	orrs	r2, r1
 800d37e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	4a95      	ldr	r2, [pc, #596]	; (800d5dc <UART_SetConfig+0x2fc>)
 800d386:	4293      	cmp	r3, r2
 800d388:	d121      	bne.n	800d3ce <UART_SetConfig+0xee>
 800d38a:	4b95      	ldr	r3, [pc, #596]	; (800d5e0 <UART_SetConfig+0x300>)
 800d38c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d390:	f003 0303 	and.w	r3, r3, #3
 800d394:	2b03      	cmp	r3, #3
 800d396:	d817      	bhi.n	800d3c8 <UART_SetConfig+0xe8>
 800d398:	a201      	add	r2, pc, #4	; (adr r2, 800d3a0 <UART_SetConfig+0xc0>)
 800d39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d39e:	bf00      	nop
 800d3a0:	0800d3b1 	.word	0x0800d3b1
 800d3a4:	0800d3bd 	.word	0x0800d3bd
 800d3a8:	0800d3b7 	.word	0x0800d3b7
 800d3ac:	0800d3c3 	.word	0x0800d3c3
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	76fb      	strb	r3, [r7, #27]
 800d3b4:	e0bc      	b.n	800d530 <UART_SetConfig+0x250>
 800d3b6:	2302      	movs	r3, #2
 800d3b8:	76fb      	strb	r3, [r7, #27]
 800d3ba:	e0b9      	b.n	800d530 <UART_SetConfig+0x250>
 800d3bc:	2304      	movs	r3, #4
 800d3be:	76fb      	strb	r3, [r7, #27]
 800d3c0:	e0b6      	b.n	800d530 <UART_SetConfig+0x250>
 800d3c2:	2308      	movs	r3, #8
 800d3c4:	76fb      	strb	r3, [r7, #27]
 800d3c6:	e0b3      	b.n	800d530 <UART_SetConfig+0x250>
 800d3c8:	2310      	movs	r3, #16
 800d3ca:	76fb      	strb	r3, [r7, #27]
 800d3cc:	e0b0      	b.n	800d530 <UART_SetConfig+0x250>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	4a84      	ldr	r2, [pc, #528]	; (800d5e4 <UART_SetConfig+0x304>)
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	d132      	bne.n	800d43e <UART_SetConfig+0x15e>
 800d3d8:	4b81      	ldr	r3, [pc, #516]	; (800d5e0 <UART_SetConfig+0x300>)
 800d3da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3de:	f003 030c 	and.w	r3, r3, #12
 800d3e2:	2b0c      	cmp	r3, #12
 800d3e4:	d828      	bhi.n	800d438 <UART_SetConfig+0x158>
 800d3e6:	a201      	add	r2, pc, #4	; (adr r2, 800d3ec <UART_SetConfig+0x10c>)
 800d3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ec:	0800d421 	.word	0x0800d421
 800d3f0:	0800d439 	.word	0x0800d439
 800d3f4:	0800d439 	.word	0x0800d439
 800d3f8:	0800d439 	.word	0x0800d439
 800d3fc:	0800d42d 	.word	0x0800d42d
 800d400:	0800d439 	.word	0x0800d439
 800d404:	0800d439 	.word	0x0800d439
 800d408:	0800d439 	.word	0x0800d439
 800d40c:	0800d427 	.word	0x0800d427
 800d410:	0800d439 	.word	0x0800d439
 800d414:	0800d439 	.word	0x0800d439
 800d418:	0800d439 	.word	0x0800d439
 800d41c:	0800d433 	.word	0x0800d433
 800d420:	2300      	movs	r3, #0
 800d422:	76fb      	strb	r3, [r7, #27]
 800d424:	e084      	b.n	800d530 <UART_SetConfig+0x250>
 800d426:	2302      	movs	r3, #2
 800d428:	76fb      	strb	r3, [r7, #27]
 800d42a:	e081      	b.n	800d530 <UART_SetConfig+0x250>
 800d42c:	2304      	movs	r3, #4
 800d42e:	76fb      	strb	r3, [r7, #27]
 800d430:	e07e      	b.n	800d530 <UART_SetConfig+0x250>
 800d432:	2308      	movs	r3, #8
 800d434:	76fb      	strb	r3, [r7, #27]
 800d436:	e07b      	b.n	800d530 <UART_SetConfig+0x250>
 800d438:	2310      	movs	r3, #16
 800d43a:	76fb      	strb	r3, [r7, #27]
 800d43c:	e078      	b.n	800d530 <UART_SetConfig+0x250>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	4a69      	ldr	r2, [pc, #420]	; (800d5e8 <UART_SetConfig+0x308>)
 800d444:	4293      	cmp	r3, r2
 800d446:	d120      	bne.n	800d48a <UART_SetConfig+0x1aa>
 800d448:	4b65      	ldr	r3, [pc, #404]	; (800d5e0 <UART_SetConfig+0x300>)
 800d44a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d44e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d452:	2b30      	cmp	r3, #48	; 0x30
 800d454:	d013      	beq.n	800d47e <UART_SetConfig+0x19e>
 800d456:	2b30      	cmp	r3, #48	; 0x30
 800d458:	d814      	bhi.n	800d484 <UART_SetConfig+0x1a4>
 800d45a:	2b20      	cmp	r3, #32
 800d45c:	d009      	beq.n	800d472 <UART_SetConfig+0x192>
 800d45e:	2b20      	cmp	r3, #32
 800d460:	d810      	bhi.n	800d484 <UART_SetConfig+0x1a4>
 800d462:	2b00      	cmp	r3, #0
 800d464:	d002      	beq.n	800d46c <UART_SetConfig+0x18c>
 800d466:	2b10      	cmp	r3, #16
 800d468:	d006      	beq.n	800d478 <UART_SetConfig+0x198>
 800d46a:	e00b      	b.n	800d484 <UART_SetConfig+0x1a4>
 800d46c:	2300      	movs	r3, #0
 800d46e:	76fb      	strb	r3, [r7, #27]
 800d470:	e05e      	b.n	800d530 <UART_SetConfig+0x250>
 800d472:	2302      	movs	r3, #2
 800d474:	76fb      	strb	r3, [r7, #27]
 800d476:	e05b      	b.n	800d530 <UART_SetConfig+0x250>
 800d478:	2304      	movs	r3, #4
 800d47a:	76fb      	strb	r3, [r7, #27]
 800d47c:	e058      	b.n	800d530 <UART_SetConfig+0x250>
 800d47e:	2308      	movs	r3, #8
 800d480:	76fb      	strb	r3, [r7, #27]
 800d482:	e055      	b.n	800d530 <UART_SetConfig+0x250>
 800d484:	2310      	movs	r3, #16
 800d486:	76fb      	strb	r3, [r7, #27]
 800d488:	e052      	b.n	800d530 <UART_SetConfig+0x250>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	4a57      	ldr	r2, [pc, #348]	; (800d5ec <UART_SetConfig+0x30c>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d120      	bne.n	800d4d6 <UART_SetConfig+0x1f6>
 800d494:	4b52      	ldr	r3, [pc, #328]	; (800d5e0 <UART_SetConfig+0x300>)
 800d496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d49a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d49e:	2bc0      	cmp	r3, #192	; 0xc0
 800d4a0:	d013      	beq.n	800d4ca <UART_SetConfig+0x1ea>
 800d4a2:	2bc0      	cmp	r3, #192	; 0xc0
 800d4a4:	d814      	bhi.n	800d4d0 <UART_SetConfig+0x1f0>
 800d4a6:	2b80      	cmp	r3, #128	; 0x80
 800d4a8:	d009      	beq.n	800d4be <UART_SetConfig+0x1de>
 800d4aa:	2b80      	cmp	r3, #128	; 0x80
 800d4ac:	d810      	bhi.n	800d4d0 <UART_SetConfig+0x1f0>
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d002      	beq.n	800d4b8 <UART_SetConfig+0x1d8>
 800d4b2:	2b40      	cmp	r3, #64	; 0x40
 800d4b4:	d006      	beq.n	800d4c4 <UART_SetConfig+0x1e4>
 800d4b6:	e00b      	b.n	800d4d0 <UART_SetConfig+0x1f0>
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	76fb      	strb	r3, [r7, #27]
 800d4bc:	e038      	b.n	800d530 <UART_SetConfig+0x250>
 800d4be:	2302      	movs	r3, #2
 800d4c0:	76fb      	strb	r3, [r7, #27]
 800d4c2:	e035      	b.n	800d530 <UART_SetConfig+0x250>
 800d4c4:	2304      	movs	r3, #4
 800d4c6:	76fb      	strb	r3, [r7, #27]
 800d4c8:	e032      	b.n	800d530 <UART_SetConfig+0x250>
 800d4ca:	2308      	movs	r3, #8
 800d4cc:	76fb      	strb	r3, [r7, #27]
 800d4ce:	e02f      	b.n	800d530 <UART_SetConfig+0x250>
 800d4d0:	2310      	movs	r3, #16
 800d4d2:	76fb      	strb	r3, [r7, #27]
 800d4d4:	e02c      	b.n	800d530 <UART_SetConfig+0x250>
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	4a3f      	ldr	r2, [pc, #252]	; (800d5d8 <UART_SetConfig+0x2f8>)
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d125      	bne.n	800d52c <UART_SetConfig+0x24c>
 800d4e0:	4b3f      	ldr	r3, [pc, #252]	; (800d5e0 <UART_SetConfig+0x300>)
 800d4e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d4ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d4ee:	d017      	beq.n	800d520 <UART_SetConfig+0x240>
 800d4f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d4f4:	d817      	bhi.n	800d526 <UART_SetConfig+0x246>
 800d4f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d4fa:	d00b      	beq.n	800d514 <UART_SetConfig+0x234>
 800d4fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d500:	d811      	bhi.n	800d526 <UART_SetConfig+0x246>
 800d502:	2b00      	cmp	r3, #0
 800d504:	d003      	beq.n	800d50e <UART_SetConfig+0x22e>
 800d506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d50a:	d006      	beq.n	800d51a <UART_SetConfig+0x23a>
 800d50c:	e00b      	b.n	800d526 <UART_SetConfig+0x246>
 800d50e:	2300      	movs	r3, #0
 800d510:	76fb      	strb	r3, [r7, #27]
 800d512:	e00d      	b.n	800d530 <UART_SetConfig+0x250>
 800d514:	2302      	movs	r3, #2
 800d516:	76fb      	strb	r3, [r7, #27]
 800d518:	e00a      	b.n	800d530 <UART_SetConfig+0x250>
 800d51a:	2304      	movs	r3, #4
 800d51c:	76fb      	strb	r3, [r7, #27]
 800d51e:	e007      	b.n	800d530 <UART_SetConfig+0x250>
 800d520:	2308      	movs	r3, #8
 800d522:	76fb      	strb	r3, [r7, #27]
 800d524:	e004      	b.n	800d530 <UART_SetConfig+0x250>
 800d526:	2310      	movs	r3, #16
 800d528:	76fb      	strb	r3, [r7, #27]
 800d52a:	e001      	b.n	800d530 <UART_SetConfig+0x250>
 800d52c:	2310      	movs	r3, #16
 800d52e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	4a28      	ldr	r2, [pc, #160]	; (800d5d8 <UART_SetConfig+0x2f8>)
 800d536:	4293      	cmp	r3, r2
 800d538:	f040 809e 	bne.w	800d678 <UART_SetConfig+0x398>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d53c:	7efb      	ldrb	r3, [r7, #27]
 800d53e:	2b08      	cmp	r3, #8
 800d540:	d823      	bhi.n	800d58a <UART_SetConfig+0x2aa>
 800d542:	a201      	add	r2, pc, #4	; (adr r2, 800d548 <UART_SetConfig+0x268>)
 800d544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d548:	0800d56d 	.word	0x0800d56d
 800d54c:	0800d58b 	.word	0x0800d58b
 800d550:	0800d575 	.word	0x0800d575
 800d554:	0800d58b 	.word	0x0800d58b
 800d558:	0800d57b 	.word	0x0800d57b
 800d55c:	0800d58b 	.word	0x0800d58b
 800d560:	0800d58b 	.word	0x0800d58b
 800d564:	0800d58b 	.word	0x0800d58b
 800d568:	0800d583 	.word	0x0800d583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d56c:	f7fc ffd0 	bl	800a510 <HAL_RCC_GetPCLK1Freq>
 800d570:	6178      	str	r0, [r7, #20]
        break;
 800d572:	e00f      	b.n	800d594 <UART_SetConfig+0x2b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d574:	4b1e      	ldr	r3, [pc, #120]	; (800d5f0 <UART_SetConfig+0x310>)
 800d576:	617b      	str	r3, [r7, #20]
        break;
 800d578:	e00c      	b.n	800d594 <UART_SetConfig+0x2b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d57a:	f7fc ff5b 	bl	800a434 <HAL_RCC_GetSysClockFreq>
 800d57e:	6178      	str	r0, [r7, #20]
        break;
 800d580:	e008      	b.n	800d594 <UART_SetConfig+0x2b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d586:	617b      	str	r3, [r7, #20]
        break;
 800d588:	e004      	b.n	800d594 <UART_SetConfig+0x2b4>
      default:
        pclk = 0U;
 800d58a:	2300      	movs	r3, #0
 800d58c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800d58e:	2301      	movs	r3, #1
 800d590:	76bb      	strb	r3, [r7, #26]
        break;
 800d592:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	2b00      	cmp	r3, #0
 800d598:	f000 812e 	beq.w	800d7f8 <UART_SetConfig+0x518>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a0:	4a14      	ldr	r2, [pc, #80]	; (800d5f4 <UART_SetConfig+0x314>)
 800d5a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5ae:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	685a      	ldr	r2, [r3, #4]
 800d5b4:	4613      	mov	r3, r2
 800d5b6:	005b      	lsls	r3, r3, #1
 800d5b8:	4413      	add	r3, r2
 800d5ba:	68ba      	ldr	r2, [r7, #8]
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d305      	bcc.n	800d5cc <UART_SetConfig+0x2ec>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	685b      	ldr	r3, [r3, #4]
 800d5c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d5c6:	68ba      	ldr	r2, [r7, #8]
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d915      	bls.n	800d5f8 <UART_SetConfig+0x318>
      {
        ret = HAL_ERROR;
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	76bb      	strb	r3, [r7, #26]
 800d5d0:	e112      	b.n	800d7f8 <UART_SetConfig+0x518>
 800d5d2:	bf00      	nop
 800d5d4:	cfff69f3 	.word	0xcfff69f3
 800d5d8:	40008000 	.word	0x40008000
 800d5dc:	40013800 	.word	0x40013800
 800d5e0:	40021000 	.word	0x40021000
 800d5e4:	40004400 	.word	0x40004400
 800d5e8:	40004800 	.word	0x40004800
 800d5ec:	40004c00 	.word	0x40004c00
 800d5f0:	00f42400 	.word	0x00f42400
 800d5f4:	0800f098 	.word	0x0800f098
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f04f 0100 	mov.w	r1, #0
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d604:	4a86      	ldr	r2, [pc, #536]	; (800d820 <UART_SetConfig+0x540>)
 800d606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d60a:	b29a      	uxth	r2, r3
 800d60c:	f04f 0300 	mov.w	r3, #0
 800d610:	f7f3 fad0 	bl	8000bb4 <__aeabi_uldivmod>
 800d614:	4602      	mov	r2, r0
 800d616:	460b      	mov	r3, r1
 800d618:	4610      	mov	r0, r2
 800d61a:	4619      	mov	r1, r3
 800d61c:	f04f 0200 	mov.w	r2, #0
 800d620:	f04f 0300 	mov.w	r3, #0
 800d624:	020b      	lsls	r3, r1, #8
 800d626:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d62a:	0202      	lsls	r2, r0, #8
 800d62c:	6879      	ldr	r1, [r7, #4]
 800d62e:	6849      	ldr	r1, [r1, #4]
 800d630:	0849      	lsrs	r1, r1, #1
 800d632:	4608      	mov	r0, r1
 800d634:	f04f 0100 	mov.w	r1, #0
 800d638:	1814      	adds	r4, r2, r0
 800d63a:	eb43 0501 	adc.w	r5, r3, r1
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	461a      	mov	r2, r3
 800d644:	f04f 0300 	mov.w	r3, #0
 800d648:	4620      	mov	r0, r4
 800d64a:	4629      	mov	r1, r5
 800d64c:	f7f3 fab2 	bl	8000bb4 <__aeabi_uldivmod>
 800d650:	4602      	mov	r2, r0
 800d652:	460b      	mov	r3, r1
 800d654:	4613      	mov	r3, r2
 800d656:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d65e:	d308      	bcc.n	800d672 <UART_SetConfig+0x392>
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d666:	d204      	bcs.n	800d672 <UART_SetConfig+0x392>
        {
          huart->Instance->BRR = usartdiv;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	693a      	ldr	r2, [r7, #16]
 800d66e:	60da      	str	r2, [r3, #12]
 800d670:	e0c2      	b.n	800d7f8 <UART_SetConfig+0x518>
        }
        else
        {
          ret = HAL_ERROR;
 800d672:	2301      	movs	r3, #1
 800d674:	76bb      	strb	r3, [r7, #26]
 800d676:	e0bf      	b.n	800d7f8 <UART_SetConfig+0x518>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	69db      	ldr	r3, [r3, #28]
 800d67c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d680:	d165      	bne.n	800d74e <UART_SetConfig+0x46e>
  {
    switch (clocksource)
 800d682:	7efb      	ldrb	r3, [r7, #27]
 800d684:	2b08      	cmp	r3, #8
 800d686:	d828      	bhi.n	800d6da <UART_SetConfig+0x3fa>
 800d688:	a201      	add	r2, pc, #4	; (adr r2, 800d690 <UART_SetConfig+0x3b0>)
 800d68a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d68e:	bf00      	nop
 800d690:	0800d6b5 	.word	0x0800d6b5
 800d694:	0800d6bd 	.word	0x0800d6bd
 800d698:	0800d6c5 	.word	0x0800d6c5
 800d69c:	0800d6db 	.word	0x0800d6db
 800d6a0:	0800d6cb 	.word	0x0800d6cb
 800d6a4:	0800d6db 	.word	0x0800d6db
 800d6a8:	0800d6db 	.word	0x0800d6db
 800d6ac:	0800d6db 	.word	0x0800d6db
 800d6b0:	0800d6d3 	.word	0x0800d6d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d6b4:	f7fc ff2c 	bl	800a510 <HAL_RCC_GetPCLK1Freq>
 800d6b8:	6178      	str	r0, [r7, #20]
        break;
 800d6ba:	e013      	b.n	800d6e4 <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d6bc:	f7fc ff3e 	bl	800a53c <HAL_RCC_GetPCLK2Freq>
 800d6c0:	6178      	str	r0, [r7, #20]
        break;
 800d6c2:	e00f      	b.n	800d6e4 <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d6c4:	4b57      	ldr	r3, [pc, #348]	; (800d824 <UART_SetConfig+0x544>)
 800d6c6:	617b      	str	r3, [r7, #20]
        break;
 800d6c8:	e00c      	b.n	800d6e4 <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d6ca:	f7fc feb3 	bl	800a434 <HAL_RCC_GetSysClockFreq>
 800d6ce:	6178      	str	r0, [r7, #20]
        break;
 800d6d0:	e008      	b.n	800d6e4 <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d6d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d6d6:	617b      	str	r3, [r7, #20]
        break;
 800d6d8:	e004      	b.n	800d6e4 <UART_SetConfig+0x404>
      default:
        pclk = 0U;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800d6de:	2301      	movs	r3, #1
 800d6e0:	76bb      	strb	r3, [r7, #26]
        break;
 800d6e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	f000 8086 	beq.w	800d7f8 <UART_SetConfig+0x518>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f0:	4a4b      	ldr	r2, [pc, #300]	; (800d820 <UART_SetConfig+0x540>)
 800d6f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800d6fe:	005a      	lsls	r2, r3, #1
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	685b      	ldr	r3, [r3, #4]
 800d704:	085b      	lsrs	r3, r3, #1
 800d706:	441a      	add	r2, r3
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	685b      	ldr	r3, [r3, #4]
 800d70c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d710:	b29b      	uxth	r3, r3
 800d712:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	2b0f      	cmp	r3, #15
 800d718:	d916      	bls.n	800d748 <UART_SetConfig+0x468>
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d720:	d212      	bcs.n	800d748 <UART_SetConfig+0x468>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	b29b      	uxth	r3, r3
 800d726:	f023 030f 	bic.w	r3, r3, #15
 800d72a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	085b      	lsrs	r3, r3, #1
 800d730:	b29b      	uxth	r3, r3
 800d732:	f003 0307 	and.w	r3, r3, #7
 800d736:	b29a      	uxth	r2, r3
 800d738:	89fb      	ldrh	r3, [r7, #14]
 800d73a:	4313      	orrs	r3, r2
 800d73c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	89fa      	ldrh	r2, [r7, #14]
 800d744:	60da      	str	r2, [r3, #12]
 800d746:	e057      	b.n	800d7f8 <UART_SetConfig+0x518>
      }
      else
      {
        ret = HAL_ERROR;
 800d748:	2301      	movs	r3, #1
 800d74a:	76bb      	strb	r3, [r7, #26]
 800d74c:	e054      	b.n	800d7f8 <UART_SetConfig+0x518>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d74e:	7efb      	ldrb	r3, [r7, #27]
 800d750:	2b08      	cmp	r3, #8
 800d752:	d828      	bhi.n	800d7a6 <UART_SetConfig+0x4c6>
 800d754:	a201      	add	r2, pc, #4	; (adr r2, 800d75c <UART_SetConfig+0x47c>)
 800d756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d75a:	bf00      	nop
 800d75c:	0800d781 	.word	0x0800d781
 800d760:	0800d789 	.word	0x0800d789
 800d764:	0800d791 	.word	0x0800d791
 800d768:	0800d7a7 	.word	0x0800d7a7
 800d76c:	0800d797 	.word	0x0800d797
 800d770:	0800d7a7 	.word	0x0800d7a7
 800d774:	0800d7a7 	.word	0x0800d7a7
 800d778:	0800d7a7 	.word	0x0800d7a7
 800d77c:	0800d79f 	.word	0x0800d79f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d780:	f7fc fec6 	bl	800a510 <HAL_RCC_GetPCLK1Freq>
 800d784:	6178      	str	r0, [r7, #20]
        break;
 800d786:	e013      	b.n	800d7b0 <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d788:	f7fc fed8 	bl	800a53c <HAL_RCC_GetPCLK2Freq>
 800d78c:	6178      	str	r0, [r7, #20]
        break;
 800d78e:	e00f      	b.n	800d7b0 <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d790:	4b24      	ldr	r3, [pc, #144]	; (800d824 <UART_SetConfig+0x544>)
 800d792:	617b      	str	r3, [r7, #20]
        break;
 800d794:	e00c      	b.n	800d7b0 <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d796:	f7fc fe4d 	bl	800a434 <HAL_RCC_GetSysClockFreq>
 800d79a:	6178      	str	r0, [r7, #20]
        break;
 800d79c:	e008      	b.n	800d7b0 <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d79e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d7a2:	617b      	str	r3, [r7, #20]
        break;
 800d7a4:	e004      	b.n	800d7b0 <UART_SetConfig+0x4d0>
      default:
        pclk = 0U;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	76bb      	strb	r3, [r7, #26]
        break;
 800d7ae:	bf00      	nop
    }

    if (pclk != 0U)
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d020      	beq.n	800d7f8 <UART_SetConfig+0x518>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ba:	4a19      	ldr	r2, [pc, #100]	; (800d820 <UART_SetConfig+0x540>)
 800d7bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7c0:	461a      	mov	r2, r3
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	fbb3 f2f2 	udiv	r2, r3, r2
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	685b      	ldr	r3, [r3, #4]
 800d7cc:	085b      	lsrs	r3, r3, #1
 800d7ce:	441a      	add	r2, r3
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	685b      	ldr	r3, [r3, #4]
 800d7d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7d8:	b29b      	uxth	r3, r3
 800d7da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	2b0f      	cmp	r3, #15
 800d7e0:	d908      	bls.n	800d7f4 <UART_SetConfig+0x514>
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7e8:	d204      	bcs.n	800d7f4 <UART_SetConfig+0x514>
      {
        huart->Instance->BRR = usartdiv;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	693a      	ldr	r2, [r7, #16]
 800d7f0:	60da      	str	r2, [r3, #12]
 800d7f2:	e001      	b.n	800d7f8 <UART_SetConfig+0x518>
      }
      else
      {
        ret = HAL_ERROR;
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2201      	movs	r2, #1
 800d804:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2200      	movs	r2, #0
 800d80c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2200      	movs	r2, #0
 800d812:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800d814:	7ebb      	ldrb	r3, [r7, #26]
}
 800d816:	4618      	mov	r0, r3
 800d818:	3720      	adds	r7, #32
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bdb0      	pop	{r4, r5, r7, pc}
 800d81e:	bf00      	nop
 800d820:	0800f098 	.word	0x0800f098
 800d824:	00f42400 	.word	0x00f42400

0800d828 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d828:	b480      	push	{r7}
 800d82a:	b083      	sub	sp, #12
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d834:	f003 0301 	and.w	r3, r3, #1
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d00a      	beq.n	800d852 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	430a      	orrs	r2, r1
 800d850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d856:	f003 0302 	and.w	r3, r3, #2
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d00a      	beq.n	800d874 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	430a      	orrs	r2, r1
 800d872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d878:	f003 0304 	and.w	r3, r3, #4
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d00a      	beq.n	800d896 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	685b      	ldr	r3, [r3, #4]
 800d886:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	430a      	orrs	r2, r1
 800d894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d89a:	f003 0308 	and.w	r3, r3, #8
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d00a      	beq.n	800d8b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	685b      	ldr	r3, [r3, #4]
 800d8a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	430a      	orrs	r2, r1
 800d8b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8bc:	f003 0310 	and.w	r3, r3, #16
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d00a      	beq.n	800d8da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	689b      	ldr	r3, [r3, #8]
 800d8ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	430a      	orrs	r2, r1
 800d8d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8de:	f003 0320 	and.w	r3, r3, #32
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d00a      	beq.n	800d8fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	689b      	ldr	r3, [r3, #8]
 800d8ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	430a      	orrs	r2, r1
 800d8fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d904:	2b00      	cmp	r3, #0
 800d906:	d01a      	beq.n	800d93e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	685b      	ldr	r3, [r3, #4]
 800d90e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	430a      	orrs	r2, r1
 800d91c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d926:	d10a      	bne.n	800d93e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	430a      	orrs	r2, r1
 800d93c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00a      	beq.n	800d960 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	685b      	ldr	r3, [r3, #4]
 800d950:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	430a      	orrs	r2, r1
 800d95e:	605a      	str	r2, [r3, #4]
  }
}
 800d960:	bf00      	nop
 800d962:	370c      	adds	r7, #12
 800d964:	46bd      	mov	sp, r7
 800d966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96a:	4770      	bx	lr

0800d96c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b086      	sub	sp, #24
 800d970:	af02      	add	r7, sp, #8
 800d972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2200      	movs	r2, #0
 800d978:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d97c:	f7f8 fbfa 	bl	8006174 <HAL_GetTick>
 800d980:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f003 0308 	and.w	r3, r3, #8
 800d98c:	2b08      	cmp	r3, #8
 800d98e:	d10e      	bne.n	800d9ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d990:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d994:	9300      	str	r3, [sp, #0]
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	2200      	movs	r2, #0
 800d99a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f000 f82c 	bl	800d9fc <UART_WaitOnFlagUntilTimeout>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d001      	beq.n	800d9ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d9aa:	2303      	movs	r3, #3
 800d9ac:	e022      	b.n	800d9f4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f003 0304 	and.w	r3, r3, #4
 800d9b8:	2b04      	cmp	r3, #4
 800d9ba:	d10e      	bne.n	800d9da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d9bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d9c0:	9300      	str	r3, [sp, #0]
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f000 f816 	bl	800d9fc <UART_WaitOnFlagUntilTimeout>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d001      	beq.n	800d9da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d9d6:	2303      	movs	r3, #3
 800d9d8:	e00c      	b.n	800d9f4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2220      	movs	r2, #32
 800d9de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2220      	movs	r2, #32
 800d9e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d9f2:	2300      	movs	r3, #0
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3710      	adds	r7, #16
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af00      	add	r7, sp, #0
 800da02:	60f8      	str	r0, [r7, #12]
 800da04:	60b9      	str	r1, [r7, #8]
 800da06:	603b      	str	r3, [r7, #0]
 800da08:	4613      	mov	r3, r2
 800da0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da0c:	e062      	b.n	800dad4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da0e:	69bb      	ldr	r3, [r7, #24]
 800da10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da14:	d05e      	beq.n	800dad4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da16:	f7f8 fbad 	bl	8006174 <HAL_GetTick>
 800da1a:	4602      	mov	r2, r0
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	1ad3      	subs	r3, r2, r3
 800da20:	69ba      	ldr	r2, [r7, #24]
 800da22:	429a      	cmp	r2, r3
 800da24:	d302      	bcc.n	800da2c <UART_WaitOnFlagUntilTimeout+0x30>
 800da26:	69bb      	ldr	r3, [r7, #24]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d11d      	bne.n	800da68 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	681a      	ldr	r2, [r3, #0]
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800da3a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	689a      	ldr	r2, [r3, #8]
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f022 0201 	bic.w	r2, r2, #1
 800da4a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	2220      	movs	r2, #32
 800da50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	2220      	movs	r2, #32
 800da58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	2200      	movs	r2, #0
 800da60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800da64:	2303      	movs	r3, #3
 800da66:	e045      	b.n	800daf4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f003 0304 	and.w	r3, r3, #4
 800da72:	2b00      	cmp	r3, #0
 800da74:	d02e      	beq.n	800dad4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	69db      	ldr	r3, [r3, #28]
 800da7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800da84:	d126      	bne.n	800dad4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800da8e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	681a      	ldr	r2, [r3, #0]
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800da9e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	689a      	ldr	r2, [r3, #8]
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f022 0201 	bic.w	r2, r2, #1
 800daae:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2220      	movs	r2, #32
 800dab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2220      	movs	r2, #32
 800dabc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	2220      	movs	r2, #32
 800dac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2200      	movs	r2, #0
 800dacc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800dad0:	2303      	movs	r3, #3
 800dad2:	e00f      	b.n	800daf4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	69da      	ldr	r2, [r3, #28]
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	4013      	ands	r3, r2
 800dade:	68ba      	ldr	r2, [r7, #8]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	bf0c      	ite	eq
 800dae4:	2301      	moveq	r3, #1
 800dae6:	2300      	movne	r3, #0
 800dae8:	b2db      	uxtb	r3, r3
 800daea:	461a      	mov	r2, r3
 800daec:	79fb      	ldrb	r3, [r7, #7]
 800daee:	429a      	cmp	r2, r3
 800daf0:	d08d      	beq.n	800da0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800daf2:	2300      	movs	r3, #0
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3710      	adds	r7, #16
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b083      	sub	sp, #12
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800db12:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	689a      	ldr	r2, [r3, #8]
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800db22:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2220      	movs	r2, #32
 800db28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800db2c:	bf00      	nop
 800db2e:	370c      	adds	r7, #12
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr

0800db38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800db38:	b480      	push	{r7}
 800db3a:	b083      	sub	sp, #12
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	681a      	ldr	r2, [r3, #0]
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800db4e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	689b      	ldr	r3, [r3, #8]
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	6812      	ldr	r2, [r2, #0]
 800db5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800db5e:	f023 0301 	bic.w	r3, r3, #1
 800db62:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2220      	movs	r2, #32
 800db68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2200      	movs	r2, #0
 800db70:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800db72:	bf00      	nop
 800db74:	370c      	adds	r7, #12
 800db76:	46bd      	mov	sp, r7
 800db78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7c:	4770      	bx	lr

0800db7e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800db7e:	b580      	push	{r7, lr}
 800db80:	b084      	sub	sp, #16
 800db82:	af00      	add	r7, sp, #0
 800db84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db8a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	f003 0320 	and.w	r3, r3, #32
 800db96:	2b00      	cmp	r3, #0
 800db98:	d114      	bne.n	800dbc4 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	2200      	movs	r2, #0
 800db9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	689a      	ldr	r2, [r3, #8]
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dbb0:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	681a      	ldr	r2, [r3, #0]
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dbc0:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dbc2:	e002      	b.n	800dbca <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800dbc4:	68f8      	ldr	r0, [r7, #12]
 800dbc6:	f7f7 fb15 	bl	80051f4 <HAL_UART_TxCpltCallback>
}
 800dbca:	bf00      	nop
 800dbcc:	3710      	adds	r7, #16
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}

0800dbd2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	b084      	sub	sp, #16
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbde:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800dbe0:	68f8      	ldr	r0, [r7, #12]
 800dbe2:	f7ff fb5f 	bl	800d2a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbe6:	bf00      	nop
 800dbe8:	3710      	adds	r7, #16
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}

0800dbee <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dbee:	b580      	push	{r7, lr}
 800dbf0:	b084      	sub	sp, #16
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbfa:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f003 0320 	and.w	r3, r3, #32
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d11f      	bne.n	800dc4a <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	681a      	ldr	r2, [r3, #0]
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dc20:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	689a      	ldr	r2, [r3, #8]
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f022 0201 	bic.w	r2, r2, #1
 800dc30:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	689a      	ldr	r2, [r3, #8]
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dc40:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	2220      	movs	r2, #32
 800dc46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800dc4a:	68f8      	ldr	r0, [r7, #12]
 800dc4c:	f7ff fb34 	bl	800d2b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc50:	bf00      	nop
 800dc52:	3710      	adds	r7, #16
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b084      	sub	sp, #16
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc64:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800dc66:	68f8      	ldr	r0, [r7, #12]
 800dc68:	f7ff fb30 	bl	800d2cc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc6c:	bf00      	nop
 800dc6e:	3710      	adds	r7, #16
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b086      	sub	sp, #24
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc80:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc88:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc90:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	689b      	ldr	r3, [r3, #8]
 800dc98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc9c:	2b80      	cmp	r3, #128	; 0x80
 800dc9e:	d109      	bne.n	800dcb4 <UART_DMAError+0x40>
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	2b21      	cmp	r3, #33	; 0x21
 800dca4:	d106      	bne.n	800dcb4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	2200      	movs	r2, #0
 800dcaa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800dcae:	6978      	ldr	r0, [r7, #20]
 800dcb0:	f7ff ff24 	bl	800dafc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	689b      	ldr	r3, [r3, #8]
 800dcba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcbe:	2b40      	cmp	r3, #64	; 0x40
 800dcc0:	d109      	bne.n	800dcd6 <UART_DMAError+0x62>
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	2b22      	cmp	r3, #34	; 0x22
 800dcc6:	d106      	bne.n	800dcd6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	2200      	movs	r2, #0
 800dccc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800dcd0:	6978      	ldr	r0, [r7, #20]
 800dcd2:	f7ff ff31 	bl	800db38 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcdc:	f043 0210 	orr.w	r2, r3, #16
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dce6:	6978      	ldr	r0, [r7, #20]
 800dce8:	f7f7 f8a2 	bl	8004e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dcec:	bf00      	nop
 800dcee:	3718      	adds	r7, #24
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}

0800dcf4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b084      	sub	sp, #16
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	2200      	movs	r2, #0
 800dd06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dd12:	68f8      	ldr	r0, [r7, #12]
 800dd14:	f7f7 f88c 	bl	8004e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd18:	bf00      	nop
 800dd1a:	3710      	adds	r7, #16
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}

0800dd20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b082      	sub	sp, #8
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	681a      	ldr	r2, [r3, #0]
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dd36:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2220      	movs	r2, #32
 800dd3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2200      	movs	r2, #0
 800dd44:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f7f7 fa54 	bl	80051f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd4c:	bf00      	nop
 800dd4e:	3708      	adds	r7, #8
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}

0800dd54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dd54:	b480      	push	{r7}
 800dd56:	b083      	sub	sp, #12
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dd5c:	bf00      	nop
 800dd5e:	370c      	adds	r7, #12
 800dd60:	46bd      	mov	sp, r7
 800dd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd66:	4770      	bx	lr

0800dd68 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b083      	sub	sp, #12
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dd70:	bf00      	nop
 800dd72:	370c      	adds	r7, #12
 800dd74:	46bd      	mov	sp, r7
 800dd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7a:	4770      	bx	lr

0800dd7c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	b083      	sub	sp, #12
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dd84:	bf00      	nop
 800dd86:	370c      	adds	r7, #12
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr

0800dd90 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dd90:	b480      	push	{r7}
 800dd92:	b085      	sub	sp, #20
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800dd9e:	2b01      	cmp	r3, #1
 800dda0:	d101      	bne.n	800dda6 <HAL_UARTEx_DisableFifoMode+0x16>
 800dda2:	2302      	movs	r3, #2
 800dda4:	e027      	b.n	800ddf6 <HAL_UARTEx_DisableFifoMode+0x66>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2201      	movs	r2, #1
 800ddaa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2224      	movs	r2, #36	; 0x24
 800ddb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	681a      	ldr	r2, [r3, #0]
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	f022 0201 	bic.w	r2, r2, #1
 800ddcc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ddd4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2200      	movs	r2, #0
 800ddda:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	68fa      	ldr	r2, [r7, #12]
 800dde2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2220      	movs	r2, #32
 800dde8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ddf4:	2300      	movs	r3, #0
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3714      	adds	r7, #20
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de00:	4770      	bx	lr

0800de02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800de02:	b580      	push	{r7, lr}
 800de04:	b084      	sub	sp, #16
 800de06:	af00      	add	r7, sp, #0
 800de08:	6078      	str	r0, [r7, #4]
 800de0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800de12:	2b01      	cmp	r3, #1
 800de14:	d101      	bne.n	800de1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800de16:	2302      	movs	r3, #2
 800de18:	e02d      	b.n	800de76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2201      	movs	r2, #1
 800de1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2224      	movs	r2, #36	; 0x24
 800de26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	681a      	ldr	r2, [r3, #0]
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f022 0201 	bic.w	r2, r2, #1
 800de40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	689b      	ldr	r3, [r3, #8]
 800de48:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	683a      	ldr	r2, [r7, #0]
 800de52:	430a      	orrs	r2, r1
 800de54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f000 f850 	bl	800defc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	68fa      	ldr	r2, [r7, #12]
 800de62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2220      	movs	r2, #32
 800de68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2200      	movs	r2, #0
 800de70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800de74:	2300      	movs	r3, #0
}
 800de76:	4618      	mov	r0, r3
 800de78:	3710      	adds	r7, #16
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}

0800de7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800de7e:	b580      	push	{r7, lr}
 800de80:	b084      	sub	sp, #16
 800de82:	af00      	add	r7, sp, #0
 800de84:	6078      	str	r0, [r7, #4]
 800de86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800de8e:	2b01      	cmp	r3, #1
 800de90:	d101      	bne.n	800de96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800de92:	2302      	movs	r3, #2
 800de94:	e02d      	b.n	800def2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2201      	movs	r2, #1
 800de9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2224      	movs	r2, #36	; 0x24
 800dea2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	681a      	ldr	r2, [r3, #0]
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	f022 0201 	bic.w	r2, r2, #1
 800debc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	689b      	ldr	r3, [r3, #8]
 800dec4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	683a      	ldr	r2, [r7, #0]
 800dece:	430a      	orrs	r2, r1
 800ded0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f000 f812 	bl	800defc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	68fa      	ldr	r2, [r7, #12]
 800dede:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2220      	movs	r2, #32
 800dee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2200      	movs	r2, #0
 800deec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800def0:	2300      	movs	r3, #0
}
 800def2:	4618      	mov	r0, r3
 800def4:	3710      	adds	r7, #16
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
	...

0800defc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800defc:	b480      	push	{r7}
 800defe:	b089      	sub	sp, #36	; 0x24
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800df04:	4a2f      	ldr	r2, [pc, #188]	; (800dfc4 <UARTEx_SetNbDataToProcess+0xc8>)
 800df06:	f107 0314 	add.w	r3, r7, #20
 800df0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800df0e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800df12:	4a2d      	ldr	r2, [pc, #180]	; (800dfc8 <UARTEx_SetNbDataToProcess+0xcc>)
 800df14:	f107 030c 	add.w	r3, r7, #12
 800df18:	e892 0003 	ldmia.w	r2, {r0, r1}
 800df1c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df24:	2b00      	cmp	r3, #0
 800df26:	d108      	bne.n	800df3a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2201      	movs	r2, #1
 800df2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2201      	movs	r2, #1
 800df34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800df38:	e03d      	b.n	800dfb6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800df3a:	2308      	movs	r3, #8
 800df3c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800df3e:	2308      	movs	r3, #8
 800df40:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	689b      	ldr	r3, [r3, #8]
 800df48:	0e5b      	lsrs	r3, r3, #25
 800df4a:	b2db      	uxtb	r3, r3
 800df4c:	f003 0307 	and.w	r3, r3, #7
 800df50:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	689b      	ldr	r3, [r3, #8]
 800df58:	0f5b      	lsrs	r3, r3, #29
 800df5a:	b2db      	uxtb	r3, r3
 800df5c:	f003 0307 	and.w	r3, r3, #7
 800df60:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df62:	7fbb      	ldrb	r3, [r7, #30]
 800df64:	7f3a      	ldrb	r2, [r7, #28]
 800df66:	f107 0120 	add.w	r1, r7, #32
 800df6a:	440a      	add	r2, r1
 800df6c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800df70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800df74:	7f3a      	ldrb	r2, [r7, #28]
 800df76:	f107 0120 	add.w	r1, r7, #32
 800df7a:	440a      	add	r2, r1
 800df7c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df80:	fb93 f3f2 	sdiv	r3, r3, r2
 800df84:	b29a      	uxth	r2, r3
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df8c:	7ffb      	ldrb	r3, [r7, #31]
 800df8e:	7f7a      	ldrb	r2, [r7, #29]
 800df90:	f107 0120 	add.w	r1, r7, #32
 800df94:	440a      	add	r2, r1
 800df96:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800df9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800df9e:	7f7a      	ldrb	r2, [r7, #29]
 800dfa0:	f107 0120 	add.w	r1, r7, #32
 800dfa4:	440a      	add	r2, r1
 800dfa6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dfaa:	fb93 f3f2 	sdiv	r3, r3, r2
 800dfae:	b29a      	uxth	r2, r3
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dfb6:	bf00      	nop
 800dfb8:	3724      	adds	r7, #36	; 0x24
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc0:	4770      	bx	lr
 800dfc2:	bf00      	nop
 800dfc4:	0800ee34 	.word	0x0800ee34
 800dfc8:	0800ee3c 	.word	0x0800ee3c

0800dfcc <__errno>:
 800dfcc:	4b01      	ldr	r3, [pc, #4]	; (800dfd4 <__errno+0x8>)
 800dfce:	6818      	ldr	r0, [r3, #0]
 800dfd0:	4770      	bx	lr
 800dfd2:	bf00      	nop
 800dfd4:	20000044 	.word	0x20000044

0800dfd8 <__libc_init_array>:
 800dfd8:	b570      	push	{r4, r5, r6, lr}
 800dfda:	4d0d      	ldr	r5, [pc, #52]	; (800e010 <__libc_init_array+0x38>)
 800dfdc:	4c0d      	ldr	r4, [pc, #52]	; (800e014 <__libc_init_array+0x3c>)
 800dfde:	1b64      	subs	r4, r4, r5
 800dfe0:	10a4      	asrs	r4, r4, #2
 800dfe2:	2600      	movs	r6, #0
 800dfe4:	42a6      	cmp	r6, r4
 800dfe6:	d109      	bne.n	800dffc <__libc_init_array+0x24>
 800dfe8:	4d0b      	ldr	r5, [pc, #44]	; (800e018 <__libc_init_array+0x40>)
 800dfea:	4c0c      	ldr	r4, [pc, #48]	; (800e01c <__libc_init_array+0x44>)
 800dfec:	f000 fee4 	bl	800edb8 <_init>
 800dff0:	1b64      	subs	r4, r4, r5
 800dff2:	10a4      	asrs	r4, r4, #2
 800dff4:	2600      	movs	r6, #0
 800dff6:	42a6      	cmp	r6, r4
 800dff8:	d105      	bne.n	800e006 <__libc_init_array+0x2e>
 800dffa:	bd70      	pop	{r4, r5, r6, pc}
 800dffc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e000:	4798      	blx	r3
 800e002:	3601      	adds	r6, #1
 800e004:	e7ee      	b.n	800dfe4 <__libc_init_array+0xc>
 800e006:	f855 3b04 	ldr.w	r3, [r5], #4
 800e00a:	4798      	blx	r3
 800e00c:	3601      	adds	r6, #1
 800e00e:	e7f2      	b.n	800dff6 <__libc_init_array+0x1e>
 800e010:	0800f0e4 	.word	0x0800f0e4
 800e014:	0800f0e4 	.word	0x0800f0e4
 800e018:	0800f0e4 	.word	0x0800f0e4
 800e01c:	0800f0e8 	.word	0x0800f0e8

0800e020 <memcpy>:
 800e020:	440a      	add	r2, r1
 800e022:	4291      	cmp	r1, r2
 800e024:	f100 33ff 	add.w	r3, r0, #4294967295
 800e028:	d100      	bne.n	800e02c <memcpy+0xc>
 800e02a:	4770      	bx	lr
 800e02c:	b510      	push	{r4, lr}
 800e02e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e032:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e036:	4291      	cmp	r1, r2
 800e038:	d1f9      	bne.n	800e02e <memcpy+0xe>
 800e03a:	bd10      	pop	{r4, pc}

0800e03c <memset>:
 800e03c:	4402      	add	r2, r0
 800e03e:	4603      	mov	r3, r0
 800e040:	4293      	cmp	r3, r2
 800e042:	d100      	bne.n	800e046 <memset+0xa>
 800e044:	4770      	bx	lr
 800e046:	f803 1b01 	strb.w	r1, [r3], #1
 800e04a:	e7f9      	b.n	800e040 <memset+0x4>

0800e04c <fmaxf>:
 800e04c:	b508      	push	{r3, lr}
 800e04e:	ed2d 8b02 	vpush	{d8}
 800e052:	eeb0 8a40 	vmov.f32	s16, s0
 800e056:	eef0 8a60 	vmov.f32	s17, s1
 800e05a:	f000 f82d 	bl	800e0b8 <__fpclassifyf>
 800e05e:	b148      	cbz	r0, 800e074 <fmaxf+0x28>
 800e060:	eeb0 0a68 	vmov.f32	s0, s17
 800e064:	f000 f828 	bl	800e0b8 <__fpclassifyf>
 800e068:	b130      	cbz	r0, 800e078 <fmaxf+0x2c>
 800e06a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e072:	dc01      	bgt.n	800e078 <fmaxf+0x2c>
 800e074:	eeb0 8a68 	vmov.f32	s16, s17
 800e078:	eeb0 0a48 	vmov.f32	s0, s16
 800e07c:	ecbd 8b02 	vpop	{d8}
 800e080:	bd08      	pop	{r3, pc}

0800e082 <fminf>:
 800e082:	b508      	push	{r3, lr}
 800e084:	ed2d 8b02 	vpush	{d8}
 800e088:	eeb0 8a40 	vmov.f32	s16, s0
 800e08c:	eef0 8a60 	vmov.f32	s17, s1
 800e090:	f000 f812 	bl	800e0b8 <__fpclassifyf>
 800e094:	b148      	cbz	r0, 800e0aa <fminf+0x28>
 800e096:	eeb0 0a68 	vmov.f32	s0, s17
 800e09a:	f000 f80d 	bl	800e0b8 <__fpclassifyf>
 800e09e:	b130      	cbz	r0, 800e0ae <fminf+0x2c>
 800e0a0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e0a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0a8:	d401      	bmi.n	800e0ae <fminf+0x2c>
 800e0aa:	eeb0 8a68 	vmov.f32	s16, s17
 800e0ae:	eeb0 0a48 	vmov.f32	s0, s16
 800e0b2:	ecbd 8b02 	vpop	{d8}
 800e0b6:	bd08      	pop	{r3, pc}

0800e0b8 <__fpclassifyf>:
 800e0b8:	ee10 3a10 	vmov	r3, s0
 800e0bc:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800e0c0:	d00d      	beq.n	800e0de <__fpclassifyf+0x26>
 800e0c2:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800e0c6:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800e0ca:	d30a      	bcc.n	800e0e2 <__fpclassifyf+0x2a>
 800e0cc:	4b07      	ldr	r3, [pc, #28]	; (800e0ec <__fpclassifyf+0x34>)
 800e0ce:	1e42      	subs	r2, r0, #1
 800e0d0:	429a      	cmp	r2, r3
 800e0d2:	d908      	bls.n	800e0e6 <__fpclassifyf+0x2e>
 800e0d4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800e0d8:	4258      	negs	r0, r3
 800e0da:	4158      	adcs	r0, r3
 800e0dc:	4770      	bx	lr
 800e0de:	2002      	movs	r0, #2
 800e0e0:	4770      	bx	lr
 800e0e2:	2004      	movs	r0, #4
 800e0e4:	4770      	bx	lr
 800e0e6:	2003      	movs	r0, #3
 800e0e8:	4770      	bx	lr
 800e0ea:	bf00      	nop
 800e0ec:	007ffffe 	.word	0x007ffffe

0800e0f0 <roundf>:
 800e0f0:	ee10 0a10 	vmov	r0, s0
 800e0f4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e0f8:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800e0fc:	2a16      	cmp	r2, #22
 800e0fe:	dc15      	bgt.n	800e12c <roundf+0x3c>
 800e100:	2a00      	cmp	r2, #0
 800e102:	da08      	bge.n	800e116 <roundf+0x26>
 800e104:	3201      	adds	r2, #1
 800e106:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800e10a:	d101      	bne.n	800e110 <roundf+0x20>
 800e10c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800e110:	ee00 3a10 	vmov	s0, r3
 800e114:	4770      	bx	lr
 800e116:	4908      	ldr	r1, [pc, #32]	; (800e138 <roundf+0x48>)
 800e118:	4111      	asrs	r1, r2
 800e11a:	4208      	tst	r0, r1
 800e11c:	d0fa      	beq.n	800e114 <roundf+0x24>
 800e11e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e122:	4113      	asrs	r3, r2
 800e124:	4403      	add	r3, r0
 800e126:	ea23 0301 	bic.w	r3, r3, r1
 800e12a:	e7f1      	b.n	800e110 <roundf+0x20>
 800e12c:	2a80      	cmp	r2, #128	; 0x80
 800e12e:	d1f1      	bne.n	800e114 <roundf+0x24>
 800e130:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e134:	4770      	bx	lr
 800e136:	bf00      	nop
 800e138:	007fffff 	.word	0x007fffff

0800e13c <fmodf>:
 800e13c:	b508      	push	{r3, lr}
 800e13e:	ed2d 8b02 	vpush	{d8}
 800e142:	eef0 8a40 	vmov.f32	s17, s0
 800e146:	eeb0 8a60 	vmov.f32	s16, s1
 800e14a:	f000 f917 	bl	800e37c <__ieee754_fmodf>
 800e14e:	4b0f      	ldr	r3, [pc, #60]	; (800e18c <fmodf+0x50>)
 800e150:	f993 3000 	ldrsb.w	r3, [r3]
 800e154:	3301      	adds	r3, #1
 800e156:	d016      	beq.n	800e186 <fmodf+0x4a>
 800e158:	eeb4 8a48 	vcmp.f32	s16, s16
 800e15c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e160:	d611      	bvs.n	800e186 <fmodf+0x4a>
 800e162:	eef4 8a68 	vcmp.f32	s17, s17
 800e166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e16a:	d60c      	bvs.n	800e186 <fmodf+0x4a>
 800e16c:	eddf 8a08 	vldr	s17, [pc, #32]	; 800e190 <fmodf+0x54>
 800e170:	eeb4 8a68 	vcmp.f32	s16, s17
 800e174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e178:	d105      	bne.n	800e186 <fmodf+0x4a>
 800e17a:	f7ff ff27 	bl	800dfcc <__errno>
 800e17e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e182:	2321      	movs	r3, #33	; 0x21
 800e184:	6003      	str	r3, [r0, #0]
 800e186:	ecbd 8b02 	vpop	{d8}
 800e18a:	bd08      	pop	{r3, pc}
 800e18c:	200000a8 	.word	0x200000a8
 800e190:	00000000 	.word	0x00000000

0800e194 <logf>:
 800e194:	b508      	push	{r3, lr}
 800e196:	ed2d 8b02 	vpush	{d8}
 800e19a:	eeb0 8a40 	vmov.f32	s16, s0
 800e19e:	f000 f96f 	bl	800e480 <__ieee754_logf>
 800e1a2:	4b14      	ldr	r3, [pc, #80]	; (800e1f4 <logf+0x60>)
 800e1a4:	f993 3000 	ldrsb.w	r3, [r3]
 800e1a8:	3301      	adds	r3, #1
 800e1aa:	d014      	beq.n	800e1d6 <logf+0x42>
 800e1ac:	eeb4 8a48 	vcmp.f32	s16, s16
 800e1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1b4:	d60f      	bvs.n	800e1d6 <logf+0x42>
 800e1b6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1be:	dc0a      	bgt.n	800e1d6 <logf+0x42>
 800e1c0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e1c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1c8:	d108      	bne.n	800e1dc <logf+0x48>
 800e1ca:	f7ff feff 	bl	800dfcc <__errno>
 800e1ce:	2322      	movs	r3, #34	; 0x22
 800e1d0:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800e1f8 <logf+0x64>
 800e1d4:	6003      	str	r3, [r0, #0]
 800e1d6:	ecbd 8b02 	vpop	{d8}
 800e1da:	bd08      	pop	{r3, pc}
 800e1dc:	f7ff fef6 	bl	800dfcc <__errno>
 800e1e0:	ecbd 8b02 	vpop	{d8}
 800e1e4:	2321      	movs	r3, #33	; 0x21
 800e1e6:	6003      	str	r3, [r0, #0]
 800e1e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e1ec:	4803      	ldr	r0, [pc, #12]	; (800e1fc <logf+0x68>)
 800e1ee:	f000 bd0f 	b.w	800ec10 <nanf>
 800e1f2:	bf00      	nop
 800e1f4:	200000a8 	.word	0x200000a8
 800e1f8:	ff800000 	.word	0xff800000
 800e1fc:	0800f0b0 	.word	0x0800f0b0

0800e200 <powf>:
 800e200:	b508      	push	{r3, lr}
 800e202:	ed2d 8b04 	vpush	{d8-d9}
 800e206:	eeb0 9a40 	vmov.f32	s18, s0
 800e20a:	eef0 8a60 	vmov.f32	s17, s1
 800e20e:	f000 fa27 	bl	800e660 <__ieee754_powf>
 800e212:	4b43      	ldr	r3, [pc, #268]	; (800e320 <powf+0x120>)
 800e214:	f993 3000 	ldrsb.w	r3, [r3]
 800e218:	3301      	adds	r3, #1
 800e21a:	eeb0 8a40 	vmov.f32	s16, s0
 800e21e:	d012      	beq.n	800e246 <powf+0x46>
 800e220:	eef4 8a68 	vcmp.f32	s17, s17
 800e224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e228:	d60d      	bvs.n	800e246 <powf+0x46>
 800e22a:	eeb4 9a49 	vcmp.f32	s18, s18
 800e22e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e232:	d70d      	bvc.n	800e250 <powf+0x50>
 800e234:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e23c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e240:	bf08      	it	eq
 800e242:	eeb0 8a67 	vmoveq.f32	s16, s15
 800e246:	eeb0 0a48 	vmov.f32	s0, s16
 800e24a:	ecbd 8b04 	vpop	{d8-d9}
 800e24e:	bd08      	pop	{r3, pc}
 800e250:	eddf 9a34 	vldr	s19, [pc, #208]	; 800e324 <powf+0x124>
 800e254:	eeb4 9a69 	vcmp.f32	s18, s19
 800e258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e25c:	d116      	bne.n	800e28c <powf+0x8c>
 800e25e:	eef4 8a69 	vcmp.f32	s17, s19
 800e262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e266:	d057      	beq.n	800e318 <powf+0x118>
 800e268:	eeb0 0a68 	vmov.f32	s0, s17
 800e26c:	f000 fcc2 	bl	800ebf4 <finitef>
 800e270:	2800      	cmp	r0, #0
 800e272:	d0e8      	beq.n	800e246 <powf+0x46>
 800e274:	eef4 8ae9 	vcmpe.f32	s17, s19
 800e278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e27c:	d5e3      	bpl.n	800e246 <powf+0x46>
 800e27e:	f7ff fea5 	bl	800dfcc <__errno>
 800e282:	2321      	movs	r3, #33	; 0x21
 800e284:	6003      	str	r3, [r0, #0]
 800e286:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800e328 <powf+0x128>
 800e28a:	e7dc      	b.n	800e246 <powf+0x46>
 800e28c:	f000 fcb2 	bl	800ebf4 <finitef>
 800e290:	bb50      	cbnz	r0, 800e2e8 <powf+0xe8>
 800e292:	eeb0 0a49 	vmov.f32	s0, s18
 800e296:	f000 fcad 	bl	800ebf4 <finitef>
 800e29a:	b328      	cbz	r0, 800e2e8 <powf+0xe8>
 800e29c:	eeb0 0a68 	vmov.f32	s0, s17
 800e2a0:	f000 fca8 	bl	800ebf4 <finitef>
 800e2a4:	b300      	cbz	r0, 800e2e8 <powf+0xe8>
 800e2a6:	eeb4 8a48 	vcmp.f32	s16, s16
 800e2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ae:	d706      	bvc.n	800e2be <powf+0xbe>
 800e2b0:	f7ff fe8c 	bl	800dfcc <__errno>
 800e2b4:	2321      	movs	r3, #33	; 0x21
 800e2b6:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800e2ba:	6003      	str	r3, [r0, #0]
 800e2bc:	e7c3      	b.n	800e246 <powf+0x46>
 800e2be:	f7ff fe85 	bl	800dfcc <__errno>
 800e2c2:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800e2c6:	2322      	movs	r3, #34	; 0x22
 800e2c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2cc:	6003      	str	r3, [r0, #0]
 800e2ce:	d508      	bpl.n	800e2e2 <powf+0xe2>
 800e2d0:	eeb0 0a68 	vmov.f32	s0, s17
 800e2d4:	f000 fca2 	bl	800ec1c <rintf>
 800e2d8:	eeb4 0a68 	vcmp.f32	s0, s17
 800e2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2e0:	d1d1      	bne.n	800e286 <powf+0x86>
 800e2e2:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800e32c <powf+0x12c>
 800e2e6:	e7ae      	b.n	800e246 <powf+0x46>
 800e2e8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e2ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2f0:	d1a9      	bne.n	800e246 <powf+0x46>
 800e2f2:	eeb0 0a49 	vmov.f32	s0, s18
 800e2f6:	f000 fc7d 	bl	800ebf4 <finitef>
 800e2fa:	2800      	cmp	r0, #0
 800e2fc:	d0a3      	beq.n	800e246 <powf+0x46>
 800e2fe:	eeb0 0a68 	vmov.f32	s0, s17
 800e302:	f000 fc77 	bl	800ebf4 <finitef>
 800e306:	2800      	cmp	r0, #0
 800e308:	d09d      	beq.n	800e246 <powf+0x46>
 800e30a:	f7ff fe5f 	bl	800dfcc <__errno>
 800e30e:	2322      	movs	r3, #34	; 0x22
 800e310:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800e324 <powf+0x124>
 800e314:	6003      	str	r3, [r0, #0]
 800e316:	e796      	b.n	800e246 <powf+0x46>
 800e318:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800e31c:	e793      	b.n	800e246 <powf+0x46>
 800e31e:	bf00      	nop
 800e320:	200000a8 	.word	0x200000a8
 800e324:	00000000 	.word	0x00000000
 800e328:	ff800000 	.word	0xff800000
 800e32c:	7f800000 	.word	0x7f800000

0800e330 <sqrtf>:
 800e330:	b508      	push	{r3, lr}
 800e332:	ed2d 8b02 	vpush	{d8}
 800e336:	eeb0 8a40 	vmov.f32	s16, s0
 800e33a:	f000 fc51 	bl	800ebe0 <__ieee754_sqrtf>
 800e33e:	4b0d      	ldr	r3, [pc, #52]	; (800e374 <sqrtf+0x44>)
 800e340:	f993 3000 	ldrsb.w	r3, [r3]
 800e344:	3301      	adds	r3, #1
 800e346:	d011      	beq.n	800e36c <sqrtf+0x3c>
 800e348:	eeb4 8a48 	vcmp.f32	s16, s16
 800e34c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e350:	d60c      	bvs.n	800e36c <sqrtf+0x3c>
 800e352:	eddf 8a09 	vldr	s17, [pc, #36]	; 800e378 <sqrtf+0x48>
 800e356:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e35e:	d505      	bpl.n	800e36c <sqrtf+0x3c>
 800e360:	f7ff fe34 	bl	800dfcc <__errno>
 800e364:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e368:	2321      	movs	r3, #33	; 0x21
 800e36a:	6003      	str	r3, [r0, #0]
 800e36c:	ecbd 8b02 	vpop	{d8}
 800e370:	bd08      	pop	{r3, pc}
 800e372:	bf00      	nop
 800e374:	200000a8 	.word	0x200000a8
 800e378:	00000000 	.word	0x00000000

0800e37c <__ieee754_fmodf>:
 800e37c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e37e:	ee10 6a90 	vmov	r6, s1
 800e382:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800e386:	d009      	beq.n	800e39c <__ieee754_fmodf+0x20>
 800e388:	ee10 2a10 	vmov	r2, s0
 800e38c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800e390:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e394:	da02      	bge.n	800e39c <__ieee754_fmodf+0x20>
 800e396:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800e39a:	dd04      	ble.n	800e3a6 <__ieee754_fmodf+0x2a>
 800e39c:	ee60 0a20 	vmul.f32	s1, s0, s1
 800e3a0:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800e3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3a6:	42ab      	cmp	r3, r5
 800e3a8:	dbfc      	blt.n	800e3a4 <__ieee754_fmodf+0x28>
 800e3aa:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 800e3ae:	d106      	bne.n	800e3be <__ieee754_fmodf+0x42>
 800e3b0:	4a32      	ldr	r2, [pc, #200]	; (800e47c <__ieee754_fmodf+0x100>)
 800e3b2:	0fe3      	lsrs	r3, r4, #31
 800e3b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e3b8:	ed93 0a00 	vldr	s0, [r3]
 800e3bc:	e7f2      	b.n	800e3a4 <__ieee754_fmodf+0x28>
 800e3be:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800e3c2:	d13f      	bne.n	800e444 <__ieee754_fmodf+0xc8>
 800e3c4:	0219      	lsls	r1, r3, #8
 800e3c6:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800e3ca:	2900      	cmp	r1, #0
 800e3cc:	dc37      	bgt.n	800e43e <__ieee754_fmodf+0xc2>
 800e3ce:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800e3d2:	d13d      	bne.n	800e450 <__ieee754_fmodf+0xd4>
 800e3d4:	022f      	lsls	r7, r5, #8
 800e3d6:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800e3da:	2f00      	cmp	r7, #0
 800e3dc:	da35      	bge.n	800e44a <__ieee754_fmodf+0xce>
 800e3de:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800e3e2:	bfbb      	ittet	lt
 800e3e4:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800e3e8:	1a12      	sublt	r2, r2, r0
 800e3ea:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800e3ee:	4093      	lsllt	r3, r2
 800e3f0:	bfa8      	it	ge
 800e3f2:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800e3f6:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800e3fa:	bfb5      	itete	lt
 800e3fc:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800e400:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 800e404:	1a52      	sublt	r2, r2, r1
 800e406:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 800e40a:	bfb8      	it	lt
 800e40c:	4095      	lsllt	r5, r2
 800e40e:	1a40      	subs	r0, r0, r1
 800e410:	1b5a      	subs	r2, r3, r5
 800e412:	bb00      	cbnz	r0, 800e456 <__ieee754_fmodf+0xda>
 800e414:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800e418:	bf38      	it	cc
 800e41a:	4613      	movcc	r3, r2
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d0c7      	beq.n	800e3b0 <__ieee754_fmodf+0x34>
 800e420:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e424:	db1f      	blt.n	800e466 <__ieee754_fmodf+0xea>
 800e426:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800e42a:	db1f      	blt.n	800e46c <__ieee754_fmodf+0xf0>
 800e42c:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800e430:	317f      	adds	r1, #127	; 0x7f
 800e432:	4323      	orrs	r3, r4
 800e434:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800e438:	ee00 3a10 	vmov	s0, r3
 800e43c:	e7b2      	b.n	800e3a4 <__ieee754_fmodf+0x28>
 800e43e:	3801      	subs	r0, #1
 800e440:	0049      	lsls	r1, r1, #1
 800e442:	e7c2      	b.n	800e3ca <__ieee754_fmodf+0x4e>
 800e444:	15d8      	asrs	r0, r3, #23
 800e446:	387f      	subs	r0, #127	; 0x7f
 800e448:	e7c1      	b.n	800e3ce <__ieee754_fmodf+0x52>
 800e44a:	3901      	subs	r1, #1
 800e44c:	007f      	lsls	r7, r7, #1
 800e44e:	e7c4      	b.n	800e3da <__ieee754_fmodf+0x5e>
 800e450:	15e9      	asrs	r1, r5, #23
 800e452:	397f      	subs	r1, #127	; 0x7f
 800e454:	e7c3      	b.n	800e3de <__ieee754_fmodf+0x62>
 800e456:	2a00      	cmp	r2, #0
 800e458:	da02      	bge.n	800e460 <__ieee754_fmodf+0xe4>
 800e45a:	005b      	lsls	r3, r3, #1
 800e45c:	3801      	subs	r0, #1
 800e45e:	e7d7      	b.n	800e410 <__ieee754_fmodf+0x94>
 800e460:	d0a6      	beq.n	800e3b0 <__ieee754_fmodf+0x34>
 800e462:	0053      	lsls	r3, r2, #1
 800e464:	e7fa      	b.n	800e45c <__ieee754_fmodf+0xe0>
 800e466:	005b      	lsls	r3, r3, #1
 800e468:	3901      	subs	r1, #1
 800e46a:	e7d9      	b.n	800e420 <__ieee754_fmodf+0xa4>
 800e46c:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800e470:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800e474:	3182      	adds	r1, #130	; 0x82
 800e476:	410b      	asrs	r3, r1
 800e478:	4323      	orrs	r3, r4
 800e47a:	e7dd      	b.n	800e438 <__ieee754_fmodf+0xbc>
 800e47c:	0800f0b4 	.word	0x0800f0b4

0800e480 <__ieee754_logf>:
 800e480:	ee10 3a10 	vmov	r3, s0
 800e484:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800e488:	d106      	bne.n	800e498 <__ieee754_logf+0x18>
 800e48a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800e620 <__ieee754_logf+0x1a0>
 800e48e:	eddf 7a65 	vldr	s15, [pc, #404]	; 800e624 <__ieee754_logf+0x1a4>
 800e492:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800e496:	4770      	bx	lr
 800e498:	2b00      	cmp	r3, #0
 800e49a:	da02      	bge.n	800e4a2 <__ieee754_logf+0x22>
 800e49c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800e4a0:	e7f5      	b.n	800e48e <__ieee754_logf+0xe>
 800e4a2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e4a6:	db02      	blt.n	800e4ae <__ieee754_logf+0x2e>
 800e4a8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e4ac:	4770      	bx	lr
 800e4ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e4b2:	bfb8      	it	lt
 800e4b4:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800e628 <__ieee754_logf+0x1a8>
 800e4b8:	485c      	ldr	r0, [pc, #368]	; (800e62c <__ieee754_logf+0x1ac>)
 800e4ba:	bfbe      	ittt	lt
 800e4bc:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800e4c0:	f06f 0118 	mvnlt.w	r1, #24
 800e4c4:	ee17 3a90 	vmovlt	r3, s15
 800e4c8:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800e4cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e4d0:	4418      	add	r0, r3
 800e4d2:	bfa8      	it	ge
 800e4d4:	2100      	movge	r1, #0
 800e4d6:	3a7f      	subs	r2, #127	; 0x7f
 800e4d8:	440a      	add	r2, r1
 800e4da:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800e4de:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800e4e2:	4319      	orrs	r1, r3
 800e4e4:	ee00 1a10 	vmov	s0, r1
 800e4e8:	4951      	ldr	r1, [pc, #324]	; (800e630 <__ieee754_logf+0x1b0>)
 800e4ea:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800e4ee:	f103 000f 	add.w	r0, r3, #15
 800e4f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e4f6:	4001      	ands	r1, r0
 800e4f8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e4fc:	bb89      	cbnz	r1, 800e562 <__ieee754_logf+0xe2>
 800e4fe:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e506:	d10f      	bne.n	800e528 <__ieee754_logf+0xa8>
 800e508:	2a00      	cmp	r2, #0
 800e50a:	f000 8085 	beq.w	800e618 <__ieee754_logf+0x198>
 800e50e:	ee07 2a90 	vmov	s15, r2
 800e512:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800e634 <__ieee754_logf+0x1b4>
 800e516:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800e638 <__ieee754_logf+0x1b8>
 800e51a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e51e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e522:	eea7 0a87 	vfma.f32	s0, s15, s14
 800e526:	4770      	bx	lr
 800e528:	eddf 6a44 	vldr	s13, [pc, #272]	; 800e63c <__ieee754_logf+0x1bc>
 800e52c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e530:	eee0 7a66 	vfms.f32	s15, s0, s13
 800e534:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e538:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e53c:	b912      	cbnz	r2, 800e544 <__ieee754_logf+0xc4>
 800e53e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e542:	4770      	bx	lr
 800e544:	ee07 2a90 	vmov	s15, r2
 800e548:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800e634 <__ieee754_logf+0x1b4>
 800e54c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e550:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800e554:	ee37 0a40 	vsub.f32	s0, s14, s0
 800e558:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800e638 <__ieee754_logf+0x1b8>
 800e55c:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800e560:	4770      	bx	lr
 800e562:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800e566:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e56a:	eddf 5a35 	vldr	s11, [pc, #212]	; 800e640 <__ieee754_logf+0x1c0>
 800e56e:	eddf 4a35 	vldr	s9, [pc, #212]	; 800e644 <__ieee754_logf+0x1c4>
 800e572:	4935      	ldr	r1, [pc, #212]	; (800e648 <__ieee754_logf+0x1c8>)
 800e574:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800e578:	4419      	add	r1, r3
 800e57a:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800e57e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e582:	430b      	orrs	r3, r1
 800e584:	2b00      	cmp	r3, #0
 800e586:	ee07 2a90 	vmov	s15, r2
 800e58a:	ee26 5a06 	vmul.f32	s10, s12, s12
 800e58e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e592:	ee25 7a05 	vmul.f32	s14, s10, s10
 800e596:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800e64c <__ieee754_logf+0x1cc>
 800e59a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800e59e:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800e650 <__ieee754_logf+0x1d0>
 800e5a2:	eee7 5a87 	vfma.f32	s11, s15, s14
 800e5a6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e654 <__ieee754_logf+0x1d4>
 800e5aa:	eee7 7a24 	vfma.f32	s15, s14, s9
 800e5ae:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800e658 <__ieee754_logf+0x1d8>
 800e5b2:	eee7 4a87 	vfma.f32	s9, s15, s14
 800e5b6:	eddf 7a29 	vldr	s15, [pc, #164]	; 800e65c <__ieee754_logf+0x1dc>
 800e5ba:	eee4 7a87 	vfma.f32	s15, s9, s14
 800e5be:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e5c2:	eee5 7a87 	vfma.f32	s15, s11, s14
 800e5c6:	dd1c      	ble.n	800e602 <__ieee754_logf+0x182>
 800e5c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e5cc:	ee20 7a07 	vmul.f32	s14, s0, s14
 800e5d0:	ee27 7a00 	vmul.f32	s14, s14, s0
 800e5d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e5d8:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e5dc:	b922      	cbnz	r2, 800e5e8 <__ieee754_logf+0x168>
 800e5de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e5e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e5e6:	4770      	bx	lr
 800e5e8:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800e634 <__ieee754_logf+0x1b4>
 800e5ec:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e5f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e5f4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e5f8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800e638 <__ieee754_logf+0x1b8>
 800e5fc:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800e600:	4770      	bx	lr
 800e602:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e606:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e60a:	2a00      	cmp	r2, #0
 800e60c:	d0e9      	beq.n	800e5e2 <__ieee754_logf+0x162>
 800e60e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800e634 <__ieee754_logf+0x1b4>
 800e612:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e616:	e7ed      	b.n	800e5f4 <__ieee754_logf+0x174>
 800e618:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800e624 <__ieee754_logf+0x1a4>
 800e61c:	4770      	bx	lr
 800e61e:	bf00      	nop
 800e620:	cc000000 	.word	0xcc000000
 800e624:	00000000 	.word	0x00000000
 800e628:	4c000000 	.word	0x4c000000
 800e62c:	004afb20 	.word	0x004afb20
 800e630:	007ffff0 	.word	0x007ffff0
 800e634:	3717f7d1 	.word	0x3717f7d1
 800e638:	3f317180 	.word	0x3f317180
 800e63c:	3eaaaaab 	.word	0x3eaaaaab
 800e640:	3e1cd04f 	.word	0x3e1cd04f
 800e644:	3e178897 	.word	0x3e178897
 800e648:	ffcf5c30 	.word	0xffcf5c30
 800e64c:	3e638e29 	.word	0x3e638e29
 800e650:	3ecccccd 	.word	0x3ecccccd
 800e654:	3e3a3325 	.word	0x3e3a3325
 800e658:	3e924925 	.word	0x3e924925
 800e65c:	3f2aaaab 	.word	0x3f2aaaab

0800e660 <__ieee754_powf>:
 800e660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e664:	ee10 5a90 	vmov	r5, s1
 800e668:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800e66c:	ed2d 8b02 	vpush	{d8}
 800e670:	eeb0 8a40 	vmov.f32	s16, s0
 800e674:	eef0 8a60 	vmov.f32	s17, s1
 800e678:	f000 8291 	beq.w	800eb9e <__ieee754_powf+0x53e>
 800e67c:	ee10 8a10 	vmov	r8, s0
 800e680:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800e684:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800e688:	dc06      	bgt.n	800e698 <__ieee754_powf+0x38>
 800e68a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800e68e:	dd0a      	ble.n	800e6a6 <__ieee754_powf+0x46>
 800e690:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800e694:	f000 8283 	beq.w	800eb9e <__ieee754_powf+0x53e>
 800e698:	ecbd 8b02 	vpop	{d8}
 800e69c:	48d8      	ldr	r0, [pc, #864]	; (800ea00 <__ieee754_powf+0x3a0>)
 800e69e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6a2:	f000 bab5 	b.w	800ec10 <nanf>
 800e6a6:	f1b8 0f00 	cmp.w	r8, #0
 800e6aa:	da1f      	bge.n	800e6ec <__ieee754_powf+0x8c>
 800e6ac:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800e6b0:	da2e      	bge.n	800e710 <__ieee754_powf+0xb0>
 800e6b2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800e6b6:	f2c0 827b 	blt.w	800ebb0 <__ieee754_powf+0x550>
 800e6ba:	15fb      	asrs	r3, r7, #23
 800e6bc:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800e6c0:	fa47 f603 	asr.w	r6, r7, r3
 800e6c4:	fa06 f303 	lsl.w	r3, r6, r3
 800e6c8:	42bb      	cmp	r3, r7
 800e6ca:	f040 8271 	bne.w	800ebb0 <__ieee754_powf+0x550>
 800e6ce:	f006 0601 	and.w	r6, r6, #1
 800e6d2:	f1c6 0602 	rsb	r6, r6, #2
 800e6d6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800e6da:	d120      	bne.n	800e71e <__ieee754_powf+0xbe>
 800e6dc:	2d00      	cmp	r5, #0
 800e6de:	f280 8264 	bge.w	800ebaa <__ieee754_powf+0x54a>
 800e6e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e6e6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800e6ea:	e00d      	b.n	800e708 <__ieee754_powf+0xa8>
 800e6ec:	2600      	movs	r6, #0
 800e6ee:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800e6f2:	d1f0      	bne.n	800e6d6 <__ieee754_powf+0x76>
 800e6f4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800e6f8:	f000 8251 	beq.w	800eb9e <__ieee754_powf+0x53e>
 800e6fc:	dd0a      	ble.n	800e714 <__ieee754_powf+0xb4>
 800e6fe:	2d00      	cmp	r5, #0
 800e700:	f280 8250 	bge.w	800eba4 <__ieee754_powf+0x544>
 800e704:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800ea04 <__ieee754_powf+0x3a4>
 800e708:	ecbd 8b02 	vpop	{d8}
 800e70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e710:	2602      	movs	r6, #2
 800e712:	e7ec      	b.n	800e6ee <__ieee754_powf+0x8e>
 800e714:	2d00      	cmp	r5, #0
 800e716:	daf5      	bge.n	800e704 <__ieee754_powf+0xa4>
 800e718:	eeb1 0a68 	vneg.f32	s0, s17
 800e71c:	e7f4      	b.n	800e708 <__ieee754_powf+0xa8>
 800e71e:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800e722:	d102      	bne.n	800e72a <__ieee754_powf+0xca>
 800e724:	ee28 0a08 	vmul.f32	s0, s16, s16
 800e728:	e7ee      	b.n	800e708 <__ieee754_powf+0xa8>
 800e72a:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800e72e:	eeb0 0a48 	vmov.f32	s0, s16
 800e732:	d108      	bne.n	800e746 <__ieee754_powf+0xe6>
 800e734:	f1b8 0f00 	cmp.w	r8, #0
 800e738:	db05      	blt.n	800e746 <__ieee754_powf+0xe6>
 800e73a:	ecbd 8b02 	vpop	{d8}
 800e73e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e742:	f000 ba4d 	b.w	800ebe0 <__ieee754_sqrtf>
 800e746:	f000 fa4e 	bl	800ebe6 <fabsf>
 800e74a:	b124      	cbz	r4, 800e756 <__ieee754_powf+0xf6>
 800e74c:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800e750:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800e754:	d117      	bne.n	800e786 <__ieee754_powf+0x126>
 800e756:	2d00      	cmp	r5, #0
 800e758:	bfbc      	itt	lt
 800e75a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800e75e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800e762:	f1b8 0f00 	cmp.w	r8, #0
 800e766:	dacf      	bge.n	800e708 <__ieee754_powf+0xa8>
 800e768:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800e76c:	ea54 0306 	orrs.w	r3, r4, r6
 800e770:	d104      	bne.n	800e77c <__ieee754_powf+0x11c>
 800e772:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e776:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e77a:	e7c5      	b.n	800e708 <__ieee754_powf+0xa8>
 800e77c:	2e01      	cmp	r6, #1
 800e77e:	d1c3      	bne.n	800e708 <__ieee754_powf+0xa8>
 800e780:	eeb1 0a40 	vneg.f32	s0, s0
 800e784:	e7c0      	b.n	800e708 <__ieee754_powf+0xa8>
 800e786:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800e78a:	3801      	subs	r0, #1
 800e78c:	ea56 0300 	orrs.w	r3, r6, r0
 800e790:	d104      	bne.n	800e79c <__ieee754_powf+0x13c>
 800e792:	ee38 8a48 	vsub.f32	s16, s16, s16
 800e796:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800e79a:	e7b5      	b.n	800e708 <__ieee754_powf+0xa8>
 800e79c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800e7a0:	dd6b      	ble.n	800e87a <__ieee754_powf+0x21a>
 800e7a2:	4b99      	ldr	r3, [pc, #612]	; (800ea08 <__ieee754_powf+0x3a8>)
 800e7a4:	429c      	cmp	r4, r3
 800e7a6:	dc06      	bgt.n	800e7b6 <__ieee754_powf+0x156>
 800e7a8:	2d00      	cmp	r5, #0
 800e7aa:	daab      	bge.n	800e704 <__ieee754_powf+0xa4>
 800e7ac:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800ea0c <__ieee754_powf+0x3ac>
 800e7b0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e7b4:	e7a8      	b.n	800e708 <__ieee754_powf+0xa8>
 800e7b6:	4b96      	ldr	r3, [pc, #600]	; (800ea10 <__ieee754_powf+0x3b0>)
 800e7b8:	429c      	cmp	r4, r3
 800e7ba:	dd02      	ble.n	800e7c2 <__ieee754_powf+0x162>
 800e7bc:	2d00      	cmp	r5, #0
 800e7be:	dcf5      	bgt.n	800e7ac <__ieee754_powf+0x14c>
 800e7c0:	e7a0      	b.n	800e704 <__ieee754_powf+0xa4>
 800e7c2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e7c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e7ca:	eddf 6a92 	vldr	s13, [pc, #584]	; 800ea14 <__ieee754_powf+0x3b4>
 800e7ce:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800e7d2:	eee0 6a67 	vfms.f32	s13, s0, s15
 800e7d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e7da:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800e7de:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e7e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7e6:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800ea18 <__ieee754_powf+0x3b8>
 800e7ea:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800e7ee:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800ea1c <__ieee754_powf+0x3bc>
 800e7f2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e7f6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800ea20 <__ieee754_powf+0x3c0>
 800e7fa:	eef0 6a67 	vmov.f32	s13, s15
 800e7fe:	eee0 6a07 	vfma.f32	s13, s0, s14
 800e802:	ee16 3a90 	vmov	r3, s13
 800e806:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e80a:	f023 030f 	bic.w	r3, r3, #15
 800e80e:	ee00 3a90 	vmov	s1, r3
 800e812:	eee0 0a47 	vfms.f32	s1, s0, s14
 800e816:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e81a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800e81e:	f025 050f 	bic.w	r5, r5, #15
 800e822:	ee07 5a10 	vmov	s14, r5
 800e826:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800e82a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800e82e:	ee07 3a90 	vmov	s15, r3
 800e832:	eee7 0a27 	vfma.f32	s1, s14, s15
 800e836:	3e01      	subs	r6, #1
 800e838:	ea56 0200 	orrs.w	r2, r6, r0
 800e83c:	ee07 5a10 	vmov	s14, r5
 800e840:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e844:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800e848:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800e84c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800e850:	ee17 4a10 	vmov	r4, s14
 800e854:	bf08      	it	eq
 800e856:	eeb0 8a40 	vmoveq.f32	s16, s0
 800e85a:	2c00      	cmp	r4, #0
 800e85c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e860:	f340 8184 	ble.w	800eb6c <__ieee754_powf+0x50c>
 800e864:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800e868:	f340 80fc 	ble.w	800ea64 <__ieee754_powf+0x404>
 800e86c:	eddf 7a67 	vldr	s15, [pc, #412]	; 800ea0c <__ieee754_powf+0x3ac>
 800e870:	ee28 0a27 	vmul.f32	s0, s16, s15
 800e874:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e878:	e746      	b.n	800e708 <__ieee754_powf+0xa8>
 800e87a:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800e87e:	bf01      	itttt	eq
 800e880:	eddf 7a68 	vldreq	s15, [pc, #416]	; 800ea24 <__ieee754_powf+0x3c4>
 800e884:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800e888:	f06f 0217 	mvneq.w	r2, #23
 800e88c:	ee17 4a90 	vmoveq	r4, s15
 800e890:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800e894:	bf18      	it	ne
 800e896:	2200      	movne	r2, #0
 800e898:	3b7f      	subs	r3, #127	; 0x7f
 800e89a:	4413      	add	r3, r2
 800e89c:	4a62      	ldr	r2, [pc, #392]	; (800ea28 <__ieee754_powf+0x3c8>)
 800e89e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800e8a2:	4294      	cmp	r4, r2
 800e8a4:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800e8a8:	dd06      	ble.n	800e8b8 <__ieee754_powf+0x258>
 800e8aa:	4a60      	ldr	r2, [pc, #384]	; (800ea2c <__ieee754_powf+0x3cc>)
 800e8ac:	4294      	cmp	r4, r2
 800e8ae:	f340 80a4 	ble.w	800e9fa <__ieee754_powf+0x39a>
 800e8b2:	3301      	adds	r3, #1
 800e8b4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800e8b8:	2400      	movs	r4, #0
 800e8ba:	4a5d      	ldr	r2, [pc, #372]	; (800ea30 <__ieee754_powf+0x3d0>)
 800e8bc:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800e8c0:	ee07 1a90 	vmov	s15, r1
 800e8c4:	ed92 7a00 	vldr	s14, [r2]
 800e8c8:	4a5a      	ldr	r2, [pc, #360]	; (800ea34 <__ieee754_powf+0x3d4>)
 800e8ca:	ee37 6a27 	vadd.f32	s12, s14, s15
 800e8ce:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800e8d2:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800e8d6:	1049      	asrs	r1, r1, #1
 800e8d8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800e8dc:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800e8e0:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800e8e4:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800e8e8:	ee06 1a10 	vmov	s12, r1
 800e8ec:	ee65 4a26 	vmul.f32	s9, s10, s13
 800e8f0:	ee36 7a47 	vsub.f32	s14, s12, s14
 800e8f4:	ee14 7a90 	vmov	r7, s9
 800e8f8:	4017      	ands	r7, r2
 800e8fa:	ee05 7a90 	vmov	s11, r7
 800e8fe:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800e902:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e906:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800ea38 <__ieee754_powf+0x3d8>
 800e90a:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800e90e:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800e912:	ee25 6a26 	vmul.f32	s12, s10, s13
 800e916:	eddf 6a49 	vldr	s13, [pc, #292]	; 800ea3c <__ieee754_powf+0x3dc>
 800e91a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e91e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ea40 <__ieee754_powf+0x3e0>
 800e922:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e926:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800ea14 <__ieee754_powf+0x3b4>
 800e92a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e92e:	eddf 6a45 	vldr	s13, [pc, #276]	; 800ea44 <__ieee754_powf+0x3e4>
 800e932:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e936:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800ea48 <__ieee754_powf+0x3e8>
 800e93a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e93e:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800e942:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800e946:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e94a:	eee5 6a07 	vfma.f32	s13, s10, s14
 800e94e:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800e952:	eef0 7a45 	vmov.f32	s15, s10
 800e956:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800e95a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e95e:	ee17 1a90 	vmov	r1, s15
 800e962:	4011      	ands	r1, r2
 800e964:	ee07 1a90 	vmov	s15, r1
 800e968:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800e96c:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800e970:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e974:	ee27 7a24 	vmul.f32	s14, s14, s9
 800e978:	eea6 7a27 	vfma.f32	s14, s12, s15
 800e97c:	eeb0 6a47 	vmov.f32	s12, s14
 800e980:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800e984:	ee16 1a10 	vmov	r1, s12
 800e988:	4011      	ands	r1, r2
 800e98a:	ee06 1a90 	vmov	s13, r1
 800e98e:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800e992:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800ea4c <__ieee754_powf+0x3ec>
 800e996:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ea50 <__ieee754_powf+0x3f0>
 800e99a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e99e:	ee06 1a10 	vmov	s12, r1
 800e9a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e9a6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800ea54 <__ieee754_powf+0x3f4>
 800e9aa:	492b      	ldr	r1, [pc, #172]	; (800ea58 <__ieee754_powf+0x3f8>)
 800e9ac:	eea6 7a27 	vfma.f32	s14, s12, s15
 800e9b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e9b4:	edd1 7a00 	vldr	s15, [r1]
 800e9b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e9bc:	ee07 3a90 	vmov	s15, r3
 800e9c0:	4b26      	ldr	r3, [pc, #152]	; (800ea5c <__ieee754_powf+0x3fc>)
 800e9c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e9c6:	eef0 7a47 	vmov.f32	s15, s14
 800e9ca:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e9ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e9d2:	edd4 0a00 	vldr	s1, [r4]
 800e9d6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e9da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9de:	ee17 3a90 	vmov	r3, s15
 800e9e2:	4013      	ands	r3, r2
 800e9e4:	ee07 3a90 	vmov	s15, r3
 800e9e8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e9ec:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800e9f0:	eee6 6a65 	vfms.f32	s13, s12, s11
 800e9f4:	ee77 7a66 	vsub.f32	s15, s14, s13
 800e9f8:	e70f      	b.n	800e81a <__ieee754_powf+0x1ba>
 800e9fa:	2401      	movs	r4, #1
 800e9fc:	e75d      	b.n	800e8ba <__ieee754_powf+0x25a>
 800e9fe:	bf00      	nop
 800ea00:	0800f0b0 	.word	0x0800f0b0
 800ea04:	00000000 	.word	0x00000000
 800ea08:	3f7ffff7 	.word	0x3f7ffff7
 800ea0c:	7149f2ca 	.word	0x7149f2ca
 800ea10:	3f800007 	.word	0x3f800007
 800ea14:	3eaaaaab 	.word	0x3eaaaaab
 800ea18:	3fb8aa3b 	.word	0x3fb8aa3b
 800ea1c:	36eca570 	.word	0x36eca570
 800ea20:	3fb8aa00 	.word	0x3fb8aa00
 800ea24:	4b800000 	.word	0x4b800000
 800ea28:	001cc471 	.word	0x001cc471
 800ea2c:	005db3d6 	.word	0x005db3d6
 800ea30:	0800f0bc 	.word	0x0800f0bc
 800ea34:	fffff000 	.word	0xfffff000
 800ea38:	3e6c3255 	.word	0x3e6c3255
 800ea3c:	3e53f142 	.word	0x3e53f142
 800ea40:	3e8ba305 	.word	0x3e8ba305
 800ea44:	3edb6db7 	.word	0x3edb6db7
 800ea48:	3f19999a 	.word	0x3f19999a
 800ea4c:	3f76384f 	.word	0x3f76384f
 800ea50:	3f763800 	.word	0x3f763800
 800ea54:	369dc3a0 	.word	0x369dc3a0
 800ea58:	0800f0cc 	.word	0x0800f0cc
 800ea5c:	0800f0c4 	.word	0x0800f0c4
 800ea60:	3338aa3c 	.word	0x3338aa3c
 800ea64:	f040 8092 	bne.w	800eb8c <__ieee754_powf+0x52c>
 800ea68:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800ea60 <__ieee754_powf+0x400>
 800ea6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ea70:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800ea74:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ea78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea7c:	f73f aef6 	bgt.w	800e86c <__ieee754_powf+0x20c>
 800ea80:	15db      	asrs	r3, r3, #23
 800ea82:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800ea86:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ea8a:	4103      	asrs	r3, r0
 800ea8c:	4423      	add	r3, r4
 800ea8e:	4949      	ldr	r1, [pc, #292]	; (800ebb4 <__ieee754_powf+0x554>)
 800ea90:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ea94:	3a7f      	subs	r2, #127	; 0x7f
 800ea96:	4111      	asrs	r1, r2
 800ea98:	ea23 0101 	bic.w	r1, r3, r1
 800ea9c:	ee07 1a10 	vmov	s14, r1
 800eaa0:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800eaa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800eaa8:	f1c2 0217 	rsb	r2, r2, #23
 800eaac:	4110      	asrs	r0, r2
 800eaae:	2c00      	cmp	r4, #0
 800eab0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eab4:	bfb8      	it	lt
 800eab6:	4240      	neglt	r0, r0
 800eab8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800eabc:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800ebb8 <__ieee754_powf+0x558>
 800eac0:	ee17 3a10 	vmov	r3, s14
 800eac4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800eac8:	f023 030f 	bic.w	r3, r3, #15
 800eacc:	ee07 3a10 	vmov	s14, r3
 800ead0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ead4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ead8:	eddf 7a38 	vldr	s15, [pc, #224]	; 800ebbc <__ieee754_powf+0x55c>
 800eadc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eae0:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800eae4:	eddf 6a36 	vldr	s13, [pc, #216]	; 800ebc0 <__ieee754_powf+0x560>
 800eae8:	eeb0 0a67 	vmov.f32	s0, s15
 800eaec:	eea7 0a26 	vfma.f32	s0, s14, s13
 800eaf0:	eeb0 6a40 	vmov.f32	s12, s0
 800eaf4:	eea7 6a66 	vfms.f32	s12, s14, s13
 800eaf8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800eafc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800eb00:	eddf 6a30 	vldr	s13, [pc, #192]	; 800ebc4 <__ieee754_powf+0x564>
 800eb04:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800ebc8 <__ieee754_powf+0x568>
 800eb08:	eea7 6a26 	vfma.f32	s12, s14, s13
 800eb0c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800ebcc <__ieee754_powf+0x56c>
 800eb10:	eee6 6a07 	vfma.f32	s13, s12, s14
 800eb14:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800ebd0 <__ieee754_powf+0x570>
 800eb18:	eea6 6a87 	vfma.f32	s12, s13, s14
 800eb1c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800ebd4 <__ieee754_powf+0x574>
 800eb20:	eee6 6a07 	vfma.f32	s13, s12, s14
 800eb24:	eeb0 6a40 	vmov.f32	s12, s0
 800eb28:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800eb2c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800eb30:	eeb0 7a46 	vmov.f32	s14, s12
 800eb34:	ee77 6a66 	vsub.f32	s13, s14, s13
 800eb38:	ee20 6a06 	vmul.f32	s12, s0, s12
 800eb3c:	eee0 7a27 	vfma.f32	s15, s0, s15
 800eb40:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800eb44:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eb48:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800eb4c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eb50:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800eb54:	ee10 3a10 	vmov	r3, s0
 800eb58:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800eb5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800eb60:	da1a      	bge.n	800eb98 <__ieee754_powf+0x538>
 800eb62:	f000 f8b7 	bl	800ecd4 <scalbnf>
 800eb66:	ee20 0a08 	vmul.f32	s0, s0, s16
 800eb6a:	e5cd      	b.n	800e708 <__ieee754_powf+0xa8>
 800eb6c:	4a1a      	ldr	r2, [pc, #104]	; (800ebd8 <__ieee754_powf+0x578>)
 800eb6e:	4293      	cmp	r3, r2
 800eb70:	dd02      	ble.n	800eb78 <__ieee754_powf+0x518>
 800eb72:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800ebdc <__ieee754_powf+0x57c>
 800eb76:	e67b      	b.n	800e870 <__ieee754_powf+0x210>
 800eb78:	d108      	bne.n	800eb8c <__ieee754_powf+0x52c>
 800eb7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800eb7e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800eb82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb86:	f6ff af7b 	blt.w	800ea80 <__ieee754_powf+0x420>
 800eb8a:	e7f2      	b.n	800eb72 <__ieee754_powf+0x512>
 800eb8c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800eb90:	f73f af76 	bgt.w	800ea80 <__ieee754_powf+0x420>
 800eb94:	2000      	movs	r0, #0
 800eb96:	e78f      	b.n	800eab8 <__ieee754_powf+0x458>
 800eb98:	ee00 3a10 	vmov	s0, r3
 800eb9c:	e7e3      	b.n	800eb66 <__ieee754_powf+0x506>
 800eb9e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800eba2:	e5b1      	b.n	800e708 <__ieee754_powf+0xa8>
 800eba4:	eeb0 0a68 	vmov.f32	s0, s17
 800eba8:	e5ae      	b.n	800e708 <__ieee754_powf+0xa8>
 800ebaa:	eeb0 0a48 	vmov.f32	s0, s16
 800ebae:	e5ab      	b.n	800e708 <__ieee754_powf+0xa8>
 800ebb0:	2600      	movs	r6, #0
 800ebb2:	e590      	b.n	800e6d6 <__ieee754_powf+0x76>
 800ebb4:	007fffff 	.word	0x007fffff
 800ebb8:	3f317218 	.word	0x3f317218
 800ebbc:	35bfbe8c 	.word	0x35bfbe8c
 800ebc0:	3f317200 	.word	0x3f317200
 800ebc4:	3331bb4c 	.word	0x3331bb4c
 800ebc8:	b5ddea0e 	.word	0xb5ddea0e
 800ebcc:	388ab355 	.word	0x388ab355
 800ebd0:	bb360b61 	.word	0xbb360b61
 800ebd4:	3e2aaaab 	.word	0x3e2aaaab
 800ebd8:	43160000 	.word	0x43160000
 800ebdc:	0da24260 	.word	0x0da24260

0800ebe0 <__ieee754_sqrtf>:
 800ebe0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ebe4:	4770      	bx	lr

0800ebe6 <fabsf>:
 800ebe6:	ee10 3a10 	vmov	r3, s0
 800ebea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ebee:	ee00 3a10 	vmov	s0, r3
 800ebf2:	4770      	bx	lr

0800ebf4 <finitef>:
 800ebf4:	b082      	sub	sp, #8
 800ebf6:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ebfa:	9801      	ldr	r0, [sp, #4]
 800ebfc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ec00:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ec04:	bfac      	ite	ge
 800ec06:	2000      	movge	r0, #0
 800ec08:	2001      	movlt	r0, #1
 800ec0a:	b002      	add	sp, #8
 800ec0c:	4770      	bx	lr
	...

0800ec10 <nanf>:
 800ec10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ec18 <nanf+0x8>
 800ec14:	4770      	bx	lr
 800ec16:	bf00      	nop
 800ec18:	7fc00000 	.word	0x7fc00000

0800ec1c <rintf>:
 800ec1c:	ee10 2a10 	vmov	r2, s0
 800ec20:	b513      	push	{r0, r1, r4, lr}
 800ec22:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ec26:	397f      	subs	r1, #127	; 0x7f
 800ec28:	2916      	cmp	r1, #22
 800ec2a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800ec2e:	dc47      	bgt.n	800ecc0 <rintf+0xa4>
 800ec30:	b32b      	cbz	r3, 800ec7e <rintf+0x62>
 800ec32:	2900      	cmp	r1, #0
 800ec34:	ee10 3a10 	vmov	r3, s0
 800ec38:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 800ec3c:	da21      	bge.n	800ec82 <rintf+0x66>
 800ec3e:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800ec42:	425b      	negs	r3, r3
 800ec44:	4921      	ldr	r1, [pc, #132]	; (800eccc <rintf+0xb0>)
 800ec46:	0a5b      	lsrs	r3, r3, #9
 800ec48:	0d12      	lsrs	r2, r2, #20
 800ec4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ec4e:	0512      	lsls	r2, r2, #20
 800ec50:	4313      	orrs	r3, r2
 800ec52:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800ec56:	ee07 3a90 	vmov	s15, r3
 800ec5a:	edd1 6a00 	vldr	s13, [r1]
 800ec5e:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800ec62:	ed8d 7a01 	vstr	s14, [sp, #4]
 800ec66:	eddd 7a01 	vldr	s15, [sp, #4]
 800ec6a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ec6e:	ee17 3a90 	vmov	r3, s15
 800ec72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ec76:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800ec7a:	ee00 3a10 	vmov	s0, r3
 800ec7e:	b002      	add	sp, #8
 800ec80:	bd10      	pop	{r4, pc}
 800ec82:	4a13      	ldr	r2, [pc, #76]	; (800ecd0 <rintf+0xb4>)
 800ec84:	410a      	asrs	r2, r1
 800ec86:	4213      	tst	r3, r2
 800ec88:	d0f9      	beq.n	800ec7e <rintf+0x62>
 800ec8a:	0854      	lsrs	r4, r2, #1
 800ec8c:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 800ec90:	d006      	beq.n	800eca0 <rintf+0x84>
 800ec92:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ec96:	ea23 0304 	bic.w	r3, r3, r4
 800ec9a:	fa42 f101 	asr.w	r1, r2, r1
 800ec9e:	430b      	orrs	r3, r1
 800eca0:	4a0a      	ldr	r2, [pc, #40]	; (800eccc <rintf+0xb0>)
 800eca2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800eca6:	ed90 7a00 	vldr	s14, [r0]
 800ecaa:	ee07 3a90 	vmov	s15, r3
 800ecae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ecb2:	edcd 7a01 	vstr	s15, [sp, #4]
 800ecb6:	ed9d 0a01 	vldr	s0, [sp, #4]
 800ecba:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ecbe:	e7de      	b.n	800ec7e <rintf+0x62>
 800ecc0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ecc4:	d3db      	bcc.n	800ec7e <rintf+0x62>
 800ecc6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ecca:	e7d8      	b.n	800ec7e <rintf+0x62>
 800eccc:	0800f0d4 	.word	0x0800f0d4
 800ecd0:	007fffff 	.word	0x007fffff

0800ecd4 <scalbnf>:
 800ecd4:	ee10 3a10 	vmov	r3, s0
 800ecd8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800ecdc:	d025      	beq.n	800ed2a <scalbnf+0x56>
 800ecde:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ece2:	d302      	bcc.n	800ecea <scalbnf+0x16>
 800ece4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ece8:	4770      	bx	lr
 800ecea:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800ecee:	d122      	bne.n	800ed36 <scalbnf+0x62>
 800ecf0:	4b2a      	ldr	r3, [pc, #168]	; (800ed9c <scalbnf+0xc8>)
 800ecf2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800eda0 <scalbnf+0xcc>
 800ecf6:	4298      	cmp	r0, r3
 800ecf8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ecfc:	db16      	blt.n	800ed2c <scalbnf+0x58>
 800ecfe:	ee10 3a10 	vmov	r3, s0
 800ed02:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ed06:	3a19      	subs	r2, #25
 800ed08:	4402      	add	r2, r0
 800ed0a:	2afe      	cmp	r2, #254	; 0xfe
 800ed0c:	dd15      	ble.n	800ed3a <scalbnf+0x66>
 800ed0e:	ee10 3a10 	vmov	r3, s0
 800ed12:	eddf 7a24 	vldr	s15, [pc, #144]	; 800eda4 <scalbnf+0xd0>
 800ed16:	eddf 6a24 	vldr	s13, [pc, #144]	; 800eda8 <scalbnf+0xd4>
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	eeb0 7a67 	vmov.f32	s14, s15
 800ed20:	bfb8      	it	lt
 800ed22:	eef0 7a66 	vmovlt.f32	s15, s13
 800ed26:	ee27 0a27 	vmul.f32	s0, s14, s15
 800ed2a:	4770      	bx	lr
 800ed2c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800edac <scalbnf+0xd8>
 800ed30:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ed34:	4770      	bx	lr
 800ed36:	0dd2      	lsrs	r2, r2, #23
 800ed38:	e7e6      	b.n	800ed08 <scalbnf+0x34>
 800ed3a:	2a00      	cmp	r2, #0
 800ed3c:	dd06      	ble.n	800ed4c <scalbnf+0x78>
 800ed3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ed42:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ed46:	ee00 3a10 	vmov	s0, r3
 800ed4a:	4770      	bx	lr
 800ed4c:	f112 0f16 	cmn.w	r2, #22
 800ed50:	da1a      	bge.n	800ed88 <scalbnf+0xb4>
 800ed52:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ed56:	4298      	cmp	r0, r3
 800ed58:	ee10 3a10 	vmov	r3, s0
 800ed5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ed60:	dd0a      	ble.n	800ed78 <scalbnf+0xa4>
 800ed62:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800eda4 <scalbnf+0xd0>
 800ed66:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800eda8 <scalbnf+0xd4>
 800ed6a:	eef0 7a40 	vmov.f32	s15, s0
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	bf18      	it	ne
 800ed72:	eeb0 0a47 	vmovne.f32	s0, s14
 800ed76:	e7db      	b.n	800ed30 <scalbnf+0x5c>
 800ed78:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800edac <scalbnf+0xd8>
 800ed7c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800edb0 <scalbnf+0xdc>
 800ed80:	eef0 7a40 	vmov.f32	s15, s0
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	e7f3      	b.n	800ed70 <scalbnf+0x9c>
 800ed88:	3219      	adds	r2, #25
 800ed8a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ed8e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ed92:	eddf 7a08 	vldr	s15, [pc, #32]	; 800edb4 <scalbnf+0xe0>
 800ed96:	ee07 3a10 	vmov	s14, r3
 800ed9a:	e7c4      	b.n	800ed26 <scalbnf+0x52>
 800ed9c:	ffff3cb0 	.word	0xffff3cb0
 800eda0:	4c000000 	.word	0x4c000000
 800eda4:	7149f2ca 	.word	0x7149f2ca
 800eda8:	f149f2ca 	.word	0xf149f2ca
 800edac:	0da24260 	.word	0x0da24260
 800edb0:	8da24260 	.word	0x8da24260
 800edb4:	33000000 	.word	0x33000000

0800edb8 <_init>:
 800edb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edba:	bf00      	nop
 800edbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edbe:	bc08      	pop	{r3}
 800edc0:	469e      	mov	lr, r3
 800edc2:	4770      	bx	lr

0800edc4 <_fini>:
 800edc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edc6:	bf00      	nop
 800edc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edca:	bc08      	pop	{r3}
 800edcc:	469e      	mov	lr, r3
 800edce:	4770      	bx	lr
